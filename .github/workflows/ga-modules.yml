name: GA Modules

on:
  workflow_dispatch:
    inputs:
      Modules:
        description: 'Modules to be GAed (split with ",")'
        required: true
        type: string
      Force:
        description: 'Force to go?'
        required: false
        type: boolean

run-name: "GA ${{ inputs.Modules }}"      

jobs:
  GA_Modules:
    runs-on: ubuntu-latest
    steps:
    - name: GA ${{ inputs.Modules }}
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_Repo: ${{ github.repository }}
      run: |
        $ErrorActionPreference = 'Stop'
        $repoFullName = $env:GH_Repo
        $ghRepo = ($env:GH_Repo -split '/')[1]
        $ghToken = $env:GH_TOKEN
        $force = "${{ inputs.Force }}".ToLower() -eq 'true'

        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
            
        if ("${{ inputs.Modules }}".Trim() -eq '') {
          throw "❌ 'Modules' is empty. Please set the 'Modules' input."
        }
        $Modules = "${{ inputs.Modules }}" -split ',' | ForEach-Object {$_.Trim()}
        if ($Modules.Count -eq 0) {
          throw "❌ No 'Modules' provided. Please set the 'Modules' input."
        }
        
        $baseBranch = "main"
        $newBranch = 'ga/' + ($Modules -join '_')

        $MinimalVersionFile = "tools/VersionController/MinimalVersion.csv"
        $AzManifestPath = "tools/Az/Az.psd1"

        gh repo clone "https://x-access-token:${ghToken}@github.com/${repoFullName}" -- --filter=blob:none --no-checkout
        Set-Location $ghRepo
        & git remote set-url origin "https://x-access-token:${ghToken}@github.com/${repoFullName}.git"
        git sparse-checkout init --cone
        $checkoutFiles = @($MinimalVersionFile, $AzManifestPath)
        $Modules | Foreach-Object { $checkoutFiles += "src/$_/$_/ChangeLog.md" }
        git sparse-checkout set @checkoutFiles
        git checkout -b "$newBranch" origin/main
                  
        foreach ($Module in $Modules) {
          Write-Host "Update files for $Module"
          $ChangeLogPath = "src/$Module/$Module/ChangeLog.md"
                    
          $newLine = "`"Az.$Module`",`"1.0.0`""
          $content = Get-Content $MinimalVersionFile
          $alreadyExists = $content | Where-Object { $_ -eq $newLine }
          if (-not $alreadyExists) {
            Add-Content -Path $MinimalVersionFile -Value $newLine
            Write-Host "  ✅ $MinimalVersionFile is updated for Az.$Module"
          }
          else {
            if($force){
              Write-Host "  ℹ️ Az.$Module is already in $MinimalVersionFile"
            }
            else {
              throw "Az.$Module is already in $MinimalVersionFile"
            }
          }

          $LastVersionLine = Get-Content $ChangeLogPath | Where-Object { $_ -match '^## Version\s+(\d+\.\d+\.\d+)' } | Select-Object -First 1
          if (-not $LastVersionLine) {
            throw "Last version is not found in $ChangeLogPath ."
          }
          $LastVersion = [regex]::Match($LastVersionLine, '\d+\.\d+\.\d+').Value

          $AzManifest = Get-Content $AzManifestPath
          $startIndex = ($AzManifest | Select-String -Pattern '^\s*RequiredModules\s*=\s*@\(').LineNumber
          if (-not $startIndex) {
            throw "RequiredModules section not found in $AzManifestPath ."
          }
          $newLine = "@{ModuleName = 'Az." + $Module + "'; RequiredVersion = '" + $LastVersion + "'; },"
          $alreadyExists = $AzManifest | Where-Object { $_.Contains($newLine) }
          if (-not $alreadyExists) {
            $startIndex--
            $LineModuleName = ""
            $InsertIndex = $startIndex + 1
            for ($i = $startIndex + 1; $i -lt $AzManifest.Count; $i++) {
              $line = $AzManifest[$i]
              if ($line -eq '') {
                continue
              }
              if (($line -match "^\s*@{ModuleName\s*=")) {
                if ($line -match "ModuleName\s*=\s*'Az\.([^']+)'") {
                  $LastModuleName = $LineModuleName
                  $LineModuleName = $Matches[1]
                  $SpaceCount = $line.IndexOf('@{ModuleName')
                  if (($LastModuleName -lt $Module) -and ($Module -lt $LineModuleName)) {
                    $InsertIndex = $i
                    break
                  }
                }
              }
              else {
                break
              }
            }

            $newLine = ''.PadLeft($SpaceCount) + $newLine
            $newAzManifest = @()
            $newAzManifest += $AzManifest[0..($InsertIndex - 1)]
            $newAzManifest += $newLine
            $newAzManifest += $AzManifest[$InsertIndex..($AzManifest.Count - 1)]
            
            Set-Content -Path $AzManifestPath -Value $newAzManifest
            Write-Host "  ✅ $AzManifestPath is updated for Az.$Module."
          }
          else {
            if($force){
              Write-Host "  ℹ️ Az.$Module is already in $AzManifestPath"
            }
            else {
              throw "Az.$Module is already in $AzManifestPath"
            }
          }

          $changelogLines = Get-Content $ChangeLogPath
          $upcomingReleaseLine = $changelogLines | Where-Object { $_ -like "##*Upcoming Release*" }
          $upcomingReleaseLineIndex = $changelogLines.IndexOf($upcomingReleaseLine)
          if ($upcomingReleaseLineIndex -lt 0) {
            throw "'## Upcoming Release' section not found in $ChangeLogPath"
          }
          $newLine = "* General availability for module Az.$Module"
          $alreadyExists = $changelogLines | Where-Object { $_ -eq $newLine }
          if (-not $alreadyExists) {
            $newChangelogLines = @()
            $newChangelogLines += $changelogLines[0..$upcomingReleaseLineIndex]
            $newChangelogLines += $newLine
            $newChangelogLines += $changelogLines[($upcomingReleaseLineIndex + 1)..($changelogLines.Count - 1)]

            Set-Content -Path $ChangeLogPath -Value $newChangelogLines
            Write-Host "  ✅ $ChangeLogPath is updated"
          }
          else {
            if($force){
              Write-Host "  ℹ️ $ChangeLogPath is already updated."
            }
            else {
              throw "$ChangeLogPath is already updated."
            }
          }
        }
                  
        $checkoutFiles | ForEach-Object {git add $_}
        $title = "GA $(($Modules | ForEach-Object {"Az.$_"}) -join ' and ')"
        $body = "This PR is going to GA $(($Modules | ForEach-Object {"Az.$_"}) -join ' and '). "
            
        git commit -m $title
        git push -u origin $newBranch -f

        $pr = gh pr create --repo $repoFullName --base $baseBranch --head $newBranch --title $title --body $body
        Write-Host "✅ PR is created: $pr"

        $summaryFile = $env:GITHUB_STEP_SUMMARY 
        Add-Content -Path $summaryFile -Value "## Going to GA Modules:"
        $Modules | Foreach-Object { Add-Content -Path $summaryFile -Value "- **Az.${_}**" }
        Add-Content -Path $summaryFile -Value "    "
        Add-Content -Path $summaryFile -Value "## PR is created:"
        Add-Content -Path $summaryFile -Value "- $pr"
