// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Extensions;

    /// <summary>Details of single instance of redis.</summary>
    public partial class RedisInstanceDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetails,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal
    {

        /// <summary>Backing field for <see cref="IsMaster" /> property.</summary>
        private bool? _isMaster;

        /// <summary>Specifies whether the instance is a primary node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public bool? IsMaster { get => this._isMaster; }

        /// <summary>Backing field for <see cref="IsPrimary" /> property.</summary>
        private bool? _isPrimary;

        /// <summary>Specifies whether the instance is a primary node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public bool? IsPrimary { get => this._isPrimary; }

        /// <summary>Internal Acessors for IsMaster</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal.IsMaster { get => this._isMaster; set { {_isMaster = value;} } }

        /// <summary>Internal Acessors for IsPrimary</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal.IsPrimary { get => this._isPrimary; set { {_isPrimary = value;} } }

        /// <summary>Internal Acessors for NonSslPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal.NonSslPort { get => this._nonSslPort; set { {_nonSslPort = value;} } }

        /// <summary>Internal Acessors for ShardId</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal.ShardId { get => this._shardId; set { {_shardId = value;} } }

        /// <summary>Internal Acessors for SslPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal.SslPort { get => this._sslPort; set { {_sslPort = value;} } }

        /// <summary>Internal Acessors for Zone</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetailsInternal.Zone { get => this._zone; set { {_zone = value;} } }

        /// <summary>Backing field for <see cref="NonSslPort" /> property.</summary>
        private int? _nonSslPort;

        /// <summary>If enableNonSslPort is true, provides Redis instance Non-SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public int? NonSslPort { get => this._nonSslPort; }

        /// <summary>Backing field for <see cref="ShardId" /> property.</summary>
        private int? _shardId;

        /// <summary>If clustering is enabled, the Shard ID of Redis Instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public int? ShardId { get => this._shardId; }

        /// <summary>Backing field for <see cref="SslPort" /> property.</summary>
        private int? _sslPort;

        /// <summary>Redis instance SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public int? SslPort { get => this._sslPort; }

        /// <summary>Backing field for <see cref="Zone" /> property.</summary>
        private string _zone;

        /// <summary>
        /// If the Cache uses availability zones, specifies availability zone where this instance is located.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string Zone { get => this._zone; }

        /// <summary>Creates an new <see cref="RedisInstanceDetails" /> instance.</summary>
        public RedisInstanceDetails()
        {

        }
    }
    /// Details of single instance of redis.
    public partial interface IRedisInstanceDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IJsonSerializable
    {
        /// <summary>Specifies whether the instance is a primary node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the instance is a primary node.",
        SerializedName = @"isMaster",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsMaster { get;  }
        /// <summary>Specifies whether the instance is a primary node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the instance is a primary node.",
        SerializedName = @"isPrimary",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsPrimary { get;  }
        /// <summary>If enableNonSslPort is true, provides Redis instance Non-SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If enableNonSslPort is true, provides Redis instance Non-SSL port.",
        SerializedName = @"nonSslPort",
        PossibleTypes = new [] { typeof(int) })]
        int? NonSslPort { get;  }
        /// <summary>If clustering is enabled, the Shard ID of Redis Instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If clustering is enabled, the Shard ID of Redis Instance",
        SerializedName = @"shardId",
        PossibleTypes = new [] { typeof(int) })]
        int? ShardId { get;  }
        /// <summary>Redis instance SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Redis instance SSL port.",
        SerializedName = @"sslPort",
        PossibleTypes = new [] { typeof(int) })]
        int? SslPort { get;  }
        /// <summary>
        /// If the Cache uses availability zones, specifies availability zone where this instance is located.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If the Cache uses availability zones, specifies availability zone where this instance is located.",
        SerializedName = @"zone",
        PossibleTypes = new [] { typeof(string) })]
        string Zone { get;  }

    }
    /// Details of single instance of redis.
    internal partial interface IRedisInstanceDetailsInternal

    {
        /// <summary>Specifies whether the instance is a primary node.</summary>
        bool? IsMaster { get; set; }
        /// <summary>Specifies whether the instance is a primary node.</summary>
        bool? IsPrimary { get; set; }
        /// <summary>If enableNonSslPort is true, provides Redis instance Non-SSL port.</summary>
        int? NonSslPort { get; set; }
        /// <summary>If clustering is enabled, the Shard ID of Redis Instance</summary>
        int? ShardId { get; set; }
        /// <summary>Redis instance SSL port.</summary>
        int? SslPort { get; set; }
        /// <summary>
        /// If the Cache uses availability zones, specifies availability zone where this instance is located.
        /// </summary>
        string Zone { get; set; }

    }
}