// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Extensions;

    /// <summary>A single Redis item in List or Get Operation.</summary>
    public partial class RedisResource :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResource,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.TrackedResource();

        /// <summary>The current primary key that clients can use to authenticate with Redis cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string AccessKeyPrimaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKeyPrimaryKey; }

        /// <summary>
        /// The current secondary key that clients can use to authenticate with Redis cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string AccessKeySecondaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKeySecondaryKey; }

        /// <summary>Specifies whether the non-ssl Redis server port (6379) is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public bool? EnableNonSslPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).EnableNonSslPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).EnableNonSslPort = value ?? default(bool); }

        /// <summary>Redis host name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string HostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).HostName; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity _identity;

        /// <summary>The identity of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType)""); }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>List of the Redis instances associated with the cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetails[] Instance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).Instance; }

        /// <summary>List of the linked servers associated with the cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisLinkedServer[] LinkedServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).LinkedServer; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for AccessKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisAccessKeys Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.AccessKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKey = value; }

        /// <summary>Internal Acessors for AccessKeyPrimaryKey</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.AccessKeyPrimaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKeyPrimaryKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKeyPrimaryKey = value; }

        /// <summary>Internal Acessors for AccessKeySecondaryKey</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.AccessKeySecondaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKeySecondaryKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).AccessKeySecondaryKey = value; }

        /// <summary>Internal Acessors for HostName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.HostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).HostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).HostName = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for Instance</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetails[] Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.Instance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).Instance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).Instance = value; }

        /// <summary>Internal Acessors for LinkedServer</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisLinkedServer[] Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.LinkedServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).LinkedServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).LinkedServer = value; }

        /// <summary>Internal Acessors for Port</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.Port { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).Port = value; }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IPrivateEndpointConnection[] Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).PrivateEndpointConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).PrivateEndpointConnection = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisProperties Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.RedisProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.ISku Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).Sku = value; }

        /// <summary>Internal Acessors for SslPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResourceInternal.SslPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).SslPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).SslPort = value; }

        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion? MinimumTlsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).MinimumTlsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).MinimumTlsVersion = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion)""); }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Name; }

        /// <summary>Redis non-SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? Port { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).Port; }

        /// <summary>List of private endpoint connection associated with the specified redis cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IPrivateEndpointConnection[] PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).PrivateEndpointConnection; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisProperties _property;

        /// <summary>Redis cache properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.RedisProperties()); set => this._property = value; }

        /// <summary>Redis instance provisioning status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).ProvisioningState; }

        /// <summary>
        /// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess? PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).PublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess)""); }

        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfiguration RedisConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).RedisConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).RedisConfiguration = value ?? null /* model class */; }

        /// <summary>
        /// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string RedisVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).RedisVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).RedisVersion = value ?? null; }

        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? ReplicasPerMaster { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).ReplicasPerMaster; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).ReplicasPerMaster = value ?? default(int); }

        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? ReplicasPerPrimary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).ReplicasPerPrimary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).ReplicasPerPrimary = value ?? default(int); }

        /// <summary>The number of shards to be created on a Premium Cluster Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? ShardCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).ShardCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).ShardCount = value ?? default(int); }

        /// <summary>
        /// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
        /// family (1, 2, 3, 4).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int SkuCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SkuCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SkuCapacity = value ; }

        /// <summary>The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SkuFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SkuFamily = value ; }

        /// <summary>The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SkuName = value ; }

        /// <summary>Redis SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? SslPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisPropertiesInternal)Property).SslPort; }

        /// <summary>
        /// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network;
        /// auto assigned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string StaticIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).StaticIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).StaticIP = value ?? null; }

        /// <summary>
        /// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string SubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCreatePropertiesInternal)Property).SubnetId = value ?? null; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>A dictionary of tenant settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesTenantSettings TenantSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).TenantSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesInternal)Property).TenantSetting = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IResourceInternal)__trackedResource).Type; }

        /// <summary>Backing field for <see cref="Zone" /> property.</summary>
        private string[] _zone;

        /// <summary>A list of availability zones denoting where the resource needs to come from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string[] Zone { get => this._zone; set => this._zone = value; }

        /// <summary>Creates an new <see cref="RedisResource" /> instance.</summary>
        public RedisResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A single Redis item in List or Get Operation.
    public partial interface IRedisResource :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResource
    {
        /// <summary>The current primary key that clients can use to authenticate with Redis cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current primary key that clients can use to authenticate with Redis cache.",
        SerializedName = @"primaryKey",
        PossibleTypes = new [] { typeof(string) })]
        string AccessKeyPrimaryKey { get;  }
        /// <summary>
        /// The current secondary key that clients can use to authenticate with Redis cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current secondary key that clients can use to authenticate with Redis cache.",
        SerializedName = @"secondaryKey",
        PossibleTypes = new [] { typeof(string) })]
        string AccessKeySecondaryKey { get;  }
        /// <summary>Specifies whether the non-ssl Redis server port (6379) is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the non-ssl Redis server port (6379) is enabled.",
        SerializedName = @"enableNonSslPort",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableNonSslPort { get; set; }
        /// <summary>Redis host name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Redis host name.",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get;  }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>List of the Redis instances associated with the cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of the Redis instances associated with the cache",
        SerializedName = @"instances",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetails) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetails[] Instance { get;  }
        /// <summary>List of the linked servers associated with the cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of the linked servers associated with the cache",
        SerializedName = @"linkedServers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisLinkedServer) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisLinkedServer[] LinkedServer { get;  }
        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>Redis non-SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Redis non-SSL port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? Port { get;  }
        /// <summary>List of private endpoint connection associated with the specified redis cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of private endpoint connection associated with the specified redis cache",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IPrivateEndpointConnection[] PrivateEndpointConnection { get;  }
        /// <summary>Redis instance provisioning status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Redis instance provisioning status.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.",
        SerializedName = @"redisConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfiguration RedisConfiguration { get; set; }
        /// <summary>
        /// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)",
        SerializedName = @"redisVersion",
        PossibleTypes = new [] { typeof(string) })]
        string RedisVersion { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of replicas to be created per primary.",
        SerializedName = @"replicasPerMaster",
        PossibleTypes = new [] { typeof(int) })]
        int? ReplicasPerMaster { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of replicas to be created per primary.",
        SerializedName = @"replicasPerPrimary",
        PossibleTypes = new [] { typeof(int) })]
        int? ReplicasPerPrimary { get; set; }
        /// <summary>The number of shards to be created on a Premium Cluster Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of shards to be created on a Premium Cluster Cache.",
        SerializedName = @"shardCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ShardCount { get; set; }
        /// <summary>
        /// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
        /// family (1, 2, 3, 4).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int SkuCapacity { get; set; }
        /// <summary>The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily SkuFamily { get; set; }
        /// <summary>The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName SkuName { get; set; }
        /// <summary>Redis SSL port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Redis SSL port.",
        SerializedName = @"sslPort",
        PossibleTypes = new [] { typeof(int) })]
        int? SslPort { get;  }
        /// <summary>
        /// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network;
        /// auto assigned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.",
        SerializedName = @"staticIP",
        PossibleTypes = new [] { typeof(string) })]
        string StaticIP { get; set; }
        /// <summary>
        /// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetId { get; set; }
        /// <summary>A dictionary of tenant settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A dictionary of tenant settings",
        SerializedName = @"tenantSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesTenantSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesTenantSettings TenantSetting { get; set; }
        /// <summary>A list of availability zones denoting where the resource needs to come from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of availability zones denoting where the resource needs to come from.",
        SerializedName = @"zones",
        PossibleTypes = new [] { typeof(string) })]
        string[] Zone { get; set; }

    }
    /// A single Redis item in List or Get Operation.
    internal partial interface IRedisResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20.ITrackedResourceInternal
    {
        /// <summary>
        /// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisAccessKeys AccessKey { get; set; }
        /// <summary>The current primary key that clients can use to authenticate with Redis cache.</summary>
        string AccessKeyPrimaryKey { get; set; }
        /// <summary>
        /// The current secondary key that clients can use to authenticate with Redis cache.
        /// </summary>
        string AccessKeySecondaryKey { get; set; }
        /// <summary>Specifies whether the non-ssl Redis server port (6379) is enabled.</summary>
        bool? EnableNonSslPort { get; set; }
        /// <summary>Redis host name.</summary>
        string HostName { get; set; }
        /// <summary>The identity of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>List of the Redis instances associated with the cache</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisInstanceDetails[] Instance { get; set; }
        /// <summary>List of the linked servers associated with the cache</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisLinkedServer[] LinkedServer { get; set; }
        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>Redis non-SSL port.</summary>
        int? Port { get; set; }
        /// <summary>List of private endpoint connection associated with the specified redis cache</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api10.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>Redis cache properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisProperties Property { get; set; }
        /// <summary>Redis instance provisioning status.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfiguration RedisConfiguration { get; set; }
        /// <summary>
        /// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
        /// </summary>
        string RedisVersion { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        int? ReplicasPerMaster { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        int? ReplicasPerPrimary { get; set; }
        /// <summary>The number of shards to be created on a Premium Cluster Cache.</summary>
        int? ShardCount { get; set; }
        /// <summary>The SKU of the Redis cache to deploy.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.ISku Sku { get; set; }
        /// <summary>
        /// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
        /// family (1, 2, 3, 4).
        /// </summary>
        int SkuCapacity { get; set; }
        /// <summary>The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily SkuFamily { get; set; }
        /// <summary>The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName SkuName { get; set; }
        /// <summary>Redis SSL port.</summary>
        int? SslPort { get; set; }
        /// <summary>
        /// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network;
        /// auto assigned by default.
        /// </summary>
        string StaticIP { get; set; }
        /// <summary>
        /// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        string SubnetId { get; set; }
        /// <summary>A dictionary of tenant settings</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesTenantSettings TenantSetting { get; set; }
        /// <summary>A list of availability zones denoting where the resource needs to come from.</summary>
        string[] Zone { get; set; }

    }
}