// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Extensions;

    /// <summary>
    /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
    /// etc.
    /// </summary>
    public partial class RedisCommonPropertiesRedisConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfigurationInternal
    {

        /// <summary>Backing field for <see cref="AofStorageConnectionString0" /> property.</summary>
        private string _aofStorageConnectionString0;

        /// <summary>First storage account connection string</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string AofStorageConnectionString0 { get => this._aofStorageConnectionString0; set => this._aofStorageConnectionString0 = value; }

        /// <summary>Backing field for <see cref="AofStorageConnectionString1" /> property.</summary>
        private string _aofStorageConnectionString1;

        /// <summary>Second storage account connection string</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string AofStorageConnectionString1 { get => this._aofStorageConnectionString1; set => this._aofStorageConnectionString1 = value; }

        /// <summary>Backing field for <see cref="Maxclient" /> property.</summary>
        private string _maxclient;

        /// <summary>The max clients config</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string Maxclient { get => this._maxclient; }

        /// <summary>Backing field for <see cref="MaxfragmentationmemoryReserved" /> property.</summary>
        private string _maxfragmentationmemoryReserved;

        /// <summary>Value in megabytes reserved for fragmentation per shard</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string MaxfragmentationmemoryReserved { get => this._maxfragmentationmemoryReserved; set => this._maxfragmentationmemoryReserved = value; }

        /// <summary>Backing field for <see cref="MaxmemoryDelta" /> property.</summary>
        private string _maxmemoryDelta;

        /// <summary>Value in megabytes reserved for non-cache usage per shard e.g. failover.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string MaxmemoryDelta { get => this._maxmemoryDelta; set => this._maxmemoryDelta = value; }

        /// <summary>Backing field for <see cref="MaxmemoryPolicy" /> property.</summary>
        private string _maxmemoryPolicy;

        /// <summary>The eviction strategy used when your data won't fit within its memory limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string MaxmemoryPolicy { get => this._maxmemoryPolicy; set => this._maxmemoryPolicy = value; }

        /// <summary>Backing field for <see cref="MaxmemoryReserved" /> property.</summary>
        private string _maxmemoryReserved;

        /// <summary>Value in megabytes reserved for non-cache usage per shard e.g. failover.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string MaxmemoryReserved { get => this._maxmemoryReserved; set => this._maxmemoryReserved = value; }

        /// <summary>Internal Acessors for Maxclient</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfigurationInternal.Maxclient { get => this._maxclient; set { {_maxclient = value;} } }

        /// <summary>Internal Acessors for PreferredDataArchiveAuthMethod</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfigurationInternal.PreferredDataArchiveAuthMethod { get => this._preferredDataArchiveAuthMethod; set { {_preferredDataArchiveAuthMethod = value;} } }

        /// <summary>Internal Acessors for PreferredDataPersistenceAuthMethod</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfigurationInternal.PreferredDataPersistenceAuthMethod { get => this._preferredDataPersistenceAuthMethod; set { {_preferredDataPersistenceAuthMethod = value;} } }

        /// <summary>Internal Acessors for ZonalConfiguration</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfigurationInternal.ZonalConfiguration { get => this._zonalConfiguration; set { {_zonalConfiguration = value;} } }

        /// <summary>Backing field for <see cref="PreferredDataArchiveAuthMethod" /> property.</summary>
        private string _preferredDataArchiveAuthMethod;

        /// <summary>
        /// Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default
        /// value is SAS
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string PreferredDataArchiveAuthMethod { get => this._preferredDataArchiveAuthMethod; }

        /// <summary>Backing field for <see cref="PreferredDataPersistenceAuthMethod" /> property.</summary>
        private string _preferredDataPersistenceAuthMethod;

        /// <summary>
        /// Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default
        /// value is SAS
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string PreferredDataPersistenceAuthMethod { get => this._preferredDataPersistenceAuthMethod; }

        /// <summary>Backing field for <see cref="RdbBackupEnabled" /> property.</summary>
        private string _rdbBackupEnabled;

        /// <summary>Specifies whether the rdb backup is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string RdbBackupEnabled { get => this._rdbBackupEnabled; set => this._rdbBackupEnabled = value; }

        /// <summary>Backing field for <see cref="RdbBackupFrequency" /> property.</summary>
        private string _rdbBackupFrequency;

        /// <summary>Specifies the frequency for creating rdb backup</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string RdbBackupFrequency { get => this._rdbBackupFrequency; set => this._rdbBackupFrequency = value; }

        /// <summary>Backing field for <see cref="RdbBackupMaxSnapshotCount" /> property.</summary>
        private string _rdbBackupMaxSnapshotCount;

        /// <summary>Specifies the maximum number of snapshots for rdb backup</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string RdbBackupMaxSnapshotCount { get => this._rdbBackupMaxSnapshotCount; set => this._rdbBackupMaxSnapshotCount = value; }

        /// <summary>Backing field for <see cref="RdbStorageConnectionString" /> property.</summary>
        private string _rdbStorageConnectionString;

        /// <summary>The storage account connection string for storing rdb file</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string RdbStorageConnectionString { get => this._rdbStorageConnectionString; set => this._rdbStorageConnectionString = value; }

        /// <summary>Backing field for <see cref="ZonalConfiguration" /> property.</summary>
        private string _zonalConfiguration;

        /// <summary>Zonal Configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string ZonalConfiguration { get => this._zonalConfiguration; }

        /// <summary>Creates an new <see cref="RedisCommonPropertiesRedisConfiguration" /> instance.</summary>
        public RedisCommonPropertiesRedisConfiguration()
        {

        }
    }
    /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
    /// etc.
    public partial interface IRedisCommonPropertiesRedisConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>First storage account connection string</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"First storage account connection string",
        SerializedName = @"aof-storage-connection-string-0",
        PossibleTypes = new [] { typeof(string) })]
        string AofStorageConnectionString0 { get; set; }
        /// <summary>Second storage account connection string</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Second storage account connection string",
        SerializedName = @"aof-storage-connection-string-1",
        PossibleTypes = new [] { typeof(string) })]
        string AofStorageConnectionString1 { get; set; }
        /// <summary>The max clients config</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The max clients config",
        SerializedName = @"maxclients",
        PossibleTypes = new [] { typeof(string) })]
        string Maxclient { get;  }
        /// <summary>Value in megabytes reserved for fragmentation per shard</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value in megabytes reserved for fragmentation per shard",
        SerializedName = @"maxfragmentationmemory-reserved",
        PossibleTypes = new [] { typeof(string) })]
        string MaxfragmentationmemoryReserved { get; set; }
        /// <summary>Value in megabytes reserved for non-cache usage per shard e.g. failover.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value in megabytes reserved for non-cache usage per shard e.g. failover.",
        SerializedName = @"maxmemory-delta",
        PossibleTypes = new [] { typeof(string) })]
        string MaxmemoryDelta { get; set; }
        /// <summary>The eviction strategy used when your data won't fit within its memory limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The eviction strategy used when your data won't fit within its memory limit.",
        SerializedName = @"maxmemory-policy",
        PossibleTypes = new [] { typeof(string) })]
        string MaxmemoryPolicy { get; set; }
        /// <summary>Value in megabytes reserved for non-cache usage per shard e.g. failover.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value in megabytes reserved for non-cache usage per shard e.g. failover.",
        SerializedName = @"maxmemory-reserved",
        PossibleTypes = new [] { typeof(string) })]
        string MaxmemoryReserved { get; set; }
        /// <summary>
        /// Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default
        /// value is SAS
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS",
        SerializedName = @"preferred-data-archive-auth-method",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredDataArchiveAuthMethod { get;  }
        /// <summary>
        /// Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default
        /// value is SAS
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS",
        SerializedName = @"preferred-data-persistence-auth-method",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredDataPersistenceAuthMethod { get;  }
        /// <summary>Specifies whether the rdb backup is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the rdb backup is enabled",
        SerializedName = @"rdb-backup-enabled",
        PossibleTypes = new [] { typeof(string) })]
        string RdbBackupEnabled { get; set; }
        /// <summary>Specifies the frequency for creating rdb backup</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the frequency for creating rdb backup",
        SerializedName = @"rdb-backup-frequency",
        PossibleTypes = new [] { typeof(string) })]
        string RdbBackupFrequency { get; set; }
        /// <summary>Specifies the maximum number of snapshots for rdb backup</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the maximum number of snapshots for rdb backup",
        SerializedName = @"rdb-backup-max-snapshot-count",
        PossibleTypes = new [] { typeof(string) })]
        string RdbBackupMaxSnapshotCount { get; set; }
        /// <summary>The storage account connection string for storing rdb file</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage account connection string for storing rdb file",
        SerializedName = @"rdb-storage-connection-string",
        PossibleTypes = new [] { typeof(string) })]
        string RdbStorageConnectionString { get; set; }
        /// <summary>Zonal Configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Zonal Configuration",
        SerializedName = @"zonal-configuration",
        PossibleTypes = new [] { typeof(string) })]
        string ZonalConfiguration { get;  }

    }
    /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
    /// etc.
    internal partial interface IRedisCommonPropertiesRedisConfigurationInternal

    {
        /// <summary>First storage account connection string</summary>
        string AofStorageConnectionString0 { get; set; }
        /// <summary>Second storage account connection string</summary>
        string AofStorageConnectionString1 { get; set; }
        /// <summary>The max clients config</summary>
        string Maxclient { get; set; }
        /// <summary>Value in megabytes reserved for fragmentation per shard</summary>
        string MaxfragmentationmemoryReserved { get; set; }
        /// <summary>Value in megabytes reserved for non-cache usage per shard e.g. failover.</summary>
        string MaxmemoryDelta { get; set; }
        /// <summary>The eviction strategy used when your data won't fit within its memory limit.</summary>
        string MaxmemoryPolicy { get; set; }
        /// <summary>Value in megabytes reserved for non-cache usage per shard e.g. failover.</summary>
        string MaxmemoryReserved { get; set; }
        /// <summary>
        /// Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default
        /// value is SAS
        /// </summary>
        string PreferredDataArchiveAuthMethod { get; set; }
        /// <summary>
        /// Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default
        /// value is SAS
        /// </summary>
        string PreferredDataPersistenceAuthMethod { get; set; }
        /// <summary>Specifies whether the rdb backup is enabled</summary>
        string RdbBackupEnabled { get; set; }
        /// <summary>Specifies the frequency for creating rdb backup</summary>
        string RdbBackupFrequency { get; set; }
        /// <summary>Specifies the maximum number of snapshots for rdb backup</summary>
        string RdbBackupMaxSnapshotCount { get; set; }
        /// <summary>The storage account connection string for storing rdb file</summary>
        string RdbStorageConnectionString { get; set; }
        /// <summary>Zonal Configuration</summary>
        string ZonalConfiguration { get; set; }

    }
}