
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update an existing Redis cache.
.Description
Update an existing Redis cache.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.IRedisIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IRedisIdentity>: Identity Parameter
  [CacheName <String>]: The name of the Redis cache.
  [Default <DefaultName?>]: Default string modeled as parameter for auto generation to work correctly.
  [Id <String>]: Resource identity path
  [LinkedServerName <String>]: The name of the linked server that is being added to the Redis cache.
  [Location <String>]: The location at which operation was triggered
  [Name <String>]: The name of the Redis cache.
  [OperationId <String>]: The ID of asynchronous operation
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection associated with the Azure resource
  [ResourceGroupName <String>]: The name of the resource group.
  [RuleName <String>]: The name of the firewall rule.
  [SubscriptionId <String>]: Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

REDISCONFIGURATION <IRedisCommonPropertiesRedisConfiguration>: All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AofStorageConnectionString0 <String>]: First storage account connection string
  [AofStorageConnectionString1 <String>]: Second storage account connection string
  [MaxfragmentationmemoryReserved <String>]: Value in megabytes reserved for fragmentation per shard
  [MaxmemoryDelta <String>]: Value in megabytes reserved for non-cache usage per shard e.g. failover.
  [MaxmemoryPolicy <String>]: The eviction strategy used when your data won't fit within its memory limit.
  [MaxmemoryReserved <String>]: Value in megabytes reserved for non-cache usage per shard e.g. failover.
  [RdbBackupEnabled <String>]: Specifies whether the rdb backup is enabled
  [RdbBackupFrequency <String>]: Specifies the frequency for creating rdb backup
  [RdbBackupMaxSnapshotCount <String>]: Specifies the maximum number of snapshots for rdb backup
  [RdbStorageConnectionString <String>]: The storage account connection string for storing rdb file
.Link
https://docs.microsoft.com/en-us/powershell/module/az.redis/update-azredis
#>
function Update-AzRedis {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisResource])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Path')]
    [System.String]
    # The name of the Redis cache.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription credentials which uniquely identify the Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.IRedisIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether the non-ssl Redis server port (6379) is enabled.
    ${EnableNonSslPort},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType]
    # Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The set of user assigned identities associated with the resource.
    # The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
    # The dictionary values can be empty objects ({}) in requests.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion])]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion]
    # Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
    ${MinimumTlsVersion},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess]
    # Whether or not public endpoint access is allowed for this cache.
    # Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
    # If 'Disabled', private endpoints are the exclusive access method.
    # Default value is 'Enabled'
    ${PublicNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesRedisConfiguration]
    # All Redis Settings.
    # Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
    # To construct, see NOTES section for REDISCONFIGURATION properties and create a hash table.
    ${RedisConfiguration},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [System.String]
    # Redis version.
    # Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
    ${RedisVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [System.Int32]
    # The number of replicas to be created per primary.
    ${ReplicasPerMaster},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [System.Int32]
    # The number of replicas to be created per primary.
    ${ReplicasPerPrimary},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [System.Int32]
    # The number of shards to be created on a Premium Cluster Cache.
    ${ShardCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [System.Int32]
    # The size of the Redis cache to deploy.
    # Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
    ${SkuCapacity},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily])]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily]
    # The SKU family to use.
    # Valid values: (C, P).
    # (C = Basic/Standard, P = Premium).
    ${SkuFamily},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName])]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName]
    # The type of Redis cache to deploy.
    # Valid values: (Basic, Standard, Premium)
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisUpdateParametersTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20210601.IRedisCommonPropertiesTenantSettings]))]
    [System.Collections.Hashtable]
    # A dictionary of tenant settings
    ${TenantSetting},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Redis.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Redis.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Redis.private\Update-AzRedis_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Redis.private\Update-AzRedis_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Redis.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
