
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update an operationalization cluster.
.Description
Create or update an operationalization cluster.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Models.Api20170801Preview.IOperationalizationCluster
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CONTAINERSERVICESYSTEMSERVICE <ISystemService[]>: The system services deployed to the cluster
  Type <SystemServiceType>: The system service type

GLOBALSERVICECONFIGURATION <IGlobalServiceConfiguration>: Contains global configuration for the web services in the cluster.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AutoScaleMaxReplica <Int32?>]: The maximum number of replicas for each service.
  [AutoScaleMinReplica <Int32?>]: The minimum number of replicas for each service.
  [AutoScaleRefreshPeriodInSecond <Int32?>]: Refresh period in seconds.
  [AutoScaleStatus <Status?>]: If auto-scale is enabled for all services. Each service can turn it off individually.
  [AutoScaleTargetUtilization <Single?>]: The target utilization.
  [Etag <String>]: The configuration ETag for updates.
  [ServiceAuthPrimaryAuthKeyHash <String>]: The primary auth key hash. This is not returned in response of GET/PUT on the resource.. To see this please call listKeys API.
  [ServiceAuthSecondaryAuthKeyHash <String>]: The secondary auth key hash. This is not returned in response of GET/PUT on the resource.. To see this please call listKeys API.
  [SslCert <String>]: The SSL cert data in PEM format.
  [SslCname <String>]: The CName of the certificate.
  [SslKey <String>]: The SSL key data in PEM format. This is not returned in response of GET/PUT on the resource. To see this please call listKeys API.
  [SslStatus <Status?>]: SSL status. Allowed values are Enabled and Disabled.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.machinelearningcompute/new-azmachinelearningcomputeoperationalizationcluster
#>
function New-AzMachineLearningComputeOperationalizationCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Models.Api20170801Preview.IOperationalizationCluster])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Path')]
    [System.String]
    # The name of the cluster.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Path')]
    [System.String]
    # Name of the resource group in which the cluster is located.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The Azure subscription ID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # Specifies the location of the resource.
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # ARM resource ID of the App Insights.
    ${AppInsightResourceId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Support.ClusterType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Support.ClusterType]
    # The cluster type.
    ${ClusterType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # ARM resource ID of the Azure Container Registry used to store Docker images for web services in the cluster.
    # If not provided one will be created.
    # This cannot be changed once the cluster is created.
    ${ContainerRegistryResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.Int32]
    # The number of agent nodes in the Container Service.
    # This can be changed to scale the cluster.
    ${ContainerServiceAgentCount},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Support.AgentVMSizeTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Support.AgentVMSizeTypes]
    # The Azure VM size of the agent VM nodes.
    # This cannot be changed once the cluster is created.
    # This list is non exhaustive; refer to https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for the possible VM sizes.
    ${ContainerServiceAgentVMSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.Int32]
    # The number of master nodes in the container service.
    ${ContainerServiceMasterCount},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Support.OrchestratorType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Support.OrchestratorType]
    # Type of orchestrator.
    # It cannot be changed once the cluster is created.
    ${ContainerServiceOrchestratorType},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Models.Api20170801Preview.ISystemService[]]
    # The system services deployed to the cluster
    # To construct, see NOTES section for CONTAINERSERVICESYSTEMSERVICE properties and create a hash table.
    ${ContainerServiceSystemService},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # The description of the cluster.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Models.Api20170801Preview.IGlobalServiceConfiguration]
    # Contains global configuration for the web services in the cluster.
    # To construct, see NOTES section for GLOBALSERVICECONFIGURATION properties and create a hash table.
    ${GlobalServiceConfiguration},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # The service principal client ID
    ${ServicePrincipalClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # The service principal secret.
    # This is not returned in response of GET/PUT on the resource.
    # To see this please call listKeys.
    ${ServicePrincipalSecret},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [System.String]
    # ARM resource ID of the Azure Storage Account to store CLI specific files.
    # If not provided one will be created.
    # This cannot be changed once the cluster is created.
    ${StorageAccountResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Models.Api20170801Preview.IResourceTags]))]
    [System.Collections.Hashtable]
    # Contains resource tags defined as key/value pairs.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.MachineLearningCompute.private\New-AzMachineLearningComputeOperationalizationCluster_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningCompute.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
