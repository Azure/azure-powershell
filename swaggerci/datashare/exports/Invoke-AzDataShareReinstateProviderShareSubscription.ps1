
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Reinstate share subscription in a provider share
.Description
Reinstate share subscription in a provider share
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.DataShare.Models.Api20200901.IProviderShareSubscription
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.DataShare.Models.IDataShareIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DataShare.Models.Api20200901.IProviderShareSubscription
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDataShareIdentity>: Identity Parameter
  [AccountName <String>]: The name of the share account.
  [DataSetMappingName <String>]: The name of the dataSetMapping.
  [DataSetName <String>]: The name of the dataSet.
  [Id <String>]: Resource identity path
  [InvitationId <String>]: An invitation id
  [InvitationName <String>]: The name of the invitation.
  [Location <String>]: Location of the invitation
  [ProviderShareSubscriptionId <String>]: To locate shareSubscription
  [ResourceGroupName <String>]: The resource group name.
  [ShareName <String>]: The name of the share.
  [ShareSubscriptionName <String>]: The name of the shareSubscription.
  [SubscriptionId <String>]: The subscription identifier
  [SynchronizationSettingName <String>]: The name of the synchronizationSetting.
  [TriggerName <String>]: The name of the trigger.

PROVIDERSHARESUBSCRIPTION <IProviderShareSubscription>: A provider side share subscription data transfer object.
  [SystemDataCreatedAt <DateTime?>]: The timestamp of resource creation (UTC).
  [SystemDataCreatedBy <String>]: The identity that created the resource.
  [SystemDataCreatedByType <CreatedByType?>]: The type of identity that created the resource.
  [SystemDataLastModifiedAt <DateTime?>]: The type of identity that last modified the resource.
  [SystemDataLastModifiedBy <String>]: The identity that last modified the resource.
  [SystemDataLastModifiedByType <LastModifiedByType?>]: The type of identity that last modified the resource.
  [ExpirationDate <DateTime?>]: Expiration date of the share subscription in UTC format
.Link
https://docs.microsoft.com/en-us/powershell/module/az.datashare/invoke-azdatasharereinstateprovidersharesubscription
#>
function Invoke-AzDataShareReinstateProviderShareSubscription {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.DataShare.Models.Api20200901.IProviderShareSubscription])]
[CmdletBinding(DefaultParameterSetName='ReinstateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Reinstate', Mandatory)]
    [Parameter(ParameterSetName='ReinstateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Path')]
    [System.String]
    # The name of the share account.
    ${AccountName},

    [Parameter(ParameterSetName='Reinstate', Mandatory)]
    [Parameter(ParameterSetName='ReinstateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Path')]
    [System.String]
    # To locate shareSubscription
    ${ProviderShareSubscriptionId},

    [Parameter(ParameterSetName='Reinstate', Mandatory)]
    [Parameter(ParameterSetName='ReinstateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Path')]
    [System.String]
    # The resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Reinstate', Mandatory)]
    [Parameter(ParameterSetName='ReinstateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Path')]
    [System.String]
    # The name of the share.
    ${ShareName},

    [Parameter(ParameterSetName='Reinstate')]
    [Parameter(ParameterSetName='ReinstateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription identifier
    ${SubscriptionId},

    [Parameter(ParameterSetName='ReinstateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ReinstateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Models.IDataShareIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Reinstate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ReinstateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Models.Api20200901.IProviderShareSubscription]
    # A provider side share subscription data transfer object.
    # To construct, see NOTES section for PROVIDERSHARESUBSCRIPTION properties and create a hash table.
    ${ProviderShareSubscription},

    [Parameter(ParameterSetName='ReinstateExpanded')]
    [Parameter(ParameterSetName='ReinstateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Body')]
    [System.DateTime]
    # Expiration date of the share subscription in UTC format
    ${ExpirationDate},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.DataShare.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Reinstate = 'Az.DataShare.private\Invoke-AzDataShareReinstateProviderShareSubscription_Reinstate';
            ReinstateExpanded = 'Az.DataShare.private\Invoke-AzDataShareReinstateProviderShareSubscription_ReinstateExpanded';
            ReinstateViaIdentity = 'Az.DataShare.private\Invoke-AzDataShareReinstateProviderShareSubscription_ReinstateViaIdentity';
            ReinstateViaIdentityExpanded = 'Az.DataShare.private\Invoke-AzDataShareReinstateProviderShareSubscription_ReinstateViaIdentityExpanded';
        }
        if (('Reinstate', 'ReinstateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.DataShare.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.DataShare.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
