// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataShare.Support
{

    /// <summary>Kind of data set.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DataShare.Support.DataSetKindTypeConverter))]
    public partial struct DataSetKind :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Blob".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Blob'", "Blob", global::System.Management.Automation.CompletionResultType.ParameterValue, "Blob");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Container".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Container'", "Container", global::System.Management.Automation.CompletionResultType.ParameterValue, "Container");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BlobFolder".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BlobFolder'", "BlobFolder", global::System.Management.Automation.CompletionResultType.ParameterValue, "BlobFolder");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen2FileSystem".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen2FileSystem'", "AdlsGen2FileSystem", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen2FileSystem");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen2Folder".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen2Folder'", "AdlsGen2Folder", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen2Folder");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen2File".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen2File'", "AdlsGen2File", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen2File");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen1Folder".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen1Folder'", "AdlsGen1Folder", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen1Folder");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen1File".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen1File'", "AdlsGen1File", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen1File");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KustoCluster".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KustoCluster'", "KustoCluster", global::System.Management.Automation.CompletionResultType.ParameterValue, "KustoCluster");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KustoDatabase".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KustoDatabase'", "KustoDatabase", global::System.Management.Automation.CompletionResultType.ParameterValue, "KustoDatabase");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlDBTable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlDBTable'", "SqlDBTable", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlDBTable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlDWTable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlDWTable'", "SqlDWTable", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlDWTable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SynapseWorkspaceSqlPoolTable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SynapseWorkspaceSqlPoolTable'", "SynapseWorkspaceSqlPoolTable", global::System.Management.Automation.CompletionResultType.ParameterValue, "SynapseWorkspaceSqlPoolTable");
            }
        }
    }
}