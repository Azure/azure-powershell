// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Extensions;
    using System;

    /// <summary>
    /// List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.\n
    /// </summary>
    /// <remarks>
    /// [OpenAPI] List=>POST:"/providers/Microsoft.Management/getEntities"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Get, @"AzManagementGroupsApiEntity_List", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityInfo))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Description(@"List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.\n")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Generated]
    public partial class GetAzManagementGroupsApiEntity_List : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A flag to tell whether it is the first onOK call.</summary>
        private bool _isFirst = true;

        /// <summary>Link to retrieve next page.</summary>
        private string _nextLink;

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Backing field for <see cref="CacheControl" /> property.</summary>
        private string _cacheControl;

        /// <summary>
        /// Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing
        /// caches.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches.",
        SerializedName = @"Cache-Control",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Header)]
        public string CacheControl { get => this._cacheControl; set => this._cacheControl = value; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ManagementGroupsApi Client => Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private string _filter;

        /// <summary>
        /// The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name
        /// field (e.g. name eq '{entityName}') and you can check for substrings on either the name or display name fields(e.g. contains(name,
        /// '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}'
        /// fields are checked case insensitively.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}') and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}') and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.",
        SerializedName = @"$filter",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        public string Filter { get => this._filter; set => this._filter = value; }

        /// <summary>Backing field for <see cref="GroupName" /> property.</summary>
        private string _groupName;

        /// <summary>
        /// A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A filter which allows the get entities call to focus on a particular group (i.e. \"$filter=name eq 'groupName'\")")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A filter which allows the get entities call to focus on a particular group (i.e. ""$filter=name eq 'groupName'"")",
        SerializedName = @"groupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        public string GroupName { get => this._groupName; set => this._groupName = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="Search" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntitySearchType _search;

        /// <summary>
        /// The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on
        /// the parameter passed in.
        /// With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to
        /// reparent to as determined by the user's permissions.
        /// With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the
        /// requested entity.
        /// With $search=ParentAndFirstLevelChildren the API will return the parent and first level of children that the user has
        /// either direct access to or indirect access via one of their descendants.
        /// With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of
        /// the group.
        /// With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.
        /// The user must have direct access to the children entities or one of it's descendants for it to show up in the results.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. \nWith $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.\nWith $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.\nWith $search=ParentAndFirstLevelChildren the API will return the parent and first level of children that the user has either direct access to or indirect access via one of their descendants.\nWith $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.\nWith $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter. The user must have direct access to the children entities or one of it's descendants for it to show up in the results.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
        With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.
        With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
        With $search=ParentAndFirstLevelChildren the API will return the parent and first level of children that the user has either direct access to or indirect access via one of their descendants.
        With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
        With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter. The user must have direct access to the children entities or one of it's descendants for it to show up in the results.",
        SerializedName = @"$search",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntitySearchType) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntitySearchType))]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntitySearchType Search { get => this._search; set => this._search = value; }

        /// <summary>Backing field for <see cref="Select" /> property.</summary>
        private string _select;

        /// <summary>
        /// This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain,
        /// e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can
        /// override select in $skipToken.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.",
        SerializedName = @"$select",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        public string Select { get => this._select; set => this._select = value; }

        /// <summary>Backing field for <see cref="Skip" /> property.</summary>
        private int _skip;

        /// <summary>
        /// Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of entities to skip over when retrieving results. Passing this in will override $skipToken.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of entities to skip over when retrieving results. Passing this in will override $skipToken.",
        SerializedName = @"$skip",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        public int Skip { get => this._skip; set => this._skip = value; }

        /// <summary>Backing field for <see cref="Skiptoken" /> property.</summary>
        private string _skiptoken;

        /// <summary>
        /// Page continuation token is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that
        /// specifies a starting point to use for subsequent calls.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Page continuation token is only used if a previous operation returned a partial result. \nIf a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.\n")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Page continuation token is only used if a previous operation returned a partial result.
        If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        ",
        SerializedName = @"$skiptoken",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        public string Skiptoken { get => this._skiptoken; set => this._skiptoken = value; }

        /// <summary>Backing field for <see cref="Top" /> property.</summary>
        private int _top;

        /// <summary>
        /// Number of elements to return when retrieving results. Passing this in will override $skipToken.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of elements to return when retrieving results. Passing this in will override $skipToken.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of elements to return when retrieving results. Passing this in will override $skipToken.",
        SerializedName = @"$top",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        public int Top { get => this._top; set => this._top = value; }

        /// <summary>Backing field for <see cref="View" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntityViewParameterType _view;

        /// <summary>
        /// The view parameter allows clients to filter the type of data that is returned by the getEntities call.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The view parameter allows clients to filter the type of data that is returned by the getEntities call.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The view parameter allows clients to filter the type of data that is returned by the getEntities call.",
        SerializedName = @"$view",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntityViewParameterType) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category(global::Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.ParameterCategory.Query)]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntityViewParameterType))]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntityViewParameterType View { get => this._view; set => this._view = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityListResult">Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityListResult</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityListResult> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>
        /// Intializes a new instance of the <see cref="GetAzManagementGroupsApiEntity_List" /> cmdlet class.
        /// </summary>
        public GetAzManagementGroupsApiEntity_List()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'EntitiesList' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.EntitiesList(this.InvocationInformation.BoundParameters.ContainsKey("Skiptoken") ? Skiptoken : null, this.InvocationInformation.BoundParameters.ContainsKey("Skip") ? Skip : default(int?), this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null, this.InvocationInformation.BoundParameters.ContainsKey("Search") ? Search : null, this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, this.InvocationInformation.BoundParameters.ContainsKey("View") ? View : null, this.InvocationInformation.BoundParameters.ContainsKey("GroupName") ? GroupName : null, this.InvocationInformation.BoundParameters.ContainsKey("CacheControl") ? CacheControl : null, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  Skiptoken=this.InvocationInformation.BoundParameters.ContainsKey("Skiptoken") ? Skiptoken : null,Skip=this.InvocationInformation.BoundParameters.ContainsKey("Skip") ? Skip : default(int?),Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?),Select=this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null,Search=this.InvocationInformation.BoundParameters.ContainsKey("Search") ? Search : null,Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null,View=this.InvocationInformation.BoundParameters.ContainsKey("View") ? View : null,GroupName=this.InvocationInformation.BoundParameters.ContainsKey("GroupName") ? GroupName : null,CacheControl=this.InvocationInformation.BoundParameters.ContainsKey("CacheControl") ? CacheControl : null})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Skiptoken=this.InvocationInformation.BoundParameters.ContainsKey("Skiptoken") ? Skiptoken : null, Skip=this.InvocationInformation.BoundParameters.ContainsKey("Skip") ? Skip : default(int?), Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), Select=this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null, Search=this.InvocationInformation.BoundParameters.ContainsKey("Search") ? Search : null, Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, View=this.InvocationInformation.BoundParameters.ContainsKey("View") ? View : null, GroupName=this.InvocationInformation.BoundParameters.ContainsKey("GroupName") ? GroupName : null, CacheControl=this.InvocationInformation.BoundParameters.ContainsKey("CacheControl") ? CacheControl : null })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Skiptoken=this.InvocationInformation.BoundParameters.ContainsKey("Skiptoken") ? Skiptoken : null, Skip=this.InvocationInformation.BoundParameters.ContainsKey("Skip") ? Skip : default(int?), Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), Select=this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null, Search=this.InvocationInformation.BoundParameters.ContainsKey("Search") ? Search : null, Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, View=this.InvocationInformation.BoundParameters.ContainsKey("View") ? View : null, GroupName=this.InvocationInformation.BoundParameters.ContainsKey("GroupName") ? GroupName : null, CacheControl=this.InvocationInformation.BoundParameters.ContainsKey("CacheControl") ? CacheControl : null })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityListResult">Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityListResult</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityListResult> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // response should be returning an array of some kind. +Pageable
                // pageable / value / nextLink
                var result = await response;
                WriteObject(result.Value,true);
                _nextLink = result.NextLink;
                if (_isFirst)
                {
                    _isFirst = false;
                    while (_nextLink != null)
                    {
                        if (responseMessage.RequestMessage is System.Net.Http.HttpRequestMessage requestMessage )
                        {
                            requestMessage = requestMessage.Clone(new global::System.Uri( _nextLink ),Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Method.Get );
                            await ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.Events.FollowingNextLink); if( ((Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                            await this.Client.EntitiesList_Call(requestMessage, onOk, onDefault, this, Pipeline);
                        }
                    }
                }
            }
        }
    }
}