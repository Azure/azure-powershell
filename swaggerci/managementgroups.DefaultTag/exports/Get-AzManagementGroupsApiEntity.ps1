
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.\n
.Description
List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.\n
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityInfo
.Link
https://learn.microsoft.com/powershell/module/az.managementgroupsapi/get-azmanagementgroupsapientity
#>
function Get-AzManagementGroupsApiEntity {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20210401.IEntityInfo])]
[CmdletBinding(DefaultParameterSetName='List', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [System.String]
    # The filter parameter allows you to filter on the the name or display name fields.
    # You can check for equality on the name field (e.g.
    # name eq '{entityName}') and you can check for substrings on either the name or display name fields(e.g.
    # contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')).
    # Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
    ${Filter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [System.String]
    # A filter which allows the get entities call to focus on a particular group (i.e.
    # "$filter=name eq 'groupName'")
    ${GroupName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntitySearchType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntitySearchType]
    # The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
    # 
    # With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.
    # With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
    # With $search=ParentAndFirstLevelChildren the API will return the parent and first level of children that the user has either direct access to or indirect access via one of their descendants.
    # With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
    # With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.
    # The user must have direct access to the children entities or one of it's descendants for it to show up in the results.
    ${Search},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [System.String]
    # This parameter specifies the fields to include in the response.
    # Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
    # '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'.
    # When specified the $select parameter can override select in $skipToken.
    ${Select},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [System.Int32]
    # Number of entities to skip over when retrieving results.
    # Passing this in will override $skipToken.
    ${Skip},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [System.String]
    # Page continuation token is only used if a previous operation returned a partial result.
    # 
    # If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
    ${Skiptoken},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [System.Int32]
    # Number of elements to return when retrieving results.
    # Passing this in will override $skipToken.
    ${Top},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntityViewParameterType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Query')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Support.EntityViewParameterType]
    # The view parameter allows clients to filter the type of data that is returned by the getEntities call.
    ${View},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Header')]
    [System.String]
    # Indicates whether the request should utilize any caches.
    # Populate the header with 'no-cache' value to bypass existing caches.
    ${CacheControl},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.ManagementGroupsApi.private\Get-AzManagementGroupsApiEntity_List';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
