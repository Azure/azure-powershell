
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new server group with servers.
.Description
Creates a new server group with servers.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Models.Api20201005Privatepreview.IServerGroup
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

SERVERROLEGROUP <IServerRoleGroup[]>: The list of server role groups.
  [EnableHa <Boolean?>]: If high availability is enabled or not for the server.
  [ServerEdition <ServerEdition?>]: The edition of a server (default: GeneralPurpose).
  [StorageQuotaInMb <Int64?>]: The storage of a server in MB (max: 2097152 = 2TiB).
  [VCore <Int64?>]: The vCores count of a server (max: 64).
  [Name <String>]: The name of the server role group.
  [Role <ServerRole?>]: The role of servers in the server role group.
  [ServerCount <Int32?>]: The number of servers in the server role group.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.postgresqlhyperscale/new-azpostgresqlhyperscaleservergroup
#>
function New-AzPostgreSqlHyperscaleServerGroup {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Models.Api20201005Privatepreview.IServerGroup])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ServerGroupName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Path')]
    [System.String]
    # The name of the server group.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # The administrator's login name of servers in server group.
    # Can only be specified when the server is being created (and is required for creation).
    ${AdministratorLogin},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Security.SecureString]
    # The password of the administrator login.
    ${AdministratorLoginPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # Availability Zone information of the server group.
    ${AvailabilityZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Int32]
    # The backup retention days for server group.
    ${BackupRetentionDay},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Support.CitusVersion])]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Support.CitusVersion]
    # The Citus version of server group.
    ${CitusVersion},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Support.CreateMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Support.CreateMode]
    # The mode to create a new server group.
    ${CreateMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # delegated subnet arm resource id.
    ${DelegatedSubnetArgumentSubnetArmResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If Citus MX is enabled or not for the server group.
    ${EnableMx},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If shards on coordinator is enabled or not for the server group.
    ${EnableShardsOnCoordinator},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If ZFS compression is enabled or not for the server group.
    ${EnableZf},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # indicates whether custom window is enabled or disabled
    ${MaintenanceWindowCustomWindow},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Int32]
    # day of week for maintenance window
    ${MaintenanceWindowDayOfWeek},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Int32]
    # start hour for maintenance window
    ${MaintenanceWindowStartHour},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.Int32]
    # start minute for maintenance window
    ${MaintenanceWindowStartMinute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.DateTime]
    # Restore point creation time (ISO8601 format), specifying the time to restore from.
    # It's required when 'createMode' is 'PointInTimeRestore'
    ${PointInTimeUtc},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Support.PostgreSqlVersion])]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Support.PostgreSqlVersion]
    # The PostgreSQL version of server group.
    ${PostgresqlVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # private dns zone arm resource id.
    ${PrivateDnsZoneArgumentPrivateDnsZoneArmResourceId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Models.Api20201005Privatepreview.IServerRoleGroup[]]
    # The list of server role groups.
    # To construct, see NOTES section for SERVERROLEGROUP properties and create a hash table.
    ${ServerRoleGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # The source server group location to restore from.
    # It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
    ${SourceLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # The source resource group name to restore from.
    # It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
    ${SourceResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # The source server group name to restore from.
    # It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
    ${SourceServerGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # The source subscription id to restore from.
    # It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
    ${SourceSubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [System.String]
    # Standby Availability Zone information of the server group.
    ${StandbyAvailabilityZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Models.Api10.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.PostgreSqlHyperscale.private\New-AzPostgreSqlHyperscaleServerGroup_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlHyperscale.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
