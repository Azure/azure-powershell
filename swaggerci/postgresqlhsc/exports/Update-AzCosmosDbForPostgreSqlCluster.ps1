
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates an existing cluster.
The request body can contain one to many of the properties present in the normal cluster definition.
.Description
Updates an existing cluster.
The request body can contain one to many of the properties present in the normal cluster definition.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.ICosmosDbForPostgreSqlIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.ICluster
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ICosmosDbForPostgreSqlIdentity>: Identity Parameter
  [ClusterName <String>]: The name of the cluster.
  [ConfigurationName <String>]: The name of the cluster configuration.
  [FirewallRuleName <String>]: The name of the cluster firewall rule.
  [Id <String>]: Resource identity path
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection associated with the Azure resource.
  [PrivateLinkResourceName <String>]: The name of the private link resource.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [RoleName <String>]: The name of the cluster role.
  [ServerName <String>]: The name of the server.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
.Link
https://learn.microsoft.com/powershell/module/az.cosmosdbforpostgresql/update-azcosmosdbforpostgresqlcluster
#>
function Update-AzCosmosDbForPostgreSqlCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.ICluster])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('ClusterName')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [System.String]
    # The name of the cluster.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.ICosmosDbForPostgreSqlIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Security.SecureString]
    # The password of the administrator login.
    ${AdministratorLoginPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The Citus version of the cluster.
    ${CitusVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If public IP is requested or not for the coordinator.
    ${CoordinatorEnablePublicIPAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The edition of the coordinator (default: GeneralPurpose).
    ${CoordinatorServerEdition},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int64]
    # The storage of the coordinator in MB.
    ${CoordinatorStorageQuotaInMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int64]
    # The vCores count of the coordinator (max: 64).
    ${CoordinatorVCore},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If high availability is enabled or not for the cluster.
    ${EnableHa},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If shards on coordinator is enabled or not for the cluster.
    ${EnableShardsOnCoordinator},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # indicates whether custom window is enabled or disabled
    ${MaintenanceWindowCustomWindow},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # day of week for maintenance window
    ${MaintenanceWindowDayOfWeek},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # start hour for maintenance window
    ${MaintenanceWindowStartHour},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # start minute for maintenance window
    ${MaintenanceWindowStartMinute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int64]
    # Worker node count of the cluster.
    # When node count is 0, it represents a coordinator with the ability to create distributed tables on that node.
    # Node count value can not be 1.
    ${NodeCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The edition of a node (default: MemoryOptimized).
    ${NodeServerEdition},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int64]
    # The storage of a node in MB.
    ${NodeStorageQuotaInMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int64]
    # The vCores count of a node (max: 64).
    ${NodeVCore},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The PostgreSQL version of the cluster.
    ${PostgresqlVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # Preferred primary zone for the cluster
    ${PreferredPrimaryZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateTags]))]
    [System.Collections.Hashtable]
    # Application-specific metadata in the form of key-value pairs.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.CosmosDbForPostgreSql.private\Update-AzCosmosDbForPostgreSqlCluster_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.CosmosDbForPostgreSql.private\Update-AzCosmosDbForPostgreSqlCluster_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
