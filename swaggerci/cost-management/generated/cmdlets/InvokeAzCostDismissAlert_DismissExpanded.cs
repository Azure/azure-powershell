// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cost.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Extensions;
    using System;

    /// <summary>Dismisses the specified alert</summary>
    /// <remarks>
    /// [OpenAPI] Dismiss=>PATCH:"/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsLifecycle.Invoke, @"AzCostDismissAlert_DismissExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IAlert))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Description(@"Dismisses the specified alert")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Generated]
    public partial class InvokeAzCostDismissAlert_DismissExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Backing field for <see cref="AlertId" /> property.</summary>
        private string _alertId;

        /// <summary>Alert ID</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Alert ID")]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Alert ID",
        SerializedName = @"alertId",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Path)]
        public string AlertId { get => this._alertId; set => this._alertId = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.CostManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.Cost.Module.Instance.ClientAPI;

        /// <summary>dateTime in which alert was closed</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "dateTime in which alert was closed")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"dateTime in which alert was closed",
        SerializedName = @"closeTime",
        PossibleTypes = new [] { typeof(string) })]
        public string CloseTime { get => ParametersBody.CloseTime ?? null; set => ParametersBody.CloseTime = value; }

        /// <summary>related budget</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "related budget")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"related budget",
        SerializedName = @"costEntityId",
        PossibleTypes = new [] { typeof(string) })]
        public string CostEntityId { get => ParametersBody.CostEntityId ?? null; set => ParametersBody.CostEntityId = value; }

        /// <summary>dateTime in which alert was created</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "dateTime in which alert was created")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"dateTime in which alert was created",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(string) })]
        public string CreationTime { get => ParametersBody.CreationTime ?? null; set => ParametersBody.CreationTime = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Alert category</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Alert category")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alert category",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCategory) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCategory))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCategory DefinitionCategory { get => ParametersBody.DefinitionCategory ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCategory)""); set => ParametersBody.DefinitionCategory = value; }

        /// <summary>Criteria that triggered alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Criteria that triggered alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Criteria that triggered alert",
        SerializedName = @"criteria",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCriteria) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCriteria))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCriteria DefinitionCriterion { get => ParametersBody.DefinitionCriterion ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertCriteria)""); set => ParametersBody.DefinitionCriterion = value; }

        /// <summary>type of alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "type of alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"type of alert",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertType DefinitionType { get => ParametersBody.DefinitionType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertType)""); set => ParametersBody.DefinitionType = value; }

        /// <summary>Alert description</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Alert description")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alert description",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        public string Description { get => ParametersBody.Description ?? null; set => ParametersBody.Description = value; }

        /// <summary>budget threshold amount</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "budget threshold amount")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"budget threshold amount",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        public decimal DetailAmount { get => ParametersBody.DetailAmount ?? default(decimal); set => ParametersBody.DetailAmount = value; }

        /// <summary>company name</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "company name")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"company name",
        SerializedName = @"companyName",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailCompanyName { get => ParametersBody.DetailCompanyName ?? null; set => ParametersBody.DetailCompanyName = value; }

        /// <summary>list of emails to contact</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "list of emails to contact")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"list of emails to contact",
        SerializedName = @"contactEmails",
        PossibleTypes = new [] { typeof(string) })]
        public string[] DetailContactEmail { get => ParametersBody.DetailContactEmail ?? null /* arrayOf */; set => ParametersBody.DetailContactEmail = value; }

        /// <summary>list of action groups to broadcast to</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "list of action groups to broadcast to")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"list of action groups to broadcast to",
        SerializedName = @"contactGroups",
        PossibleTypes = new [] { typeof(string) })]
        public string[] DetailContactGroup { get => ParametersBody.DetailContactGroup ?? null /* arrayOf */; set => ParametersBody.DetailContactGroup = value; }

        /// <summary>list of contact roles</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "list of contact roles")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"list of contact roles",
        SerializedName = @"contactRoles",
        PossibleTypes = new [] { typeof(string) })]
        public string[] DetailContactRole { get => ParametersBody.DetailContactRole ?? null /* arrayOf */; set => ParametersBody.DetailContactRole = value; }

        /// <summary>current spend</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "current spend")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"current spend",
        SerializedName = @"currentSpend",
        PossibleTypes = new [] { typeof(decimal) })]
        public decimal DetailCurrentSpend { get => ParametersBody.DetailCurrentSpend ?? default(decimal); set => ParametersBody.DetailCurrentSpend = value; }

        /// <summary>department name</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "department name")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"department name",
        SerializedName = @"departmentName",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailDepartmentName { get => ParametersBody.DetailDepartmentName ?? null; set => ParametersBody.DetailDepartmentName = value; }

        /// <summary>datetime of enrollmentEndDate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "datetime of enrollmentEndDate")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"datetime of enrollmentEndDate",
        SerializedName = @"enrollmentEndDate",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailEnrollmentEndDate { get => ParametersBody.DetailEnrollmentEndDate ?? null; set => ParametersBody.DetailEnrollmentEndDate = value; }

        /// <summary>enrollment number</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "enrollment number")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"enrollment number",
        SerializedName = @"enrollmentNumber",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailEnrollmentNumber { get => ParametersBody.DetailEnrollmentNumber ?? null; set => ParametersBody.DetailEnrollmentNumber = value; }

        /// <summary>datetime of enrollmentStartDate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "datetime of enrollmentStartDate")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"datetime of enrollmentStartDate",
        SerializedName = @"enrollmentStartDate",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailEnrollmentStartDate { get => ParametersBody.DetailEnrollmentStartDate ?? null; set => ParametersBody.DetailEnrollmentStartDate = value; }

        /// <summary>invoicing threshold</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "invoicing threshold")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"invoicing threshold",
        SerializedName = @"invoicingThreshold",
        PossibleTypes = new [] { typeof(decimal) })]
        public decimal DetailInvoicingThreshold { get => ParametersBody.DetailInvoicingThreshold ?? default(decimal); set => ParametersBody.DetailInvoicingThreshold = value; }

        /// <summary>array of meters to filter by</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "array of meters to filter by")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"array of meters to filter by",
        SerializedName = @"meterFilter",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny[] DetailMeterFilter { get => ParametersBody.DetailMeterFilter ?? null /* arrayOf */; set => ParametersBody.DetailMeterFilter = value; }

        /// <summary>operator used to compare currentSpend with amount</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "operator used to compare currentSpend with amount")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"operator used to compare currentSpend with amount",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertOperator) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertOperator))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertOperator DetailOperator { get => ParametersBody.DetailOperator ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertOperator)""); set => ParametersBody.DetailOperator = value; }

        /// <summary>overriding alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "overriding alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"overriding alert",
        SerializedName = @"overridingAlert",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailOverridingAlert { get => ParametersBody.DetailOverridingAlert ?? null; set => ParametersBody.DetailOverridingAlert = value; }

        /// <summary>datetime of periodStartDate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "datetime of periodStartDate")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"datetime of periodStartDate",
        SerializedName = @"periodStartDate",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailPeriodStartDate { get => ParametersBody.DetailPeriodStartDate ?? null; set => ParametersBody.DetailPeriodStartDate = value; }

        /// <summary>array of resources to filter by</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "array of resources to filter by")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"array of resources to filter by",
        SerializedName = @"resourceFilter",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny[] DetailResourceFilter { get => ParametersBody.DetailResourceFilter ?? null /* arrayOf */; set => ParametersBody.DetailResourceFilter = value; }

        /// <summary>array of resourceGroups to filter by</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "array of resourceGroups to filter by")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"array of resourceGroups to filter by",
        SerializedName = @"resourceGroupFilter",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny[] DetailResourceGroupFilter { get => ParametersBody.DetailResourceGroupFilter ?? null /* arrayOf */; set => ParametersBody.DetailResourceGroupFilter = value; }

        /// <summary>tags to filter by</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "tags to filter by")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"tags to filter by",
        SerializedName = @"tagFilter",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.IAny DetailTagFilter { get => ParametersBody.DetailTagFilter ?? null /* object */; set => ParametersBody.DetailTagFilter = value; }

        /// <summary>notification threshold percentage as a decimal which activated this alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "notification threshold percentage as a decimal which activated this alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"notification threshold percentage as a decimal which activated this alert",
        SerializedName = @"threshold",
        PossibleTypes = new [] { typeof(decimal) })]
        public decimal DetailThreshold { get => ParametersBody.DetailThreshold ?? default(decimal); set => ParametersBody.DetailThreshold = value; }

        /// <summary>Type of timegrain cadence</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Type of timegrain cadence")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of timegrain cadence",
        SerializedName = @"timeGrainType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertTimeGrainType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertTimeGrainType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertTimeGrainType DetailTimeGrainType { get => ParametersBody.DetailTimeGrainType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertTimeGrainType)""); set => ParametersBody.DetailTimeGrainType = value; }

        /// <summary>notificationId that triggered this alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "notificationId that triggered this alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"notificationId that triggered this alert",
        SerializedName = @"triggeredBy",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailTriggeredBy { get => ParametersBody.DetailTriggeredBy ?? null; set => ParametersBody.DetailTriggeredBy = value; }

        /// <summary>unit of currency being used</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "unit of currency being used")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"unit of currency being used",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        public string DetailUnit { get => ParametersBody.DetailUnit ?? null; set => ParametersBody.DetailUnit = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>dateTime in which alert was last modified</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "dateTime in which alert was last modified")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"dateTime in which alert was last modified",
        SerializedName = @"modificationTime",
        PossibleTypes = new [] { typeof(string) })]
        public string ModificationTime { get => ParametersBody.ModificationTime ?? null; set => ParametersBody.ModificationTime = value; }

        /// <summary>Backing field for <see cref="ParametersBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IDismissAlertPayload _parametersBody= new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.DismissAlertPayload();

        /// <summary>The request payload to update an alert</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IDismissAlertPayload ParametersBody { get => this._parametersBody; set => this._parametersBody = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>
        /// The scope associated with alerts operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope,
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}'
        /// for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
        /// for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
        /// for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group
        /// scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile
        /// scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
        /// for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
        /// specific for partners.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The scope associated with alerts operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The scope associated with alerts operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Path)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Source of alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Source of alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Source of alert",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertSource) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertSource))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertSource Source { get => ParametersBody.Source ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertSource)""); set => ParametersBody.Source = value; }

        /// <summary>alert status</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "alert status")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"alert status",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertStatus) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertStatus))]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertStatus Status { get => ParametersBody.Status ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AlertStatus)""); set => ParametersBody.Status = value; }

        /// <summary>dateTime in which the alert status was last modified</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "dateTime in which the alert status was last modified")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"dateTime in which the alert status was last modified",
        SerializedName = @"statusModificationTime",
        PossibleTypes = new [] { typeof(string) })]
        public string StatusModificationTime { get => ParametersBody.StatusModificationTime ?? null; set => ParametersBody.StatusModificationTime = value; }

        /// <summary>User who last modified the alert</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "User who last modified the alert")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cost.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Cost.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User who last modified the alert",
        SerializedName = @"statusModificationUserName",
        PossibleTypes = new [] { typeof(string) })]
        public string StatusModificationUserName { get => ParametersBody.StatusModificationUserName ?? null; set => ParametersBody.StatusModificationUserName = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IErrorResponse"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IAlert"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IAlert> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Cost.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>
        /// Intializes a new instance of the <see cref="InvokeAzCostDismissAlert_DismissExpanded" /> cmdlet class.
        /// </summary>
        public InvokeAzCostDismissAlert_DismissExpanded()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Cost.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'AlertsDismiss' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Cost.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.AlertsDismiss(Scope, AlertId, ParametersBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  Scope=Scope,AlertId=AlertId,body=ParametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IErrorResponse"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Scope=Scope, AlertId=AlertId, body=ParametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Scope=Scope, AlertId=AlertId, body=ParametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IAlert"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IAlert> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IAlert
                WriteObject((await response));
            }
        }
    }
}