
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to create or update a view.
Update operation requires latest eTag to be set in the request.
You may obtain the latest eTag by performing a get operation.
Create operation does not require eTag.
.Description
The operation to create or update a view.
Update operation requires latest eTag to be set in the request.
You may obtain the latest eTag by performing a get operation.
Create operation does not require eTag.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IView
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.ICostIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IView
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ICostIdentity>: Identity Parameter
  [AlertId <String>]: Alert ID
  [BillingAccountId <String>]: Enrollment ID (Legacy BillingAccount ID)
  [BillingProfileId <String>]: BillingProfile ID
  [ExportName <String>]: Export Name.
  [ExternalCloudProviderId <String>]: This can be '{externalSubscriptionId}' for linked account or '{externalBillingAccountId}' for consolidated account used with dimension/query operations.
  [ExternalCloudProviderType <ExternalCloudProviderType?>]: The external cloud provider type associated with dimension/query operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts' for consolidated account.
  [Id <String>]: Resource identity path
  [OperationId <String>]: The target operation Id.
  [Scope <String>]: The scope associated with export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.
  [ViewName <String>]: View name

KPI <IKpiProperties[]>: List of KPIs to show in Cost Analysis UI.
  [Enabled <Boolean?>]: show the KPI in the UI?
  [Id <String>]: ID of resource related to metric (budget).
  [Type <KpiType?>]: KPI type (Forecast, Budget).

PARAMETER <IView>: States and configurations of Cost Analysis.
  [ETag <String>]: eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
  [Accumulated <AccumulatedType?>]: Show costs accumulated over time.
  [Chart <ChartType?>]: Chart type of the main view in Cost Analysis. Required.
  [DisplayName <String>]: User input name of the view. Required.
  [Kpi <IKpiProperties[]>]: List of KPIs to show in Cost Analysis UI.
    [Enabled <Boolean?>]: show the KPI in the UI?
    [Id <String>]: ID of resource related to metric (budget).
    [Type <KpiType?>]: KPI type (Forecast, Budget).
  [Metric <MetricType?>]: Metric to use when displaying costs.
  [Pivot <IPivotProperties[]>]: Configuration of 3 sub-views in the Cost Analysis UI.
    [Name <String>]: Data field to show in view.
    [Type <PivotType?>]: Data type to show in view.
  [Query <IReportConfigDefinition>]: Query body configuration. Required.
    Timeframe <ReportTimeframeType>: The time frame for pulling data for the report. If custom, then a specific time period must be provided.
    [ConfigurationColumn <String[]>]: Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
    [DataSetAggregation <IReportConfigDatasetAggregation>]: Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
      [(Any) <IReportConfigAggregation>]: This indicates any property can be added to this object.
    [DataSetGranularity <ReportGranularityType?>]: The granularity of rows in the report.
    [DataSetGrouping <IReportConfigGrouping[]>]: Array of group by expression to use in the report. Report can have up to 2 group by clauses.
      Name <String>: The name of the column to group. This version supports subscription lowest possible grain.
      Type <ReportConfigColumnType>: Has type of the column to group.
    [DataSetSorting <IReportConfigSorting[]>]: Array of order by expression to use in the report.
      Name <String>: The name of the column to sort.
      [Direction <ReportConfigSortingType?>]: Direction of sort.
    [DimensionName <String>]: The name of the column to use in comparison.
    [DimensionOperator <OperatorType?>]: The operator to use for comparison.
    [DimensionValue <String[]>]: Array of values to use for comparison
    [FilterAnd <IReportConfigFilter[]>]: The logical "AND" expression. Must have at least 2 items.
      [And <IReportConfigFilter[]>]: The logical "AND" expression. Must have at least 2 items.
      [DimensionName <String>]: The name of the column to use in comparison.
      [DimensionOperator <OperatorType?>]: The operator to use for comparison.
      [DimensionValue <String[]>]: Array of values to use for comparison
      [Or <IReportConfigFilter[]>]: The logical "OR" expression. Must have at least 2 items.
      [TagName <String>]: The name of the column to use in comparison.
      [TagOperator <OperatorType?>]: The operator to use for comparison.
      [TagValue <String[]>]: Array of values to use for comparison
    [FilterOr <IReportConfigFilter[]>]: The logical "OR" expression. Must have at least 2 items.
    [IncludeMonetaryCommitment <Boolean?>]: If true, report includes monetary commitment.
    [TagName <String>]: The name of the column to use in comparison.
    [TagOperator <OperatorType?>]: The operator to use for comparison.
    [TagValue <String[]>]: Array of values to use for comparison
    [TimePeriodFrom <DateTime?>]: The start date to pull data from.
    [TimePeriodTo <DateTime?>]: The end date to pull data to.
  [Scope <String>]: Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.

PIVOT <IPivotProperties[]>: Configuration of 3 sub-views in the Cost Analysis UI.
  [Name <String>]: Data field to show in view.
  [Type <PivotType?>]: Data type to show in view.

QUERY <IReportConfigDefinition>: Query body configuration. Required.
  Timeframe <ReportTimeframeType>: The time frame for pulling data for the report. If custom, then a specific time period must be provided.
  [ConfigurationColumn <String[]>]: Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
  [DataSetAggregation <IReportConfigDatasetAggregation>]: Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
    [(Any) <IReportConfigAggregation>]: This indicates any property can be added to this object.
  [DataSetGranularity <ReportGranularityType?>]: The granularity of rows in the report.
  [DataSetGrouping <IReportConfigGrouping[]>]: Array of group by expression to use in the report. Report can have up to 2 group by clauses.
    Name <String>: The name of the column to group. This version supports subscription lowest possible grain.
    Type <ReportConfigColumnType>: Has type of the column to group.
  [DataSetSorting <IReportConfigSorting[]>]: Array of order by expression to use in the report.
    Name <String>: The name of the column to sort.
    [Direction <ReportConfigSortingType?>]: Direction of sort.
  [DimensionName <String>]: The name of the column to use in comparison.
  [DimensionOperator <OperatorType?>]: The operator to use for comparison.
  [DimensionValue <String[]>]: Array of values to use for comparison
  [FilterAnd <IReportConfigFilter[]>]: The logical "AND" expression. Must have at least 2 items.
    [And <IReportConfigFilter[]>]: The logical "AND" expression. Must have at least 2 items.
    [DimensionName <String>]: The name of the column to use in comparison.
    [DimensionOperator <OperatorType?>]: The operator to use for comparison.
    [DimensionValue <String[]>]: Array of values to use for comparison
    [Or <IReportConfigFilter[]>]: The logical "OR" expression. Must have at least 2 items.
    [TagName <String>]: The name of the column to use in comparison.
    [TagOperator <OperatorType?>]: The operator to use for comparison.
    [TagValue <String[]>]: Array of values to use for comparison
  [FilterOr <IReportConfigFilter[]>]: The logical "OR" expression. Must have at least 2 items.
  [IncludeMonetaryCommitment <Boolean?>]: If true, report includes monetary commitment.
  [TagName <String>]: The name of the column to use in comparison.
  [TagOperator <OperatorType?>]: The operator to use for comparison.
  [TagValue <String[]>]: Array of values to use for comparison
  [TimePeriodFrom <DateTime?>]: The start date to pull data from.
  [TimePeriodTo <DateTime?>]: The end date to pull data to.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.cost/new-azcostview
#>
function New-AzCostView {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IView])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Alias('ViewName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Path')]
    [System.String]
    # View name
    ${Name},

    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Path')]
    [System.String]
    # The scope associated with view operations.
    # This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for External Billing Account scope and 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External Subscription scope.
    ${Scope},

    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.ICostIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IView]
    # States and configurations of Cost Analysis.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AccumulatedType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.AccumulatedType]
    # Show costs accumulated over time.
    ${Accumulated},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ChartType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ChartType]
    # Chart type of the main view in Cost Analysis.
    # Required.
    ${Chart},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String]
    # User input name of the view.
    # Required.
    ${DisplayName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String]
    # eTag of the resource.
    # To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
    ${ETag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IKpiProperties[]]
    # List of KPIs to show in Cost Analysis UI.
    # To construct, see NOTES section for KPI properties and create a hash table.
    ${Kpi},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.MetricType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.MetricType]
    # Metric to use when displaying costs.
    ${Metric},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IPivotProperties[]]
    # Configuration of 3 sub-views in the Cost Analysis UI.
    # To construct, see NOTES section for PIVOT properties and create a hash table.
    ${Pivot},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IReportConfigDefinition]
    # Query body configuration.
    # Required.
    # To construct, see NOTES section for QUERY properties and create a hash table.
    ${Query},

    [Parameter(ParameterSetName='CreateExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String]
    # Cost Management scope to save the view on.
    # This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.
    ${PropertiesScope},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Cost.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Create1 = 'Az.Cost.private\New-AzCostView_Create1';
            CreateExpanded = 'Az.Cost.private\New-AzCostView_CreateExpanded';
            CreateExpanded1 = 'Az.Cost.private\New-AzCostView_CreateExpanded1';
            CreateViaIdentity1 = 'Az.Cost.private\New-AzCostView_CreateViaIdentity1';
            CreateViaIdentityExpanded1 = 'Az.Cost.private\New-AzCostView_CreateViaIdentityExpanded1';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Cost.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
