
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Lists the forecast charges for scope defined.
.Description
Lists the forecast charges for scope defined.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IForecastDefinition
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.ICostIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IQueryResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

FILTERAND <IQueryFilter[]>: The logical "AND" expression. Must have at least 2 items.
  [And <IQueryFilter[]>]: The logical "AND" expression. Must have at least 2 items.
  [DimensionName <String>]: The name of the column to use in comparison.
  [DimensionValue <String[]>]: Array of values to use for comparison
  [Or <IQueryFilter[]>]: The logical "OR" expression. Must have at least 2 items.
  [TagName <String>]: The name of the column to use in comparison.
  [TagValue <String[]>]: Array of values to use for comparison

FILTEROR <IQueryFilter[]>: The logical "OR" expression. Must have at least 2 items.
  [And <IQueryFilter[]>]: The logical "AND" expression. Must have at least 2 items.
  [DimensionName <String>]: The name of the column to use in comparison.
  [DimensionValue <String[]>]: Array of values to use for comparison
  [Or <IQueryFilter[]>]: The logical "OR" expression. Must have at least 2 items.
  [TagName <String>]: The name of the column to use in comparison.
  [TagValue <String[]>]: Array of values to use for comparison

INPUTOBJECT <ICostIdentity>: Identity Parameter
  [AlertId <String>]: Alert ID
  [BillingAccountId <String>]: Enrollment ID (Legacy BillingAccount ID)
  [BillingProfileId <String>]: BillingProfile ID
  [ExportName <String>]: Export Name.
  [ExternalCloudProviderId <String>]: This can be '{externalSubscriptionId}' for linked account or '{externalBillingAccountId}' for consolidated account used with dimension/query operations.
  [ExternalCloudProviderType <ExternalCloudProviderType?>]: The external cloud provider type associated with dimension/query operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts' for consolidated account.
  [Id <String>]: Resource identity path
  [OperationId <String>]: The target operation Id.
  [Scope <String>]: The scope associated with export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.
  [ViewName <String>]: View name

PARAMETER <IForecastDefinition>: The definition of a forecast.
  Timeframe <ForecastTimeframeType>: The time frame for pulling data for the forecast. If custom, then a specific time period must be provided.
  Type <ForecastType>: The type of the forecast.
  [ConfigurationColumn <String[]>]: Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
  [DatasetAggregation <IForecastDatasetAggregation>]: Dictionary of aggregation expression to use in the forecast. The key of each item in the dictionary is the alias for the aggregated column. forecast can have up to 2 aggregation clauses.
    [(Any) <IQueryAggregation>]: This indicates any property can be added to this object.
  [DatasetGranularity <GranularityType?>]: The granularity of rows in the forecast.
  [DimensionName <String>]: The name of the column to use in comparison.
  [DimensionValue <String[]>]: Array of values to use for comparison
  [FilterAnd <IQueryFilter[]>]: The logical "AND" expression. Must have at least 2 items.
    [And <IQueryFilter[]>]: The logical "AND" expression. Must have at least 2 items.
    [DimensionName <String>]: The name of the column to use in comparison.
    [DimensionValue <String[]>]: Array of values to use for comparison
    [Or <IQueryFilter[]>]: The logical "OR" expression. Must have at least 2 items.
    [TagName <String>]: The name of the column to use in comparison.
    [TagValue <String[]>]: Array of values to use for comparison
  [FilterOr <IQueryFilter[]>]: The logical "OR" expression. Must have at least 2 items.
  [IncludeActualCost <Boolean?>]: a boolean determining if actualCost will be included
  [IncludeFreshPartialCost <Boolean?>]: a boolean determining if FreshPartialCost will be included
  [TagName <String>]: The name of the column to use in comparison.
  [TagValue <String[]>]: Array of values to use for comparison
  [TimePeriodFrom <DateTime?>]: The start date to pull data from.
  [TimePeriodTo <DateTime?>]: The end date to pull data to.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.cost/invoke-azcostusageforecast
#>
function Invoke-AzCostUsageForecast {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IQueryResult])]
[CmdletBinding(DefaultParameterSetName='UsageExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Usage', Mandatory)]
    [Parameter(ParameterSetName='UsageExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Path')]
    [System.String]
    # The scope associated with forecast operations.
    # This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.
    ${Scope},

    [Parameter(ParameterSetName='UsageViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.ICostIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Query')]
    [System.String]
    # May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or properties/grain.
    # The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'.
    # It does not currently support 'ne', 'or', or 'not'.
    ${Filter},

    [Parameter(ParameterSetName='Usage', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UsageViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IForecastDefinition]
    # The definition of a forecast.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='UsageExpanded', Mandatory)]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded', Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ForecastTimeframeType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ForecastTimeframeType]
    # The time frame for pulling data for the forecast.
    # If custom, then a specific time period must be provided.
    ${Timeframe},

    [Parameter(ParameterSetName='UsageExpanded', Mandatory)]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded', Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ForecastType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ForecastType]
    # The type of the forecast.
    ${Type},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String[]]
    # Array of column names to be included in the query.
    # Any valid query column name is allowed.
    # If not provided, then query includes all columns.
    ${ConfigurationColumn},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IForecastDatasetAggregation]))]
    [System.Collections.Hashtable]
    # Dictionary of aggregation expression to use in the forecast.
    # The key of each item in the dictionary is the alias for the aggregated column.
    # forecast can have up to 2 aggregation clauses.
    ${DatasetAggregation},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.GranularityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.GranularityType]
    # The granularity of rows in the forecast.
    ${DatasetGranularity},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String]
    # The name of the column to use in comparison.
    ${DimensionName},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String[]]
    # Array of values to use for comparison
    ${DimensionValue},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IQueryFilter[]]
    # The logical "AND" expression.
    # Must have at least 2 items.
    # To construct, see NOTES section for FILTERAND properties and create a hash table.
    ${FilterAnd},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20211001.IQueryFilter[]]
    # The logical "OR" expression.
    # Must have at least 2 items.
    # To construct, see NOTES section for FILTEROR properties and create a hash table.
    ${FilterOr},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # a boolean determining if actualCost will be included
    ${IncludeActualCost},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # a boolean determining if FreshPartialCost will be included
    ${IncludeFreshPartialCost},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String]
    # The name of the column to use in comparison.
    ${TagName},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.String[]]
    # Array of values to use for comparison
    ${TagValue},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.DateTime]
    # The start date to pull data from.
    ${TimePeriodFrom},

    [Parameter(ParameterSetName='UsageExpanded')]
    [Parameter(ParameterSetName='UsageViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Body')]
    [System.DateTime]
    # The end date to pull data to.
    ${TimePeriodTo},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cost.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Cost.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Usage = 'Az.Cost.private\Invoke-AzCostUsageForecast_Usage';
            UsageExpanded = 'Az.Cost.private\Invoke-AzCostUsageForecast_UsageExpanded';
            UsageViaIdentity = 'Az.Cost.private\Invoke-AzCostUsageForecast_UsageViaIdentity';
            UsageViaIdentityExpanded = 'Az.Cost.private\Invoke-AzCostUsageForecast_UsageViaIdentityExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Cost.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
