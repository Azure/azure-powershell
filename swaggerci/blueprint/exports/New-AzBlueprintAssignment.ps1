
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update a blueprint assignment.
.Description
Create or update a blueprint assignment.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Models.Api20181101Preview.IAssignment
.Link
https://docs.microsoft.com/en-us/powershell/module/az.blueprint/new-azblueprintassignment
#>
function New-AzBlueprintAssignment {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Models.Api20181101Preview.IAssignment])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('AssignmentName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Path')]
    [System.String]
    # Name of the blueprint assignment.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Path')]
    [System.String]
    # The scope of the resource.
    # Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').
    ${ResourceScope},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Support.ManagedServiceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Support.ManagedServiceIdentityType]
    # Type of the managed identity.
    ${IdentityType},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # The location of this blueprint assignment.
    ${Location},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Runtime.Info(Required, PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Models.Api20181101Preview.IAssignmentPropertiesParameters]))]
    [System.Collections.Hashtable]
    # Blueprint assignment parameter values.
    ${Parameter},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Runtime.Info(Required, PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Models.Api20181101Preview.IAssignmentPropertiesResourceGroups]))]
    [System.Collections.Hashtable]
    # Names and locations of resource group placeholders.
    ${ResourceGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # ID of the published version of a blueprint definition.
    ${BlueprintId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # Multi-line explain this resource.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # One-liner string explain this resource.
    ${DisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # Azure Active Directory principal ID associated with this Identity.
    ${IdentityPrincipalId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # ID of the Azure Active Directory.
    ${IdentityTenantId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Models.Api20181101Preview.IManagedServiceIdentityUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The list of user-assigned managed identities associated with the resource.
    # Key is the Azure resource Id of the managed identity.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String[]]
    # List
    # of
    # management
    # operations
    # that
    # are
    # excluded
    # from
    # blueprint
    # locks.
    # Up
    # to
    # 200
    # actions
    # are
    # permitted.
    # If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'.
    # If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'.
    # Duplicate actions will get removed.
    ${LockExcludedAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String[]]
    # List of AAD principals excluded from blueprint locks.
    # Up to 5 principals are permitted.
    ${LockExcludedPrincipal},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Support.AssignmentLockMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Support.AssignmentLockMode]
    # Lock mode.
    ${LockMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Body')]
    [System.String]
    # The target subscription scope of the blueprint assignment (format: '/subscriptions/{subscriptionId}').
    # For management group level assignments, the property is required.
    ${Scope},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Blueprint.private\New-AzBlueprintAssignment_CreateExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Blueprint.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
