// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Extensions;

    /// <summary>Response to get user settings</summary>
    public partial class UserSettingsResponse :
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponse,
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponseInternal,
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.IAny" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.IAny __any = new Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Any();

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserProperties Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponseInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.UserProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for StorageProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IStorageProfile Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponseInternal.StorageProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfile = value; }

        /// <summary>Internal Acessors for TerminalSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.ITerminalSettings Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponseInternal.TerminalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).TerminalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).TerminalSetting = value; }

        /// <summary>The preferred location of the cloud shell.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public string PreferredLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).PreferredLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).PreferredLocation = value ; }

        /// <summary>
        /// The operating system type of the cloud shell. Deprecated, use preferredShellType.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.OSType PreferredOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).PreferredOSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).PreferredOSType = value ; }

        /// <summary>The shell type of the cloud shell.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.ShellType PreferredShellType { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).PreferredShellType; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).PreferredShellType = value ; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserProperties _property;

        /// <summary>The cloud shell user settings properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.UserProperties()); set => this._property = value; }

        /// <summary>Size of file share</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public int? StorageProfileDiskSizeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfileDiskSizeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfileDiskSizeInGb = value ?? default(int); }

        /// <summary>
        /// Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public string StorageProfileFileShareName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfileFileShareName; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfileFileShareName = value ?? null; }

        /// <summary>Full resource ID of storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public string StorageProfileStorageAccountResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfileStorageAccountResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).StorageProfileStorageAccountResourceId = value ?? null; }

        /// <summary>Size of terminal font.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize? TerminalSettingFontSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).TerminalSettingFontSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).TerminalSettingFontSize = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize)""); }

        /// <summary>Style of terminal font.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle? TerminalSettingFontStyle { get => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).TerminalSettingFontStyle; set => ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserPropertiesInternal)Property).TerminalSettingFontStyle = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle)""); }

        /// <summary>Backing field for <see cref="XmsConsolePreviewUser" /> property.</summary>
        private bool? _xmsConsolePreviewUser;

        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Owned)]
        public bool? XmsConsolePreviewUser { get => this._xmsConsolePreviewUser; set => this._xmsConsolePreviewUser = value; }

        /// <summary>Backing field for <see cref="XmsConsoleRequiredLocationCode" /> property.</summary>
        private string _xmsConsoleRequiredLocationCode;

        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Origin(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.PropertyOrigin.Owned)]
        public string XmsConsoleRequiredLocationCode { get => this._xmsConsoleRequiredLocationCode; set => this._xmsConsoleRequiredLocationCode = value; }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("x-ms-console-required-location-code", out var __xMSConsoleRequiredLocationCodeHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponseInternal)this).XmsConsoleRequiredLocationCode = System.Linq.Enumerable.FirstOrDefault(__xMSConsoleRequiredLocationCodeHeader0) is string __headerXMSConsoleRequiredLocationCodeHeader0 ? __headerXMSConsoleRequiredLocationCodeHeader0 : (string)null;
            }
            if (headers.TryGetValues("x-ms-console-preview-user", out var __xMSConsolePreviewUserHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponseInternal)this).XmsConsolePreviewUser = System.Linq.Enumerable.FirstOrDefault(__xMSConsolePreviewUserHeader1) is string __headerXMSConsolePreviewUserHeader1 ? bool.TryParse( __headerXMSConsolePreviewUserHeader1, out bool __headerXMSConsolePreviewUserHeader1Value ) ? __headerXMSConsolePreviewUserHeader1Value : default(bool?) : default(bool?);
            }
        }

        /// <summary>Creates an new <see cref="UserSettingsResponse" /> instance.</summary>
        public UserSettingsResponse()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__any), __any);
            await eventListener.AssertObjectIsValid(nameof(__any), __any);
        }
    }
    /// Response to get user settings
    public partial interface IUserSettingsResponse :
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.IAny
    {
        /// <summary>The preferred location of the cloud shell.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The preferred location of the cloud shell.",
        SerializedName = @"preferredLocation",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredLocation { get; set; }
        /// <summary>
        /// The operating system type of the cloud shell. Deprecated, use preferredShellType.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The operating system type of the cloud shell. Deprecated, use preferredShellType.",
        SerializedName = @"preferredOsType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.OSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.OSType PreferredOSType { get; set; }
        /// <summary>The shell type of the cloud shell.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The shell type of the cloud shell.",
        SerializedName = @"preferredShellType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.ShellType) })]
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.ShellType PreferredShellType { get; set; }
        /// <summary>Size of file share</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Size of file share",
        SerializedName = @"diskSizeInGB",
        PossibleTypes = new [] { typeof(int) })]
        int? StorageProfileDiskSizeInGb { get; set; }
        /// <summary>
        /// Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -",
        SerializedName = @"fileShareName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageProfileFileShareName { get; set; }
        /// <summary>Full resource ID of storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Full resource ID of storage account.",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageProfileStorageAccountResourceId { get; set; }
        /// <summary>Size of terminal font.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Size of terminal font.",
        SerializedName = @"fontSize",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize) })]
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize? TerminalSettingFontSize { get; set; }
        /// <summary>Style of terminal font.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Style of terminal font.",
        SerializedName = @"fontStyle",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle) })]
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle? TerminalSettingFontStyle { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"x-ms-console-preview-user",
        PossibleTypes = new [] { typeof(bool) })]
        bool? XmsConsolePreviewUser { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"x-ms-console-required-location-code",
        PossibleTypes = new [] { typeof(string) })]
        string XmsConsoleRequiredLocationCode { get; set; }

    }
    /// Response to get user settings
    internal partial interface IUserSettingsResponseInternal :
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.IAnyInternal
    {
        /// <summary>The preferred location of the cloud shell.</summary>
        string PreferredLocation { get; set; }
        /// <summary>
        /// The operating system type of the cloud shell. Deprecated, use preferredShellType.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.OSType PreferredOSType { get; set; }
        /// <summary>The shell type of the cloud shell.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.ShellType PreferredShellType { get; set; }
        /// <summary>The cloud shell user settings properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserProperties Property { get; set; }
        /// <summary>The storage profile of the user settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IStorageProfile StorageProfile { get; set; }
        /// <summary>Size of file share</summary>
        int? StorageProfileDiskSizeInGb { get; set; }
        /// <summary>
        /// Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
        /// </summary>
        string StorageProfileFileShareName { get; set; }
        /// <summary>Full resource ID of storage account.</summary>
        string StorageProfileStorageAccountResourceId { get; set; }
        /// <summary>Settings for terminal appearance.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.ITerminalSettings TerminalSetting { get; set; }
        /// <summary>Size of terminal font.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize? TerminalSettingFontSize { get; set; }
        /// <summary>Style of terminal font.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle? TerminalSettingFontStyle { get; set; }

        bool? XmsConsolePreviewUser { get; set; }

        string XmsConsoleRequiredLocationCode { get; set; }

    }
}