
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Patch cloud shell settings for current signed in user
.Description
Patch cloud shell settings for current signed in user
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.ICloudShellPatchUserSettings
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.ICloudShellIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ICloudShellIdentity>: Identity Parameter
  [ConsoleName <String>]: The name of the console
  [Id <String>]: Resource identity path
  [Location <String>]: The provider location
  [UserSettingsName <String>]: The name of the user settings

PARAMETER <ICloudShellPatchUserSettings>: Cloud shell patch operation user settings.
  [PreferredLocation <String>]: The preferred location of the cloud shell.
  [PreferredOSType <OSType?>]: The operating system type of the cloud shell. Deprecated, use preferredShellType.
  [PreferredShellType <ShellType?>]: The shell type of the cloud shell.
  [StorageProfileDiskSizeInGb <Int32?>]: Size of file share
  [StorageProfileFileShareName <String>]: Name of the mounted file share. 63 characters or less, lowercase alphabet, numbers, and -
  [StorageProfileStorageAccountResourceId <String>]: Full resource ID of storage account.
  [TerminalSettingFontSize <FontSize?>]: Size of terminal font.
  [TerminalSettingFontStyle <FontStyle?>]: Style of terminal font.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.cloudshell/update-azcloudshellusersetting
#>
function Update-AzCloudShellUserSetting {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.IUserSettingsResponse])]
[CmdletBinding(DefaultParameterSetName='PatchExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Patch', Mandatory)]
    [Parameter(ParameterSetName='PatchExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Path')]
    [System.String]
    # The provider location
    ${Location},

    [Parameter(ParameterSetName='Patch', Mandatory)]
    [Parameter(ParameterSetName='Patch1', Mandatory)]
    [Parameter(ParameterSetName='PatchExpanded', Mandatory)]
    [Parameter(ParameterSetName='PatchExpanded1', Mandatory)]
    [Alias('UserSettingsName')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Path')]
    [System.String]
    # The name of the user settings
    ${SName},

    [Parameter(ParameterSetName='PatchViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.ICloudShellIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Patch', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Patch1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Models.Api20181001.ICloudShellPatchUserSettings]
    # Cloud shell patch operation user settings.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [System.String]
    # The preferred location of the cloud shell.
    ${PreferredLocation},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.OSType])]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.OSType]
    # The operating system type of the cloud shell.
    # Deprecated, use preferredShellType.
    ${PreferredOSType},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.ShellType])]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.ShellType]
    # The shell type of the cloud shell.
    ${PreferredShellType},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [System.Int32]
    # Size of file share
    ${StorageProfileDiskSizeInGb},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [System.String]
    # Name of the mounted file share.
    # 63 characters or less, lowercase alphabet, numbers, and -
    ${StorageProfileFileShareName},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [System.String]
    # Full resource ID of storage account.
    ${StorageProfileStorageAccountResourceId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize])]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontSize]
    # Size of terminal font.
    ${TerminalSettingFontSize},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchExpanded1')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded1')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle])]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Support.FontStyle]
    # Style of terminal font.
    ${TerminalSettingFontStyle},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Patch = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_Patch';
            Patch1 = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_Patch1';
            PatchExpanded = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_PatchExpanded';
            PatchExpanded1 = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_PatchExpanded1';
            PatchViaIdentity = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_PatchViaIdentity';
            PatchViaIdentity1 = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_PatchViaIdentity1';
            PatchViaIdentityExpanded = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_PatchViaIdentityExpanded';
            PatchViaIdentityExpanded1 = 'Az.CloudShell.private\Update-AzCloudShellUserSetting_PatchViaIdentityExpanded1';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CloudShell.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
