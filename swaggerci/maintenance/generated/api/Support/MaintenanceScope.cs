// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support
{

    /// <summary>Gets or sets maintenanceScope of the configuration</summary>
    public partial struct MaintenanceScope :
        System.IEquatable<MaintenanceScope>
    {
        /// <summary>This maintenance scope controls extension installation on VM/VMSS</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope Extension = @"Extension";

        /// <summary>
        /// This maintenance scope controls installation of azure platform updates i.e. services on physical nodes hosting customer
        /// VMs.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope Host = @"Host";

        /// <summary>
        /// This maintenance scope controls installation of windows and linux packages on VM/VMSS
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope InGuestPatch = @"InGuestPatch";

        /// <summary>This maintenance scope controls os image installation on VM/VMSS</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope OSImage = @"OSImage";

        /// <summary>
        /// This maintenance scope controls installation of SQL managed instance platform update.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope SqlManagedInstance = @"SQLManagedInstance";

        /// <summary>This maintenance scope controls installation of SQL server platform updates.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope Sqldb = @"SQLDB";

        /// <summary>the value for an instance of the <see cref="MaintenanceScope" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to MaintenanceScope</summary>
        /// <param name="value">the value to convert to an instance of <see cref="MaintenanceScope" />.</param>
        internal static object CreateFrom(object value)
        {
            return new MaintenanceScope(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type MaintenanceScope</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type MaintenanceScope (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is MaintenanceScope && Equals((MaintenanceScope)obj);
        }

        /// <summary>Returns hashCode for enum MaintenanceScope</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="MaintenanceScope"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private MaintenanceScope(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for MaintenanceScope</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to MaintenanceScope</summary>
        /// <param name="value">the value to convert to an instance of <see cref="MaintenanceScope" />.</param>

        public static implicit operator MaintenanceScope(string value)
        {
            return new MaintenanceScope(value);
        }

        /// <summary>Implicit operator to convert MaintenanceScope to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="MaintenanceScope" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum MaintenanceScope</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope e1, Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum MaintenanceScope</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope e1, Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope e2)
        {
            return e2.Equals(e1);
        }
    }
}