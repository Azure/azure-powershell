// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Extensions;

    /// <summary>Properties for maintenance configuration</summary>
    public partial class MaintenanceConfigurationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ExtensionProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties _extensionProperty;

        /// <summary>Gets or sets extensionProperties of the maintenanceConfiguration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties ExtensionProperty { get => (this._extensionProperty = this._extensionProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.MaintenanceConfigurationPropertiesExtensionProperties()); set => this._extensionProperty = value; }

        /// <summary>Backing field for <see cref="InstallPatch" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfiguration _installPatch;

        /// <summary>The input parameters to be passed to the patch run operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfiguration InstallPatch { get => (this._installPatch = this._installPatch ?? new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.InputPatchConfiguration()); set => this._installPatch = value; }

        /// <summary>
        /// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after
        /// the patch operation is completed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions? InstallPatchRebootSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).RebootSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).RebootSetting = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions)""); }

        /// <summary>Classification category of patches to be patched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string[] LinuxParameterClassificationsToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameterClassificationsToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameterClassificationsToInclude = value ?? null /* arrayOf */; }

        /// <summary>Package names to be excluded for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string[] LinuxParameterPackageNameMasksToExclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameterPackageNameMasksToExclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameterPackageNameMasksToExclude = value ?? null /* arrayOf */; }

        /// <summary>Package names to be included for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string[] LinuxParameterPackageNameMasksToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameterPackageNameMasksToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameterPackageNameMasksToInclude = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="MaintenanceScope" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope? _maintenanceScope;

        /// <summary>Gets or sets maintenanceScope of the configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope? MaintenanceScope { get => this._maintenanceScope; set => this._maintenanceScope = value; }

        /// <summary>Backing field for <see cref="MaintenanceWindow" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindow _maintenanceWindow;

        /// <summary>Definition of a MaintenanceWindow</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindow MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.MaintenanceWindow()); set => this._maintenanceWindow = value; }

        /// <summary>
        /// Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope
        /// provided. Example: 05:00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string MaintenanceWindowDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).Duration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).Duration = value ?? null; }

        /// <summary>
        /// Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date.
        /// If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string MaintenanceWindowExpirationDateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).ExpirationDateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).ExpirationDateTime = value ?? null; }

        /// <summary>
        /// Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        /// Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default
        /// frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days. Weekly schedule are formatted as recurEvery:
        /// [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples
        /// are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)']
        /// [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth,
        /// Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly
        /// schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday,
        /// recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string MaintenanceWindowRecurEvery { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).RecurEvery; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).RecurEvery = value ?? null; }

        /// <summary>
        /// Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current
        /// date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to
        /// that time zone.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string MaintenanceWindowStartDateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).StartDateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).StartDateTime = value ?? null; }

        /// <summary>
        /// Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string MaintenanceWindowTimeZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).TimeZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindowInternal)MaintenanceWindow).TimeZone = value ?? null; }

        /// <summary>Internal Acessors for InstallPatch</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfiguration Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesInternal.InstallPatch { get => (this._installPatch = this._installPatch ?? new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.InputPatchConfiguration()); set { {_installPatch = value;} } }

        /// <summary>Internal Acessors for InstallPatchLinuxParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputLinuxParameters Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesInternal.InstallPatchLinuxParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).LinuxParameter = value; }

        /// <summary>Internal Acessors for InstallPatchTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ISoftwareUpdateConfigurationTasks Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesInternal.InstallPatchTask { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).Task; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).Task = value; }

        /// <summary>Internal Acessors for InstallPatchWindowsParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputWindowsParameters Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesInternal.InstallPatchWindowsParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowsParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowsParameter = value; }

        /// <summary>Internal Acessors for MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindow Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesInternal.MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.MaintenanceWindow()); set { {_maintenanceWindow = value;} } }

        /// <summary>Backing field for <see cref="Namespace" /> property.</summary>
        private string _namespace;

        /// <summary>Gets or sets namespace of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Owned)]
        public string Namespace { get => this._namespace; set => this._namespace = value; }

        /// <summary>
        /// List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPostTask { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).TaskPostTask; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).TaskPostTask = value ?? null /* arrayOf */; }

        /// <summary>
        /// List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPreTask { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).TaskPreTask; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).TaskPreTask = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Visibility" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility? _visibility;

        /// <summary>Gets or sets the visibility of the configuration. The default value is 'Custom'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility? Visibility { get => this._visibility; set => this._visibility = value; }

        /// <summary>Classification category of patches to be patched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string[] WindowParameterClassificationsToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterClassificationsToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterClassificationsToInclude = value ?? null /* arrayOf */; }

        /// <summary>Exclude patches which need reboot</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public bool? WindowParameterExcludeKbsRequiringReboot { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterExcludeKbsRequiringReboot; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterExcludeKbsRequiringReboot = value ?? default(bool); }

        /// <summary>Windows KBID to be excluded for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string[] WindowParameterKbNumbersToExclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterKbNumbersToExclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterKbNumbersToExclude = value ?? null /* arrayOf */; }

        /// <summary>Windows KBID to be included for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.PropertyOrigin.Inlined)]
        public string[] WindowParameterKbNumbersToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterKbNumbersToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfigurationInternal)InstallPatch).WindowParameterKbNumbersToInclude = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="MaintenanceConfigurationProperties" /> instance.</summary>
        public MaintenanceConfigurationProperties()
        {

        }
    }
    /// Properties for maintenance configuration
    public partial interface IMaintenanceConfigurationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IJsonSerializable
    {
        /// <summary>Gets or sets extensionProperties of the maintenanceConfiguration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets extensionProperties of the maintenanceConfiguration",
        SerializedName = @"extensionProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties ExtensionProperty { get; set; }
        /// <summary>
        /// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after
        /// the patch operation is completed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.",
        SerializedName = @"rebootSetting",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions? InstallPatchRebootSetting { get; set; }
        /// <summary>Classification category of patches to be patched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Classification category of patches to be patched",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        string[] LinuxParameterClassificationsToInclude { get; set; }
        /// <summary>Package names to be excluded for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Package names to be excluded for patching.",
        SerializedName = @"packageNameMasksToExclude",
        PossibleTypes = new [] { typeof(string) })]
        string[] LinuxParameterPackageNameMasksToExclude { get; set; }
        /// <summary>Package names to be included for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Package names to be included for patching.",
        SerializedName = @"packageNameMasksToInclude",
        PossibleTypes = new [] { typeof(string) })]
        string[] LinuxParameterPackageNameMasksToInclude { get; set; }
        /// <summary>Gets or sets maintenanceScope of the configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets maintenanceScope of the configuration",
        SerializedName = @"maintenanceScope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope? MaintenanceScope { get; set; }
        /// <summary>
        /// Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope
        /// provided. Example: 05:00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowDuration { get; set; }
        /// <summary>
        /// Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date.
        /// If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.",
        SerializedName = @"expirationDateTime",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowExpirationDateTime { get; set; }
        /// <summary>
        /// Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        /// Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default
        /// frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days. Weekly schedule are formatted as recurEvery:
        /// [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples
        /// are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)']
        /// [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth,
        /// Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly
        /// schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday,
        /// recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.",
        SerializedName = @"recurEvery",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowRecurEvery { get; set; }
        /// <summary>
        /// Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current
        /// date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to
        /// that time zone.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.",
        SerializedName = @"startDateTime",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowStartDateTime { get; set; }
        /// <summary>
        /// Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowTimeZone { get; set; }
        /// <summary>Gets or sets namespace of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets namespace of the resource",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string Namespace { get; set; }
        /// <summary>
        /// List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]",
        SerializedName = @"postTasks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPostTask { get; set; }
        /// <summary>
        /// List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]",
        SerializedName = @"preTasks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPreTask { get; set; }
        /// <summary>Gets or sets the visibility of the configuration. The default value is 'Custom'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the visibility of the configuration. The default value is 'Custom'",
        SerializedName = @"visibility",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility? Visibility { get; set; }
        /// <summary>Classification category of patches to be patched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Classification category of patches to be patched",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowParameterClassificationsToInclude { get; set; }
        /// <summary>Exclude patches which need reboot</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Exclude patches which need reboot",
        SerializedName = @"excludeKbsRequiringReboot",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowParameterExcludeKbsRequiringReboot { get; set; }
        /// <summary>Windows KBID to be excluded for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Windows KBID to be excluded for patching.",
        SerializedName = @"kbNumbersToExclude",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowParameterKbNumbersToExclude { get; set; }
        /// <summary>Windows KBID to be included for patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Windows KBID to be included for patching.",
        SerializedName = @"kbNumbersToInclude",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowParameterKbNumbersToInclude { get; set; }

    }
    /// Properties for maintenance configuration
    internal partial interface IMaintenanceConfigurationPropertiesInternal

    {
        /// <summary>Gets or sets extensionProperties of the maintenanceConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties ExtensionProperty { get; set; }
        /// <summary>The input parameters to be passed to the patch run operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputPatchConfiguration InstallPatch { get; set; }
        /// <summary>
        /// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputLinuxParameters InstallPatchLinuxParameter { get; set; }
        /// <summary>
        /// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after
        /// the patch operation is completed.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions? InstallPatchRebootSetting { get; set; }
        /// <summary>Tasks information for the Software update configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ISoftwareUpdateConfigurationTasks InstallPatchTask { get; set; }
        /// <summary>
        /// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IInputWindowsParameters InstallPatchWindowsParameter { get; set; }
        /// <summary>Classification category of patches to be patched</summary>
        string[] LinuxParameterClassificationsToInclude { get; set; }
        /// <summary>Package names to be excluded for patching.</summary>
        string[] LinuxParameterPackageNameMasksToExclude { get; set; }
        /// <summary>Package names to be included for patching.</summary>
        string[] LinuxParameterPackageNameMasksToInclude { get; set; }
        /// <summary>Gets or sets maintenanceScope of the configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope? MaintenanceScope { get; set; }
        /// <summary>Definition of a MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary>
        /// Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope
        /// provided. Example: 05:00.
        /// </summary>
        string MaintenanceWindowDuration { get; set; }
        /// <summary>
        /// Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date.
        /// If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
        /// </summary>
        string MaintenanceWindowExpirationDateTime { get; set; }
        /// <summary>
        /// Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        /// Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default
        /// frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days. Weekly schedule are formatted as recurEvery:
        /// [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples
        /// are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)']
        /// [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth,
        /// Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly
        /// schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday,
        /// recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.
        /// </summary>
        string MaintenanceWindowRecurEvery { get; set; }
        /// <summary>
        /// Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current
        /// date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to
        /// that time zone.
        /// </summary>
        string MaintenanceWindowStartDateTime { get; set; }
        /// <summary>
        /// Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.
        /// </summary>
        string MaintenanceWindowTimeZone { get; set; }
        /// <summary>Gets or sets namespace of the resource</summary>
        string Namespace { get; set; }
        /// <summary>
        /// List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPostTask { get; set; }
        /// <summary>
        /// List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPreTask { get; set; }
        /// <summary>Gets or sets the visibility of the configuration. The default value is 'Custom'</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility? Visibility { get; set; }
        /// <summary>Classification category of patches to be patched</summary>
        string[] WindowParameterClassificationsToInclude { get; set; }
        /// <summary>Exclude patches which need reboot</summary>
        bool? WindowParameterExcludeKbsRequiringReboot { get; set; }
        /// <summary>Windows KBID to be excluded for patching.</summary>
        string[] WindowParameterKbNumbersToExclude { get; set; }
        /// <summary>Windows KBID to be included for patching.</summary>
        string[] WindowParameterKbNumbersToInclude { get; set; }

    }
}