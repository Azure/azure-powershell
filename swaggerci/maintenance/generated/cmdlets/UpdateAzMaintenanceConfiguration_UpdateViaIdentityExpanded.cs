// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Extensions;
    using System;

    /// <summary>Patch configuration record</summary>
    /// <remarks>
    /// [OpenAPI] Update=>PATCH:"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzMaintenanceConfiguration_UpdateViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Description(@"Patch configuration record")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Generated]
    public partial class UpdateAzMaintenanceConfiguration_UpdateViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Maintenance configuration record type</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration _configurationBody = new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.MaintenanceConfiguration();

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.MaintenanceManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Module.Instance.ClientAPI;

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Gets or sets extensionProperties of the maintenanceConfiguration</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets extensionProperties of the maintenanceConfiguration")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets extensionProperties of the maintenanceConfiguration",
        SerializedName = @"extensionProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties ExtensionProperty { get => _configurationBody.ExtensionProperty ?? null /* object */; set => _configurationBody.ExtensionProperty = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.IMaintenanceIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.IMaintenanceIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>
        /// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after
        /// the patch operation is completed.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.",
        SerializedName = @"rebootSetting",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions InstallPatchRebootSetting { get => _configurationBody.InstallPatchRebootSetting ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions)""); set => _configurationBody.InstallPatchRebootSetting = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Classification category of patches to be patched</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Classification category of patches to be patched")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Classification category of patches to be patched",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        public string[] LinuxParameterClassificationsToInclude { get => _configurationBody.LinuxParameterClassificationsToInclude ?? null /* arrayOf */; set => _configurationBody.LinuxParameterClassificationsToInclude = value; }

        /// <summary>Package names to be excluded for patching.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Package names to be excluded for patching.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Package names to be excluded for patching.",
        SerializedName = @"packageNameMasksToExclude",
        PossibleTypes = new [] { typeof(string) })]
        public string[] LinuxParameterPackageNameMasksToExclude { get => _configurationBody.LinuxParameterPackageNameMasksToExclude ?? null /* arrayOf */; set => _configurationBody.LinuxParameterPackageNameMasksToExclude = value; }

        /// <summary>Package names to be included for patching.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Package names to be included for patching.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Package names to be included for patching.",
        SerializedName = @"packageNameMasksToInclude",
        PossibleTypes = new [] { typeof(string) })]
        public string[] LinuxParameterPackageNameMasksToInclude { get => _configurationBody.LinuxParameterPackageNameMasksToInclude ?? null /* arrayOf */; set => _configurationBody.LinuxParameterPackageNameMasksToInclude = value; }

        /// <summary>Gets or sets location of the resource</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets location of the resource")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets location of the resource",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _configurationBody.Location ?? null; set => _configurationBody.Location = value; }

        /// <summary>Gets or sets maintenanceScope of the configuration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets maintenanceScope of the configuration")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets maintenanceScope of the configuration",
        SerializedName = @"maintenanceScope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope))]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope MaintenanceScope { get => _configurationBody.MaintenanceScope ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope)""); set => _configurationBody.MaintenanceScope = value; }

        /// <summary>
        /// Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope
        /// provided. Example: 05:00.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(string) })]
        public string MaintenanceWindowDuration { get => _configurationBody.MaintenanceWindowDuration ?? null; set => _configurationBody.MaintenanceWindowDuration = value; }

        /// <summary>
        /// Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date.
        /// If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.",
        SerializedName = @"expirationDateTime",
        PossibleTypes = new [] { typeof(string) })]
        public string MaintenanceWindowExpirationDateTime { get => _configurationBody.MaintenanceWindowExpirationDateTime ?? null; set => _configurationBody.MaintenanceWindowExpirationDateTime = value; }

        /// <summary>
        /// Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        /// Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default
        /// frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days. Weekly schedule are formatted as recurEvery:
        /// [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples
        /// are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)']
        /// [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth,
        /// Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly
        /// schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday,
        /// recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days. Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days. Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.",
        SerializedName = @"recurEvery",
        PossibleTypes = new [] { typeof(string) })]
        public string MaintenanceWindowRecurEvery { get => _configurationBody.MaintenanceWindowRecurEvery ?? null; set => _configurationBody.MaintenanceWindowRecurEvery = value; }

        /// <summary>
        /// Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current
        /// date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to
        /// that time zone.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.",
        SerializedName = @"startDateTime",
        PossibleTypes = new [] { typeof(string) })]
        public string MaintenanceWindowStartDateTime { get => _configurationBody.MaintenanceWindowStartDateTime ?? null; set => _configurationBody.MaintenanceWindowStartDateTime = value; }

        /// <summary>
        /// Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        public string MaintenanceWindowTimeZone { get => _configurationBody.MaintenanceWindowTimeZone ?? null; set => _configurationBody.MaintenanceWindowTimeZone = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Gets or sets namespace of the resource</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets namespace of the resource")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets namespace of the resource",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        public string Namespace { get => _configurationBody.Namespace ?? null; set => _configurationBody.Namespace = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Gets or sets tags of the resource</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets tags of the resource")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets tags of the resource",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationTags Tag { get => _configurationBody.Tag ?? null /* object */; set => _configurationBody.Tag = value; }

        /// <summary>
        /// List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]",
        SerializedName = @"postTasks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPostTask { get => _configurationBody.TaskPostTask ?? null /* arrayOf */; set => _configurationBody.TaskPostTask = value; }

        /// <summary>
        /// List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]",
        SerializedName = @"preTasks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[] TaskPreTask { get => _configurationBody.TaskPreTask ?? null /* arrayOf */; set => _configurationBody.TaskPreTask = value; }

        /// <summary>Gets or sets the visibility of the configuration. The default value is 'Custom'</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the visibility of the configuration. The default value is 'Custom'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the visibility of the configuration. The default value is 'Custom'",
        SerializedName = @"visibility",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility))]
        public Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility Visibility { get => _configurationBody.Visibility ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility)""); set => _configurationBody.Visibility = value; }

        /// <summary>Classification category of patches to be patched</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Classification category of patches to be patched")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Classification category of patches to be patched",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        public string[] WindowParameterClassificationsToInclude { get => _configurationBody.WindowParameterClassificationsToInclude ?? null /* arrayOf */; set => _configurationBody.WindowParameterClassificationsToInclude = value; }

        /// <summary>Exclude patches which need reboot</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Exclude patches which need reboot")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Exclude patches which need reboot",
        SerializedName = @"excludeKbsRequiringReboot",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter WindowParameterExcludeKbsRequiringReboot { get => _configurationBody.WindowParameterExcludeKbsRequiringReboot ?? default(global::System.Management.Automation.SwitchParameter); set => _configurationBody.WindowParameterExcludeKbsRequiringReboot = value; }

        /// <summary>Windows KBID to be excluded for patching.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Windows KBID to be excluded for patching.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Windows KBID to be excluded for patching.",
        SerializedName = @"kbNumbersToExclude",
        PossibleTypes = new [] { typeof(string) })]
        public string[] WindowParameterKbNumbersToExclude { get => _configurationBody.WindowParameterKbNumbersToExclude ?? null /* arrayOf */; set => _configurationBody.WindowParameterKbNumbersToExclude = value; }

        /// <summary>Windows KBID to be included for patching.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Windows KBID to be included for patching.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Maintenance.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Windows KBID to be included for patching.",
        SerializedName = @"kbNumbersToInclude",
        PossibleTypes = new [] { typeof(string) })]
        public string[] WindowParameterKbNumbersToInclude { get => _configurationBody.WindowParameterKbNumbersToInclude ?? null /* arrayOf */; set => _configurationBody.WindowParameterKbNumbersToInclude = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError">Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration">Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'MaintenanceConfigurationsUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.MaintenanceConfigurationsUpdateViaIdentity(InputObject.Id, _configurationBody, onOk, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.MaintenanceConfigurationsUpdate(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.ResourceName ?? null, _configurationBody, onOk, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=_configurationBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzMaintenanceConfiguration_UpdateViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzMaintenanceConfiguration_UpdateViaIdentityExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError">Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_configurationBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_configurationBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration">Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration
                WriteObject((await response));
            }
        }
    }
}