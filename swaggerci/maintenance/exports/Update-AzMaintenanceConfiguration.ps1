
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Patch configuration record
.Description
Patch configuration record
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.IMaintenanceIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IMaintenanceIdentity>: Identity Parameter
  [ApplyUpdateName <String>]: applyUpdate Id
  [ConfigurationAssignmentName <String>]: Configuration assignment name
  [Id <String>]: Resource identity path
  [ProviderName <String>]: Resource provider name
  [ResourceGroupName <String>]: Resource group name
  [ResourceName <String>]: Maintenance Configuration Name
  [ResourceParentName <String>]: Resource parent identifier
  [ResourceParentType <String>]: Resource parent type
  [ResourceType <String>]: Resource type
  [SubscriptionId <String>]: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

TASKPOSTTASK <ITaskProperties[]>: List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
  [Parameter <ITaskPropertiesParameters>]: Gets or sets the parameters of the task.
    [(Any) <String>]: This indicates any property can be added to this object.
  [Source <String>]: Gets or sets the name of the runbook.
  [TaskScope <TaskScope?>]: Global Task execute once when schedule trigger. Resource task execute for each VM.

TASKPRETASK <ITaskProperties[]>: List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
  [Parameter <ITaskPropertiesParameters>]: Gets or sets the parameters of the task.
    [(Any) <String>]: This indicates any property can be added to this object.
  [Source <String>]: Gets or sets the name of the runbook.
  [TaskScope <TaskScope?>]: Global Task execute once when schedule trigger. Resource task execute for each VM.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.maintenance/update-azmaintenanceconfiguration
#>
function Update-AzMaintenanceConfiguration {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfiguration])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Path')]
    [System.String]
    # Resource Group Name
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Path')]
    [System.String]
    # Maintenance Configuration Name
    ${ResourceName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription credentials that uniquely identify a Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.IMaintenanceIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationPropertiesExtensionProperties]))]
    [System.Collections.Hashtable]
    # Gets or sets extensionProperties of the maintenanceConfiguration
    ${ExtensionProperty},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions])]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.RebootOptions]
    # Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
    ${InstallPatchRebootSetting},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String[]]
    # Classification category of patches to be patched
    ${LinuxParameterClassificationsToInclude},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String[]]
    # Package names to be excluded for patching.
    ${LinuxParameterPackageNameMasksToExclude},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String[]]
    # Package names to be included for patching.
    ${LinuxParameterPackageNameMasksToInclude},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Gets or sets location of the resource
    ${Location},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope])]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.MaintenanceScope]
    # Gets or sets maintenanceScope of the configuration
    ${MaintenanceScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Duration of the maintenance window in HH:mm format.
    # If not provided, default value will be used based on maintenance scope provided.
    # Example: 05:00.
    ${MaintenanceWindowDuration},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.
    # The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.
    # Expiration date must be set to a future date.
    # If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
    ${MaintenanceWindowExpirationDateTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Rate at which a Maintenance window is expected to recur.
    # The rate can be expressed as daily, weekly, or monthly schedules.
    # Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)'].
    # If no frequency is provided, the default frequency is 1.
    # Daily schedule examples are recurEvery: Day, recurEvery: 3Days.
    # Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday].
    # Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday.
    # Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No.
    # of days)].
    # Offset value must be between -6 to 6 inclusive.
    # Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.
    ${MaintenanceWindowRecurEvery},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Effective start date of the maintenance window in YYYY-MM-DD hh:mm format.
    # The start date can be set to either the current date or future date.
    # The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.
    ${MaintenanceWindowStartDateTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Name of the timezone.
    # List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
    # Example: Pacific Standard Time, UTC, W.
    # Europe Standard Time, Korea Standard Time, Cen.
    # Australia Standard Time.
    ${MaintenanceWindowTimeZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String]
    # Gets or sets namespace of the resource
    ${Namespace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.IMaintenanceConfigurationTags]))]
    [System.Collections.Hashtable]
    # Gets or sets tags of the resource
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[]]
    # List of post tasks.
    # e.g.
    # [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
    # To construct, see NOTES section for TASKPOSTTASK properties and create a hash table.
    ${TaskPostTask},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Models.Api20210901Preview.ITaskProperties[]]
    # List of pre tasks.
    # e.g.
    # [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
    # To construct, see NOTES section for TASKPRETASK properties and create a hash table.
    ${TaskPreTask},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility])]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Support.Visibility]
    # Gets or sets the visibility of the configuration.
    # The default value is 'Custom'
    ${Visibility},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String[]]
    # Classification category of patches to be patched
    ${WindowParameterClassificationsToInclude},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Exclude patches which need reboot
    ${WindowParameterExcludeKbsRequiringReboot},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String[]]
    # Windows KBID to be excluded for patching.
    ${WindowParameterKbNumbersToExclude},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Body')]
    [System.String[]]
    # Windows KBID to be included for patching.
    ${WindowParameterKbNumbersToInclude},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Maintenance.private\Update-AzMaintenanceConfiguration_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Maintenance.private\Update-AzMaintenanceConfiguration_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Maintenance.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
