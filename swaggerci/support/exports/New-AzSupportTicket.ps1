
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the specified subscription.
Learn the [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.<br/><br/>Adding attachments is not currently supported via the API.
To add a file to an existing support ticket, visit the [Manage support ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest) page in the Azure portal, select the support ticket, and use the file upload control to add a new file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not supported via the API.
The Azure support engineer working on your ticket will reach out to you for consent if your issue requires gathering diagnostic information from your Azure resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
The primary token will be from the tenant for whom a support ticket is being raised against the subscription, i.e.
Cloud solution provider (CSP) customer tenant.
The auxiliary token will be from the Cloud solution provider (CSP) partner tenant.
.Description
Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the specified subscription.
Learn the [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.<br/><br/>Adding attachments is not currently supported via the API.
To add a file to an existing support ticket, visit the [Manage support ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest) page in the Azure portal, select the support ticket, and use the file upload control to add a new file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not supported via the API.
The Azure support engineer working on your ticket will reach out to you for consent if your issue requires gathering diagnostic information from your Azure resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
The primary token will be from the tenant for whom a support ticket is being raised against the subscription, i.e.
Cloud solution provider (CSP) customer tenant.
The auxiliary token will be from the Cloud solution provider (CSP) partner tenant.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Support.Models.Api20200401.ISupportTicketDetails
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

QUOTATICKETDETAILQUOTACHANGEREQUEST <IQuotaChangeRequest[]>: This property is required for providing the region and new quota limits.
  [Payload <String>]: Payload of the quota increase request.
  [Region <String>]: Region for which the quota increase request is being made.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.support/new-azsupportticket
#>
function New-AzSupportTicket {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Support.Models.Api20200401.ISupportTicketDetails])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('SupportTicketName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [System.String]
    # Support ticket name.
    ${Name},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Azure subscription Id.
    ${SubscriptionId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String[]]
    # Additional email addresses listed will be copied on any correspondence about the support ticket.
    ${ContactDetailAdditionalEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Country of the user.
    # This is the ISO 3166-1 alpha-3 code.
    ${ContactDetailCountry},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # First name.
    ${ContactDetailFirstName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Last name.
    ${ContactDetailLastName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Phone number.
    # This is required if preferred contact method is phone.
    ${ContactDetailPhoneNumber},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Support.Support.PreferredContactMethod])]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Support.PreferredContactMethod]
    # Preferred contact method.
    ${ContactDetailPreferredContactMethod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Preferred language of support from Azure.
    # Support languages vary based on the severity you choose for your support ticket.
    # Learn more at [Azure Severity and responsiveness](https://azure.microsoft.com/support/plans/response).
    # Use the standard language-country code.
    # Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.
    ${ContactDetailPreferredSupportLanguage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Time zone of the user.
    # This is the name of the time zone from [Microsoft Time Zone Index Values](https://support.microsoft.com/help/973627/microsoft-time-zone-index-values).
    ${ContactDetailPreferredTimeZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Primary email address.
    ${ContactDetailPrimaryEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Detailed description of the question or issue.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Each Azure service has its own set of issue categories, also known as problem classification.
    # This parameter is the unique Id for the type of problem you are experiencing.
    ${ProblemClassificationId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.DateTime]
    # Time in UTC (ISO 8601 format) when the problem started.
    ${ProblemStartTime},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Models.Api20200401.IQuotaChangeRequest[]]
    # This property is required for providing the region and new quota limits.
    # To construct, see NOTES section for QUOTATICKETDETAILQUOTACHANGEREQUEST properties and create a hash table.
    ${QuotaTicketDetailQuotaChangeRequest},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Required for certain quota types when there is a sub type, such as Batch, for which you are requesting a quota increase.
    ${QuotaTicketDetailQuotaChangeRequestSubType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Quota change request version.
    ${QuotaTicketDetailQuotaChangeRequestVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates if this requires a 24x7 response from Azure.
    ${Require24X7Response},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # This is the resource Id of the Azure service resource associated with the support ticket.
    ${ServiceId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Support.Support.SeverityLevel])]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Support.SeverityLevel]
    # A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure.
    # Note: 'Highest critical impact', also known as the 'Emergency - Severe impact' level in the Azure portal is reserved only for our Premium customers.
    ${Severity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # System generated support ticket Id that is unique.
    ${SupportTicketId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # This is the resource Id of the Azure service resource (For example: A virtual machine resource or an HDInsight resource) for which the support ticket is created.
    ${TechnicalTicketDetailResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Title of the support ticket.
    ${Title},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Support.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Support.private\New-AzSupportTicket_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Support.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
