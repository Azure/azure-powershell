// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>Subscription details.</summary>
    public partial class SubscriptionContract :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContract,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.Resource();

        /// <summary>Determines whether tracing is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? AllowTracing { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).AllowTracing; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).AllowTracing = value ?? default(bool); }

        /// <summary>
        /// Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO
        /// 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreatedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).CreatedDate; }

        /// <summary>The name of the subscription, or null if the subscription has no name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>
        /// Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically
        /// cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? EndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).EndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).EndDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).ExpirationDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Id; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Type = value; }

        /// <summary>Internal Acessors for CreatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractInternal.CreatedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).CreatedDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).CreatedDate = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractProperties Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.SubscriptionContractProperties()); set { {_property = value;} } }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Name; }

        /// <summary>
        /// Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? NotificationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).NotificationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).NotificationDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId}
        /// where {userId} is a user identifier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string OwnerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).OwnerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).OwnerId = value ?? null; }

        /// <summary>
        /// Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string PrimaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).PrimaryKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).PrimaryKey = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractProperties _property;

        /// <summary>Subscription contract properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.SubscriptionContractProperties()); set => this._property = value; }

        /// <summary>Scope like /products/{productId} or /apis or /apis/{apiId}.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).Scope = value ?? null; }

        /// <summary>
        /// Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string SecondaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).SecondaryKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).SecondaryKey = value ?? null; }

        /// <summary>
        /// Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? StartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).StartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).StartDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer,
        /// but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator,
        /// * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached
        /// its expiration date and was deactivated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState? State { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).State = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState)""); }

        /// <summary>
        /// Optional subscription comment added by an administrator when the state is changed to the 'rejected'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string StateComment { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).StateComment; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractPropertiesInternal)Property).StateComment = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Type; }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
        }

        /// <summary>Creates an new <see cref="SubscriptionContract" /> instance.</summary>
        public SubscriptionContract()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Subscription details.
    public partial interface ISubscriptionContract :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResource
    {
        /// <summary>Determines whether tracing is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether tracing is enabled",
        SerializedName = @"allowTracing",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowTracing { get; set; }
        /// <summary>
        /// Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO
        /// 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDate { get;  }
        /// <summary>The name of the subscription, or null if the subscription has no name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the subscription, or null if the subscription has no name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>
        /// Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically
        /// cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? EndDate { get; set; }
        /// <summary>
        /// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ",
        SerializedName = @"notificationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? NotificationDate { get; set; }
        /// <summary>
        /// The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId}
        /// where {userId} is a user identifier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.",
        SerializedName = @"ownerId",
        PossibleTypes = new [] { typeof(string) })]
        string OwnerId { get; set; }
        /// <summary>
        /// Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.",
        SerializedName = @"primaryKey",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryKey { get; set; }
        /// <summary>Scope like /products/{productId} or /apis or /apis/{apiId}.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Scope like /products/{productId} or /apis or /apis/{apiId}.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>
        /// Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.",
        SerializedName = @"secondaryKey",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryKey { get; set; }
        /// <summary>
        /// Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartDate { get; set; }
        /// <summary>
        /// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer,
        /// but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator,
        /// * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached
        /// its expiration date and was deactivated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState? State { get; set; }
        /// <summary>
        /// Optional subscription comment added by an administrator when the state is changed to the 'rejected'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional subscription comment added by an administrator when the state is changed to the 'rejected'.",
        SerializedName = @"stateComment",
        PossibleTypes = new [] { typeof(string) })]
        string StateComment { get; set; }

    }
    /// Subscription details.
    internal partial interface ISubscriptionContractInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal
    {
        /// <summary>Determines whether tracing is enabled</summary>
        bool? AllowTracing { get; set; }
        /// <summary>
        /// Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO
        /// 8601 standard.
        /// </summary>
        global::System.DateTime? CreatedDate { get; set; }
        /// <summary>The name of the subscription, or null if the subscription has no name.</summary>
        string DisplayName { get; set; }

        string ETag { get; set; }
        /// <summary>
        /// Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically
        /// cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? EndDate { get; set; }
        /// <summary>
        /// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? NotificationDate { get; set; }
        /// <summary>
        /// The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId}
        /// where {userId} is a user identifier.
        /// </summary>
        string OwnerId { get; set; }
        /// <summary>
        /// Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        string PrimaryKey { get; set; }
        /// <summary>Subscription contract properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionContractProperties Property { get; set; }
        /// <summary>Scope like /products/{productId} or /apis or /apis/{apiId}.</summary>
        string Scope { get; set; }
        /// <summary>
        /// Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        string SecondaryKey { get; set; }
        /// <summary>
        /// Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? StartDate { get; set; }
        /// <summary>
        /// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer,
        /// but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator,
        /// * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached
        /// its expiration date and was deactivated.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState? State { get; set; }
        /// <summary>
        /// Optional subscription comment added by an administrator when the state is changed to the 'rejected'.
        /// </summary>
        string StateComment { get; set; }

    }
}