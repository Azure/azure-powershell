// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>Subscription update details.</summary>
    public partial class SubscriptionUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParametersInternal
    {

        /// <summary>Determines whether tracing can be enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? AllowTracing { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).AllowTracing; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).AllowTracing = value ?? default(bool); }

        /// <summary>Subscription name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>
        /// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).ExpirationDate = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterProperties Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.SubscriptionUpdateParameterProperties()); set { {_property = value;} } }

        /// <summary>User identifier path: /users/{userId}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string OwnerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).OwnerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).OwnerId = value ?? null; }

        /// <summary>Primary subscription key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string PrimaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).PrimaryKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).PrimaryKey = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterProperties _property;

        /// <summary>Subscription Update contract properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.SubscriptionUpdateParameterProperties()); set => this._property = value; }

        /// <summary>Scope like /products/{productId} or /apis or /apis/{apiId}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).Scope = value ?? null; }

        /// <summary>Secondary subscription key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string SecondaryKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).SecondaryKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).SecondaryKey = value ?? null; }

        /// <summary>
        /// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer,
        /// but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator,
        /// * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached
        /// its expiration date and was deactivated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState? State { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).State = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState)""); }

        /// <summary>
        /// Comments describing subscription state change by the administrator when the state is changed to the 'rejected'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string StateComment { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).StateComment; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterPropertiesInternal)Property).StateComment = value ?? null; }

        /// <summary>Creates an new <see cref="SubscriptionUpdateParameters" /> instance.</summary>
        public SubscriptionUpdateParameters()
        {

        }
    }
    /// Subscription update details.
    public partial interface ISubscriptionUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable
    {
        /// <summary>Determines whether tracing can be enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether tracing can be enabled",
        SerializedName = @"allowTracing",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowTracing { get; set; }
        /// <summary>Subscription name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>
        /// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>User identifier path: /users/{userId}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User identifier path: /users/{userId}",
        SerializedName = @"ownerId",
        PossibleTypes = new [] { typeof(string) })]
        string OwnerId { get; set; }
        /// <summary>Primary subscription key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Primary subscription key.",
        SerializedName = @"primaryKey",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryKey { get; set; }
        /// <summary>Scope like /products/{productId} or /apis or /apis/{apiId}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Scope like /products/{productId} or /apis or /apis/{apiId}",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>Secondary subscription key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Secondary subscription key.",
        SerializedName = @"secondaryKey",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryKey { get; set; }
        /// <summary>
        /// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer,
        /// but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator,
        /// * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached
        /// its expiration date and was deactivated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState? State { get; set; }
        /// <summary>
        /// Comments describing subscription state change by the administrator when the state is changed to the 'rejected'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Comments describing subscription state change by the administrator when the state is changed to the 'rejected'.",
        SerializedName = @"stateComment",
        PossibleTypes = new [] { typeof(string) })]
        string StateComment { get; set; }

    }
    /// Subscription update details.
    internal partial interface ISubscriptionUpdateParametersInternal

    {
        /// <summary>Determines whether tracing can be enabled</summary>
        bool? AllowTracing { get; set; }
        /// <summary>Subscription name.</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>User identifier path: /users/{userId}</summary>
        string OwnerId { get; set; }
        /// <summary>Primary subscription key.</summary>
        string PrimaryKey { get; set; }
        /// <summary>Subscription Update contract properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ISubscriptionUpdateParameterProperties Property { get; set; }
        /// <summary>Scope like /products/{productId} or /apis or /apis/{apiId}</summary>
        string Scope { get; set; }
        /// <summary>Secondary subscription key.</summary>
        string SecondaryKey { get; set; }
        /// <summary>
        /// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer,
        /// but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator,
        /// * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached
        /// its expiration date and was deactivated.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.SubscriptionState? State { get; set; }
        /// <summary>
        /// Comments describing subscription state change by the administrator when the state is changed to the 'rejected'.
        /// </summary>
        string StateComment { get; set; }

    }
}