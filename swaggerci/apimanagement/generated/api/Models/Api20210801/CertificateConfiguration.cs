// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>
    /// Certificate configuration which consist of non-trusted intermediates and root certificates.
    /// </summary>
    public partial class CertificateConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateConfigurationInternal
    {

        /// <summary>Backing field for <see cref="Certificate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformation _certificate;

        /// <summary>Certificate information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformation Certificate { get => (this._certificate = this._certificate ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.CertificateInformation()); set => this._certificate = value; }

        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
        /// the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? CertificateExpiry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformationInternal)Certificate).Expiry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformationInternal)Certificate).Expiry = value ?? default(global::System.DateTime); }

        /// <summary>Backing field for <see cref="CertificatePassword" /> property.</summary>
        private string _certificatePassword;

        /// <summary>Certificate Password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string CertificatePassword { get => this._certificatePassword; set => this._certificatePassword = value; }

        /// <summary>Subject of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string CertificateSubject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformationInternal)Certificate).Subject; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformationInternal)Certificate).Subject = value ?? null; }

        /// <summary>Thumbprint of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string CertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformationInternal)Certificate).Thumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformationInternal)Certificate).Thumbprint = value ?? null; }

        /// <summary>Backing field for <see cref="EncodedCertificate" /> property.</summary>
        private string _encodedCertificate;

        /// <summary>Base64 Encoded certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string EncodedCertificate { get => this._encodedCertificate; set => this._encodedCertificate = value; }

        /// <summary>Internal Acessors for Certificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformation Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateConfigurationInternal.Certificate { get => (this._certificate = this._certificate ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.CertificateInformation()); set { {_certificate = value;} } }

        /// <summary>Backing field for <see cref="StoreName" /> property.</summary>
        private string _storeName;

        /// <summary>
        /// The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority
        /// are valid locations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string StoreName { get => this._storeName; set => this._storeName = value; }

        /// <summary>Creates an new <see cref="CertificateConfiguration" /> instance.</summary>
        public CertificateConfiguration()
        {

        }
    }
    /// Certificate configuration which consist of non-trusted intermediates and root certificates.
    public partial interface ICertificateConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
        /// the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.",
        SerializedName = @"expiry",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CertificateExpiry { get; set; }
        /// <summary>Certificate Password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate Password.",
        SerializedName = @"certificatePassword",
        PossibleTypes = new [] { typeof(string) })]
        string CertificatePassword { get; set; }
        /// <summary>Subject of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subject of the certificate.",
        SerializedName = @"subject",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSubject { get; set; }
        /// <summary>Thumbprint of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Thumbprint of the certificate.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateThumbprint { get; set; }
        /// <summary>Base64 Encoded certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64 Encoded certificate.",
        SerializedName = @"encodedCertificate",
        PossibleTypes = new [] { typeof(string) })]
        string EncodedCertificate { get; set; }
        /// <summary>
        /// The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority
        /// are valid locations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.",
        SerializedName = @"storeName",
        PossibleTypes = new [] { typeof(string) })]
        string StoreName { get; set; }

    }
    /// Certificate configuration which consist of non-trusted intermediates and root certificates.
    internal partial interface ICertificateConfigurationInternal

    {
        /// <summary>Certificate information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20210801.ICertificateInformation Certificate { get; set; }
        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
        /// the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? CertificateExpiry { get; set; }
        /// <summary>Certificate Password.</summary>
        string CertificatePassword { get; set; }
        /// <summary>Subject of the certificate.</summary>
        string CertificateSubject { get; set; }
        /// <summary>Thumbprint of the certificate.</summary>
        string CertificateThumbprint { get; set; }
        /// <summary>Base64 Encoded certificate.</summary>
        string EncodedCertificate { get; set; }
        /// <summary>
        /// The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority
        /// are valid locations.
        /// </summary>
        string StoreName { get; set; }

    }
}