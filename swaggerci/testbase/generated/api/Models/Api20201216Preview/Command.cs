// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Extensions;

    /// <summary>The command used in the test</summary>
    public partial class Command :
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ICommand,
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ICommandInternal
    {

        /// <summary>Backing field for <see cref="Action" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.Action _action;

        /// <summary>The action of the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.Action Action { get => this._action; set => this._action = value; }

        /// <summary>Backing field for <see cref="AlwaysRun" /> property.</summary>
        private bool? _alwaysRun;

        /// <summary>Specifies whether to run the command even if a previous command is failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public bool? AlwaysRun { get => this._alwaysRun; set => this._alwaysRun = value; }

        /// <summary>Backing field for <see cref="ApplyUpdateBefore" /> property.</summary>
        private bool? _applyUpdateBefore;

        /// <summary>Specifies whether to apply update before the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public bool? ApplyUpdateBefore { get => this._applyUpdateBefore; set => this._applyUpdateBefore = value; }

        /// <summary>Backing field for <see cref="Content" /> property.</summary>
        private string _content;

        /// <summary>The content of the command. The content depends on source type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public string Content { get => this._content; set => this._content = value; }

        /// <summary>Backing field for <see cref="ContentType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.ContentType _contentType;

        /// <summary>The type of command content.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.ContentType ContentType { get => this._contentType; set => this._contentType = value; }

        /// <summary>Backing field for <see cref="MaxRunTime" /> property.</summary>
        private int? _maxRunTime;

        /// <summary>Specifies the max run time of the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public int? MaxRunTime { get => this._maxRunTime; set => this._maxRunTime = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="RestartAfter" /> property.</summary>
        private bool? _restartAfter;

        /// <summary>Specifies whether to restart the VM after the command executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public bool? RestartAfter { get => this._restartAfter; set => this._restartAfter = value; }

        /// <summary>Backing field for <see cref="RunAsInteractive" /> property.</summary>
        private bool? _runAsInteractive;

        /// <summary>Specifies whether to run the command in interactive mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public bool? RunAsInteractive { get => this._runAsInteractive; set => this._runAsInteractive = value; }

        /// <summary>Backing field for <see cref="RunElevated" /> property.</summary>
        private bool? _runElevated;

        /// <summary>Specifies whether to run the command as administrator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public bool? RunElevated { get => this._runElevated; set => this._runElevated = value; }

        /// <summary>Creates an new <see cref="Command" /> instance.</summary>
        public Command()
        {

        }
    }
    /// The command used in the test
    public partial interface ICommand :
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.IJsonSerializable
    {
        /// <summary>The action of the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The action of the command.",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.Action) })]
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.Action Action { get; set; }
        /// <summary>Specifies whether to run the command even if a previous command is failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to run the command even if a previous command is failed.",
        SerializedName = @"alwaysRun",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AlwaysRun { get; set; }
        /// <summary>Specifies whether to apply update before the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to apply update before the command.",
        SerializedName = @"applyUpdateBefore",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ApplyUpdateBefore { get; set; }
        /// <summary>The content of the command. The content depends on source type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The content of the command. The content depends on source type.",
        SerializedName = @"content",
        PossibleTypes = new [] { typeof(string) })]
        string Content { get; set; }
        /// <summary>The type of command content.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The type of command content.",
        SerializedName = @"contentType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.ContentType) })]
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.ContentType ContentType { get; set; }
        /// <summary>Specifies the max run time of the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the max run time of the command.",
        SerializedName = @"maxRunTime",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxRunTime { get; set; }
        /// <summary>The name of the command.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the command.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Specifies whether to restart the VM after the command executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to restart the VM after the command executed.",
        SerializedName = @"restartAfter",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RestartAfter { get; set; }
        /// <summary>Specifies whether to run the command in interactive mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to run the command in interactive mode.",
        SerializedName = @"runAsInteractive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RunAsInteractive { get; set; }
        /// <summary>Specifies whether to run the command as administrator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to run the command as administrator.",
        SerializedName = @"runElevated",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RunElevated { get; set; }

    }
    /// The command used in the test
    internal partial interface ICommandInternal

    {
        /// <summary>The action of the command.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.Action Action { get; set; }
        /// <summary>Specifies whether to run the command even if a previous command is failed.</summary>
        bool? AlwaysRun { get; set; }
        /// <summary>Specifies whether to apply update before the command.</summary>
        bool? ApplyUpdateBefore { get; set; }
        /// <summary>The content of the command. The content depends on source type.</summary>
        string Content { get; set; }
        /// <summary>The type of command content.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.ContentType ContentType { get; set; }
        /// <summary>Specifies the max run time of the command.</summary>
        int? MaxRunTime { get; set; }
        /// <summary>The name of the command.</summary>
        string Name { get; set; }
        /// <summary>Specifies whether to restart the VM after the command executed.</summary>
        bool? RestartAfter { get; set; }
        /// <summary>Specifies whether to run the command in interactive mode.</summary>
        bool? RunAsInteractive { get; set; }
        /// <summary>Specifies whether to run the command as administrator.</summary>
        bool? RunElevated { get; set; }

    }
}