// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Extensions;

    /// <summary>The command used in the test</summary>
    public partial class Command
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject into a new instance of <see cref="Command" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal Command(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_name = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("name"), out var __jsonName) ? (string)__jsonName : (string)Name;}
            {_action = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("action"), out var __jsonAction) ? (string)__jsonAction : (string)Action;}
            {_contentType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("contentType"), out var __jsonContentType) ? (string)__jsonContentType : (string)ContentType;}
            {_content = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("content"), out var __jsonContent) ? (string)__jsonContent : (string)Content;}
            {_runElevated = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean>("runElevated"), out var __jsonRunElevated) ? (bool?)__jsonRunElevated : RunElevated;}
            {_restartAfter = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean>("restartAfter"), out var __jsonRestartAfter) ? (bool?)__jsonRestartAfter : RestartAfter;}
            {_maxRunTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber>("maxRunTime"), out var __jsonMaxRunTime) ? (int?)__jsonMaxRunTime : MaxRunTime;}
            {_runAsInteractive = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean>("runAsInteractive"), out var __jsonRunAsInteractive) ? (bool?)__jsonRunAsInteractive : RunAsInteractive;}
            {_alwaysRun = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean>("alwaysRun"), out var __jsonAlwaysRun) ? (bool?)__jsonAlwaysRun : AlwaysRun;}
            {_applyUpdateBefore = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean>("applyUpdateBefore"), out var __jsonApplyUpdateBefore) ? (bool?)__jsonApplyUpdateBefore : ApplyUpdateBefore;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ICommand.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ICommand.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ICommand FromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json ? new Command(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="Command" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="Command" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._name)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._name.ToString()) : null, "name" ,container.Add );
            AddIf( null != (((object)this._action)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._action.ToString()) : null, "action" ,container.Add );
            AddIf( null != (((object)this._contentType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._contentType.ToString()) : null, "contentType" ,container.Add );
            AddIf( null != (((object)this._content)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._content.ToString()) : null, "content" ,container.Add );
            AddIf( null != this._runElevated ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean((bool)this._runElevated) : null, "runElevated" ,container.Add );
            AddIf( null != this._restartAfter ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean((bool)this._restartAfter) : null, "restartAfter" ,container.Add );
            AddIf( null != this._maxRunTime ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber((int)this._maxRunTime) : null, "maxRunTime" ,container.Add );
            AddIf( null != this._runAsInteractive ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean((bool)this._runAsInteractive) : null, "runAsInteractive" ,container.Add );
            AddIf( null != this._alwaysRun ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean((bool)this._alwaysRun) : null, "alwaysRun" ,container.Add );
            AddIf( null != this._applyUpdateBefore ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean((bool)this._applyUpdateBefore) : null, "applyUpdateBefore" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}