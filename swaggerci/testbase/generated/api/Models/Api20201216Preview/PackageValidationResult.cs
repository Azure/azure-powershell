// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Extensions;

    /// <summary>
    /// The validation results. There's validation on package when it's created or updated.
    /// </summary>
    public partial class PackageValidationResult :
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResult,
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResultInternal
    {

        /// <summary>Backing field for <see cref="Error" /> property.</summary>
        private string[] _error;

        /// <summary>Error information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public string[] Error { get => this._error; }

        /// <summary>Backing field for <see cref="IsValid" /> property.</summary>
        private bool? _isValid;

        /// <summary>Indicates whether the package passed the validation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public bool? IsValid { get => this._isValid; }

        /// <summary>Internal Acessors for Error</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResultInternal.Error { get => this._error; set { {_error = value;} } }

        /// <summary>Internal Acessors for IsValid</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResultInternal.IsValid { get => this._isValid; set { {_isValid = value;} } }

        /// <summary>Internal Acessors for ValidationName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResultInternal.ValidationName { get => this._validationName; set { {_validationName = value;} } }

        /// <summary>Backing field for <see cref="ValidationName" /> property.</summary>
        private string _validationName;

        /// <summary>Validation name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public string ValidationName { get => this._validationName; }

        /// <summary>Creates an new <see cref="PackageValidationResult" /> instance.</summary>
        public PackageValidationResult()
        {

        }
    }
    /// The validation results. There's validation on package when it's created or updated.
    public partial interface IPackageValidationResult :
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.IJsonSerializable
    {
        /// <summary>Error information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Error information.",
        SerializedName = @"errors",
        PossibleTypes = new [] { typeof(string) })]
        string[] Error { get;  }
        /// <summary>Indicates whether the package passed the validation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether the package passed the validation.",
        SerializedName = @"isValid",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsValid { get;  }
        /// <summary>Validation name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Validation name.",
        SerializedName = @"validationName",
        PossibleTypes = new [] { typeof(string) })]
        string ValidationName { get;  }

    }
    /// The validation results. There's validation on package when it's created or updated.
    internal partial interface IPackageValidationResultInternal

    {
        /// <summary>Error information.</summary>
        string[] Error { get; set; }
        /// <summary>Indicates whether the package passed the validation.</summary>
        bool? IsValid { get; set; }
        /// <summary>Validation name.</summary>
        string ValidationName { get; set; }

    }
}