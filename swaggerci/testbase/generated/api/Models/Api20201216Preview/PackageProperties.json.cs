// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Extensions;

    /// <summary>The properties of the Test Base Package.</summary>
    public partial class PackageProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json ? new PackageProperties(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject into a new instance of <see cref="PackageProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PackageProperties(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)ProvisioningState;}
            {_applicationName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("applicationName"), out var __jsonApplicationName) ? (string)__jsonApplicationName : (string)ApplicationName;}
            {_version = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("version"), out var __jsonVersion) ? (string)__jsonVersion : (string)Version;}
            {_testType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray>("testTypes"), out var __jsonTestTypes) ? If( __jsonTestTypes as Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.TestType[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.TestType) (__u is Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString __t ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.TestType)(__t.ToString()) : ((Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.TestType)""))) ))() : null : TestType;}
            {_targetOSList = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray>("targetOSList"), out var __jsonTargetOSList) ? If( __jsonTargetOSList as Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ITargetOSInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ITargetOSInfo) (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.TargetOSInfo.FromJson(__p) )) ))() : null : TargetOSList;}
            {_packageStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("packageStatus"), out var __jsonPackageStatus) ? (string)__jsonPackageStatus : (string)PackageStatus;}
            {_lastModifiedTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("lastModifiedTime"), out var __jsonLastModifiedTime) ? global::System.DateTime.TryParse((string)__jsonLastModifiedTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastModifiedTimeValue) ? __jsonLastModifiedTimeValue : LastModifiedTime : LastModifiedTime;}
            {_flightingRing = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("flightingRing"), out var __jsonFlightingRing) ? (string)__jsonFlightingRing : (string)FlightingRing;}
            {_isEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean>("isEnabled"), out var __jsonIsEnabled) ? (bool?)__jsonIsEnabled : IsEnabled;}
            {_blobPath = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("blobPath"), out var __jsonBlobPath) ? (string)__jsonBlobPath : (string)BlobPath;}
            {_validationResult = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray>("validationResults"), out var __jsonValidationResults) ? If( __jsonValidationResults as Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.IPackageValidationResult) (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.PackageValidationResult.FromJson(__k) )) ))() : null : ValidationResult;}
            {_test = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray>("tests"), out var __jsonTests) ? If( __jsonTests as Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ITest[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.ITest) (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20201216Preview.Test.FromJson(__f) )) ))() : null : Test;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PackageProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PackageProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            AddIf( null != (((object)this._applicationName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._applicationName.ToString()) : null, "applicationName" ,container.Add );
            AddIf( null != (((object)this._version)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._version.ToString()) : null, "version" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._testType)
                {
                    var __w = new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.XNodeArray();
                    foreach( var __x in this._testType )
                    {
                        AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                    }
                    container.Add("testTypes",__w);
                }
            }
            if (null != this._targetOSList)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.XNodeArray();
                foreach( var __s in this._targetOSList )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("targetOSList",__r);
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._packageStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._packageStatus.ToString()) : null, "packageStatus" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._lastModifiedTime ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._lastModifiedTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastModifiedTime" ,container.Add );
            }
            AddIf( null != (((object)this._flightingRing)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._flightingRing.ToString()) : null, "flightingRing" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._isEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonBoolean((bool)this._isEnabled) : null, "isEnabled" ,container.Add );
            }
            AddIf( null != (((object)this._blobPath)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._blobPath.ToString()) : null, "blobPath" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._validationResult)
                {
                    var __m = new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.XNodeArray();
                    foreach( var __n in this._validationResult )
                    {
                        AddIf(__n?.ToJson(null, serializationMode) ,__m.Add);
                    }
                    container.Add("validationResults",__m);
                }
            }
            if (null != this._test)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.XNodeArray();
                foreach( var __i in this._test )
                {
                    AddIf(__i?.ToJson(null, serializationMode) ,__h.Add);
                }
                container.Add("tests",__h);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}