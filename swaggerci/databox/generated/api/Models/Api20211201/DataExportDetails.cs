// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Extensions;

    /// <summary>Details of the data to be used for exporting data from azure.</summary>
    public partial class DataExportDetails :
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetails,
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal
    {

        /// <summary>Backing field for <see cref="AccountDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetails _accountDetail;

        /// <summary>Account details of the data to be transferred</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetails AccountDetail { get => (this._accountDetail = this._accountDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.DataAccountDetails()); set => this._accountDetail = value; }

        /// <summary>Account Type of the data to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType AccountDetailDataAccountType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetailsInternal)AccountDetail).DataAccountType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetailsInternal)AccountDetail).DataAccountType = value ; }

        /// <summary>
        /// Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If
        /// this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements
        /// : Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one
        /// number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets,
        /// numbers and these characters : @#\-$%^!+=;:_()]+
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string AccountDetailSharePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetailsInternal)AccountDetail).SharePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetailsInternal)AccountDetail).SharePassword = value ?? null; }

        /// <summary>List of full path of the files to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string[] AzureFileFilterDetailFilePathList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).AzureFileFilterDetailFilePathList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).AzureFileFilterDetailFilePathList = value ?? null /* arrayOf */; }

        /// <summary>Prefix list of the Azure files to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string[] AzureFileFilterDetailFilePrefixList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).AzureFileFilterDetailFilePrefixList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).AzureFileFilterDetailFilePrefixList = value ?? null /* arrayOf */; }

        /// <summary>List of file shares to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string[] AzureFileFilterDetailFileShareList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).AzureFileFilterDetailFileShareList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).AzureFileFilterDetailFileShareList = value ?? null /* arrayOf */; }

        /// <summary>List of full path of the blobs to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string[] BlobFilterDetailBlobPathList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).BlobFilterDetailBlobPathList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).BlobFilterDetailBlobPathList = value ?? null /* arrayOf */; }

        /// <summary>Prefix list of the Azure blobs to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string[] BlobFilterDetailBlobPrefixList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).BlobFilterDetailBlobPrefixList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).BlobFilterDetailBlobPrefixList = value ?? null /* arrayOf */; }

        /// <summary>List of blob containers to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public string[] BlobFilterDetailContainerList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).BlobFilterDetailContainerList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).BlobFilterDetailContainerList = value ?? null /* arrayOf */; }

        /// <summary>Details of the filter files to be used for data transfer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IFilterFileDetails[] IncludeFilterFileDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeFilterFileDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeFilterFileDetail = value ?? null /* arrayOf */; }

        /// <summary>To indicate if all Azure blobs have to be transferred</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public bool? IncludeTransferAllBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeTransferAllBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeTransferAllBlob = value ?? default(bool); }

        /// <summary>To indicate if all Azure Files have to be transferred</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public bool? IncludeTransferAllFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeTransferAllFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeTransferAllFile = value ?? default(bool); }

        /// <summary>Backing field for <see cref="LogCollectionLevel" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.LogCollectionLevel? _logCollectionLevel;

        /// <summary>Level of the logs to be collected.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.LogCollectionLevel? LogCollectionLevel { get => this._logCollectionLevel; set => this._logCollectionLevel = value; }

        /// <summary>Internal Acessors for AccountDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.AccountDetail { get => (this._accountDetail = this._accountDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.DataAccountDetails()); set { {_accountDetail = value;} } }

        /// <summary>Internal Acessors for IncludeAzureFileFilterDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IAzureFileFilterDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.IncludeAzureFileFilterDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeAzureFileFilterDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeAzureFileFilterDetail = value; }

        /// <summary>Internal Acessors for IncludeBlobFilterDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IBlobFilterDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.IncludeBlobFilterDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeBlobFilterDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).IncludeBlobFilterDetail = value; }

        /// <summary>Internal Acessors for TransferAllDetailInclude</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferAllDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.TransferAllDetailInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferAllDetailInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferAllDetailInclude = value; }

        /// <summary>Internal Acessors for TransferConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfiguration Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.TransferConfiguration { get => (this._transferConfiguration = this._transferConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.TransferConfiguration()); set { {_transferConfiguration = value;} } }

        /// <summary>Internal Acessors for TransferConfigurationTransferAllDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationTransferAllDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.TransferConfigurationTransferAllDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferAllDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferAllDetail = value; }

        /// <summary>Internal Acessors for TransferConfigurationTransferFilterDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationTransferFilterDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.TransferConfigurationTransferFilterDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferFilterDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferFilterDetail = value; }

        /// <summary>Internal Acessors for TransferFilterDetailInclude</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferFilterDetails Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataExportDetailsInternal.TransferFilterDetailInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferFilterDetailInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferFilterDetailInclude = value; }

        /// <summary>Type of the account of data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? TransferAllDetailsIncludeDataAccountType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferAllDetailsIncludeDataAccountType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferAllDetailsIncludeDataAccountType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType)""); }

        /// <summary>Backing field for <see cref="TransferConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfiguration _transferConfiguration;

        /// <summary>Configuration for the data transfer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfiguration TransferConfiguration { get => (this._transferConfiguration = this._transferConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.TransferConfiguration()); set => this._transferConfiguration = value; }

        /// <summary>Type of the configuration for transfer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferConfigurationType TransferConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).Type = value ; }

        /// <summary>Type of the account of data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? TransferFilterDetailsIncludeDataAccountType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferFilterDetailsIncludeDataAccountType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationInternal)TransferConfiguration).TransferFilterDetailsIncludeDataAccountType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType)""); }

        /// <summary>Creates an new <see cref="DataExportDetails" /> instance.</summary>
        public DataExportDetails()
        {

        }
    }
    /// Details of the data to be used for exporting data from azure.
    public partial interface IDataExportDetails :
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.IJsonSerializable
    {
        /// <summary>Account Type of the data to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Account Type of the data to be transferred.",
        SerializedName = @"dataAccountType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType AccountDetailDataAccountType { get; set; }
        /// <summary>
        /// Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If
        /// this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements
        /// : Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one
        /// number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets,
        /// numbers and these characters : @#\-$%^!+=;:_()]+
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+",
        SerializedName = @"sharePassword",
        PossibleTypes = new [] { typeof(string) })]
        string AccountDetailSharePassword { get; set; }
        /// <summary>List of full path of the files to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of full path of the files to be transferred.",
        SerializedName = @"filePathList",
        PossibleTypes = new [] { typeof(string) })]
        string[] AzureFileFilterDetailFilePathList { get; set; }
        /// <summary>Prefix list of the Azure files to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Prefix list of the Azure files to be transferred.",
        SerializedName = @"filePrefixList",
        PossibleTypes = new [] { typeof(string) })]
        string[] AzureFileFilterDetailFilePrefixList { get; set; }
        /// <summary>List of file shares to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of file shares to be transferred.",
        SerializedName = @"fileShareList",
        PossibleTypes = new [] { typeof(string) })]
        string[] AzureFileFilterDetailFileShareList { get; set; }
        /// <summary>List of full path of the blobs to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of full path of the blobs to be transferred.",
        SerializedName = @"blobPathList",
        PossibleTypes = new [] { typeof(string) })]
        string[] BlobFilterDetailBlobPathList { get; set; }
        /// <summary>Prefix list of the Azure blobs to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Prefix list of the Azure blobs to be transferred.",
        SerializedName = @"blobPrefixList",
        PossibleTypes = new [] { typeof(string) })]
        string[] BlobFilterDetailBlobPrefixList { get; set; }
        /// <summary>List of blob containers to be transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of blob containers to be transferred.",
        SerializedName = @"containerList",
        PossibleTypes = new [] { typeof(string) })]
        string[] BlobFilterDetailContainerList { get; set; }
        /// <summary>Details of the filter files to be used for data transfer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Details of the filter files to be used for data transfer.",
        SerializedName = @"filterFileDetails",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IFilterFileDetails) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IFilterFileDetails[] IncludeFilterFileDetail { get; set; }
        /// <summary>To indicate if all Azure blobs have to be transferred</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To indicate if all Azure blobs have to be transferred",
        SerializedName = @"transferAllBlobs",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludeTransferAllBlob { get; set; }
        /// <summary>To indicate if all Azure Files have to be transferred</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To indicate if all Azure Files have to be transferred",
        SerializedName = @"transferAllFiles",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludeTransferAllFile { get; set; }
        /// <summary>Level of the logs to be collected.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Level of the logs to be collected.",
        SerializedName = @"logCollectionLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.LogCollectionLevel) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.LogCollectionLevel? LogCollectionLevel { get; set; }
        /// <summary>Type of the account of data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the account of data",
        SerializedName = @"dataAccountType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? TransferAllDetailsIncludeDataAccountType { get; set; }
        /// <summary>Type of the configuration for transfer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of the configuration for transfer.",
        SerializedName = @"transferConfigurationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferConfigurationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferConfigurationType TransferConfigurationType { get; set; }
        /// <summary>Type of the account of data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the account of data.",
        SerializedName = @"dataAccountType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? TransferFilterDetailsIncludeDataAccountType { get; set; }

    }
    /// Details of the data to be used for exporting data from azure.
    internal partial interface IDataExportDetailsInternal

    {
        /// <summary>Account details of the data to be transferred</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IDataAccountDetails AccountDetail { get; set; }
        /// <summary>Account Type of the data to be transferred.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType AccountDetailDataAccountType { get; set; }
        /// <summary>
        /// Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If
        /// this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements
        /// : Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one
        /// number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets,
        /// numbers and these characters : @#\-$%^!+=;:_()]+
        /// </summary>
        string AccountDetailSharePassword { get; set; }
        /// <summary>List of full path of the files to be transferred.</summary>
        string[] AzureFileFilterDetailFilePathList { get; set; }
        /// <summary>Prefix list of the Azure files to be transferred.</summary>
        string[] AzureFileFilterDetailFilePrefixList { get; set; }
        /// <summary>List of file shares to be transferred.</summary>
        string[] AzureFileFilterDetailFileShareList { get; set; }
        /// <summary>List of full path of the blobs to be transferred.</summary>
        string[] BlobFilterDetailBlobPathList { get; set; }
        /// <summary>Prefix list of the Azure blobs to be transferred.</summary>
        string[] BlobFilterDetailBlobPrefixList { get; set; }
        /// <summary>List of blob containers to be transferred.</summary>
        string[] BlobFilterDetailContainerList { get; set; }
        /// <summary>Filter details to transfer Azure files.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IAzureFileFilterDetails IncludeAzureFileFilterDetail { get; set; }
        /// <summary>Filter details to transfer blobs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IBlobFilterDetails IncludeBlobFilterDetail { get; set; }
        /// <summary>Details of the filter files to be used for data transfer.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.IFilterFileDetails[] IncludeFilterFileDetail { get; set; }
        /// <summary>To indicate if all Azure blobs have to be transferred</summary>
        bool? IncludeTransferAllBlob { get; set; }
        /// <summary>To indicate if all Azure Files have to be transferred</summary>
        bool? IncludeTransferAllFile { get; set; }
        /// <summary>Level of the logs to be collected.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.LogCollectionLevel? LogCollectionLevel { get; set; }
        /// <summary>Details to transfer all data.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferAllDetails TransferAllDetailInclude { get; set; }
        /// <summary>Type of the account of data</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? TransferAllDetailsIncludeDataAccountType { get; set; }
        /// <summary>Configuration for the data transfer.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfiguration TransferConfiguration { get; set; }
        /// <summary>
        /// Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType
        /// is given as TransferAll
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationTransferAllDetails TransferConfigurationTransferAllDetail { get; set; }
        /// <summary>
        /// Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as
        /// TransferUsingFilter.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferConfigurationTransferFilterDetails TransferConfigurationTransferFilterDetail { get; set; }
        /// <summary>Type of the configuration for transfer.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferConfigurationType TransferConfigurationType { get; set; }
        /// <summary>Details of the filtering the transfer of data.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20211201.ITransferFilterDetails TransferFilterDetailInclude { get; set; }
        /// <summary>Type of the account of data.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? TransferFilterDetailsIncludeDataAccountType { get; set; }

    }
}