// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Extensions;
    using System;

    /// <summary>
    /// Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable. This operation is
    /// idempotent.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzNotificationHubsNamespace_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Description(@"Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Generated]
    public partial class NewAzNotificationHubsNamespace_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Parameters supplied to the CreateOrUpdate Namespace operation.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceCreateOrUpdateParameters _parametersBody = new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.NamespaceCreateOrUpdateParameters();

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.NotificationHubsManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.ClientAPI;

        /// <summary>The time the namespace was created.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time the namespace was created.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time the namespace was created.",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime CreatedAt { get => _parametersBody.CreatedAt ?? default(global::System.DateTime); set => _parametersBody.CreatedAt = value; }

        /// <summary>Whether or not the namespace is set as Critical.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether or not the namespace is set as Critical.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not the namespace is set as Critical.",
        SerializedName = @"critical",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Critical { get => _parametersBody.Critical ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.Critical = value; }

        /// <summary>Data center for the namespace</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Data center for the namespace")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data center for the namespace",
        SerializedName = @"dataCenter",
        PossibleTypes = new [] { typeof(string) })]
        public string DataCenter { get => _parametersBody.DataCenter ?? null; set => _parametersBody.DataCenter = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Whether or not the namespace is currently enabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether or not the namespace is currently enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not the namespace is currently enabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Enabled { get => _parametersBody.Enabled ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.Enabled = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Resource location</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource location")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource location",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _parametersBody.Location ?? null; set => _parametersBody.Location = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The namespace name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The namespace name.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The namespace name.",
        SerializedName = @"namespaceName",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("NamespaceName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>The namespace type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The namespace type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The namespace type.",
        SerializedName = @"namespaceType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.NamespaceType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.NamespaceType))]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.NamespaceType NamespaceType { get => _parametersBody.NamespaceType ?? ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.NamespaceType)""); set => _parametersBody.NamespaceType = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The name of the namespace.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the namespace.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the namespace.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string PropertiesName { get => _parametersBody.PropertiesName ?? null; set => _parametersBody.PropertiesName = value; }

        /// <summary>The Id of the Azure subscription associated with the namespace.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Id of the Azure subscription associated with the namespace.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Id of the Azure subscription associated with the namespace.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string PropertiesSubscriptionId { get => _parametersBody.SubscriptionId ?? null; set => _parametersBody.SubscriptionId = value; }

        /// <summary>Provisioning state of the Namespace.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Provisioning state of the Namespace.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provisioning state of the Namespace.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        public string ProvisioningState { get => _parametersBody.ProvisioningState ?? null; set => _parametersBody.ProvisioningState = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia
        /// East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast
        /// Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe",
        SerializedName = @"region",
        PossibleTypes = new [] { typeof(string) })]
        public string Region { get => _parametersBody.Region ?? null; set => _parametersBody.Region = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>ScaleUnit where the namespace gets created</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ScaleUnit where the namespace gets created")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ScaleUnit where the namespace gets created",
        SerializedName = @"scaleUnit",
        PossibleTypes = new [] { typeof(string) })]
        public string ScaleUnit { get => _parametersBody.ScaleUnit ?? null; set => _parametersBody.ScaleUnit = value; }

        /// <summary>Endpoint you can use to perform NotificationHub operations.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Endpoint you can use to perform NotificationHub operations.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Endpoint you can use to perform NotificationHub operations.",
        SerializedName = @"serviceBusEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        public string ServiceBusEndpoint { get => _parametersBody.ServiceBusEndpoint ?? null; set => _parametersBody.ServiceBusEndpoint = value; }

        /// <summary>The capacity of the resource</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The capacity of the resource")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The capacity of the resource",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        public int SkuCapacity { get => _parametersBody.SkuCapacity ?? default(int); set => _parametersBody.SkuCapacity = value; }

        /// <summary>The Sku Family</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Sku Family")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Sku Family",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuFamily { get => _parametersBody.SkuFamily ?? null; set => _parametersBody.SkuFamily = value; }

        /// <summary>Name of the notification hub sku</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the notification hub sku")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the notification hub sku",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName))]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName SkuName { get => _parametersBody.SkuName ?? ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName)""); set => _parametersBody.SkuName = value; }

        /// <summary>The Sku size</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Sku size")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Sku size",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuSize { get => _parametersBody.SkuSize ?? null; set => _parametersBody.SkuSize = value; }

        /// <summary>The tier of particular sku</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The tier of particular sku")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tier of particular sku",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuTier { get => _parametersBody.SkuTier ?? null; set => _parametersBody.SkuTier = value; }

        /// <summary>
        /// Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        public string Status { get => _parametersBody.Status ?? null; set => _parametersBody.Status = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Resource tags</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.IResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.IResourceTags Tag { get => _parametersBody.Tag ?? null /* object */; set => _parametersBody.Tag = value; }

        /// <summary>The time the namespace was updated.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time the namespace was updated.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time the namespace was updated.",
        SerializedName = @"updatedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime UpdatedAt { get => _parametersBody.UpdatedAt ?? default(global::System.DateTime); set => _parametersBody.UpdatedAt = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource">Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource">Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzNotificationHubsNamespace_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzNotificationHubsNamespace_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'NamespacesCreateOrUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.NamespacesCreateOrUpdate(ResourceGroupName, Name, SubscriptionId, _parametersBody, onOk, onCreated, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  ResourceGroupName=ResourceGroupName,Name=Name,SubscriptionId=SubscriptionId,body=_parametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource">Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource
                WriteObject((await response));
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource">Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceResource
                WriteObject((await response));
            }
        }
    }
}