// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Extensions;

    /// <summary>Namespace properties.</summary>
    public partial class NamespaceProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INamespaceProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject json ? new NamespaceProperties(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject into a new instance of <see cref="NamespaceProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal NamespaceProperties(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_name = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("name"), out var __jsonName) ? (string)__jsonName : (string)Name;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)ProvisioningState;}
            {_region = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("region"), out var __jsonRegion) ? (string)__jsonRegion : (string)Region;}
            {_metricId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("metricId"), out var __jsonMetricId) ? (string)__jsonMetricId : (string)MetricId;}
            {_status = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)Status;}
            {_createdAt = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("createdAt"), out var __jsonCreatedAt) ? global::System.DateTime.TryParse((string)__jsonCreatedAt, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonCreatedAtValue) ? __jsonCreatedAtValue : CreatedAt : CreatedAt;}
            {_updatedAt = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("updatedAt"), out var __jsonUpdatedAt) ? global::System.DateTime.TryParse((string)__jsonUpdatedAt, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonUpdatedAtValue) ? __jsonUpdatedAtValue : UpdatedAt : UpdatedAt;}
            {_serviceBusEndpoint = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("serviceBusEndpoint"), out var __jsonServiceBusEndpoint) ? (string)__jsonServiceBusEndpoint : (string)ServiceBusEndpoint;}
            {_subscriptionId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("subscriptionId"), out var __jsonSubscriptionId) ? (string)__jsonSubscriptionId : (string)SubscriptionId;}
            {_scaleUnit = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("scaleUnit"), out var __jsonScaleUnit) ? (string)__jsonScaleUnit : (string)ScaleUnit;}
            {_enabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonBoolean>("enabled"), out var __jsonEnabled) ? (bool?)__jsonEnabled : Enabled;}
            {_critical = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonBoolean>("critical"), out var __jsonCritical) ? (bool?)__jsonCritical : Critical;}
            {_dataCenter = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("dataCenter"), out var __jsonDataCenter) ? (string)__jsonDataCenter : (string)DataCenter;}
            {_namespaceType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString>("namespaceType"), out var __jsonNamespaceType) ? (string)__jsonNamespaceType : (string)NamespaceType;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="NamespaceProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="NamespaceProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._name)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._name.ToString()) : null, "name" ,container.Add );
            AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            AddIf( null != (((object)this._region)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._region.ToString()) : null, "region" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._metricId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._metricId.ToString()) : null, "metricId" ,container.Add );
            }
            AddIf( null != (((object)this._status)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            AddIf( null != this._createdAt ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._createdAt?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "createdAt" ,container.Add );
            AddIf( null != this._updatedAt ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._updatedAt?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "updatedAt" ,container.Add );
            AddIf( null != (((object)this._serviceBusEndpoint)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._serviceBusEndpoint.ToString()) : null, "serviceBusEndpoint" ,container.Add );
            AddIf( null != (((object)this._subscriptionId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._subscriptionId.ToString()) : null, "subscriptionId" ,container.Add );
            AddIf( null != (((object)this._scaleUnit)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._scaleUnit.ToString()) : null, "scaleUnit" ,container.Add );
            AddIf( null != this._enabled ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonBoolean((bool)this._enabled) : null, "enabled" ,container.Add );
            AddIf( null != this._critical ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonBoolean((bool)this._critical) : null, "critical" ,container.Add );
            AddIf( null != (((object)this._dataCenter)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._dataCenter.ToString()) : null, "dataCenter" ,container.Add );
            AddIf( null != (((object)this._namespaceType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Json.JsonString(this._namespaceType.ToString()) : null, "namespaceType" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}