
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates/Update a NotificationHub in a namespace.
.Description
Creates/Update a NotificationHub in a namespace.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AUTHORIZATIONRULE <ISharedAccessAuthorizationRuleProperties[]>: The AuthorizationRules of the created NotificationHub
  [Rights <AccessRights[]>]: The rights associated with the rule.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.notificationhubs/new-aznotificationhubsnotificationhub
#>
function New-AzNotificationHubsNotificationHub {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('NotificationHubName')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Path')]
    [System.String]
    # The notification hub name.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Path')]
    [System.String]
    # The namespace name.
    ${NamespaceName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The APNS certificate.
    # Specify if using Certificate Authentication Mode.
    ${ApnsCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The APNS certificate password if it exists.
    ${ApnsCredentialPropertiesCertificateKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The APNS certificate thumbprint.
    # Specify if using Certificate Authentication Mode.
    ${ApnsCredentialPropertiesThumbprint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The issuer (iss) registered claim key.
    # The value is a 10-character TeamId, obtained from your developer account.
    # Specify if using Token Authentication Mode.
    ${AppId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The name of the application or BundleId.
    # Specify if using Token Authentication Mode.
    ${AppName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The URL of the authorization token.
    ${AuthTokenUrl},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.ISharedAccessAuthorizationRuleProperties[]]
    # The AuthorizationRules of the created NotificationHub
    # To construct, see NOTES section for AUTHORIZATIONRULE properties and create a hash table.
    ${AuthorizationRule},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # Baidu Api Key.
    ${BaiduApiKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # Baidu Endpoint.
    ${BaiduEndPoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # Baidu Secret Key
    ${BaiduSecretKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The client identifier.
    ${ClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The credential secret access key.
    ${ClientSecret},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The APNS endpoint of this credential.
    # If using Certificate Authentication Mode and Sandbox specify 'gateway.sandbox.push.apple.com'.
    # If using Certificate Authentication Mode and Production specify 'gateway.push.apple.com'.
    # If using Token Authentication Mode and Sandbox specify 'https://api.development.push.apple.com:443/3/device'.
    # If using Token Authentication Mode and Production specify 'https://api.push.apple.com:443/3/device'.
    ${Endpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The FCM legacy endpoint.
    # Default value is 'https://fcm.googleapis.com/fcm/send'
    ${GcmEndpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The Google API key.
    ${GoogleApiKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # A 10-character key identifier (kid) key, obtained from your developer account.
    # Specify if using Token Authentication Mode.
    ${KeyId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # Resource location
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The MPNS certificate.
    ${MpnsCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The certificate key for this credential.
    ${MpnsCredentialPropertiesCertificateKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The MPNS certificate Thumbprint
    ${MpnsCredentialPropertiesThumbprint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The package ID for this credential.
    ${PackageSid},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The NotificationHub name.
    ${PropertiesName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The RegistrationTtl of the created NotificationHub
    ${RegistrationTtl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The secret key.
    ${SecretKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.Int32]
    # The capacity of the resource
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The Sku Family
    ${SkuFamily},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName]
    # Name of the notification hub sku
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The Sku size
    ${SkuSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The tier of particular sku
    ${SkuTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.IResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # Provider Authentication Token, obtained through your developer account.
    # Specify if using Token Authentication Mode.
    ${Token},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Body')]
    [System.String]
    # The Windows Live endpoint.
    ${WindowsLiveEndpoint},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.NotificationHubs.private\New-AzNotificationHubsNotificationHub_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
