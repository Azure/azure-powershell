// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Extensions;

    /// <summary>A transaction.</summary>
    public partial class Transaction :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransaction,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.Resource();

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AmountCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmountCurrency; }

        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AmountValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmountValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmountValue = value ?? default(float); }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AzureCreditAppliedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditAppliedCurrency; }

        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AzureCreditAppliedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditAppliedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditAppliedValue = value ?? default(float); }

        /// <summary>The type of azure plan of the subscription that was used for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AzurePlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzurePlan; }

        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingCurrency; }

        /// <summary>The name of the billing profile which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingProfileDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingProfileDisplayName; }

        /// <summary>The ID of the billing profile which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingProfileId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingProfileId; }

        /// <summary>
        /// The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string CustomerDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).CustomerDisplayName; }

        /// <summary>
        /// The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string CustomerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).CustomerId; }

        /// <summary>The date of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? Date { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Date; }

        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? Discount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Discount; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string EffectivePriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePriceCurrency; }

        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? EffectivePriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePriceValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePriceValue = value ?? default(float); }

        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? ExchangeRate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ExchangeRate; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Id; }

        /// <summary>
        /// Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string Invoice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Invoice; }

        /// <summary>
        /// The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string InvoiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceId; }

        /// <summary>The name of the invoice section which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string InvoiceSectionDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceSectionDisplayName; }

        /// <summary>The ID of the invoice section which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string InvoiceSectionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceSectionId; }

        /// <summary>The kind of transaction. Options are all or reservation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionTypeKind? Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Kind = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionTypeKind)""); }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string MarketPriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPriceCurrency; }

        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? MarketPriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPriceValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPriceValue = value ?? default(float); }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Type = value; }

        /// <summary>Internal Acessors for Amount</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Amount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmount = value; }

        /// <summary>Internal Acessors for AmountCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.AmountCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmountCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionAmountCurrency = value; }

        /// <summary>Internal Acessors for AzureCreditApplied</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.AzureCreditApplied { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditApplied; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditApplied = value; }

        /// <summary>Internal Acessors for AzureCreditAppliedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.AzureCreditAppliedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditAppliedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzureCreditAppliedCurrency = value; }

        /// <summary>Internal Acessors for AzurePlan</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.AzurePlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzurePlan; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).AzurePlan = value; }

        /// <summary>Internal Acessors for BillingCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.BillingCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingCurrency = value; }

        /// <summary>Internal Acessors for BillingProfileDisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.BillingProfileDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingProfileDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingProfileDisplayName = value; }

        /// <summary>Internal Acessors for BillingProfileId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.BillingProfileId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingProfileId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).BillingProfileId = value; }

        /// <summary>Internal Acessors for CustomerDisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.CustomerDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).CustomerDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).CustomerDisplayName = value; }

        /// <summary>Internal Acessors for CustomerId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.CustomerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).CustomerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).CustomerId = value; }

        /// <summary>Internal Acessors for Date</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Date { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Date; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Date = value; }

        /// <summary>Internal Acessors for Discount</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Discount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Discount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Discount = value; }

        /// <summary>Internal Acessors for EffectivePrice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.EffectivePrice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePrice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePrice = value; }

        /// <summary>Internal Acessors for EffectivePriceCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.EffectivePriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePriceCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).EffectivePriceCurrency = value; }

        /// <summary>Internal Acessors for ExchangeRate</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ExchangeRate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ExchangeRate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ExchangeRate = value; }

        /// <summary>Internal Acessors for Invoice</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Invoice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Invoice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Invoice = value; }

        /// <summary>Internal Acessors for InvoiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.InvoiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceId = value; }

        /// <summary>Internal Acessors for InvoiceSectionDisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.InvoiceSectionDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceSectionDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceSectionDisplayName = value; }

        /// <summary>Internal Acessors for InvoiceSectionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.InvoiceSectionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceSectionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).InvoiceSectionId = value; }

        /// <summary>Internal Acessors for MarketPrice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.MarketPrice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPrice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPrice = value; }

        /// <summary>Internal Acessors for MarketPriceCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.MarketPriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPriceCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).MarketPriceCurrency = value; }

        /// <summary>Internal Acessors for OrderId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.OrderId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).OrderId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).OrderId = value; }

        /// <summary>Internal Acessors for OrderName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.OrderName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).OrderName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).OrderName = value; }

        /// <summary>Internal Acessors for PricingCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.PricingCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).PricingCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).PricingCurrency = value; }

        /// <summary>Internal Acessors for ProductDescription</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ProductDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductDescription = value; }

        /// <summary>Internal Acessors for ProductFamily</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ProductFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductFamily = value; }

        /// <summary>Internal Acessors for ProductType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ProductType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductType = value; }

        /// <summary>Internal Acessors for ProductTypeId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ProductTypeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductTypeId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductTypeId = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionProperties Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.TransactionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Quantity</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Quantity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Quantity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Quantity = value; }

        /// <summary>Internal Acessors for ServicePeriodEndDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ServicePeriodEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ServicePeriodEndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ServicePeriodEndDate = value; }

        /// <summary>Internal Acessors for ServicePeriodStartDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.ServicePeriodStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ServicePeriodStartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ServicePeriodStartDate = value; }

        /// <summary>Internal Acessors for SubTotal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.SubTotal { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotal; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotal = value; }

        /// <summary>Internal Acessors for SubTotalCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.SubTotalCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotalCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotalCurrency = value; }

        /// <summary>Internal Acessors for SubscriptionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.SubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubscriptionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubscriptionId = value; }

        /// <summary>Internal Acessors for SubscriptionName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.SubscriptionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubscriptionName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubscriptionName = value; }

        /// <summary>Internal Acessors for Tax</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Tax { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Tax; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Tax = value; }

        /// <summary>Internal Acessors for TaxCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.TaxCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TaxCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TaxCurrency = value; }

        /// <summary>Internal Acessors for Unit</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.Unit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Unit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Unit = value; }

        /// <summary>Internal Acessors for UnitOfMeasure</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.UnitOfMeasure { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).UnitOfMeasure; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).UnitOfMeasure = value; }

        /// <summary>Internal Acessors for UnitType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionInternal.UnitType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).UnitType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).UnitType = value; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Name; }

        /// <summary>
        /// The order ID of the reservation. The field is only applicable for transaction of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string OrderId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).OrderId; }

        /// <summary>
        /// The name of the reservation order. The field is only applicable for transactions of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string OrderName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).OrderName; }

        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string PricingCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).PricingCurrency; }

        /// <summary>The description of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductDescription; }

        /// <summary>The family of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductFamily; }

        /// <summary>The type of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductType; }

        /// <summary>The ID of the product type for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductTypeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ProductTypeId; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionProperties _property;

        /// <summary>The properties of a transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.TransactionProperties()); set => this._property = value; }

        /// <summary>The quantity purchased in the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public int? Quantity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Quantity; }

        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? ServicePeriodEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ServicePeriodEndDate; }

        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? ServicePeriodStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).ServicePeriodStartDate; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string SubTotalCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotalCurrency; }

        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? SubTotalValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotalValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubTotalValue = value ?? default(float); }

        /// <summary>
        /// The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string SubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubscriptionId; }

        /// <summary>
        /// The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string SubscriptionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).SubscriptionName; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string TaxCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TaxCurrency; }

        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? TaxValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TaxValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TaxValue = value ?? default(float); }

        /// <summary>The type of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.ReservationType? TransactionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).TransactionType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.ReservationType)""); }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal)__resource).Type; }

        /// <summary>The number of units used for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? Unit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).Unit; }

        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string UnitOfMeasure { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).UnitOfMeasure; }

        /// <summary>The description for the unit of measure for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string UnitType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionPropertiesInternal)Property).UnitType; }

        /// <summary>Creates an new <see cref="Transaction" /> instance.</summary>
        public Transaction()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// A transaction.
    public partial interface ITransaction :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResource
    {
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AmountCurrency { get;  }
        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amount value.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AmountValue { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AzureCreditAppliedCurrency { get;  }
        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amount value.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AzureCreditAppliedValue { get; set; }
        /// <summary>The type of azure plan of the subscription that was used for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The type of azure plan of the subscription that was used for the transaction.",
        SerializedName = @"azurePlan",
        PossibleTypes = new [] { typeof(string) })]
        string AzurePlan { get;  }
        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ISO 4217 code for the currency in which this transaction is billed.",
        SerializedName = @"billingCurrency",
        PossibleTypes = new [] { typeof(string) })]
        string BillingCurrency { get;  }
        /// <summary>The name of the billing profile which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the billing profile which will be billed for the transaction.",
        SerializedName = @"billingProfileDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileDisplayName { get;  }
        /// <summary>The ID of the billing profile which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ID of the billing profile which will be billed for the transaction.",
        SerializedName = @"billingProfileId",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileId { get;  }
        /// <summary>
        /// The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.",
        SerializedName = @"customerDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerDisplayName { get;  }
        /// <summary>
        /// The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.",
        SerializedName = @"customerId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerId { get;  }
        /// <summary>The date of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The date of transaction.",
        SerializedName = @"date",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Date { get;  }
        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The percentage discount, if any, applied to this transaction.",
        SerializedName = @"discount",
        PossibleTypes = new [] { typeof(float) })]
        float? Discount { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string EffectivePriceCurrency { get;  }
        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amount value.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? EffectivePriceValue { get; set; }
        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The exchange rate used to convert charged amount to billing currency, if applicable.",
        SerializedName = @"exchangeRate",
        PossibleTypes = new [] { typeof(float) })]
        float? ExchangeRate { get;  }
        /// <summary>
        /// Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Invoice on which the transaction was billed or 'pending' if the transaction is not billed.",
        SerializedName = @"invoice",
        PossibleTypes = new [] { typeof(string) })]
        string Invoice { get;  }
        /// <summary>
        /// The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.",
        SerializedName = @"invoiceId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceId { get;  }
        /// <summary>The name of the invoice section which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the invoice section which will be billed for the transaction.",
        SerializedName = @"invoiceSectionDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionDisplayName { get;  }
        /// <summary>The ID of the invoice section which will be billed for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ID of the invoice section which will be billed for the transaction.",
        SerializedName = @"invoiceSectionId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionId { get;  }
        /// <summary>The kind of transaction. Options are all or reservation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The kind of transaction. Options are all or reservation.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionTypeKind) })]
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionTypeKind? Kind { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string MarketPriceCurrency { get;  }
        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amount value.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? MarketPriceValue { get; set; }
        /// <summary>
        /// The order ID of the reservation. The field is only applicable for transaction of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The order ID of the reservation. The field is only applicable for transaction of kind reservation.",
        SerializedName = @"orderId",
        PossibleTypes = new [] { typeof(string) })]
        string OrderId { get;  }
        /// <summary>
        /// The name of the reservation order. The field is only applicable for transactions of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the reservation order. The field is only applicable for transactions of kind reservation.",
        SerializedName = @"orderName",
        PossibleTypes = new [] { typeof(string) })]
        string OrderName { get;  }
        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ISO 4217 code for the currency in which the product is priced.",
        SerializedName = @"pricingCurrency",
        PossibleTypes = new [] { typeof(string) })]
        string PricingCurrency { get;  }
        /// <summary>The description of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The description of the product for which the transaction took place.",
        SerializedName = @"productDescription",
        PossibleTypes = new [] { typeof(string) })]
        string ProductDescription { get;  }
        /// <summary>The family of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The family of the product for which the transaction took place.",
        SerializedName = @"productFamily",
        PossibleTypes = new [] { typeof(string) })]
        string ProductFamily { get;  }
        /// <summary>The type of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The type of the product for which the transaction took place.",
        SerializedName = @"productType",
        PossibleTypes = new [] { typeof(string) })]
        string ProductType { get;  }
        /// <summary>The ID of the product type for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ID of the product type for which the transaction took place.",
        SerializedName = @"productTypeId",
        PossibleTypes = new [] { typeof(string) })]
        string ProductTypeId { get;  }
        /// <summary>The quantity purchased in the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The quantity purchased in the transaction.",
        SerializedName = @"quantity",
        PossibleTypes = new [] { typeof(int) })]
        int? Quantity { get;  }
        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The end date of the product term, or the end date of the month in which usage ended.",
        SerializedName = @"servicePeriodEndDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodEndDate { get;  }
        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The date of the purchase of the product, or the start date of the month in which usage started.",
        SerializedName = @"servicePeriodStartDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodStartDate { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string SubTotalCurrency { get;  }
        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amount value.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? SubTotalValue { get; set; }
        /// <summary>
        /// The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get;  }
        /// <summary>
        /// The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.",
        SerializedName = @"subscriptionName",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionName { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string TaxCurrency { get;  }
        /// <summary>Amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amount value.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? TaxValue { get; set; }
        /// <summary>The type of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of transaction.",
        SerializedName = @"transactionType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.ReservationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.ReservationType? TransactionType { get; set; }
        /// <summary>The number of units used for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The number of units used for a given product.",
        SerializedName = @"units",
        PossibleTypes = new [] { typeof(float) })]
        float? Unit { get;  }
        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unit of measure used to bill for the product. For example, compute services are billed per hour.",
        SerializedName = @"unitOfMeasure",
        PossibleTypes = new [] { typeof(string) })]
        string UnitOfMeasure { get;  }
        /// <summary>The description for the unit of measure for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The description for the unit of measure for a given product.",
        SerializedName = @"unitType",
        PossibleTypes = new [] { typeof(string) })]
        string UnitType { get;  }

    }
    /// A transaction.
    internal partial interface ITransactionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20180301Preview.IResourceInternal
    {
        /// <summary>The charge associated with the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Amount { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AmountCurrency { get; set; }
        /// <summary>Amount value.</summary>
        float? AmountValue { get; set; }
        /// <summary>The amount of any Azure credits automatically applied to this transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount AzureCreditApplied { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AzureCreditAppliedCurrency { get; set; }
        /// <summary>Amount value.</summary>
        float? AzureCreditAppliedValue { get; set; }
        /// <summary>The type of azure plan of the subscription that was used for the transaction.</summary>
        string AzurePlan { get; set; }
        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        string BillingCurrency { get; set; }
        /// <summary>The name of the billing profile which will be billed for the transaction.</summary>
        string BillingProfileDisplayName { get; set; }
        /// <summary>The ID of the billing profile which will be billed for the transaction.</summary>
        string BillingProfileId { get; set; }
        /// <summary>
        /// The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        string CustomerDisplayName { get; set; }
        /// <summary>
        /// The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        string CustomerId { get; set; }
        /// <summary>The date of transaction.</summary>
        global::System.DateTime? Date { get; set; }
        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        float? Discount { get; set; }
        /// <summary>The price of the product after applying any discounts.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount EffectivePrice { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string EffectivePriceCurrency { get; set; }
        /// <summary>Amount value.</summary>
        float? EffectivePriceValue { get; set; }
        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        float? ExchangeRate { get; set; }
        /// <summary>
        /// Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
        /// </summary>
        string Invoice { get; set; }
        /// <summary>
        /// The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.
        /// </summary>
        string InvoiceId { get; set; }
        /// <summary>The name of the invoice section which will be billed for the transaction.</summary>
        string InvoiceSectionDisplayName { get; set; }
        /// <summary>The ID of the invoice section which will be billed for the transaction.</summary>
        string InvoiceSectionId { get; set; }
        /// <summary>The kind of transaction. Options are all or reservation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionTypeKind? Kind { get; set; }
        /// <summary>The retail price of the product.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount MarketPrice { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string MarketPriceCurrency { get; set; }
        /// <summary>Amount value.</summary>
        float? MarketPriceValue { get; set; }
        /// <summary>
        /// The order ID of the reservation. The field is only applicable for transaction of kind reservation.
        /// </summary>
        string OrderId { get; set; }
        /// <summary>
        /// The name of the reservation order. The field is only applicable for transactions of kind reservation.
        /// </summary>
        string OrderName { get; set; }
        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        string PricingCurrency { get; set; }
        /// <summary>The description of the product for which the transaction took place.</summary>
        string ProductDescription { get; set; }
        /// <summary>The family of the product for which the transaction took place.</summary>
        string ProductFamily { get; set; }
        /// <summary>The type of the product for which the transaction took place.</summary>
        string ProductType { get; set; }
        /// <summary>The ID of the product type for which the transaction took place.</summary>
        string ProductTypeId { get; set; }
        /// <summary>The properties of a transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.ITransactionProperties Property { get; set; }
        /// <summary>The quantity purchased in the transaction.</summary>
        int? Quantity { get; set; }
        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        global::System.DateTime? ServicePeriodEndDate { get; set; }
        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        global::System.DateTime? ServicePeriodStartDate { get; set; }
        /// <summary>The pre-tax charged amount for the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount SubTotal { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string SubTotalCurrency { get; set; }
        /// <summary>Amount value.</summary>
        float? SubTotalValue { get; set; }
        /// <summary>
        /// The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
        /// </summary>
        string SubscriptionId { get; set; }
        /// <summary>
        /// The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
        /// </summary>
        string SubscriptionName { get; set; }
        /// <summary>The tax amount applied to the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20200501.IAmount Tax { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string TaxCurrency { get; set; }
        /// <summary>Amount value.</summary>
        float? TaxValue { get; set; }
        /// <summary>The type of transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.ReservationType? TransactionType { get; set; }
        /// <summary>The number of units used for a given product.</summary>
        float? Unit { get; set; }
        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        string UnitOfMeasure { get; set; }
        /// <summary>The description for the unit of measure for a given product.</summary>
        string UnitType { get; set; }

    }
}