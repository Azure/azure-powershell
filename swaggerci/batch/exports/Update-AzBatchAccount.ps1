
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates the properties of an existing Batch account.
.Description
Updates the properties of an existing Batch account.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IBatchIdentity>: Identity Parameter
  [AccountName <String>]: A name for the Batch account which must be unique within the region. Batch account names must be between 3 and 24 characters in length and must use only numbers and lowercase letters. This name is used as part of the DNS name that is used to access the Batch service in the region in which the account is created. For example: http://accountname.region.batch.azure.com/.
  [ApplicationName <String>]: The name of the application. This must be unique within the account.
  [CertificateName <String>]: The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5.
  [DetectorId <String>]: The name of the detector.
  [Id <String>]: Resource identity path
  [LocationName <String>]: The region for which to retrieve Batch service quotas.
  [PoolName <String>]: The pool name. This must be unique within the account.
  [PrivateEndpointConnectionName <String>]: The private endpoint connection name. This must be unique within the account.
  [PrivateLinkResourceName <String>]: The private link resource name. This must be unique within the account.
  [ResourceGroupName <String>]: The name of the resource group that contains the Batch account.
  [SubscriptionId <String>]: The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
  [VersionName <String>]: The version of the application.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.batch/update-azbatchaccount
#>
function Update-AzBatchAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchAccount])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [System.String]
    # The name of the Batch account.
    ${AccountName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [System.String]
    # The name of the resource group that contains the Batch account.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The Azure subscription ID.
    # This is a GUID-formatted string (e.g.
    # 00000000-0000-0000-0000-000000000000)
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[]]
    # List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane.
    # This does not affect authentication with the control plane.
    ${AllowedAuthenticationMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The resource ID of the storage account to be used for auto-storage account.
    ${AutoStorageAccountId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode]
    # The authentication mode which the Batch service will use to manage the auto-storage account.
    ${AutoStorageAuthenticationMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource]
    # Type of the key source.
    ${EncryptionKeySource},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType]
    # The type of identity used for the Batch account.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchAccountIdentityUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The list of user identities associated with the Batch account.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # Full path to the versioned secret.
    # Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
    # To be usable the following prerequisites must be met: The Batch Account has a System Assigned identity The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions The KeyVault has soft-delete and purge protection enabled
    ${KeyVaultPropertyKeyIdentifier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The ARM resource id of the user assigned identity.
    ${NodeIdentityReferenceResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchAccountUpdateParametersTags]))]
    [System.Collections.Hashtable]
    # The user-specified tags associated with the account.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Batch.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Batch.private\Update-AzBatchAccount_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Batch.private\Update-AzBatchAccount_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Batch.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
