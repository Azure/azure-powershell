// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The network configuration for a pool.</summary>
    public partial class NetworkConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INetworkConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INetworkConfigurationInternal
    {

        /// <summary>Backing field for <see cref="DynamicVNetAssignmentScope" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? _dynamicVNetAssignmentScope;

        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? DynamicVNetAssignmentScope { get => this._dynamicVNetAssignmentScope; set => this._dynamicVNetAssignmentScope = value; }

        /// <summary>Backing field for <see cref="EndpointConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfiguration _endpointConfiguration;

        /// <summary>
        /// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfiguration EndpointConfiguration { get => (this._endpointConfiguration = this._endpointConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.PoolEndpointConfiguration()); set => this._endpointConfiguration = value; }

        /// <summary>
        /// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the
        /// request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool[] EndpointConfigurationInboundNatPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfigurationInternal)EndpointConfiguration).InboundNatPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfigurationInternal)EndpointConfiguration).InboundNatPool = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for EndpointConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INetworkConfigurationInternal.EndpointConfiguration { get => (this._endpointConfiguration = this._endpointConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.PoolEndpointConfiguration()); set { {_endpointConfiguration = value;} } }

        /// <summary>Internal Acessors for PublicIPAddressConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INetworkConfigurationInternal.PublicIPAddressConfiguration { get => (this._publicIPAddressConfiguration = this._publicIPAddressConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.PublicIPAddressConfiguration()); set { {_publicIPAddressConfiguration = value;} } }

        /// <summary>Backing field for <see cref="PublicIPAddressConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfiguration _publicIPAddressConfiguration;

        /// <summary>
        /// This property is only supported on Pools with the virtualMachineConfiguration property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfiguration PublicIPAddressConfiguration { get => (this._publicIPAddressConfiguration = this._publicIPAddressConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.PublicIPAddressConfiguration()); set => this._publicIPAddressConfiguration = value; }

        /// <summary>
        /// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes
        /// can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified.
        /// Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string[] PublicIPAddressConfigurationIpaddressId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).IPAddressId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).IPAddressId = value ?? null /* arrayOf */; }

        /// <summary>The default value is BatchManaged</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType? PublicIPAddressConfigurationProvision { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).Provision; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).Provision = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType)""); }

        /// <summary>Backing field for <see cref="SubnetId" /> property.</summary>
        private string _subnetId;

        /// <summary>
        /// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP
        /// addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute
        /// nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute
        /// nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system
        /// ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports
        /// 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration,
        /// enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration
        /// pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string SubnetId { get => this._subnetId; set => this._subnetId = value; }

        /// <summary>Creates an new <see cref="NetworkConfiguration" /> instance.</summary>
        public NetworkConfiguration()
        {

        }
    }
    /// The network configuration for a pool.
    public partial interface INetworkConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope of dynamic vnet assignment.",
        SerializedName = @"dynamicVNetAssignmentScope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? DynamicVNetAssignmentScope { get; set; }
        /// <summary>
        /// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the
        /// request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.",
        SerializedName = @"inboundNatPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool[] EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>
        /// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes
        /// can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified.
        /// Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        string[] PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>The default value is BatchManaged</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is BatchManaged",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType? PublicIPAddressConfigurationProvision { get; set; }
        /// <summary>
        /// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP
        /// addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute
        /// nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute
        /// nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system
        /// ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports
        /// 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration,
        /// enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration
        /// pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetId { get; set; }

    }
    /// The network configuration for a pool.
    internal partial interface INetworkConfigurationInternal

    {
        /// <summary>The scope of dynamic vnet assignment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? DynamicVNetAssignmentScope { get; set; }
        /// <summary>
        /// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfiguration EndpointConfiguration { get; set; }
        /// <summary>
        /// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the
        /// request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool[] EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>
        /// This property is only supported on Pools with the virtualMachineConfiguration property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfiguration PublicIPAddressConfiguration { get; set; }
        /// <summary>
        /// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes
        /// can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified.
        /// Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        string[] PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>The default value is BatchManaged</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType? PublicIPAddressConfigurationProvision { get; set; }
        /// <summary>
        /// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP
        /// addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute
        /// nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute
        /// nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system
        /// ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports
        /// 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration,
        /// enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration
        /// pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        string SubnetId { get; set; }

    }
}