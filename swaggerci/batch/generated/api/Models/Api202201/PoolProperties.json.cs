// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Pool properties.</summary>
    public partial class PoolProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json ? new PoolProperties(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject into a new instance of <see cref="PoolProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PoolProperties(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_scaleSetting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("scaleSettings"), out var __jsonScaleSettings) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ScaleSettings.FromJson(__jsonScaleSettings) : ScaleSetting;}
            {_autoScaleRun = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("autoScaleRun"), out var __jsonAutoScaleRun) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.AutoScaleRun.FromJson(__jsonAutoScaleRun) : AutoScaleRun;}
            {_networkConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("networkConfiguration"), out var __jsonNetworkConfiguration) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.NetworkConfiguration.FromJson(__jsonNetworkConfiguration) : NetworkConfiguration;}
            {_taskSchedulingPolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("taskSchedulingPolicy"), out var __jsonTaskSchedulingPolicy) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.TaskSchedulingPolicy.FromJson(__jsonTaskSchedulingPolicy) : TaskSchedulingPolicy;}
            {_startTask = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("startTask"), out var __jsonStartTask) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.StartTask.FromJson(__jsonStartTask) : StartTask;}
            {_resizeOperationStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("resizeOperationStatus"), out var __jsonResizeOperationStatus) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ResizeOperationStatus.FromJson(__jsonResizeOperationStatus) : ResizeOperationStatus;}
            {_displayName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("displayName"), out var __jsonDisplayName) ? (string)__jsonDisplayName : (string)DisplayName;}
            {_lastModified = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("lastModified"), out var __jsonLastModified) ? global::System.DateTime.TryParse((string)__jsonLastModified, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastModifiedValue) ? __jsonLastModifiedValue : LastModified : LastModified;}
            {_creationTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("creationTime"), out var __jsonCreationTime) ? global::System.DateTime.TryParse((string)__jsonCreationTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonCreationTimeValue) ? __jsonCreationTimeValue : CreationTime : CreationTime;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)ProvisioningState;}
            {_provisioningStateTransitionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("provisioningStateTransitionTime"), out var __jsonProvisioningStateTransitionTime) ? global::System.DateTime.TryParse((string)__jsonProvisioningStateTransitionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonProvisioningStateTransitionTimeValue) ? __jsonProvisioningStateTransitionTimeValue : ProvisioningStateTransitionTime : ProvisioningStateTransitionTime;}
            {_allocationState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("allocationState"), out var __jsonAllocationState) ? (string)__jsonAllocationState : (string)AllocationState;}
            {_allocationStateTransitionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("allocationStateTransitionTime"), out var __jsonAllocationStateTransitionTime) ? global::System.DateTime.TryParse((string)__jsonAllocationStateTransitionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonAllocationStateTransitionTimeValue) ? __jsonAllocationStateTransitionTimeValue : AllocationStateTransitionTime : AllocationStateTransitionTime;}
            {_vMSize = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("vmSize"), out var __jsonVMSize) ? (string)__jsonVMSize : (string)VMSize;}
            {_currentDedicatedNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("currentDedicatedNodes"), out var __jsonCurrentDedicatedNodes) ? (int?)__jsonCurrentDedicatedNodes : CurrentDedicatedNode;}
            {_currentLowPriorityNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("currentLowPriorityNodes"), out var __jsonCurrentLowPriorityNodes) ? (int?)__jsonCurrentLowPriorityNodes : CurrentLowPriorityNode;}
            {_interNodeCommunication = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("interNodeCommunication"), out var __jsonInterNodeCommunication) ? (string)__jsonInterNodeCommunication : (string)InterNodeCommunication;}
            {_taskSlotsPerNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("taskSlotsPerNode"), out var __jsonTaskSlotsPerNode) ? (int?)__jsonTaskSlotsPerNode : TaskSlotsPerNode;}
            {_userAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("userAccounts"), out var __jsonUserAccounts) ? If( __jsonUserAccounts as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.UserAccount.FromJson(__u) )) ))() : null : UserAccount;}
            {_metadata = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("metadata"), out var __jsonMetadata) ? If( __jsonMetadata as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMetadataItem[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMetadataItem) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.MetadataItem.FromJson(__p) )) ))() : null : Metadata;}
            {_certificate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("certificates"), out var __jsonCertificates) ? If( __jsonCertificates as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICertificateReference[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICertificateReference) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.CertificateReference.FromJson(__k) )) ))() : null : Certificate;}
            {_applicationPackage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("applicationPackages"), out var __jsonApplicationPackages) ? If( __jsonApplicationPackages as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IApplicationPackageReference[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IApplicationPackageReference) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ApplicationPackageReference.FromJson(__f) )) ))() : null : ApplicationPackage;}
            {_applicationLicense = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("applicationLicenses"), out var __jsonApplicationLicenses) ? If( __jsonApplicationLicenses as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(string) (__a is Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString ___z ? (string)(___z.ToString()) : null)) ))() : null : ApplicationLicense;}
            {_mountConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("mountConfiguration"), out var __jsonMountConfiguration) ? If( __jsonMountConfiguration as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMountConfiguration[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMountConfiguration) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.MountConfiguration.FromJson(___v) )) ))() : null : MountConfiguration;}
            {_deploymentConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("deploymentConfiguration"), out var __jsonDeploymentConfiguration) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.DeploymentConfiguration.FromJson(__jsonDeploymentConfiguration) : DeploymentConfiguration;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PoolProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PoolProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._scaleSetting ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._scaleSetting.ToJson(null,serializationMode) : null, "scaleSettings" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._autoScaleRun ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._autoScaleRun.ToJson(null,serializationMode) : null, "autoScaleRun" ,container.Add );
            }
            AddIf( null != this._networkConfiguration ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._networkConfiguration.ToJson(null,serializationMode) : null, "networkConfiguration" ,container.Add );
            AddIf( null != this._taskSchedulingPolicy ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._taskSchedulingPolicy.ToJson(null,serializationMode) : null, "taskSchedulingPolicy" ,container.Add );
            AddIf( null != this._startTask ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._startTask.ToJson(null,serializationMode) : null, "startTask" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._resizeOperationStatus ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._resizeOperationStatus.ToJson(null,serializationMode) : null, "resizeOperationStatus" ,container.Add );
            }
            AddIf( null != (((object)this._displayName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._displayName.ToString()) : null, "displayName" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._lastModified ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._lastModified?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastModified" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._creationTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._creationTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "creationTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._provisioningStateTransitionTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._provisioningStateTransitionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "provisioningStateTransitionTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._allocationState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._allocationState.ToString()) : null, "allocationState" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._allocationStateTransitionTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._allocationStateTransitionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "allocationStateTransitionTime" ,container.Add );
            }
            AddIf( null != (((object)this._vMSize)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._vMSize.ToString()) : null, "vmSize" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._currentDedicatedNode ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber((int)this._currentDedicatedNode) : null, "currentDedicatedNodes" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._currentLowPriorityNode ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber((int)this._currentLowPriorityNode) : null, "currentLowPriorityNodes" ,container.Add );
            }
            AddIf( null != (((object)this._interNodeCommunication)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._interNodeCommunication.ToString()) : null, "interNodeCommunication" ,container.Add );
            AddIf( null != this._taskSlotsPerNode ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber((int)this._taskSlotsPerNode) : null, "taskSlotsPerNode" ,container.Add );
            if (null != this._userAccount)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __x in this._userAccount )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("userAccounts",__w);
            }
            if (null != this._metadata)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __s in this._metadata )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("metadata",__r);
            }
            if (null != this._certificate)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __n in this._certificate )
                {
                    AddIf(__n?.ToJson(null, serializationMode) ,__m.Add);
                }
                container.Add("certificates",__m);
            }
            if (null != this._applicationPackage)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __i in this._applicationPackage )
                {
                    AddIf(__i?.ToJson(null, serializationMode) ,__h.Add);
                }
                container.Add("applicationPackages",__h);
            }
            if (null != this._applicationLicense)
            {
                var __c = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __d in this._applicationLicense )
                {
                    AddIf(null != (((object)__d)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(__d.ToString()) : null ,__c.Add);
                }
                container.Add("applicationLicenses",__c);
            }
            if (null != this._mountConfiguration)
            {
                var ___x = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var ___y in this._mountConfiguration )
                {
                    AddIf(___y?.ToJson(null, serializationMode) ,___x.Add);
                }
                container.Add("mountConfiguration",___x);
            }
            AddIf( null != this._deploymentConfiguration ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._deploymentConfiguration.ToJson(null,serializationMode) : null, "deploymentConfiguration" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}