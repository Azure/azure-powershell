// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Deployment configuration properties.</summary>
    public partial class DeploymentConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal
    {

        /// <summary>Backing field for <see cref="CloudServiceConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfiguration _cloudServiceConfiguration;

        /// <summary>
        /// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This
        /// property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfiguration CloudServiceConfiguration { get => (this._cloudServiceConfiguration = this._cloudServiceConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.CloudServiceConfiguration()); set => this._cloudServiceConfiguration = value; }

        /// <summary>
        /// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows
        /// Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string CloudServiceConfigurationOSFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfigurationInternal)CloudServiceConfiguration).OSFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfigurationInternal)CloudServiceConfiguration).OSFamily = value ?? null; }

        /// <summary>
        /// The default value is * which specifies the latest operating system version for the specified OS family.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string CloudServiceConfigurationOSVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfigurationInternal)CloudServiceConfiguration).OSVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfigurationInternal)CloudServiceConfiguration).OSVersion = value ?? null; }

        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker
        /// registry unless the image is fully qualified with an alternative registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string[] ContainerConfigurationContainerImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationContainerImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationContainerImageName = value ?? null /* arrayOf */; }

        /// <summary>
        /// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided
        /// here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry[] ContainerConfigurationContainerRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationContainerRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationContainerRegistry = value ?? null /* arrayOf */; }

        /// <summary>The container technology to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationType; }

        /// <summary>
        /// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiskEncryptionTarget[] DiskEncryptionConfigurationTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).DiskEncryptionConfigurationTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).DiskEncryptionConfigurationTarget = value ?? null /* arrayOf */; }

        /// <summary>
        /// This property can be used by user in the request to choose which location the operating system should be in. e.g., cache
        /// disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer
        /// to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements
        /// and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiffDiskPlacement? EphemeralOSDiskSettingPlacement { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).EphemeralOSDiskSettingPlacement; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).EphemeralOSDiskSettingPlacement = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiffDiskPlacement)""); }

        /// <summary>
        /// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same
        /// region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate
        /// with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceId = value ?? null; }

        /// <summary>For example, UbuntuServer or WindowsServer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceOffer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceOffer = value ?? null; }

        /// <summary>For example, Canonical or MicrosoftWindowsServer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferencePublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferencePublisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferencePublisher = value ?? null; }

        /// <summary>For example, 18.04-LTS or 2022-datacenter.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceSku = value ?? null; }

        /// <summary>
        /// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReferenceVersion = value ?? null; }

        /// <summary>Internal Acessors for CloudServiceConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.CloudServiceConfiguration { get => (this._cloudServiceConfiguration = this._cloudServiceConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.CloudServiceConfiguration()); set { {_cloudServiceConfiguration = value;} } }

        /// <summary>Internal Acessors for ContainerConfigurationType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.ContainerConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfigurationType = value; }

        /// <summary>Internal Acessors for OSDiskEphemeralOsdiskSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDiffDiskSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.OSDiskEphemeralOsdiskSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).OSDiskEphemeralOsdiskSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).OSDiskEphemeralOsdiskSetting = value; }

        /// <summary>Internal Acessors for VirtualMachineConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfiguration { get => (this._virtualMachineConfiguration = this._virtualMachineConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.VirtualMachineConfiguration()); set { {_virtualMachineConfiguration = value;} } }

        /// <summary>Internal Acessors for VirtualMachineConfigurationContainerConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfigurationContainerConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ContainerConfiguration = value; }

        /// <summary>Internal Acessors for VirtualMachineConfigurationDiskEncryptionConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDiskEncryptionConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfigurationDiskEncryptionConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).DiskEncryptionConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).DiskEncryptionConfiguration = value; }

        /// <summary>Internal Acessors for VirtualMachineConfigurationImageReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IImageReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfigurationImageReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).ImageReference = value; }

        /// <summary>Internal Acessors for VirtualMachineConfigurationNodePlacementConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INodePlacementConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfigurationNodePlacementConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).NodePlacementConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).NodePlacementConfiguration = value; }

        /// <summary>Internal Acessors for VirtualMachineConfigurationOSDisk</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IOSDisk Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfigurationOSDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).OSDisk; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).OSDisk = value; }

        /// <summary>Internal Acessors for VirtualMachineConfigurationWindowsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfigurationInternal.VirtualMachineConfigurationWindowsConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).WindowsConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).WindowsConfiguration = value; }

        /// <summary>
        /// Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.NodePlacementPolicyType? NodePlacementConfigurationPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).NodePlacementConfigurationPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).NodePlacementConfigurationPolicy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.NodePlacementPolicyType)""); }

        /// <summary>Backing field for <see cref="VirtualMachineConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfiguration _virtualMachineConfiguration;

        /// <summary>
        /// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfiguration VirtualMachineConfiguration { get => (this._virtualMachineConfiguration = this._virtualMachineConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.VirtualMachineConfiguration()); set => this._virtualMachineConfiguration = value; }

        /// <summary>
        /// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDataDisk[] VirtualMachineConfigurationDataDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).DataDisk; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).DataDisk = value ?? null /* arrayOf */; }

        /// <summary>
        /// If specified, the extensions mentioned in this configuration will be installed on each node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVMExtension[] VirtualMachineConfigurationExtension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).Extension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).Extension = value ?? null /* arrayOf */; }

        /// <summary>
        /// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises
        /// licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// Windows_Server - The on-premises license is for Windows Server.
        /// Windows_Client - The on-premises license is for Windows Client.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VirtualMachineConfigurationLicenseType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).LicenseType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).LicenseType = value ?? null; }

        /// <summary>
        /// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between
        /// the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating
        /// systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node
        /// agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VirtualMachineConfigurationNodeAgentSkuId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).NodeAgentSkuId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).NodeAgentSkuId = value ?? null; }

        /// <summary>If omitted, the default value is true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? WindowConfigurationEnableAutomaticUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).WindowConfigurationEnableAutomaticUpdate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfigurationInternal)VirtualMachineConfiguration).WindowConfigurationEnableAutomaticUpdate = value ?? default(bool); }

        /// <summary>Creates an new <see cref="DeploymentConfiguration" /> instance.</summary>
        public DeploymentConfiguration()
        {

        }
    }
    /// Deployment configuration properties.
    public partial interface IDeploymentConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows
        /// Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).",
        SerializedName = @"osFamily",
        PossibleTypes = new [] { typeof(string) })]
        string CloudServiceConfigurationOSFamily { get; set; }
        /// <summary>
        /// The default value is * which specifies the latest operating system version for the specified OS family.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is * which specifies the latest operating system version for the specified OS family.",
        SerializedName = @"osVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CloudServiceConfigurationOSVersion { get; set; }
        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker
        /// registry unless the image is fully qualified with an alternative registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the full image reference, as would be specified to ""docker pull"". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.",
        SerializedName = @"containerImageNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] ContainerConfigurationContainerImageName { get; set; }
        /// <summary>
        /// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided
        /// here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.",
        SerializedName = @"containerRegistries",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry[] ContainerConfigurationContainerRegistry { get; set; }
        /// <summary>The container technology to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The container technology to be used.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerConfigurationType { get;  }
        /// <summary>
        /// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"On Linux pool, only ""TemporaryDisk"" is supported; on Windows pool, ""OsDisk"" and ""TemporaryDisk"" must be specified.",
        SerializedName = @"targets",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiskEncryptionTarget) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiskEncryptionTarget[] DiskEncryptionConfigurationTarget { get; set; }
        /// <summary>
        /// This property can be used by user in the request to choose which location the operating system should be in. e.g., cache
        /// disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer
        /// to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements
        /// and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.",
        SerializedName = @"placement",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiffDiskPlacement) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiffDiskPlacement? EphemeralOSDiskSettingPlacement { get; set; }
        /// <summary>
        /// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same
        /// region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate
        /// with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceId { get; set; }
        /// <summary>For example, UbuntuServer or WindowsServer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For example, UbuntuServer or WindowsServer.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceOffer { get; set; }
        /// <summary>For example, Canonical or MicrosoftWindowsServer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For example, Canonical or MicrosoftWindowsServer.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferencePublisher { get; set; }
        /// <summary>For example, 18.04-LTS or 2022-datacenter.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For example, 18.04-LTS or 2022-datacenter.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceSku { get; set; }
        /// <summary>
        /// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceVersion { get; set; }
        /// <summary>
        /// Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.",
        SerializedName = @"policy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.NodePlacementPolicyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.NodePlacementPolicyType? NodePlacementConfigurationPolicy { get; set; }
        /// <summary>
        /// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.",
        SerializedName = @"dataDisks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDataDisk) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDataDisk[] VirtualMachineConfigurationDataDisk { get; set; }
        /// <summary>
        /// If specified, the extensions mentioned in this configuration will be installed on each node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If specified, the extensions mentioned in this configuration will be installed on each node.",
        SerializedName = @"extensions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVMExtension) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVMExtension[] VirtualMachineConfigurationExtension { get; set; }
        /// <summary>
        /// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises
        /// licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// Windows_Server - The on-premises license is for Windows Server.
        /// Windows_Client - The on-premises license is for Windows Client.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:

         Windows_Server - The on-premises license is for Windows Server.
         Windows_Client - The on-premises license is for Windows Client.
        ",
        SerializedName = @"licenseType",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineConfigurationLicenseType { get; set; }
        /// <summary>
        /// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between
        /// the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating
        /// systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node
        /// agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.",
        SerializedName = @"nodeAgentSkuId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineConfigurationNodeAgentSkuId { get; set; }
        /// <summary>If omitted, the default value is true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If omitted, the default value is true.",
        SerializedName = @"enableAutomaticUpdates",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowConfigurationEnableAutomaticUpdate { get; set; }

    }
    /// Deployment configuration properties.
    internal partial interface IDeploymentConfigurationInternal

    {
        /// <summary>
        /// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This
        /// property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICloudServiceConfiguration CloudServiceConfiguration { get; set; }
        /// <summary>
        /// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows
        /// Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        /// </summary>
        string CloudServiceConfigurationOSFamily { get; set; }
        /// <summary>
        /// The default value is * which specifies the latest operating system version for the specified OS family.
        /// </summary>
        string CloudServiceConfigurationOSVersion { get; set; }
        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker
        /// registry unless the image is fully qualified with an alternative registry.
        /// </summary>
        string[] ContainerConfigurationContainerImageName { get; set; }
        /// <summary>
        /// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided
        /// here.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry[] ContainerConfigurationContainerRegistry { get; set; }
        /// <summary>The container technology to be used.</summary>
        string ContainerConfigurationType { get; set; }
        /// <summary>
        /// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiskEncryptionTarget[] DiskEncryptionConfigurationTarget { get; set; }
        /// <summary>
        /// This property can be used by user in the request to choose which location the operating system should be in. e.g., cache
        /// disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer
        /// to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements
        /// and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DiffDiskPlacement? EphemeralOSDiskSettingPlacement { get; set; }
        /// <summary>
        /// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same
        /// region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate
        /// with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        string ImageReferenceId { get; set; }
        /// <summary>For example, UbuntuServer or WindowsServer.</summary>
        string ImageReferenceOffer { get; set; }
        /// <summary>For example, Canonical or MicrosoftWindowsServer.</summary>
        string ImageReferencePublisher { get; set; }
        /// <summary>For example, 18.04-LTS or 2022-datacenter.</summary>
        string ImageReferenceSku { get; set; }
        /// <summary>
        /// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
        /// </summary>
        string ImageReferenceVersion { get; set; }
        /// <summary>
        /// Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.NodePlacementPolicyType? NodePlacementConfigurationPolicy { get; set; }
        /// <summary>
        /// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDiffDiskSettings OSDiskEphemeralOsdiskSetting { get; set; }
        /// <summary>
        /// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
        /// <summary>
        /// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job
        /// manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerConfiguration VirtualMachineConfigurationContainerConfiguration { get; set; }
        /// <summary>
        /// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDataDisk[] VirtualMachineConfigurationDataDisk { get; set; }
        /// <summary>
        /// If specified, encryption is performed on each node in the pool during node provisioning.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDiskEncryptionConfiguration VirtualMachineConfigurationDiskEncryptionConfiguration { get; set; }
        /// <summary>
        /// If specified, the extensions mentioned in this configuration will be installed on each node.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IVMExtension[] VirtualMachineConfigurationExtension { get; set; }
        /// <summary>
        /// A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To
        /// get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IImageReference VirtualMachineConfigurationImageReference { get; set; }
        /// <summary>
        /// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises
        /// licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// Windows_Server - The on-premises license is for Windows Server.
        /// Windows_Client - The on-premises license is for Windows Client.
        /// </summary>
        string VirtualMachineConfigurationLicenseType { get; set; }
        /// <summary>
        /// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between
        /// the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating
        /// systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node
        /// agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
        /// </summary>
        string VirtualMachineConfigurationNodeAgentSkuId { get; set; }
        /// <summary>
        /// This configuration will specify rules on how nodes in the pool will be physically allocated.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INodePlacementConfiguration VirtualMachineConfigurationNodePlacementConfiguration { get; set; }
        /// <summary>Contains configuration for ephemeral OSDisk settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IOSDisk VirtualMachineConfigurationOSDisk { get; set; }
        /// <summary>
        /// This property must not be specified if the imageReference specifies a Linux OS image.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsConfiguration VirtualMachineConfigurationWindowsConfiguration { get; set; }
        /// <summary>If omitted, the default value is true.</summary>
        bool? WindowConfigurationEnableAutomaticUpdate { get; set; }

    }
}