// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Contains information about a pool.</summary>
    public partial class Pool :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPool,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ProxyResource();

        /// <summary>Whether the pool is resizing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AllocationState? AllocationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AllocationState; }

        /// <summary>The time at which the pool entered its current allocation state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? AllocationStateTransitionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AllocationStateTransitionTime; }

        /// <summary>
        /// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested
        /// which is not supported, pool creation will fail.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string[] ApplicationLicense { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ApplicationLicense; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ApplicationLicense = value ?? null /* arrayOf */; }

        /// <summary>
        /// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes
        /// that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references
        /// on any given pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IApplicationPackageReference[] ApplicationPackage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ApplicationPackage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ApplicationPackage = value ?? null /* arrayOf */; }

        /// <summary>If omitted, the default value is 15 minutes (PT15M).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoScaleEvaluationInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleEvaluationInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleEvaluationInterval = value ?? default(global::System.TimeSpan); }

        /// <summary>A formula for the desired number of compute nodes in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleFormula { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleFormula; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleFormula = value ?? null; }

        /// <summary>The time at which the autoscale formula was last evaluated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? AutoScaleRunEvaluationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRunEvaluationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRunEvaluationTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRunResult; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRunResult = value ?? null; }

        /// <summary>The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoUserElevationLevel = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel)""); }

        /// <summary>
        /// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between
        /// tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates
        /// have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope? AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoUserScope = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope)""); }

        /// <summary>
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location.
        /// For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility
        /// of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates
        /// are placed in that directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICertificateReference[] Certificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Certificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Certificate = value ?? null /* arrayOf */; }

        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Code = value ?? null; }

        /// <summary>
        /// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by
        /// the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingContainerRunOption = value ?? null; }

        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name,
        /// the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingImageName = value ?? null; }

        /// <summary>
        /// A flag to indicate where the container task working directory is. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory? ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingWorkingDirectory = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory)""); }

        /// <summary>The creation time of the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CreationTime; }

        /// <summary>The number of compute nodes currently in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? CurrentDedicatedNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CurrentDedicatedNode; }

        /// <summary>The number of Spot/low-priority compute nodes currently in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? CurrentLowPriorityNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CurrentLowPriorityNode; }

        /// <summary>
        /// Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration
        /// uses Azure Virtual Machines (IaaS).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfiguration DeploymentConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).DeploymentConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).DeploymentConfiguration = value ?? null /* model class */; }

        /// <summary>Additional details about the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRunError[] Detail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Detail = value ?? null /* arrayOf */; }

        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>
        /// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the
        /// request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool[] EndpointConfigurationInboundNatPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).EndpointConfigurationInboundNatPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).EndpointConfigurationInboundNatPool = value ?? null /* arrayOf */; }

        /// <summary>The ETag of the resource, used for concurrency statements.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Etag; }

        /// <summary>If omitted, the default value is Requeue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption? FixedScaleNodeDeallocationOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleNodeDeallocationOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleNodeDeallocationOption = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption)""); }

        /// <summary>
        /// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum
        /// value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if
        /// you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? FixedScaleResizeTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleResizeTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleResizeTimeout = value ?? default(global::System.TimeSpan); }

        /// <summary>At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? FixedScaleTargetDedicatedNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleTargetDedicatedNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleTargetDedicatedNode = value ?? default(int); }

        /// <summary>At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? FixedScaleTargetLowPriorityNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleTargetLowPriorityNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).FixedScaleTargetLowPriorityNode = value ?? default(int); }

        /// <summary>The ID of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentity _identity;

        /// <summary>The type of identity used for the Batch Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.BatchPoolIdentity()); set => this._identity = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).IdentityReferenceResourceId = value ?? null; }

        /// <summary>The type of identity used for the Batch Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolIdentityType)""); }

        /// <summary>The list of user identities associated with the Batch pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>
        /// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the
        /// requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.InterNodeCommunicationState? InterNodeCommunication { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).InterNodeCommunication; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).InterNodeCommunication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.InterNodeCommunicationState)""); }

        /// <summary>
        /// This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It
        /// does not factor in node-level changes such as a compute node changing state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastModified { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).LastModified; }

        /// <summary>
        /// A message describing the error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Message = value ?? null; }

        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMetadataItem[] Metadata { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Metadata; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).Metadata = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for AllocationState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AllocationState? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.AllocationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AllocationState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AllocationState = value; }

        /// <summary>Internal Acessors for AllocationStateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.AllocationStateTransitionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AllocationStateTransitionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AllocationStateTransitionTime = value; }

        /// <summary>Internal Acessors for AutoScaleRun</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRun Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.AutoScaleRun { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRun; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRun = value; }

        /// <summary>Internal Acessors for AutoScaleRunError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRunError Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.AutoScaleRunError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRunError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).AutoScaleRunError = value; }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ContainerSettingRegistry = value; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CreationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CreationTime = value; }

        /// <summary>Internal Acessors for CurrentDedicatedNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.CurrentDedicatedNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CurrentDedicatedNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CurrentDedicatedNode = value; }

        /// <summary>Internal Acessors for CurrentLowPriorityNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.CurrentLowPriorityNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CurrentLowPriorityNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).CurrentLowPriorityNode = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.BatchPoolIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for LastModified</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.LastModified { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).LastModified; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).LastModified = value; }

        /// <summary>Internal Acessors for NetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.NetworkConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfiguration = value; }

        /// <summary>Internal Acessors for NetworkConfigurationEndpointConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.NetworkConfigurationEndpointConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationEndpointConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationEndpointConfiguration = value; }

        /// <summary>Internal Acessors for NetworkConfigurationPublicIPAddressConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.NetworkConfigurationPublicIPAddressConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationPublicIPAddressConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationPublicIPAddressConfiguration = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.PoolProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for ProvisioningStateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ProvisioningStateTransitionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ProvisioningStateTransitionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ProvisioningStateTransitionTime = value; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IComputeNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryIdentityReference = value; }

        /// <summary>Internal Acessors for ResizeOperationStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResizeOperationStatus Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ResizeOperationStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatus = value; }

        /// <summary>Internal Acessors for ScaleSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IScaleSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ScaleSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ScaleSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ScaleSetting = value; }

        /// <summary>Internal Acessors for ScaleSettingAutoScale</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ScaleSettingAutoScale { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ScaleSettingAutoScale; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ScaleSettingAutoScale = value; }

        /// <summary>Internal Acessors for ScaleSettingFixedScale</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IFixedScaleSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.ScaleSettingFixedScale { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ScaleSettingFixedScale; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ScaleSettingFixedScale = value; }

        /// <summary>Internal Acessors for StartTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.StartTask { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTask; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTask = value; }

        /// <summary>Internal Acessors for StartTaskContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ITaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.StartTaskContainerSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskContainerSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskContainerSetting = value; }

        /// <summary>Internal Acessors for StartTaskUserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.StartTaskUserIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskUserIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskUserIdentity = value; }

        /// <summary>Internal Acessors for TaskSchedulingPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ITaskSchedulingPolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.TaskSchedulingPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).TaskSchedulingPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).TaskSchedulingPolicy = value; }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).UserIdentityAutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).UserIdentityAutoUser = value; }

        /// <summary>Internal Acessors for Etag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal.Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Etag = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Type = value; }

        /// <summary>This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMountConfiguration[] MountConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).MountConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).MountConfiguration = value ?? null /* arrayOf */; }

        /// <summary>The name of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Name; }

        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? NetworkConfigurationDynamicVNetAssignmentScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationDynamicVNetAssignmentScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationDynamicVNetAssignmentScope = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope)""); }

        /// <summary>
        /// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP
        /// addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute
        /// nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute
        /// nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system
        /// ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports
        /// 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration,
        /// enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration
        /// pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).NetworkConfigurationSubnetId = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties _property;

        /// <summary>The properties associated with the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.PoolProperties()); set => this._property = value; }

        /// <summary>The current state of the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ProvisioningState; }

        /// <summary>The time at which the pool entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProvisioningStateTransitionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ProvisioningStateTransitionTime; }

        /// <summary>
        /// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes
        /// can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified.
        /// Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string[] PublicIPAddressConfigurationIpaddressId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).PublicIPAddressConfigurationIpaddressId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).PublicIPAddressConfigurationIpaddressId = value ?? null /* arrayOf */; }

        /// <summary>The default value is BatchManaged</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType? PublicIPAddressConfigurationProvision { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).PublicIPAddressConfigurationProvision; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).PublicIPAddressConfigurationProvision = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType)""); }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryPassword = value ?? null; }

        /// <summary>If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).RegistryUserName = value ?? null; }

        /// <summary>
        /// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is
        /// Steady.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResizeError[] ResizeOperationStatusError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusError = value ?? null /* arrayOf */; }

        /// <summary>The default value is requeue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption? ResizeOperationStatusNodeDeallocationOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusNodeDeallocationOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusNodeDeallocationOption = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption)""); }

        /// <summary>
        /// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ResizeOperationStatusResizeTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusResizeTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusResizeTimeout = value ?? default(global::System.TimeSpan); }

        /// <summary>The time when this resize operation was started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ResizeOperationStatusStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusStartTime = value ?? default(global::System.DateTime); }

        /// <summary>The desired number of dedicated compute nodes in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ResizeOperationStatusTargetDedicatedNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusTargetDedicatedNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusTargetDedicatedNode = value ?? default(int); }

        /// <summary>The desired number of Spot/low-priority compute nodes in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ResizeOperationStatusTargetLowPriorityNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusTargetLowPriorityNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).ResizeOperationStatusTargetLowPriorityNode = value ?? default(int); }

        /// <summary>
        /// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment
        /// variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for
        /// example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the
        /// startTask are specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string StartTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskCommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskCommandLine = value ?? null; }

        /// <summary>A list of environment variable settings for the start task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting[] StartTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskEnvironmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskEnvironmentSetting = value ?? null /* arrayOf */; }

        /// <summary>
        /// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of
        /// retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry
        /// count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch
        /// service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit, however
        /// this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? StartTaskMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskMaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskMaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// A list of files that the Batch service will download to the compute node before running the command line.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile[] StartTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskResourceFile = value ?? null /* arrayOf */; }

        /// <summary>
        /// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count
        /// (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks
        /// the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling
        /// error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can
        /// start executing on the compute node while the start task is still running; and even if the start task fails, new tasks
        /// will continue to be scheduled on the node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? StartTaskWaitForSuccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskWaitForSuccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).StartTaskWaitForSuccess = value ?? default(bool); }

        /// <summary>How tasks should be distributed across compute nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeFillType? TaskSchedulingPolicyNodeFillType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).TaskSchedulingPolicyNodeFillType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).TaskSchedulingPolicyNodeFillType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeFillType)""); }

        /// <summary>
        /// The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? TaskSlotsPerNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).TaskSlotsPerNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).TaskSlotsPerNode = value ?? default(int); }

        /// <summary>The type of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal)__proxyResource).Type; }

        /// <summary>The list of user accounts to be created on each node in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount[] UserAccount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).UserAccount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).UserAccount = value ?? null /* arrayOf */; }

        /// <summary>
        /// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).UserIdentityUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).UserIdentityUserName = value ?? null; }

        /// <summary>
        /// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration),
        /// see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports
        /// all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the
        /// Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VMSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).VMSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolPropertiesInternal)Property).VMSize = value ?? null; }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
        }

        /// <summary>Creates an new <see cref="Pool" /> instance.</summary>
        public Pool()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// Contains information about a pool.
    public partial interface IPool :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResource
    {
        /// <summary>Whether the pool is resizing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Whether the pool is resizing.",
        SerializedName = @"allocationState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AllocationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AllocationState? AllocationState { get;  }
        /// <summary>The time at which the pool entered its current allocation state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time at which the pool entered its current allocation state.",
        SerializedName = @"allocationStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AllocationStateTransitionTime { get;  }
        /// <summary>
        /// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested
        /// which is not supported, pool creation will fail.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.",
        SerializedName = @"applicationLicenses",
        PossibleTypes = new [] { typeof(string) })]
        string[] ApplicationLicense { get; set; }
        /// <summary>
        /// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes
        /// that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references
        /// on any given pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.",
        SerializedName = @"applicationPackages",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IApplicationPackageReference) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IApplicationPackageReference[] ApplicationPackage { get; set; }
        /// <summary>If omitted, the default value is 15 minutes (PT15M).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If omitted, the default value is 15 minutes (PT15M).",
        SerializedName = @"evaluationInterval",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoScaleEvaluationInterval { get; set; }
        /// <summary>A formula for the desired number of compute nodes in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A formula for the desired number of compute nodes in the pool.",
        SerializedName = @"formula",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleFormula { get; set; }
        /// <summary>The time at which the autoscale formula was last evaluated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the autoscale formula was last evaluated.",
        SerializedName = @"evaluationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AutoScaleRunEvaluationTime { get; set; }
        /// <summary>
        /// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Each variable value is returned in the form $variable=value, and variables are separated by semicolons.",
        SerializedName = @"results",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunResult { get; set; }
        /// <summary>The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between
        /// tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates
        /// have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope? AutoUserScope { get; set; }
        /// <summary>
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location.
        /// For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility
        /// of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates
        /// are placed in that directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.",
        SerializedName = @"certificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICertificateReference) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICertificateReference[] Certificate { get; set; }
        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string Code { get; set; }
        /// <summary>
        /// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by
        /// the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name,
        /// the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the full image reference, as would be specified to ""docker pull"". If no tag is provided as part of the image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// A flag to indicate where the container task working directory is. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A flag to indicate where the container task working directory is. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory? ContainerSettingWorkingDirectory { get; set; }
        /// <summary>The creation time of the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The creation time of the pool.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTime { get;  }
        /// <summary>The number of compute nodes currently in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The number of compute nodes currently in the pool.",
        SerializedName = @"currentDedicatedNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? CurrentDedicatedNode { get;  }
        /// <summary>The number of Spot/low-priority compute nodes currently in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The number of Spot/low-priority compute nodes currently in the pool.",
        SerializedName = @"currentLowPriorityNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? CurrentLowPriorityNode { get;  }
        /// <summary>
        /// Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration
        /// uses Azure Virtual Machines (IaaS).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).",
        SerializedName = @"deploymentConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfiguration DeploymentConfiguration { get; set; }
        /// <summary>Additional details about the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional details about the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRunError) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRunError[] Detail { get; set; }
        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>
        /// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the
        /// request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.",
        SerializedName = @"inboundNatPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool[] EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>If omitted, the default value is Requeue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If omitted, the default value is Requeue.",
        SerializedName = @"nodeDeallocationOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption? FixedScaleNodeDeallocationOption { get; set; }
        /// <summary>
        /// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum
        /// value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if
        /// you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"resizeTimeout",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? FixedScaleResizeTimeout { get; set; }
        /// <summary>At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.",
        SerializedName = @"targetDedicatedNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? FixedScaleTargetDedicatedNode { get; set; }
        /// <summary>At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.",
        SerializedName = @"targetLowPriorityNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? FixedScaleTargetLowPriorityNode { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>The type of identity used for the Batch Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity used for the Batch Pool.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolIdentityType? IdentityType { get; set; }
        /// <summary>The list of user identities associated with the Batch pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of user identities associated with the Batch pool.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the
        /// requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.",
        SerializedName = @"interNodeCommunication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.InterNodeCommunicationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.InterNodeCommunicationState? InterNodeCommunication { get; set; }
        /// <summary>
        /// This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It
        /// does not factor in node-level changes such as a compute node changing state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.",
        SerializedName = @"lastModified",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModified { get;  }
        /// <summary>
        /// A message describing the error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A message describing the error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string Message { get; set; }
        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Batch service does not assign any meaning to metadata; it is solely for the use of user code.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMetadataItem) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMetadataItem[] Metadata { get; set; }
        /// <summary>This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.",
        SerializedName = @"mountConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMountConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMountConfiguration[] MountConfiguration { get; set; }
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope of dynamic vnet assignment.",
        SerializedName = @"dynamicVNetAssignmentScope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? NetworkConfigurationDynamicVNetAssignmentScope { get; set; }
        /// <summary>
        /// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP
        /// addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute
        /// nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute
        /// nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system
        /// ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports
        /// 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration,
        /// enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration
        /// pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>The current state of the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of the pool.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolProvisioningState? ProvisioningState { get;  }
        /// <summary>The time at which the pool entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time at which the pool entered its current state.",
        SerializedName = @"provisioningStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProvisioningStateTransitionTime { get;  }
        /// <summary>
        /// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes
        /// can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified.
        /// Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        string[] PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>The default value is BatchManaged</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is BatchManaged",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType? PublicIPAddressConfigurationProvision { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryPassword { get; set; }
        /// <summary>If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUserName { get; set; }
        /// <summary>
        /// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is
        /// Steady.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.",
        SerializedName = @"errors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResizeError) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResizeError[] ResizeOperationStatusError { get; set; }
        /// <summary>The default value is requeue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is requeue.",
        SerializedName = @"nodeDeallocationOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption? ResizeOperationStatusNodeDeallocationOption { get; set; }
        /// <summary>
        /// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"resizeTimeout",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ResizeOperationStatusResizeTimeout { get; set; }
        /// <summary>The time when this resize operation was started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time when this resize operation was started.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ResizeOperationStatusStartTime { get; set; }
        /// <summary>The desired number of dedicated compute nodes in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired number of dedicated compute nodes in the pool.",
        SerializedName = @"targetDedicatedNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? ResizeOperationStatusTargetDedicatedNode { get; set; }
        /// <summary>The desired number of Spot/low-priority compute nodes in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired number of Spot/low-priority compute nodes in the pool.",
        SerializedName = @"targetLowPriorityNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? ResizeOperationStatusTargetLowPriorityNode { get; set; }
        /// <summary>
        /// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment
        /// variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for
        /// example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the
        /// startTask are specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. Required if any other properties of the startTask are specified.",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string StartTaskCommandLine { get; set; }
        /// <summary>A list of environment variable settings for the start task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of environment variable settings for the start task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting[] StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of
        /// retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry
        /// count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch
        /// service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit, however
        /// this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the compute node before running the command line.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of files that the Batch service will download to the compute node before running the command line.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile[] StartTaskResourceFile { get; set; }
        /// <summary>
        /// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count
        /// (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks
        /// the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling
        /// error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can
        /// start executing on the compute node while the start task is still running; and even if the start task fails, new tasks
        /// will continue to be scheduled on the node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>How tasks should be distributed across compute nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"How tasks should be distributed across compute nodes.",
        SerializedName = @"nodeFillType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeFillType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeFillType? TaskSchedulingPolicyNodeFillType { get; set; }
        /// <summary>
        /// The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.",
        SerializedName = @"taskSlotsPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? TaskSlotsPerNode { get; set; }
        /// <summary>The list of user accounts to be created on each node in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of user accounts to be created on each node in the pool.",
        SerializedName = @"userAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount[] UserAccount { get; set; }
        /// <summary>
        /// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUserName { get; set; }
        /// <summary>
        /// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration),
        /// see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports
        /// all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the
        /// Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        string VMSize { get; set; }

    }
    /// Contains information about a pool.
    internal partial interface IPoolInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IProxyResourceInternal
    {
        /// <summary>Whether the pool is resizing.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AllocationState? AllocationState { get; set; }
        /// <summary>The time at which the pool entered its current allocation state.</summary>
        global::System.DateTime? AllocationStateTransitionTime { get; set; }
        /// <summary>
        /// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested
        /// which is not supported, pool creation will fail.
        /// </summary>
        string[] ApplicationLicense { get; set; }
        /// <summary>
        /// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes
        /// that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references
        /// on any given pool.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IApplicationPackageReference[] ApplicationPackage { get; set; }
        /// <summary>If omitted, the default value is 15 minutes (PT15M).</summary>
        global::System.TimeSpan? AutoScaleEvaluationInterval { get; set; }
        /// <summary>A formula for the desired number of compute nodes in the pool.</summary>
        string AutoScaleFormula { get; set; }
        /// <summary>
        /// This property is set only if the pool automatically scales, i.e. autoScaleSettings are used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRun AutoScaleRun { get; set; }
        /// <summary>An error that occurred when autoscaling a pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRunError AutoScaleRunError { get; set; }
        /// <summary>The time at which the autoscale formula was last evaluated.</summary>
        global::System.DateTime? AutoScaleRunEvaluationTime { get; set; }
        /// <summary>
        /// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        /// </summary>
        string AutoScaleRunResult { get; set; }
        /// <summary>The default value is nonAdmin.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between
        /// tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates
        /// have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope? AutoUserScope { get; set; }
        /// <summary>
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location.
        /// For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility
        /// of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates
        /// are placed in that directory.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ICertificateReference[] Certificate { get; set; }
        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string Code { get; set; }
        /// <summary>
        /// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by
        /// the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name,
        /// the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>This setting can be omitted if was already provided at pool creation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry ContainerSettingRegistry { get; set; }
        /// <summary>
        /// A flag to indicate where the container task working directory is. The default is 'taskWorkingDirectory'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory? ContainerSettingWorkingDirectory { get; set; }
        /// <summary>The creation time of the pool.</summary>
        global::System.DateTime? CreationTime { get; set; }
        /// <summary>The number of compute nodes currently in the pool.</summary>
        int? CurrentDedicatedNode { get; set; }
        /// <summary>The number of Spot/low-priority compute nodes currently in the pool.</summary>
        int? CurrentLowPriorityNode { get; set; }
        /// <summary>
        /// Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration
        /// uses Azure Virtual Machines (IaaS).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IDeploymentConfiguration DeploymentConfiguration { get; set; }
        /// <summary>Additional details about the error.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleRunError[] Detail { get; set; }
        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        /// </summary>
        string DisplayName { get; set; }

        string ETag { get; set; }
        /// <summary>
        /// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the
        /// request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IInboundNatPool[] EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>If omitted, the default value is Requeue.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption? FixedScaleNodeDeallocationOption { get; set; }
        /// <summary>
        /// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum
        /// value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if
        /// you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? FixedScaleResizeTimeout { get; set; }
        /// <summary>At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.</summary>
        int? FixedScaleTargetDedicatedNode { get; set; }
        /// <summary>At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.</summary>
        int? FixedScaleTargetLowPriorityNode { get; set; }
        /// <summary>The type of identity used for the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentity Identity { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>The type of identity used for the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolIdentityType? IdentityType { get; set; }
        /// <summary>The list of user identities associated with the Batch pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IBatchPoolIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the
        /// requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.InterNodeCommunicationState? InterNodeCommunication { get; set; }
        /// <summary>
        /// This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It
        /// does not factor in node-level changes such as a compute node changing state.
        /// </summary>
        global::System.DateTime? LastModified { get; set; }
        /// <summary>
        /// A message describing the error, intended to be suitable for display in a user interface.
        /// </summary>
        string Message { get; set; }
        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMetadataItem[] Metadata { get; set; }
        /// <summary>This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IMountConfiguration[] MountConfiguration { get; set; }
        /// <summary>The network configuration for a pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.INetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>The scope of dynamic vnet assignment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.DynamicVNetAssignmentScope? NetworkConfigurationDynamicVNetAssignmentScope { get; set; }
        /// <summary>
        /// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolEndpointConfiguration NetworkConfigurationEndpointConfiguration { get; set; }
        /// <summary>
        /// This property is only supported on Pools with the virtualMachineConfiguration property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPublicIPAddressConfiguration NetworkConfigurationPublicIPAddressConfiguration { get; set; }
        /// <summary>
        /// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP
        /// addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute
        /// nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute
        /// nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system
        /// ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports
        /// 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration,
        /// enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration
        /// pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>The properties associated with the pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IPoolProperties Property { get; set; }
        /// <summary>The current state of the pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolProvisioningState? ProvisioningState { get; set; }
        /// <summary>The time at which the pool entered its current state.</summary>
        global::System.DateTime? ProvisioningStateTransitionTime { get; set; }
        /// <summary>
        /// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes
        /// can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified.
        /// Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        string[] PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>The default value is BatchManaged</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.IPAddressProvisioningType? PublicIPAddressConfigurationProvision { get; set; }
        /// <summary>
        /// The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IComputeNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        string RegistryPassword { get; set; }
        /// <summary>If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUserName { get; set; }
        /// <summary>
        /// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation
        /// (if the AllocationState is Steady).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResizeOperationStatus ResizeOperationStatus { get; set; }
        /// <summary>
        /// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is
        /// Steady.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResizeError[] ResizeOperationStatusError { get; set; }
        /// <summary>The default value is requeue.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeDeallocationOption? ResizeOperationStatusNodeDeallocationOption { get; set; }
        /// <summary>
        /// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? ResizeOperationStatusResizeTimeout { get; set; }
        /// <summary>The time when this resize operation was started.</summary>
        global::System.DateTime? ResizeOperationStatusStartTime { get; set; }
        /// <summary>The desired number of dedicated compute nodes in the pool.</summary>
        int? ResizeOperationStatusTargetDedicatedNode { get; set; }
        /// <summary>The desired number of Spot/low-priority compute nodes in the pool.</summary>
        int? ResizeOperationStatusTargetLowPriorityNode { get; set; }
        /// <summary>
        /// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified,
        /// or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool
        /// will have a fixed scale with 0 targetDedicatedNodes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IScaleSettings ScaleSetting { get; set; }
        /// <summary>
        /// This property and fixedScale are mutually exclusive and one of the properties must be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoScaleSettings ScaleSettingAutoScale { get; set; }
        /// <summary>
        /// This property and autoScale are mutually exclusive and one of the properties must be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IFixedScaleSettings ScaleSettingFixedScale { get; set; }
        /// <summary>
        /// In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask StartTask { get; set; }
        /// <summary>
        /// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment
        /// variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for
        /// example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the
        /// startTask are specified.
        /// </summary>
        string StartTaskCommandLine { get; set; }
        /// <summary>
        /// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories
        /// on the node) are mapped into the container, all task environment variables are mapped into the container, and the task
        /// command line is executed in the container.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ITaskContainerSettings StartTaskContainerSetting { get; set; }
        /// <summary>A list of environment variable settings for the start task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting[] StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of
        /// retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry
        /// count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch
        /// service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit, however
        /// this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the compute node before running the command line.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile[] StartTaskResourceFile { get; set; }
        /// <summary>If omitted, the task runs as a non-administrative user unique to the task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserIdentity StartTaskUserIdentity { get; set; }
        /// <summary>
        /// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count
        /// (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks
        /// the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling
        /// error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can
        /// start executing on the compute node while the start task is still running; and even if the start task fails, new tasks
        /// will continue to be scheduled on the node. The default is true.
        /// </summary>
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>If not specified, the default is spread.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ITaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
        /// <summary>How tasks should be distributed across compute nodes.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ComputeNodeFillType? TaskSchedulingPolicyNodeFillType { get; set; }
        /// <summary>
        /// The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        int? TaskSlotsPerNode { get; set; }
        /// <summary>The list of user accounts to be created on each node in the pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount[] UserAccount { get; set; }
        /// <summary>
        /// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        /// </summary>
        string UserIdentityUserName { get; set; }
        /// <summary>
        /// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration),
        /// see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports
        /// all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the
        /// Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </summary>
        string VMSize { get; set; }

    }
}