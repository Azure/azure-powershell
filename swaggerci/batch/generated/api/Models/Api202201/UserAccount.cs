// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Properties used to create a user on an Azure Batch node.</summary>
    public partial class UserAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccount,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccountInternal
    {

        /// <summary>Backing field for <see cref="ElevationLevel" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? _elevationLevel;

        /// <summary>
        /// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access
        /// and operates with full Administrator permissions. The default value is nonAdmin.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? ElevationLevel { get => this._elevationLevel; set => this._elevationLevel = value; }

        /// <summary>Backing field for <see cref="LinuxUserConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfiguration _linuxUserConfiguration;

        /// <summary>
        /// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfiguration LinuxUserConfiguration { get => (this._linuxUserConfiguration = this._linuxUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.LinuxUserConfiguration()); set => this._linuxUserConfiguration = value; }

        /// <summary>
        /// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system
        /// picks the gid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LinuxUserConfigurationGid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Gid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Gid = value ?? default(int); }

        /// <summary>
        /// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based
        /// authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it
        /// is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory.
        /// If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string LinuxUserConfigurationSshPrivateKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfigurationInternal)LinuxUserConfiguration).SshPrivateKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfigurationInternal)LinuxUserConfiguration).SshPrivateKey = value ?? null; }

        /// <summary>
        /// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system
        /// picks the uid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LinuxUserConfigurationUid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Uid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Uid = value ?? default(int); }

        /// <summary>Internal Acessors for LinuxUserConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccountInternal.LinuxUserConfiguration { get => (this._linuxUserConfiguration = this._linuxUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.LinuxUserConfiguration()); set { {_linuxUserConfiguration = value;} } }

        /// <summary>Internal Acessors for WindowsUserConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsUserConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserAccountInternal.WindowsUserConfiguration { get => (this._windowsUserConfiguration = this._windowsUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.WindowsUserConfiguration()); set { {_windowsUserConfiguration = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the user account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private string _password;

        /// <summary>The password for the user account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Password { get => this._password; set => this._password = value; }

        /// <summary>
        /// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for
        /// CloudServiceConfiguration pools is batch mode.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.LoginMode? WindowUserConfigurationLoginMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsUserConfigurationInternal)WindowsUserConfiguration).LoginMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsUserConfigurationInternal)WindowsUserConfiguration).LoginMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.LoginMode)""); }

        /// <summary>Backing field for <see cref="WindowsUserConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsUserConfiguration _windowsUserConfiguration;

        /// <summary>
        /// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user
        /// is created with the default options.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsUserConfiguration WindowsUserConfiguration { get => (this._windowsUserConfiguration = this._windowsUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.WindowsUserConfiguration()); set => this._windowsUserConfiguration = value; }

        /// <summary>Creates an new <see cref="UserAccount" /> instance.</summary>
        public UserAccount()
        {

        }
    }
    /// Properties used to create a user on an Azure Batch node.
    public partial interface IUserAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access
        /// and operates with full Administrator permissions. The default value is nonAdmin.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? ElevationLevel { get; set; }
        /// <summary>
        /// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system
        /// picks the gid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.",
        SerializedName = @"gid",
        PossibleTypes = new [] { typeof(int) })]
        int? LinuxUserConfigurationGid { get; set; }
        /// <summary>
        /// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based
        /// authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it
        /// is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory.
        /// If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).",
        SerializedName = @"sshPrivateKey",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxUserConfigurationSshPrivateKey { get; set; }
        /// <summary>
        /// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system
        /// picks the uid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.",
        SerializedName = @"uid",
        PossibleTypes = new [] { typeof(int) })]
        int? LinuxUserConfigurationUid { get; set; }
        /// <summary>The name of the user account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the user account.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>The password for the user account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The password for the user account.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string Password { get; set; }
        /// <summary>
        /// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for
        /// CloudServiceConfiguration pools is batch mode.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.",
        SerializedName = @"loginMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.LoginMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.LoginMode? WindowUserConfigurationLoginMode { get; set; }

    }
    /// Properties used to create a user on an Azure Batch node.
    internal partial interface IUserAccountInternal

    {
        /// <summary>
        /// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access
        /// and operates with full Administrator permissions. The default value is nonAdmin.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel? ElevationLevel { get; set; }
        /// <summary>
        /// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ILinuxUserConfiguration LinuxUserConfiguration { get; set; }
        /// <summary>
        /// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system
        /// picks the gid.
        /// </summary>
        int? LinuxUserConfigurationGid { get; set; }
        /// <summary>
        /// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based
        /// authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it
        /// is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory.
        /// If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
        /// </summary>
        string LinuxUserConfigurationSshPrivateKey { get; set; }
        /// <summary>
        /// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system
        /// picks the uid.
        /// </summary>
        int? LinuxUserConfigurationUid { get; set; }
        /// <summary>The name of the user account.</summary>
        string Name { get; set; }
        /// <summary>The password for the user account.</summary>
        string Password { get; set; }
        /// <summary>
        /// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for
        /// CloudServiceConfiguration pools is batch mode.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.LoginMode? WindowUserConfigurationLoginMode { get; set; }
        /// <summary>
        /// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user
        /// is created with the default options.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IWindowsUserConfiguration WindowsUserConfiguration { get; set; }

    }
}