// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>
    /// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent
    /// and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start
    /// tasks which create breakaway process or install/launch services from the start task working directory, as this will block
    /// Batch from being able to re-run the start task.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(StartTaskTypeConverter))]
    public partial class StartTask
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.StartTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new StartTask(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.StartTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new StartTask(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="StartTask" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="className" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTask FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.StartTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal StartTask(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ITaskContainerSettings) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.TaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ResourceFile = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile[]) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).EnvironmentSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting[]) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("MaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).MaxTaskRetryCount = (int?) content.GetValueForProperty("MaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).MaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("WaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).WaitForSuccess = (bool?) content.GetValueForProperty("WaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).WaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUserName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityUserName = (string) content.GetValueForProperty("UserIdentityUserName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityUserName, global::System.Convert.ToString);
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserScope = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope?) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserScope, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope.CreateFrom);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserElevationLevel = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel?) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserElevationLevel, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel.CreateFrom);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ContainerRegistryTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingWorkingDirectory = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory?) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingWorkingDirectory, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory.CreateFrom);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IComputeNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ComputeNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUserName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryUserName = (string) content.GetValueForProperty("RegistryUserName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryUserName, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryPassword = (string) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryPassword, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.StartTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal StartTask(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ITaskContainerSettings) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.TaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ResourceFile = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile[]) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).EnvironmentSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting[]) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("MaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).MaxTaskRetryCount = (int?) content.GetValueForProperty("MaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).MaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("WaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).WaitForSuccess = (bool?) content.GetValueForProperty("WaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).WaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUserName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityUserName = (string) content.GetValueForProperty("UserIdentityUserName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityUserName, global::System.Convert.ToString);
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserScope = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope?) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserScope, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoUserScope.CreateFrom);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserElevationLevel = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel?) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).AutoUserElevationLevel, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ElevationLevel.CreateFrom);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IContainerRegistry) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ContainerRegistryTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingWorkingDirectory = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory?) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).ContainerSettingWorkingDirectory, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerWorkingDirectory.CreateFrom);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IComputeNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.ComputeNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUserName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryUserName = (string) content.GetValueForProperty("RegistryUserName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryUserName, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryPassword = (string) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryPassword, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api202201.IStartTaskInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent
    /// and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start
    /// tasks which create breakaway process or install/launch services from the start task working directory, as this will block
    /// Batch from being able to re-run the start task.
    [System.ComponentModel.TypeConverter(typeof(StartTaskTypeConverter))]
    public partial interface IStartTask

    {

    }
}