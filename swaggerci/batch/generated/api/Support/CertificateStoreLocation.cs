// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Support
{

    /// <summary>
    /// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created
    /// with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute
    /// nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR
    /// is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory
    /// is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
    /// </summary>
    public partial struct CertificateStoreLocation :
        System.IEquatable<CertificateStoreLocation>
    {
        /// <summary>Certificates should be installed to the CurrentUser certificate store.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation CurrentUser = @"CurrentUser";

        /// <summary>Certificates should be installed to the LocalMachine certificate store.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation LocalMachine = @"LocalMachine";

        /// <summary>the value for an instance of the <see cref="CertificateStoreLocation" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Creates an instance of the <see cref="CertificateStoreLocation" Enum class./></summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private CertificateStoreLocation(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Conversion from arbitrary object to CertificateStoreLocation</summary>
        /// <param name="value">the value to convert to an instance of <see cref="CertificateStoreLocation" />.</param>
        internal static object CreateFrom(object value)
        {
            return new CertificateStoreLocation(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type CertificateStoreLocation</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type CertificateStoreLocation (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is CertificateStoreLocation && Equals((CertificateStoreLocation)obj);
        }

        /// <summary>Returns hashCode for enum CertificateStoreLocation</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for CertificateStoreLocation</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to CertificateStoreLocation</summary>
        /// <param name="value">the value to convert to an instance of <see cref="CertificateStoreLocation" />.</param>

        public static implicit operator CertificateStoreLocation(string value)
        {
            return new CertificateStoreLocation(value);
        }

        /// <summary>Implicit operator to convert CertificateStoreLocation to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="CertificateStoreLocation" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum CertificateStoreLocation</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation e1, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum CertificateStoreLocation</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation e1, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.CertificateStoreLocation e2)
        {
            return e2.Equals(e1);
        }
    }
}