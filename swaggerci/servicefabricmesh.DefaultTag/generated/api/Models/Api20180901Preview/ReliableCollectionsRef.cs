// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.Extensions;

    /// <summary>Specifying this parameter adds support for reliable collections</summary>
    public partial class ReliableCollectionsRef :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IReliableCollectionsRef,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IReliableCollectionsRefInternal
    {

        /// <summary>Backing field for <see cref="DoNotPersistState" /> property.</summary>
        private bool? _doNotPersistState;

        /// <summary>
        /// False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state,
        /// in which case replication is still enabled and you can use ReliableCollections as distributed cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.PropertyOrigin.Owned)]
        public bool? DoNotPersistState { get => this._doNotPersistState; set => this._doNotPersistState = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// Name of ReliableCollection resource. Right now it's not used and you can use any string.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Creates an new <see cref="ReliableCollectionsRef" /> instance.</summary>
        public ReliableCollectionsRef()
        {

        }
    }
    /// Specifying this parameter adds support for reliable collections
    public partial interface IReliableCollectionsRef :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.IJsonSerializable
    {
        /// <summary>
        /// False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state,
        /// in which case replication is still enabled and you can use ReliableCollections as distributed cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.",
        SerializedName = @"doNotPersistState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DoNotPersistState { get; set; }
        /// <summary>
        /// Name of ReliableCollection resource. Right now it's not used and you can use any string.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of ReliableCollection resource. Right now it's not used and you can use any string.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }

    }
    /// Specifying this parameter adds support for reliable collections
    internal partial interface IReliableCollectionsRefInternal

    {
        /// <summary>
        /// False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state,
        /// in which case replication is still enabled and you can use ReliableCollections as distributed cache.
        /// </summary>
        bool? DoNotPersistState { get; set; }
        /// <summary>
        /// Name of ReliableCollection resource. Right now it's not used and you can use any string.
        /// </summary>
        string Name { get; set; }

    }
}