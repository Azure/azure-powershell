
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a gateway resource with the specified name, description and properties.
If a gateway resource with the same name exists, then it is updated with the specified description and properties.
Use gateway resources to create a gateway for public connectivity for services within your application.
.Description
Creates a gateway resource with the specified name, description and properties.
If a gateway resource with the same name exists, then it is updated with the specified description and properties.
Use gateway resources to create a gateway for public connectivity for services within your application.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IGatewayResourceDescription
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DESTINATIONNETWORKENDPOINTREF <IEndpointRef[]>: A list of endpoints that are exposed on this network.
  [Name <String>]: Name of the endpoint.

HTTP <IHttpConfig[]>: Configuration for http connectivity for this gateway.
  Host <IHttpHostConfig[]>: description for routing.
    Name <String>: http hostname config name.
    Route <IHttpRouteConfig[]>: Route information to use for routing. Routes are processed in the order they are specified. Specify routes that are more specific before routes that can handle general cases.
      DestinationApplicationName <String>: Name of the service fabric Mesh application.
      DestinationEndpointName <String>: name of the endpoint in the service.
      DestinationServiceName <String>: service that contains the endpoint.
      Name <String>: http route name.
      PathValue <String>: Uri path to match for request.
      [MatchHeader <IHttpRouteMatchHeader[]>]: headers and their values to match in request.
        Name <String>: Name of header to match in request.
        [Type <HeaderMatchType?>]: how to match header value
        [Value <String>]: Value of header to match in request.
      [PathRewrite <String>]: replacement string for matched part of the Uri.
  Name <String>: http gateway config name.
  Port <Int32>: Specifies the port at which the service endpoint below needs to be exposed.

SOURCENETWORKENDPOINTREF <IEndpointRef[]>: A list of endpoints that are exposed on this network.
  [Name <String>]: Name of the endpoint.

TCP <ITcpConfig[]>: Configuration for tcp connectivity for this gateway.
  DestinationApplicationName <String>: Name of the service fabric Mesh application.
  DestinationEndpointName <String>: name of the endpoint in the service.
  DestinationServiceName <String>: service that contains the endpoint.
  Name <String>: tcp gateway config name.
  Port <Int32>: Specifies the port at which the service endpoint below needs to be exposed.
.Link
https://learn.microsoft.com/powershell/module/az.servicefabricmesh/new-azservicefabricmeshgateway
#>
function New-AzServiceFabricMeshGateway {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IGatewayResourceDescription])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Path')]
    [System.String]
    # Azure resource group name
    ${ResourceGroupName},

    [Parameter(Mandatory)]
    [Alias('GatewayResourceName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Path')]
    [System.String]
    # The identity of the gateway.
    ${ResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The customer subscription identifier
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [System.String]
    # User readable description of the gateway.
    ${Description},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IEndpointRef[]]
    # A list of endpoints that are exposed on this network.
    # To construct, see NOTES section for DESTINATIONNETWORKENDPOINTREF properties and create a hash table.
    ${DestinationNetworkEndpointRef},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [System.String]
    # Name of the network
    ${DestinationNetworkName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IHttpConfig[]]
    # Configuration for http connectivity for this gateway.
    # To construct, see NOTES section for HTTP properties and create a hash table.
    ${Http},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.IEndpointRef[]]
    # A list of endpoints that are exposed on this network.
    # To construct, see NOTES section for SOURCENETWORKENDPOINTREF properties and create a hash table.
    ${SourceNetworkEndpointRef},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [System.String]
    # Name of the network
    ${SourceNetworkName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Models.Api20180901Preview.ITcpConfig[]]
    # Configuration for tcp connectivity for this gateway.
    # To construct, see NOTES section for TCP properties and create a hash table.
    ${Tcp},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ServiceFabricMesh.private\New-AzServiceFabricMeshGateway_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ServiceFabricMesh.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
