
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new assessment with the given name and the specified settings.
Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.\n\nAny PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \"InProgress\" state.
This will be indicated by the field 'computationState' on the Assessment object.
During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation.
Once the computation for the assessment is complete, the field 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on the assessment.\n\nWhen assessment is under computation, any PUT will lead to a 400 - Bad Request error.\n
.Description
Create a new assessment with the given name and the specified settings.
Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.\n\nAny PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \"InProgress\" state.
This will be indicated by the field 'computationState' on the Assessment object.
During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation.
Once the computation for the assessment is complete, the field 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on the assessment.\n\nWhen assessment is under computation, any PUT will lead to a 400 - Bad Request error.\n
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Models.Api20191001.IAssessment
.Link
https://docs.microsoft.com/en-us/powershell/module/az.migratev2/new-azmigratev2assessment
#>
function New-AzMigrateV2Assessment {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Models.Api20191001.IAssessment])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Path')]
    [System.String]
    # Unique name of a group within a project.
    ${GroupName},

    [Parameter(Mandatory)]
    [Alias('AssessmentName')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Path')]
    [System.String]
    # Unique name of an assessment within a project.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Path')]
    [System.String]
    # Name of the Azure Migrate project.
    ${ProjectName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Path')]
    [System.String]
    # Name of the Azure Resource Group that project is part of.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Azure Subscription Id in which project was created.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureDiskType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureDiskType]
    # Storage type selected for this disk.
    ${AzureDiskType},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureHybridUseBenefit])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureHybridUseBenefit]
    # AHUB discount on windows virtual machines.
    ${AzureHybridUseBenefit},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureLocation])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureLocation]
    # Target Azure location for which the machines should be assessed.
    # These enums are the same as used by Compute API.
    ${AzureLocation},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureOfferCode])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureOfferCode]
    # Offer code according to which cost estimation is done.
    ${AzureOfferCode},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzurePricingTier])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzurePricingTier]
    # Pricing tier for Size evaluation.
    ${AzurePricingTier},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureStorageRedundancy])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureStorageRedundancy]
    # Storage Redundancy type offered by Azure.
    ${AzureStorageRedundancy},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureVMFamily])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureVMFamily[]]
    # List of azure VM families.
    ${AzureVMFamily},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.Currency])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.Currency]
    # Currency to report prices in.
    ${Currency},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [System.Double]
    # Custom discount percentage to be applied on final costs.
    # Can be in the range [0, 100].
    ${DiscountPercentage},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.Percentile])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.Percentile]
    # Percentile of performance data used to recommend Azure size.
    ${Percentile},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.ReservedInstance])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.ReservedInstance]
    # Azure reserved instance.
    ${ReservedInstance},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [System.Double]
    # Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure.
    # Min Value = 1.0, Max value = 1.9, Default = 1.3.
    ${ScalingFactor},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AssessmentSizingCriterion])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AssessmentSizingCriterion]
    # Assessment sizing criterion.
    ${SizingCriterion},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AssessmentStage])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AssessmentStage]
    # User configurable setting that describes the status of the assessment.
    ${Stage},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.TimeRange])]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.TimeRange]
    # Time range of performance data used to recommend a size.
    ${TimeRange},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [System.String]
    # For optimistic concurrency control.
    ${ETag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [System.Int32]
    # Number of days in a month for VM uptime.
    ${VMUptimeDaysPerMonth},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Body')]
    [System.Int32]
    # Number of hours per day for VM uptime.
    ${VMUptimeHoursPerDay},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.MigrateV2.private\New-AzMigrateV2Assessment_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
