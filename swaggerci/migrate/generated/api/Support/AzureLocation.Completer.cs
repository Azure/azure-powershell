// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support
{

    /// <summary>
    /// Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureLocationTypeConverter))]
    public partial struct AzureLocation :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Unknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Unknown'", "Unknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "Unknown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EastAsia".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EastAsia'", "EastAsia", global::System.Management.Automation.CompletionResultType.ParameterValue, "EastAsia");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SoutheastAsia".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SoutheastAsia'", "SoutheastAsia", global::System.Management.Automation.CompletionResultType.ParameterValue, "SoutheastAsia");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AustraliaEast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AustraliaEast'", "AustraliaEast", global::System.Management.Automation.CompletionResultType.ParameterValue, "AustraliaEast");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AustraliaSoutheast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AustraliaSoutheast'", "AustraliaSoutheast", global::System.Management.Automation.CompletionResultType.ParameterValue, "AustraliaSoutheast");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BrazilSouth".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BrazilSouth'", "BrazilSouth", global::System.Management.Automation.CompletionResultType.ParameterValue, "BrazilSouth");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CanadaCentral".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CanadaCentral'", "CanadaCentral", global::System.Management.Automation.CompletionResultType.ParameterValue, "CanadaCentral");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CanadaEast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CanadaEast'", "CanadaEast", global::System.Management.Automation.CompletionResultType.ParameterValue, "CanadaEast");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WestEurope".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WestEurope'", "WestEurope", global::System.Management.Automation.CompletionResultType.ParameterValue, "WestEurope");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NorthEurope".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NorthEurope'", "NorthEurope", global::System.Management.Automation.CompletionResultType.ParameterValue, "NorthEurope");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CentralIndia".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CentralIndia'", "CentralIndia", global::System.Management.Automation.CompletionResultType.ParameterValue, "CentralIndia");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SouthIndia".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SouthIndia'", "SouthIndia", global::System.Management.Automation.CompletionResultType.ParameterValue, "SouthIndia");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WestIndia".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WestIndia'", "WestIndia", global::System.Management.Automation.CompletionResultType.ParameterValue, "WestIndia");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "JapanEast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'JapanEast'", "JapanEast", global::System.Management.Automation.CompletionResultType.ParameterValue, "JapanEast");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "JapanWest".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'JapanWest'", "JapanWest", global::System.Management.Automation.CompletionResultType.ParameterValue, "JapanWest");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KoreaCentral".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KoreaCentral'", "KoreaCentral", global::System.Management.Automation.CompletionResultType.ParameterValue, "KoreaCentral");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KoreaSouth".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KoreaSouth'", "KoreaSouth", global::System.Management.Automation.CompletionResultType.ParameterValue, "KoreaSouth");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UkWest".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UkWest'", "UkWest", global::System.Management.Automation.CompletionResultType.ParameterValue, "UkWest");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UkSouth".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UkSouth'", "UkSouth", global::System.Management.Automation.CompletionResultType.ParameterValue, "UkSouth");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NorthCentralUs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NorthCentralUs'", "NorthCentralUs", global::System.Management.Automation.CompletionResultType.ParameterValue, "NorthCentralUs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EastUs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EastUs'", "EastUs", global::System.Management.Automation.CompletionResultType.ParameterValue, "EastUs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WestUs2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WestUs2'", "WestUs2", global::System.Management.Automation.CompletionResultType.ParameterValue, "WestUs2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SouthCentralUs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SouthCentralUs'", "SouthCentralUs", global::System.Management.Automation.CompletionResultType.ParameterValue, "SouthCentralUs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CentralUs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CentralUs'", "CentralUs", global::System.Management.Automation.CompletionResultType.ParameterValue, "CentralUs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EastUs2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EastUs2'", "EastUs2", global::System.Management.Automation.CompletionResultType.ParameterValue, "EastUs2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WestUs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WestUs'", "WestUs", global::System.Management.Automation.CompletionResultType.ParameterValue, "WestUs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WestCentralUs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WestCentralUs'", "WestCentralUs", global::System.Management.Automation.CompletionResultType.ParameterValue, "WestCentralUs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GermanyCentral".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GermanyCentral'", "GermanyCentral", global::System.Management.Automation.CompletionResultType.ParameterValue, "GermanyCentral");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GermanyNortheast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GermanyNortheast'", "GermanyNortheast", global::System.Management.Automation.CompletionResultType.ParameterValue, "GermanyNortheast");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ChinaNorth".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ChinaNorth'", "ChinaNorth", global::System.Management.Automation.CompletionResultType.ParameterValue, "ChinaNorth");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ChinaEast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ChinaEast'", "ChinaEast", global::System.Management.Automation.CompletionResultType.ParameterValue, "ChinaEast");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USGovArizona".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USGovArizona'", "USGovArizona", global::System.Management.Automation.CompletionResultType.ParameterValue, "USGovArizona");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USGovTexas".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USGovTexas'", "USGovTexas", global::System.Management.Automation.CompletionResultType.ParameterValue, "USGovTexas");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USGovIowa".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USGovIowa'", "USGovIowa", global::System.Management.Automation.CompletionResultType.ParameterValue, "USGovIowa");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USGovVirginia".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USGovVirginia'", "USGovVirginia", global::System.Management.Automation.CompletionResultType.ParameterValue, "USGovVirginia");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USDoDCentral".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USDoDCentral'", "USDoDCentral", global::System.Management.Automation.CompletionResultType.ParameterValue, "USDoDCentral");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USDoDEast".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USDoDEast'", "USDoDEast", global::System.Management.Automation.CompletionResultType.ParameterValue, "USDoDEast");
            }
        }
    }
}