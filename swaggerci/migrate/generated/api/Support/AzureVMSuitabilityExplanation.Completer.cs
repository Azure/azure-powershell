// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support
{

    /// <summary>
    /// If machine is not ready to be migrated, this explains the reasons and mitigation steps.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureVMSuitabilityExplanationTypeConverter))]
    public partial struct AzureVMSuitabilityExplanation :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Unknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Unknown'", "Unknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "Unknown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NotApplicable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NotApplicable'", "NotApplicable", global::System.Management.Automation.CompletionResultType.ParameterValue, "NotApplicable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GuestOperatingSystemArchitectureNotSupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GuestOperatingSystemArchitectureNotSupported'", "GuestOperatingSystemArchitectureNotSupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "GuestOperatingSystemArchitectureNotSupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GuestOperatingSystemNotSupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GuestOperatingSystemNotSupported'", "GuestOperatingSystemNotSupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "GuestOperatingSystemNotSupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BootTypeNotSupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BootTypeNotSupported'", "BootTypeNotSupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "BootTypeNotSupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MoreDisksThanSupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MoreDisksThanSupported'", "MoreDisksThanSupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "MoreDisksThanSupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoSuitableVmSizeFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoSuitableVmSizeFound'", "NoSuitableVmSizeFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoSuitableVmSizeFound");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "OneOrMoreDisksNotSuitable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'OneOrMoreDisksNotSuitable'", "OneOrMoreDisksNotSuitable", global::System.Management.Automation.CompletionResultType.ParameterValue, "OneOrMoreDisksNotSuitable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "OneOrMoreAdaptersNotSuitable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'OneOrMoreAdaptersNotSuitable'", "OneOrMoreAdaptersNotSuitable", global::System.Management.Automation.CompletionResultType.ParameterValue, "OneOrMoreAdaptersNotSuitable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InternalErrorOccurredDuringComputeEvaluation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InternalErrorOccurredDuringComputeEvaluation'", "InternalErrorOccurredDuringComputeEvaluation", global::System.Management.Automation.CompletionResultType.ParameterValue, "InternalErrorOccurredDuringComputeEvaluation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InternalErrorOccurredDuringStorageEvaluation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InternalErrorOccurredDuringStorageEvaluation'", "InternalErrorOccurredDuringStorageEvaluation", global::System.Management.Automation.CompletionResultType.ParameterValue, "InternalErrorOccurredDuringStorageEvaluation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InternalErrorOccurredDuringNetworkEvaluation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InternalErrorOccurredDuringNetworkEvaluation'", "InternalErrorOccurredDuringNetworkEvaluation", global::System.Management.Automation.CompletionResultType.ParameterValue, "InternalErrorOccurredDuringNetworkEvaluation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoVmSizeSupportsStoragePerformance".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoVmSizeSupportsStoragePerformance'", "NoVmSizeSupportsStoragePerformance", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoVmSizeSupportsStoragePerformance");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoVmSizeSupportsNetworkPerformance".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoVmSizeSupportsNetworkPerformance'", "NoVmSizeSupportsNetworkPerformance", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoVmSizeSupportsNetworkPerformance");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoVmSizeForSelectedPricingTier".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoVmSizeForSelectedPricingTier'", "NoVmSizeForSelectedPricingTier", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoVmSizeForSelectedPricingTier");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoVmSizeForSelectedAzureLocation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoVmSizeForSelectedAzureLocation'", "NoVmSizeForSelectedAzureLocation", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoVmSizeForSelectedAzureLocation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckRedHatLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckRedHatLinuxVersion'", "CheckRedHatLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckRedHatLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckOpenSuseLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckOpenSuseLinuxVersion'", "CheckOpenSuseLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckOpenSuseLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckWindowsServer2008R2Version".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckWindowsServer2008R2Version'", "CheckWindowsServer2008R2Version", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckWindowsServer2008R2Version");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckCentOsVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckCentOsVersion'", "CheckCentOsVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckCentOsVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckDebianLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckDebianLinuxVersion'", "CheckDebianLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckDebianLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckSuseLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckSuseLinuxVersion'", "CheckSuseLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckSuseLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckOracleLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckOracleLinuxVersion'", "CheckOracleLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckOracleLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckUbuntuLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckUbuntuLinuxVersion'", "CheckUbuntuLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckUbuntuLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CheckCoreOsLinuxVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CheckCoreOsLinuxVersion'", "CheckCoreOsLinuxVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "CheckCoreOsLinuxVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WindowsServerVersionConditionallySupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WindowsServerVersionConditionallySupported'", "WindowsServerVersionConditionallySupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "WindowsServerVersionConditionallySupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoGuestOperatingSystemConditionallySupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoGuestOperatingSystemConditionallySupported'", "NoGuestOperatingSystemConditionallySupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoGuestOperatingSystemConditionallySupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WindowsClientVersionsConditionallySupported".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WindowsClientVersionsConditionallySupported'", "WindowsClientVersionsConditionallySupported", global::System.Management.Automation.CompletionResultType.ParameterValue, "WindowsClientVersionsConditionallySupported");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BootTypeUnknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BootTypeUnknown'", "BootTypeUnknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "BootTypeUnknown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GuestOperatingSystemUnknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GuestOperatingSystemUnknown'", "GuestOperatingSystemUnknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "GuestOperatingSystemUnknown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WindowsServerVersionsSupportedWithCaveat".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WindowsServerVersionsSupportedWithCaveat'", "WindowsServerVersionsSupportedWithCaveat", global::System.Management.Automation.CompletionResultType.ParameterValue, "WindowsServerVersionsSupportedWithCaveat");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WindowsOSNoLongerUnderMSSupport".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WindowsOSNoLongerUnderMSSupport'", "WindowsOSNoLongerUnderMSSupport", global::System.Management.Automation.CompletionResultType.ParameterValue, "WindowsOSNoLongerUnderMSSupport");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EndorsedWithConditionsLinuxDistributions".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EndorsedWithConditionsLinuxDistributions'", "EndorsedWithConditionsLinuxDistributions", global::System.Management.Automation.CompletionResultType.ParameterValue, "EndorsedWithConditionsLinuxDistributions");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UnendorsedLinuxDistributions".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UnendorsedLinuxDistributions'", "UnendorsedLinuxDistributions", global::System.Management.Automation.CompletionResultType.ParameterValue, "UnendorsedLinuxDistributions");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoVmSizeForStandardPricingTier".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoVmSizeForStandardPricingTier'", "NoVmSizeForStandardPricingTier", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoVmSizeForStandardPricingTier");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoVmSizeForBasicPricingTier".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoVmSizeForBasicPricingTier'", "NoVmSizeForBasicPricingTier", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoVmSizeForBasicPricingTier");
            }
        }
    }
}