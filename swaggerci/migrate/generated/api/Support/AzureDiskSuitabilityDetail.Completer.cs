// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support
{

    /// <summary>
    /// If disk is suitable to be migrate but some conditions/checks were not considered while calculating suitability, this explains
    /// the details.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.AzureDiskSuitabilityDetailTypeConverter))]
    public partial struct AzureDiskSuitabilityDetail :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "None".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'None'", "None", global::System.Management.Automation.CompletionResultType.ParameterValue, "None");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberOfReadOperationsPerSecondMissing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberOfReadOperationsPerSecondMissing'", "NumberOfReadOperationsPerSecondMissing", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberOfReadOperationsPerSecondMissing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberOfWriteOperationsPerSecondMissing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberOfWriteOperationsPerSecondMissing'", "NumberOfWriteOperationsPerSecondMissing", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberOfWriteOperationsPerSecondMissing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MegabytesPerSecondOfReadMissing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MegabytesPerSecondOfReadMissing'", "MegabytesPerSecondOfReadMissing", global::System.Management.Automation.CompletionResultType.ParameterValue, "MegabytesPerSecondOfReadMissing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MegabytesPerSecondOfWriteMissing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MegabytesPerSecondOfWriteMissing'", "MegabytesPerSecondOfWriteMissing", global::System.Management.Automation.CompletionResultType.ParameterValue, "MegabytesPerSecondOfWriteMissing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DiskGigabytesConsumedMissing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DiskGigabytesConsumedMissing'", "DiskGigabytesConsumedMissing", global::System.Management.Automation.CompletionResultType.ParameterValue, "DiskGigabytesConsumedMissing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DiskGigabytesProvisionedMissing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DiskGigabytesProvisionedMissing'", "DiskGigabytesProvisionedMissing", global::System.Management.Automation.CompletionResultType.ParameterValue, "DiskGigabytesProvisionedMissing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberOfReadOperationsPerSecondOutOfRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberOfReadOperationsPerSecondOutOfRange'", "NumberOfReadOperationsPerSecondOutOfRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberOfReadOperationsPerSecondOutOfRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberOfWriteOperationsPerSecondOutOfRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberOfWriteOperationsPerSecondOutOfRange'", "NumberOfWriteOperationsPerSecondOutOfRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberOfWriteOperationsPerSecondOutOfRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MegabytesPerSecondOfReadOutOfRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MegabytesPerSecondOfReadOutOfRange'", "MegabytesPerSecondOfReadOutOfRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "MegabytesPerSecondOfReadOutOfRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MegabytesPerSecondOfWriteOutOfRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MegabytesPerSecondOfWriteOutOfRange'", "MegabytesPerSecondOfWriteOutOfRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "MegabytesPerSecondOfWriteOutOfRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DiskGigabytesConsumedOutOfRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DiskGigabytesConsumedOutOfRange'", "DiskGigabytesConsumedOutOfRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "DiskGigabytesConsumedOutOfRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DiskGigabytesProvisionedOutOfRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DiskGigabytesProvisionedOutOfRange'", "DiskGigabytesProvisionedOutOfRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "DiskGigabytesProvisionedOutOfRange");
            }
        }
    }
}