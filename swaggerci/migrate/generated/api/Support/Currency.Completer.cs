// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support
{

    /// <summary>Currency to report prices in.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.MigrateV2.Support.CurrencyTypeConverter))]
    public partial struct Currency :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Unknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Unknown'", "Unknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "Unknown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "USD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'USD'", "USD", global::System.Management.Automation.CompletionResultType.ParameterValue, "USD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DKK".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DKK'", "DKK", global::System.Management.Automation.CompletionResultType.ParameterValue, "DKK");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CAD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CAD'", "CAD", global::System.Management.Automation.CompletionResultType.ParameterValue, "CAD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IDR".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IDR'", "IDR", global::System.Management.Automation.CompletionResultType.ParameterValue, "IDR");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "JPY".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'JPY'", "JPY", global::System.Management.Automation.CompletionResultType.ParameterValue, "JPY");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KRW".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KRW'", "KRW", global::System.Management.Automation.CompletionResultType.ParameterValue, "KRW");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NZD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NZD'", "NZD", global::System.Management.Automation.CompletionResultType.ParameterValue, "NZD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NOK".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NOK'", "NOK", global::System.Management.Automation.CompletionResultType.ParameterValue, "NOK");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RUB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RUB'", "RUB", global::System.Management.Automation.CompletionResultType.ParameterValue, "RUB");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SAR".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SAR'", "SAR", global::System.Management.Automation.CompletionResultType.ParameterValue, "SAR");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ZAR".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ZAR'", "ZAR", global::System.Management.Automation.CompletionResultType.ParameterValue, "ZAR");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SEK".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SEK'", "SEK", global::System.Management.Automation.CompletionResultType.ParameterValue, "SEK");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "TRY".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'TRY'", "TRY", global::System.Management.Automation.CompletionResultType.ParameterValue, "TRY");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GBP".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GBP'", "GBP", global::System.Management.Automation.CompletionResultType.ParameterValue, "GBP");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MXN".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MXN'", "MXN", global::System.Management.Automation.CompletionResultType.ParameterValue, "MXN");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MYR".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MYR'", "MYR", global::System.Management.Automation.CompletionResultType.ParameterValue, "MYR");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "INR".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'INR'", "INR", global::System.Management.Automation.CompletionResultType.ParameterValue, "INR");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HKD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HKD'", "HKD", global::System.Management.Automation.CompletionResultType.ParameterValue, "HKD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BRL".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BRL'", "BRL", global::System.Management.Automation.CompletionResultType.ParameterValue, "BRL");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "TWD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'TWD'", "TWD", global::System.Management.Automation.CompletionResultType.ParameterValue, "TWD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EUR".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EUR'", "EUR", global::System.Management.Automation.CompletionResultType.ParameterValue, "EUR");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CHF".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CHF'", "CHF", global::System.Management.Automation.CompletionResultType.ParameterValue, "CHF");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ARS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ARS'", "ARS", global::System.Management.Automation.CompletionResultType.ParameterValue, "ARS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AUD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AUD'", "AUD", global::System.Management.Automation.CompletionResultType.ParameterValue, "AUD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CNY".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CNY'", "CNY", global::System.Management.Automation.CompletionResultType.ParameterValue, "CNY");
            }
        }
    }
}