// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.Extensions;

    /// <summary>Response on GET of a hybrid use benefit</summary>
    public partial class HybridUseBenefitModel :
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModel,
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal,
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.Resource();

        /// <summary>Created date</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreatedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).CreatedDate; }

        /// <summary>Backing field for <see cref="Etag" /> property.</summary>
        private int? _etag;

        /// <summary>Indicates the revision of the hybrid use benefit</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Owned)]
        public int? Etag { get => this._etag; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Id; }

        /// <summary>Last updated date</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastUpdatedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).LastUpdatedDate; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Type = value; }

        /// <summary>Internal Acessors for CreatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal.CreatedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).CreatedDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).CreatedDate = value; }

        /// <summary>Internal Acessors for Etag</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal.Etag { get => this._etag; set { {_etag = value;} } }

        /// <summary>Internal Acessors for LastUpdatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal.LastUpdatedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).LastUpdatedDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).LastUpdatedDate = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitProperties Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.HybridUseBenefitProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.ISku Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitModelInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.Sku()); set { {_sku = value;} } }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitProperties _property;

        /// <summary>Property bag for a hybrid use benefit response</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.HybridUseBenefitProperties()); set => this._property = value; }

        /// <summary>Provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.ISku _sku;

        /// <summary>Hybrid use benefit SKU</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.ISku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.Sku()); set => this._sku = value; }

        /// <summary>Name of the SKU to be applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.ISkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.ISkuInternal)Sku).Name = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Origin(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="HybridUseBenefitModel" /> instance.</summary>
        public HybridUseBenefitModel()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Response on GET of a hybrid use benefit
    public partial interface IHybridUseBenefitModel :
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResource
    {
        /// <summary>Created date</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Created date",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDate { get;  }
        /// <summary>Indicates the revision of the hybrid use benefit</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates the revision of the hybrid use benefit",
        SerializedName = @"etag",
        PossibleTypes = new [] { typeof(int) })]
        int? Etag { get;  }
        /// <summary>Last updated date</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last updated date",
        SerializedName = @"lastUpdatedDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastUpdatedDate { get;  }
        /// <summary>Provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Name of the SKU to be applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the SKU to be applied",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }

    }
    /// Response on GET of a hybrid use benefit
    internal partial interface IHybridUseBenefitModelInternal :
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api10.IResourceInternal
    {
        /// <summary>Created date</summary>
        global::System.DateTime? CreatedDate { get; set; }
        /// <summary>Indicates the revision of the hybrid use benefit</summary>
        int? Etag { get; set; }
        /// <summary>Last updated date</summary>
        global::System.DateTime? LastUpdatedDate { get; set; }
        /// <summary>Property bag for a hybrid use benefit response</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.IHybridUseBenefitProperties Property { get; set; }
        /// <summary>Provisioning state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Hybrid use benefit SKU</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SoftwarePlanRp.Models.Api20191201.ISku Sku { get; set; }
        /// <summary>Name of the SKU to be applied</summary>
        string SkuName { get; set; }

    }
}