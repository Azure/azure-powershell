// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Search.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Extensions;
    using System;

    /// <summary>Updates an existing search service in the given resource group.</summary>
    /// <remarks>
    /// [OpenAPI] Update=>PATCH:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzSearchService_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Description(@"Updates an existing search service in the given resource group.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Generated]
    public partial class UpdateAzSearchService_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>The parameters used to update an Azure Cognitive Search service.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchServiceUpdate _serviceBody = new Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.SearchServiceUpdate();

        /// <summary>
        /// Describes what response the data plane API of a Search service would send for requests that failed authentication.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Describes what response the data plane API of a Search service would send for requests that failed authentication.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes what response the data plane API of a Search service would send for requests that failed authentication.",
        SerializedName = @"aadAuthFailureMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.AadAuthFailureMode) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.AadAuthFailureMode))]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.AadAuthFailureMode AadOrApiKeyAadAuthFailureMode { get => _serviceBody.AadOrApiKeyAadAuthFailureMode ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.AadAuthFailureMode)""); set => _serviceBody.AadOrApiKeyAadAuthFailureMode = value; }

        /// <summary>Indicates that only the API key needs to be used for authentication.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates that only the API key needs to be used for authentication.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates that only the API key needs to be used for authentication.",
        SerializedName = @"apiKeyOnly",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Models.IAny AuthOptionApiKeyOnly { get => _serviceBody.AuthOptionApiKeyOnly ?? null /* object */; set => _serviceBody.AuthOptionApiKeyOnly = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Search.SearchManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.Search.Module.Instance.ClientAPI;

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        /// <summary>
        /// A client-generated GUID value that identifies this request. If specified, this will be included in response information
        /// as a way to track the request.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A client-generated GUID value that identifies this request. If specified, this will be included in response information as a way to track the request.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A client-generated GUID value that identifies this request. If specified, this will be included in response information as a way to track the request.",
        SerializedName = @"x-ms-client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Header)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// When set to true, calls to the search service will not be permitted to utilize API keys for authentication. This cannot
        /// be set to true if 'dataPlaneAuthOptions' are defined.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "When set to true, calls to the search service will not be permitted to utilize API keys for authentication. This cannot be set to true if 'dataPlaneAuthOptions' are defined.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When set to true, calls to the search service will not be permitted to utilize API keys for authentication. This cannot be set to true if 'dataPlaneAuthOptions' are defined.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DisableLocalAuth { get => _serviceBody.DisableLocalAuth ?? default(global::System.Management.Automation.SwitchParameter); set => _serviceBody.DisableLocalAuth = value; }

        /// <summary>
        /// Describes how a search service should enforce having one or more non customer encrypted resources.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Describes how a search service should enforce having one or more non customer encrypted resources.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes how a search service should enforce having one or more non customer encrypted resources.",
        SerializedName = @"enforcement",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchEncryptionWithCmk) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchEncryptionWithCmk))]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchEncryptionWithCmk EncryptionWithCmkEnforcement { get => _serviceBody.EncryptionWithCmkEnforcement ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchEncryptionWithCmk)""); set => _serviceBody.EncryptionWithCmkEnforcement = value; }

        /// <summary>
        /// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow
        /// up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the
        /// value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.",
        SerializedName = @"hostingMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.HostingMode) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.HostingMode))]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.HostingMode HostingMode { get => _serviceBody.HostingMode ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.HostingMode)""); set => _serviceBody.HostingMode = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The identity type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The identity type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.IdentityType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.IdentityType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.IdentityType IdentityType { get => _serviceBody.IdentityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.IdentityType)""); set => _serviceBody.IdentityType = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example,
        /// West US, East US, Southeast Asia, and so forth). This property is required when creating a new resource.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth). This property is required when creating a new resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth). This property is required when creating a new resource.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _serviceBody.Location ?? null; set => _serviceBody.Location = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service endpoint.
        /// At the meantime, all other public IP networks are blocked by the firewall. These restriction rules are applied only when
        /// the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public interface is not allowed
        /// even with any public IP rules, and private endpoint connections would be the exclusive access method.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service endpoint. At the meantime, all other public IP networks are blocked by the firewall. These restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public interface is not allowed even with any public IP rules, and private endpoint connections would be the exclusive access method.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service endpoint. At the meantime, all other public IP networks are blocked by the firewall. These restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public interface is not allowed even with any public IP rules, and private endpoint connections would be the exclusive access method.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.IIPRule) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.IIPRule[] NetworkRuleSetIPRule { get => _serviceBody.NetworkRuleSetIPRule ?? null /* arrayOf */; set => _serviceBody.NetworkRuleSetIPRule = value; }

        /// <summary>
        /// The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are
        /// only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between
        /// 1 and 3.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.",
        SerializedName = @"partitionCount",
        PossibleTypes = new [] { typeof(int) })]
        public int PartitionCount { get => _serviceBody.PartitionCount ?? default(int); set => _serviceBody.PartitionCount = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled',
        /// traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.PublicNetworkAccess) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.PublicNetworkAccess))]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.PublicNetworkAccess PublicNetworkAccess { get => _serviceBody.PublicNetworkAccess ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.PublicNetworkAccess)""); set => _serviceBody.PublicNetworkAccess = value; }

        /// <summary>
        /// The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard
        /// SKUs or between 1 and 3 inclusive for basic SKU.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.",
        SerializedName = @"replicaCount",
        PossibleTypes = new [] { typeof(int) })]
        public int ReplicaCount { get => _serviceBody.ReplicaCount ?? default(int); set => _serviceBody.ReplicaCount = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>
        /// The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager
        /// API or the portal.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="SearchServiceName" /> property.</summary>
        private string _searchServiceName;

        /// <summary>The name of the Azure Cognitive Search service to update.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the Azure Cognitive Search service to update.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the Azure Cognitive Search service to update.",
        SerializedName = @"searchServiceName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Path)]
        public string SearchServiceName { get => this._searchServiceName; set => this._searchServiceName = value; }

        /// <summary>
        /// The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas.
        /// 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more
        /// capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to
        /// 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports
        /// 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName))]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName SkuName { get => _serviceBody.SkuName ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName)""); set => _serviceBody.SkuName = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>
        /// The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API
        /// or the portal.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Tags to help categorize the resource in the Azure portal.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tags to help categorize the resource in the Azure portal.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Search.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Search.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tags to help categorize the resource in the Azure portal.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchServiceUpdateTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchServiceUpdateTags Tag { get => _serviceBody.Tag ?? null /* object */; set => _serviceBody.Tag = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError">Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService">Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Search.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Search.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ServicesUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Search.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.ServicesUpdate(ResourceGroupName, SearchServiceName, this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null, SubscriptionId, _serviceBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  ResourceGroupName=ResourceGroupName,SearchServiceName=SearchServiceName,ClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null,SubscriptionId=SubscriptionId,body=_serviceBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzSearchService_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzSearchService_UpdateExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError">Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ICloudError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceGroupName=ResourceGroupName, SearchServiceName=SearchServiceName, ClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null, SubscriptionId=SubscriptionId, body=_serviceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceGroupName=ResourceGroupName, SearchServiceName=SearchServiceName, ClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null, SubscriptionId=SubscriptionId, body=_serviceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService">Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20220901.ISearchService
                WriteObject((await response));
            }
        }
    }
}