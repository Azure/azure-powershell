// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Extensions;

    /// <summary>
    /// Extended description about the product required for installing it into Azure Stack.
    /// </summary>
    public partial class ExtendedProduct :
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProduct,
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal
    {

        /// <summary>Specifies kind of compute role included in the package.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.ComputeRole? ComputeRole { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).ComputeRole; }

        /// <summary>List of attached data disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IDataDiskImage[] DataDiskImage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).DataDiskImage; }

        /// <summary>Backing field for <see cref="GalleryPackageBlobSasUri" /> property.</summary>
        private string _galleryPackageBlobSasUri;

        /// <summary>
        /// The URI to the .azpkg file that provides information required for showing product in the gallery.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Owned)]
        public string GalleryPackageBlobSasUri { get => this._galleryPackageBlobSasUri; }

        /// <summary>Specifies if product is a Virtual Machine Extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public bool? IsSystemExtension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).IsSystemExtension; }

        /// <summary>Internal Acessors for ComputeRole</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.ComputeRole? Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.ComputeRole { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).ComputeRole; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).ComputeRole = value; }

        /// <summary>Internal Acessors for DataDiskImage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IDataDiskImage[] Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.DataDiskImage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).DataDiskImage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).DataDiskImage = value; }

        /// <summary>Internal Acessors for GalleryPackageBlobSasUri</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.GalleryPackageBlobSasUri { get => this._galleryPackageBlobSasUri; set { {_galleryPackageBlobSasUri = value;} } }

        /// <summary>Internal Acessors for IsSystemExtension</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.IsSystemExtension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).IsSystemExtension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).IsSystemExtension = value; }

        /// <summary>Internal Acessors for OSDiskImage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IOSDiskImage Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.OSDiskImage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImage = value; }

        /// <summary>Internal Acessors for OSDiskImageOperatingSystem</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.OSDiskImageOperatingSystem { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImageOperatingSystem; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImageOperatingSystem = value; }

        /// <summary>Internal Acessors for OSDiskImageSourceBlobSasUri</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.OSDiskImageSourceBlobSasUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImageSourceBlobSasUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImageSourceBlobSasUri = value; }

        /// <summary>Internal Acessors for ProductKind</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.ProductKind { get => this._productKind; set { {_productKind = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductProperties Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.ExtendedProductProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for SourceBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IUri Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.SourceBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SourceBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SourceBlob = value; }

        /// <summary>Internal Acessors for SourceBlobUri</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.SourceBlobUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SourceBlobUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SourceBlobUri = value; }

        /// <summary>Internal Acessors for SupportMultipleExtension</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.SupportMultipleExtension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SupportMultipleExtension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SupportMultipleExtension = value; }

        /// <summary>Internal Acessors for VMScaleSetEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.VMScaleSetEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).VMScaleSetEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).VMScaleSetEnabled = value; }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).Version = value; }

        /// <summary>Internal Acessors for VmosType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductInternal.VmosType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).VmosType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).VmosType = value; }

        /// <summary>OS operating system type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? OSDiskImageOperatingSystem { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImageOperatingSystem; }

        /// <summary>SAS key for source blob.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public string OSDiskImageSourceBlobSasUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineProductPropertiesInternal)Property).OSDiskImageSourceBlobSasUri; }

        /// <summary>Backing field for <see cref="ProductKind" /> property.</summary>
        private string _productKind;

        /// <summary>Specifies the kind of the product (virtualMachine or virtualMachineExtension).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Owned)]
        public string ProductKind { get => this._productKind; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductProperties _property;

        /// <summary>Specifies additional properties describing the product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.ExtendedProductProperties()); }

        /// <summary>The URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public string SourceBlobUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SourceBlobUri; }

        /// <summary>Indicates if specified product supports multiple extensions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public bool? SupportMultipleExtension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).SupportMultipleExtension; }

        /// <summary>Indicates if virtual machine Scale Set is enabled in the specified product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public bool? VMScaleSetEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).VMScaleSetEnabled; }

        /// <summary>Specifies product version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public string Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).Version; }

        /// <summary>Specifies operating system used by the product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Origin(Microsoft.Azure.PowerShell.Cmdlets.Stack.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? VmosType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IVirtualMachineExtensionProductPropertiesInternal)Property).VmosType; }

        /// <summary>Creates an new <see cref="ExtendedProduct" /> instance.</summary>
        public ExtendedProduct()
        {

        }
    }
    /// Extended description about the product required for installing it into Azure Stack.
    public partial interface IExtendedProduct :
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.IJsonSerializable
    {
        /// <summary>Specifies kind of compute role included in the package.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies kind of compute role included in the package.",
        SerializedName = @"computeRole",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.ComputeRole) })]
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.ComputeRole? ComputeRole { get;  }
        /// <summary>List of attached data disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of attached data disks.",
        SerializedName = @"dataDiskImages",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IDataDiskImage) })]
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IDataDiskImage[] DataDiskImage { get;  }
        /// <summary>
        /// The URI to the .azpkg file that provides information required for showing product in the gallery.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The URI to the .azpkg file that provides information required for showing product in the gallery.",
        SerializedName = @"galleryPackageBlobSasUri",
        PossibleTypes = new [] { typeof(string) })]
        string GalleryPackageBlobSasUri { get;  }
        /// <summary>Specifies if product is a Virtual Machine Extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies if product is a Virtual Machine Extension.",
        SerializedName = @"isSystemExtension",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSystemExtension { get;  }
        /// <summary>OS operating system type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"OS operating system type.",
        SerializedName = @"operatingSystem",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem) })]
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? OSDiskImageOperatingSystem { get;  }
        /// <summary>SAS key for source blob.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"SAS key for source blob.",
        SerializedName = @"sourceBlobSasUri",
        PossibleTypes = new [] { typeof(string) })]
        string OSDiskImageSourceBlobSasUri { get;  }
        /// <summary>Specifies the kind of the product (virtualMachine or virtualMachineExtension).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the kind of the product (virtualMachine or virtualMachineExtension).",
        SerializedName = @"productKind",
        PossibleTypes = new [] { typeof(string) })]
        string ProductKind { get;  }
        /// <summary>The URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string SourceBlobUri { get;  }
        /// <summary>Indicates if specified product supports multiple extensions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates if specified product supports multiple extensions.",
        SerializedName = @"supportMultipleExtensions",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SupportMultipleExtension { get;  }
        /// <summary>Indicates if virtual machine Scale Set is enabled in the specified product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates if virtual machine Scale Set is enabled in the specified product.",
        SerializedName = @"vmScaleSetEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VMScaleSetEnabled { get;  }
        /// <summary>Specifies product version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies product version.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }
        /// <summary>Specifies operating system used by the product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Stack.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies operating system used by the product.",
        SerializedName = @"vmOsType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem) })]
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? VmosType { get;  }

    }
    /// Extended description about the product required for installing it into Azure Stack.
    internal partial interface IExtendedProductInternal

    {
        /// <summary>Specifies kind of compute role included in the package.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.ComputeRole? ComputeRole { get; set; }
        /// <summary>List of attached data disks.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IDataDiskImage[] DataDiskImage { get; set; }
        /// <summary>
        /// The URI to the .azpkg file that provides information required for showing product in the gallery.
        /// </summary>
        string GalleryPackageBlobSasUri { get; set; }
        /// <summary>Specifies if product is a Virtual Machine Extension.</summary>
        bool? IsSystemExtension { get; set; }
        /// <summary>OS disk image used by product.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IOSDiskImage OSDiskImage { get; set; }
        /// <summary>OS operating system type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? OSDiskImageOperatingSystem { get; set; }
        /// <summary>SAS key for source blob.</summary>
        string OSDiskImageSourceBlobSasUri { get; set; }
        /// <summary>Specifies the kind of the product (virtualMachine or virtualMachineExtension).</summary>
        string ProductKind { get; set; }
        /// <summary>Specifies additional properties describing the product.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IExtendedProductProperties Property { get; set; }
        /// <summary>Specifies a download location where content can be downloaded from.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Models.Api20200601Preview.IUri SourceBlob { get; set; }
        /// <summary>The URI.</summary>
        string SourceBlobUri { get; set; }
        /// <summary>Indicates if specified product supports multiple extensions.</summary>
        bool? SupportMultipleExtension { get; set; }
        /// <summary>Indicates if virtual machine Scale Set is enabled in the specified product.</summary>
        bool? VMScaleSetEnabled { get; set; }
        /// <summary>Specifies product version.</summary>
        string Version { get; set; }
        /// <summary>Specifies operating system used by the product.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Stack.Support.OperatingSystem? VmosType { get; set; }

    }
}