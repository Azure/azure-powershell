// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Extensions;

    /// <summary>Server Endpoint sync status</summary>
    public partial class ServerEndpointSyncStatus :
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatus,
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal
    {

        /// <summary>Backing field for <see cref="BackgroundDataDownloadActivity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivity _backgroundDataDownloadActivity;

        /// <summary>Background data download activity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivity BackgroundDataDownloadActivity { get => (this._backgroundDataDownloadActivity = this._backgroundDataDownloadActivity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointBackgroundDataDownloadActivity()); }

        /// <summary>Running count of bytes downloaded</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? BackgroundDataDownloadActivityDownloadedByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).DownloadedByte; }

        /// <summary>Progress percentage</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public int? BackgroundDataDownloadActivityPercentProgress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).PercentProgress; }

        /// <summary>Timestamp when the operation started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? BackgroundDataDownloadActivityStartedTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).StartedTimestamp; }

        /// <summary>Timestamp when properties were updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? BackgroundDataDownloadActivityTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).Timestamp; }

        /// <summary>Backing field for <see cref="CombinedHealth" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? _combinedHealth;

        /// <summary>Combined Health Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? CombinedHealth { get => this._combinedHealth; }

        /// <summary>Backing field for <see cref="DownloadActivity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus _downloadActivity;

        /// <summary>Download sync activity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus DownloadActivity { get => (this._downloadActivity = this._downloadActivity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncActivityStatus()); }

        /// <summary>Applied bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadActivityAppliedByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).AppliedByte; }

        /// <summary>Applied item count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadActivityAppliedItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).AppliedItemCount; }

        /// <summary>Per item error count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadActivityPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).PerItemErrorCount; }

        /// <summary>Session minutes remaining (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public int? DownloadActivitySessionMinutesRemaining { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).SessionMinutesRemaining; }

        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? DownloadActivitySyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).SyncMode; }

        /// <summary>Timestamp when properties were updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? DownloadActivityTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).Timestamp; }

        /// <summary>Total bytes (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadActivityTotalByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).TotalByte; }

        /// <summary>Total item count (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadActivityTotalItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).TotalItemCount; }

        /// <summary>Backing field for <see cref="DownloadHealth" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? _downloadHealth;

        /// <summary>Download Health Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? DownloadHealth { get => this._downloadHealth; }

        /// <summary>Backing field for <see cref="DownloadStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus _downloadStatus;

        /// <summary>Download Status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus DownloadStatus { get => (this._downloadStatus = this._downloadStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncSessionStatus()); }

        /// <summary>Array of per-item errors coming from the last sync session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] DownloadStatusFilesNotSyncingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).FilesNotSyncingError; }

        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? DownloadStatusLastSyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncMode; }

        /// <summary>Last sync per item error count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadStatusLastSyncPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncPerItemErrorCount; }

        /// <summary>Last sync result (HResult)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public int? DownloadStatusLastSyncResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncResult; }

        /// <summary>Last sync success timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? DownloadStatusLastSyncSuccessTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncSuccessTimestamp; }

        /// <summary>Last sync timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? DownloadStatusLastSyncTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncTimestamp; }

        /// <summary>Count of persistent files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadStatusPersistentFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).PersistentFilesNotSyncingCount; }

        /// <summary>Count of transient files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? DownloadStatusTransientFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).TransientFilesNotSyncingCount; }

        /// <summary>Backing field for <see cref="LastUpdatedTimestamp" /> property.</summary>
        private global::System.DateTime? _lastUpdatedTimestamp;

        /// <summary>Last Updated Timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public global::System.DateTime? LastUpdatedTimestamp { get => this._lastUpdatedTimestamp; }

        /// <summary>Internal Acessors for BackgroundDataDownloadActivity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivity Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.BackgroundDataDownloadActivity { get => (this._backgroundDataDownloadActivity = this._backgroundDataDownloadActivity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointBackgroundDataDownloadActivity()); set { {_backgroundDataDownloadActivity = value;} } }

        /// <summary>Internal Acessors for BackgroundDataDownloadActivityDownloadedByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.BackgroundDataDownloadActivityDownloadedByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).DownloadedByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).DownloadedByte = value; }

        /// <summary>Internal Acessors for BackgroundDataDownloadActivityPercentProgress</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.BackgroundDataDownloadActivityPercentProgress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).PercentProgress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).PercentProgress = value; }

        /// <summary>Internal Acessors for BackgroundDataDownloadActivityStartedTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.BackgroundDataDownloadActivityStartedTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).StartedTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).StartedTimestamp = value; }

        /// <summary>Internal Acessors for BackgroundDataDownloadActivityTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.BackgroundDataDownloadActivityTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivityInternal)BackgroundDataDownloadActivity).Timestamp = value; }

        /// <summary>Internal Acessors for CombinedHealth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.CombinedHealth { get => this._combinedHealth; set { {_combinedHealth = value;} } }

        /// <summary>Internal Acessors for DownloadActivity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivity { get => (this._downloadActivity = this._downloadActivity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncActivityStatus()); set { {_downloadActivity = value;} } }

        /// <summary>Internal Acessors for DownloadActivityAppliedByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivityAppliedByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).AppliedByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).AppliedByte = value; }

        /// <summary>Internal Acessors for DownloadActivityAppliedItemCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivityAppliedItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).AppliedItemCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).AppliedItemCount = value; }

        /// <summary>Internal Acessors for DownloadActivityPerItemErrorCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivityPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).PerItemErrorCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).PerItemErrorCount = value; }

        /// <summary>Internal Acessors for DownloadActivitySessionMinutesRemaining</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivitySessionMinutesRemaining { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).SessionMinutesRemaining; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).SessionMinutesRemaining = value; }

        /// <summary>Internal Acessors for DownloadActivitySyncMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivitySyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).SyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).SyncMode = value; }

        /// <summary>Internal Acessors for DownloadActivityTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivityTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).Timestamp = value; }

        /// <summary>Internal Acessors for DownloadActivityTotalByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivityTotalByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).TotalByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).TotalByte = value; }

        /// <summary>Internal Acessors for DownloadActivityTotalItemCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadActivityTotalItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).TotalItemCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)DownloadActivity).TotalItemCount = value; }

        /// <summary>Internal Acessors for DownloadHealth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadHealth { get => this._downloadHealth; set { {_downloadHealth = value;} } }

        /// <summary>Internal Acessors for DownloadStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatus { get => (this._downloadStatus = this._downloadStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncSessionStatus()); set { {_downloadStatus = value;} } }

        /// <summary>Internal Acessors for DownloadStatusFilesNotSyncingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusFilesNotSyncingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).FilesNotSyncingError; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).FilesNotSyncingError = value; }

        /// <summary>Internal Acessors for DownloadStatusLastSyncMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusLastSyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncMode = value; }

        /// <summary>Internal Acessors for DownloadStatusLastSyncPerItemErrorCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusLastSyncPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncPerItemErrorCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncPerItemErrorCount = value; }

        /// <summary>Internal Acessors for DownloadStatusLastSyncResult</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusLastSyncResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncResult; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncResult = value; }

        /// <summary>Internal Acessors for DownloadStatusLastSyncSuccessTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusLastSyncSuccessTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncSuccessTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncSuccessTimestamp = value; }

        /// <summary>Internal Acessors for DownloadStatusLastSyncTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusLastSyncTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).LastSyncTimestamp = value; }

        /// <summary>Internal Acessors for DownloadStatusPersistentFilesNotSyncingCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusPersistentFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).PersistentFilesNotSyncingCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).PersistentFilesNotSyncingCount = value; }

        /// <summary>Internal Acessors for DownloadStatusTransientFilesNotSyncingCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.DownloadStatusTransientFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).TransientFilesNotSyncingCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)DownloadStatus).TransientFilesNotSyncingCount = value; }

        /// <summary>Internal Acessors for LastUpdatedTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.LastUpdatedTimestamp { get => this._lastUpdatedTimestamp; set { {_lastUpdatedTimestamp = value;} } }

        /// <summary>Internal Acessors for OfflineDataTransferStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointOfflineDataTransferState? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.OfflineDataTransferStatus { get => this._offlineDataTransferStatus; set { {_offlineDataTransferStatus = value;} } }

        /// <summary>Internal Acessors for SyncActivity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncActivityState? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.SyncActivity { get => this._syncActivity; set { {_syncActivity = value;} } }

        /// <summary>Internal Acessors for TotalPersistentFilesNotSyncingCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.TotalPersistentFilesNotSyncingCount { get => this._totalPersistentFilesNotSyncingCount; set { {_totalPersistentFilesNotSyncingCount = value;} } }

        /// <summary>Internal Acessors for UploadActivity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivity { get => (this._uploadActivity = this._uploadActivity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncActivityStatus()); set { {_uploadActivity = value;} } }

        /// <summary>Internal Acessors for UploadActivityAppliedByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivityAppliedByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).AppliedByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).AppliedByte = value; }

        /// <summary>Internal Acessors for UploadActivityAppliedItemCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivityAppliedItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).AppliedItemCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).AppliedItemCount = value; }

        /// <summary>Internal Acessors for UploadActivityPerItemErrorCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivityPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).PerItemErrorCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).PerItemErrorCount = value; }

        /// <summary>Internal Acessors for UploadActivitySessionMinutesRemaining</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivitySessionMinutesRemaining { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).SessionMinutesRemaining; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).SessionMinutesRemaining = value; }

        /// <summary>Internal Acessors for UploadActivitySyncMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivitySyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).SyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).SyncMode = value; }

        /// <summary>Internal Acessors for UploadActivityTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivityTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).Timestamp = value; }

        /// <summary>Internal Acessors for UploadActivityTotalByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivityTotalByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).TotalByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).TotalByte = value; }

        /// <summary>Internal Acessors for UploadActivityTotalItemCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadActivityTotalItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).TotalItemCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).TotalItemCount = value; }

        /// <summary>Internal Acessors for UploadHealth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadHealth { get => this._uploadHealth; set { {_uploadHealth = value;} } }

        /// <summary>Internal Acessors for UploadStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatus { get => (this._uploadStatus = this._uploadStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncSessionStatus()); set { {_uploadStatus = value;} } }

        /// <summary>Internal Acessors for UploadStatusFilesNotSyncingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusFilesNotSyncingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).FilesNotSyncingError; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).FilesNotSyncingError = value; }

        /// <summary>Internal Acessors for UploadStatusLastSyncMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusLastSyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncMode = value; }

        /// <summary>Internal Acessors for UploadStatusLastSyncPerItemErrorCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusLastSyncPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncPerItemErrorCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncPerItemErrorCount = value; }

        /// <summary>Internal Acessors for UploadStatusLastSyncResult</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusLastSyncResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncResult; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncResult = value; }

        /// <summary>Internal Acessors for UploadStatusLastSyncSuccessTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusLastSyncSuccessTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncSuccessTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncSuccessTimestamp = value; }

        /// <summary>Internal Acessors for UploadStatusLastSyncTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusLastSyncTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncTimestamp = value; }

        /// <summary>Internal Acessors for UploadStatusPersistentFilesNotSyncingCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusPersistentFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).PersistentFilesNotSyncingCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).PersistentFilesNotSyncingCount = value; }

        /// <summary>Internal Acessors for UploadStatusTransientFilesNotSyncingCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncStatusInternal.UploadStatusTransientFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).TransientFilesNotSyncingCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).TransientFilesNotSyncingCount = value; }

        /// <summary>Backing field for <see cref="OfflineDataTransferStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointOfflineDataTransferState? _offlineDataTransferStatus;

        /// <summary>Offline Data Transfer State</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointOfflineDataTransferState? OfflineDataTransferStatus { get => this._offlineDataTransferStatus; }

        /// <summary>Backing field for <see cref="SyncActivity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncActivityState? _syncActivity;

        /// <summary>Sync activity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncActivityState? SyncActivity { get => this._syncActivity; }

        /// <summary>Backing field for <see cref="TotalPersistentFilesNotSyncingCount" /> property.</summary>
        private long? _totalPersistentFilesNotSyncingCount;

        /// <summary>Total count of persistent files not syncing (combined upload + download).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public long? TotalPersistentFilesNotSyncingCount { get => this._totalPersistentFilesNotSyncingCount; }

        /// <summary>Backing field for <see cref="UploadActivity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus _uploadActivity;

        /// <summary>Upload sync activity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus UploadActivity { get => (this._uploadActivity = this._uploadActivity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncActivityStatus()); }

        /// <summary>Applied bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadActivityAppliedByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).AppliedByte; }

        /// <summary>Applied item count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadActivityAppliedItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).AppliedItemCount; }

        /// <summary>Per item error count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadActivityPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).PerItemErrorCount; }

        /// <summary>Session minutes remaining (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public int? UploadActivitySessionMinutesRemaining { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).SessionMinutesRemaining; }

        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? UploadActivitySyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).SyncMode; }

        /// <summary>Timestamp when properties were updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? UploadActivityTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).Timestamp; }

        /// <summary>Total bytes (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadActivityTotalByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).TotalByte; }

        /// <summary>Total item count (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadActivityTotalItemCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatusInternal)UploadActivity).TotalItemCount; }

        /// <summary>Backing field for <see cref="UploadHealth" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? _uploadHealth;

        /// <summary>Upload Health Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? UploadHealth { get => this._uploadHealth; }

        /// <summary>Backing field for <see cref="UploadStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus _uploadStatus;

        /// <summary>Upload Status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus UploadStatus { get => (this._uploadStatus = this._uploadStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.ServerEndpointSyncSessionStatus()); }

        /// <summary>Array of per-item errors coming from the last sync session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] UploadStatusFilesNotSyncingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).FilesNotSyncingError; }

        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? UploadStatusLastSyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncMode; }

        /// <summary>Last sync per item error count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadStatusLastSyncPerItemErrorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncPerItemErrorCount; }

        /// <summary>Last sync result (HResult)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public int? UploadStatusLastSyncResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncResult; }

        /// <summary>Last sync success timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? UploadStatusLastSyncSuccessTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncSuccessTimestamp; }

        /// <summary>Last sync timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public global::System.DateTime? UploadStatusLastSyncTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).LastSyncTimestamp; }

        /// <summary>Count of persistent files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadStatusPersistentFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).PersistentFilesNotSyncingCount; }

        /// <summary>Count of transient files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.PropertyOrigin.Inlined)]
        public long? UploadStatusTransientFilesNotSyncingCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatusInternal)UploadStatus).TransientFilesNotSyncingCount; }

        /// <summary>Creates an new <see cref="ServerEndpointSyncStatus" /> instance.</summary>
        public ServerEndpointSyncStatus()
        {

        }
    }
    /// Server Endpoint sync status
    public partial interface IServerEndpointSyncStatus :
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.IJsonSerializable
    {
        /// <summary>Running count of bytes downloaded</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Running count of bytes downloaded",
        SerializedName = @"downloadedBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? BackgroundDataDownloadActivityDownloadedByte { get;  }
        /// <summary>Progress percentage</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Progress percentage",
        SerializedName = @"percentProgress",
        PossibleTypes = new [] { typeof(int) })]
        int? BackgroundDataDownloadActivityPercentProgress { get;  }
        /// <summary>Timestamp when the operation started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp when the operation started",
        SerializedName = @"startedTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BackgroundDataDownloadActivityStartedTimestamp { get;  }
        /// <summary>Timestamp when properties were updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp when properties were updated",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BackgroundDataDownloadActivityTimestamp { get;  }
        /// <summary>Combined Health Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Combined Health Status.",
        SerializedName = @"combinedHealth",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? CombinedHealth { get;  }
        /// <summary>Applied bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Applied bytes",
        SerializedName = @"appliedBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadActivityAppliedByte { get;  }
        /// <summary>Applied item count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Applied item count.",
        SerializedName = @"appliedItemCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadActivityAppliedItemCount { get;  }
        /// <summary>Per item error count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Per item error count",
        SerializedName = @"perItemErrorCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadActivityPerItemErrorCount { get;  }
        /// <summary>Session minutes remaining (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Session minutes remaining (if available)",
        SerializedName = @"sessionMinutesRemaining",
        PossibleTypes = new [] { typeof(int) })]
        int? DownloadActivitySessionMinutesRemaining { get;  }
        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Sync mode",
        SerializedName = @"syncMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? DownloadActivitySyncMode { get;  }
        /// <summary>Timestamp when properties were updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp when properties were updated",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DownloadActivityTimestamp { get;  }
        /// <summary>Total bytes (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total bytes (if available)",
        SerializedName = @"totalBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadActivityTotalByte { get;  }
        /// <summary>Total item count (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total item count (if available)",
        SerializedName = @"totalItemCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadActivityTotalItemCount { get;  }
        /// <summary>Download Health Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Download Health Status.",
        SerializedName = @"downloadHealth",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? DownloadHealth { get;  }
        /// <summary>Array of per-item errors coming from the last sync session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of per-item errors coming from the last sync session.",
        SerializedName = @"filesNotSyncingErrors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] DownloadStatusFilesNotSyncingError { get;  }
        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Sync mode",
        SerializedName = @"lastSyncMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? DownloadStatusLastSyncMode { get;  }
        /// <summary>Last sync per item error count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync per item error count.",
        SerializedName = @"lastSyncPerItemErrorCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadStatusLastSyncPerItemErrorCount { get;  }
        /// <summary>Last sync result (HResult)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync result (HResult)",
        SerializedName = @"lastSyncResult",
        PossibleTypes = new [] { typeof(int) })]
        int? DownloadStatusLastSyncResult { get;  }
        /// <summary>Last sync success timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync success timestamp",
        SerializedName = @"lastSyncSuccessTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DownloadStatusLastSyncSuccessTimestamp { get;  }
        /// <summary>Last sync timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync timestamp",
        SerializedName = @"lastSyncTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DownloadStatusLastSyncTimestamp { get;  }
        /// <summary>Count of persistent files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of persistent files not syncing.",
        SerializedName = @"persistentFilesNotSyncingCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadStatusPersistentFilesNotSyncingCount { get;  }
        /// <summary>Count of transient files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of transient files not syncing.",
        SerializedName = @"transientFilesNotSyncingCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DownloadStatusTransientFilesNotSyncingCount { get;  }
        /// <summary>Last Updated Timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last Updated Timestamp",
        SerializedName = @"lastUpdatedTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastUpdatedTimestamp { get;  }
        /// <summary>Offline Data Transfer State</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Offline Data Transfer State",
        SerializedName = @"offlineDataTransferStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointOfflineDataTransferState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointOfflineDataTransferState? OfflineDataTransferStatus { get;  }
        /// <summary>Sync activity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Sync activity",
        SerializedName = @"syncActivity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncActivityState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncActivityState? SyncActivity { get;  }
        /// <summary>Total count of persistent files not syncing (combined upload + download).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total count of persistent files not syncing (combined upload + download).",
        SerializedName = @"totalPersistentFilesNotSyncingCount",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalPersistentFilesNotSyncingCount { get;  }
        /// <summary>Applied bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Applied bytes",
        SerializedName = @"appliedBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadActivityAppliedByte { get;  }
        /// <summary>Applied item count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Applied item count.",
        SerializedName = @"appliedItemCount",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadActivityAppliedItemCount { get;  }
        /// <summary>Per item error count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Per item error count",
        SerializedName = @"perItemErrorCount",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadActivityPerItemErrorCount { get;  }
        /// <summary>Session minutes remaining (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Session minutes remaining (if available)",
        SerializedName = @"sessionMinutesRemaining",
        PossibleTypes = new [] { typeof(int) })]
        int? UploadActivitySessionMinutesRemaining { get;  }
        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Sync mode",
        SerializedName = @"syncMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? UploadActivitySyncMode { get;  }
        /// <summary>Timestamp when properties were updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp when properties were updated",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UploadActivityTimestamp { get;  }
        /// <summary>Total bytes (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total bytes (if available)",
        SerializedName = @"totalBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadActivityTotalByte { get;  }
        /// <summary>Total item count (if available)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total item count (if available)",
        SerializedName = @"totalItemCount",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadActivityTotalItemCount { get;  }
        /// <summary>Upload Health Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Upload Health Status.",
        SerializedName = @"uploadHealth",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? UploadHealth { get;  }
        /// <summary>Array of per-item errors coming from the last sync session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of per-item errors coming from the last sync session.",
        SerializedName = @"filesNotSyncingErrors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] UploadStatusFilesNotSyncingError { get;  }
        /// <summary>Sync mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Sync mode",
        SerializedName = @"lastSyncMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? UploadStatusLastSyncMode { get;  }
        /// <summary>Last sync per item error count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync per item error count.",
        SerializedName = @"lastSyncPerItemErrorCount",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadStatusLastSyncPerItemErrorCount { get;  }
        /// <summary>Last sync result (HResult)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync result (HResult)",
        SerializedName = @"lastSyncResult",
        PossibleTypes = new [] { typeof(int) })]
        int? UploadStatusLastSyncResult { get;  }
        /// <summary>Last sync success timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync success timestamp",
        SerializedName = @"lastSyncSuccessTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UploadStatusLastSyncSuccessTimestamp { get;  }
        /// <summary>Last sync timestamp</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last sync timestamp",
        SerializedName = @"lastSyncTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UploadStatusLastSyncTimestamp { get;  }
        /// <summary>Count of persistent files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of persistent files not syncing.",
        SerializedName = @"persistentFilesNotSyncingCount",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadStatusPersistentFilesNotSyncingCount { get;  }
        /// <summary>Count of transient files not syncing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of transient files not syncing.",
        SerializedName = @"transientFilesNotSyncingCount",
        PossibleTypes = new [] { typeof(long) })]
        long? UploadStatusTransientFilesNotSyncingCount { get;  }

    }
    /// Server Endpoint sync status
    internal partial interface IServerEndpointSyncStatusInternal

    {
        /// <summary>Background data download activity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointBackgroundDataDownloadActivity BackgroundDataDownloadActivity { get; set; }
        /// <summary>Running count of bytes downloaded</summary>
        long? BackgroundDataDownloadActivityDownloadedByte { get; set; }
        /// <summary>Progress percentage</summary>
        int? BackgroundDataDownloadActivityPercentProgress { get; set; }
        /// <summary>Timestamp when the operation started</summary>
        global::System.DateTime? BackgroundDataDownloadActivityStartedTimestamp { get; set; }
        /// <summary>Timestamp when properties were updated</summary>
        global::System.DateTime? BackgroundDataDownloadActivityTimestamp { get; set; }
        /// <summary>Combined Health Status.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? CombinedHealth { get; set; }
        /// <summary>Download sync activity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus DownloadActivity { get; set; }
        /// <summary>Applied bytes</summary>
        long? DownloadActivityAppliedByte { get; set; }
        /// <summary>Applied item count.</summary>
        long? DownloadActivityAppliedItemCount { get; set; }
        /// <summary>Per item error count</summary>
        long? DownloadActivityPerItemErrorCount { get; set; }
        /// <summary>Session minutes remaining (if available)</summary>
        int? DownloadActivitySessionMinutesRemaining { get; set; }
        /// <summary>Sync mode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? DownloadActivitySyncMode { get; set; }
        /// <summary>Timestamp when properties were updated</summary>
        global::System.DateTime? DownloadActivityTimestamp { get; set; }
        /// <summary>Total bytes (if available)</summary>
        long? DownloadActivityTotalByte { get; set; }
        /// <summary>Total item count (if available)</summary>
        long? DownloadActivityTotalItemCount { get; set; }
        /// <summary>Download Health Status.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? DownloadHealth { get; set; }
        /// <summary>Download Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus DownloadStatus { get; set; }
        /// <summary>Array of per-item errors coming from the last sync session.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] DownloadStatusFilesNotSyncingError { get; set; }
        /// <summary>Sync mode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? DownloadStatusLastSyncMode { get; set; }
        /// <summary>Last sync per item error count.</summary>
        long? DownloadStatusLastSyncPerItemErrorCount { get; set; }
        /// <summary>Last sync result (HResult)</summary>
        int? DownloadStatusLastSyncResult { get; set; }
        /// <summary>Last sync success timestamp</summary>
        global::System.DateTime? DownloadStatusLastSyncSuccessTimestamp { get; set; }
        /// <summary>Last sync timestamp</summary>
        global::System.DateTime? DownloadStatusLastSyncTimestamp { get; set; }
        /// <summary>Count of persistent files not syncing.</summary>
        long? DownloadStatusPersistentFilesNotSyncingCount { get; set; }
        /// <summary>Count of transient files not syncing.</summary>
        long? DownloadStatusTransientFilesNotSyncingCount { get; set; }
        /// <summary>Last Updated Timestamp</summary>
        global::System.DateTime? LastUpdatedTimestamp { get; set; }
        /// <summary>Offline Data Transfer State</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointOfflineDataTransferState? OfflineDataTransferStatus { get; set; }
        /// <summary>Sync activity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncActivityState? SyncActivity { get; set; }
        /// <summary>Total count of persistent files not syncing (combined upload + download).</summary>
        long? TotalPersistentFilesNotSyncingCount { get; set; }
        /// <summary>Upload sync activity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncActivityStatus UploadActivity { get; set; }
        /// <summary>Applied bytes</summary>
        long? UploadActivityAppliedByte { get; set; }
        /// <summary>Applied item count.</summary>
        long? UploadActivityAppliedItemCount { get; set; }
        /// <summary>Per item error count</summary>
        long? UploadActivityPerItemErrorCount { get; set; }
        /// <summary>Session minutes remaining (if available)</summary>
        int? UploadActivitySessionMinutesRemaining { get; set; }
        /// <summary>Sync mode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? UploadActivitySyncMode { get; set; }
        /// <summary>Timestamp when properties were updated</summary>
        global::System.DateTime? UploadActivityTimestamp { get; set; }
        /// <summary>Total bytes (if available)</summary>
        long? UploadActivityTotalByte { get; set; }
        /// <summary>Total item count (if available)</summary>
        long? UploadActivityTotalItemCount { get; set; }
        /// <summary>Upload Health Status.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointHealthState? UploadHealth { get; set; }
        /// <summary>Upload Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointSyncSessionStatus UploadStatus { get; set; }
        /// <summary>Array of per-item errors coming from the last sync session.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Models.Api20200901.IServerEndpointFilesNotSyncingError[] UploadStatusFilesNotSyncingError { get; set; }
        /// <summary>Sync mode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Support.ServerEndpointSyncMode? UploadStatusLastSyncMode { get; set; }
        /// <summary>Last sync per item error count.</summary>
        long? UploadStatusLastSyncPerItemErrorCount { get; set; }
        /// <summary>Last sync result (HResult)</summary>
        int? UploadStatusLastSyncResult { get; set; }
        /// <summary>Last sync success timestamp</summary>
        global::System.DateTime? UploadStatusLastSyncSuccessTimestamp { get; set; }
        /// <summary>Last sync timestamp</summary>
        global::System.DateTime? UploadStatusLastSyncTimestamp { get; set; }
        /// <summary>Count of persistent files not syncing.</summary>
        long? UploadStatusPersistentFilesNotSyncingCount { get; set; }
        /// <summary>Count of transient files not syncing.</summary>
        long? UploadStatusTransientFilesNotSyncingCount { get; set; }

    }
}