// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    /// <summary>Access Review.</summary>
    public partial class AccessReviewScheduleDefinitionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal
    {

        /// <summary>Backing field for <see cref="BackupReviewer" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] _backupReviewer;

        /// <summary>This is the collection of backup reviewers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] BackupReviewer { get => this._backupReviewer; set => this._backupReviewer = value; }

        /// <summary>Backing field for <see cref="CreatedBy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentity _createdBy;

        /// <summary>The user or other identity who created this review.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentity CreatedBy { get => (this._createdBy = this._createdBy ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewActorIdentity()); }

        /// <summary>The identity id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string CreatedByPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalId; }

        /// <summary>The identity display name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string CreatedByPrincipalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalName; }

        /// <summary>The identity type : user/servicePrincipal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewActorIdentityType? CreatedByPrincipalType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalType; }

        /// <summary>The user principal name(if valid)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string CreatedByUserPrincipalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).UserPrincipalName; }

        /// <summary>Backing field for <see cref="DescriptionForAdmin" /> property.</summary>
        private string _descriptionForAdmin;

        /// <summary>The description provided by the access review creator and visible to admins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string DescriptionForAdmin { get => this._descriptionForAdmin; set => this._descriptionForAdmin = value; }

        /// <summary>Backing field for <see cref="DescriptionForReviewer" /> property.</summary>
        private string _descriptionForReviewer;

        /// <summary>The description provided by the access review creator to be shown to reviewers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string DescriptionForReviewer { get => this._descriptionForReviewer; set => this._descriptionForReviewer = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>The display name for the schedule definition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="Instance" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance[] _instance;

        /// <summary>This is the collection of instances returned when one does an expand on it.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance[] Instance { get => this._instance; set => this._instance = value; }

        /// <summary>Internal Acessors for CreatedBy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentity Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.CreatedBy { get => (this._createdBy = this._createdBy ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewActorIdentity()); set { {_createdBy = value;} } }

        /// <summary>Internal Acessors for CreatedByPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.CreatedByPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalId = value; }

        /// <summary>Internal Acessors for CreatedByPrincipalName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.CreatedByPrincipalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalName = value; }

        /// <summary>Internal Acessors for CreatedByPrincipalType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewActorIdentityType? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.CreatedByPrincipalType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).PrincipalType = value; }

        /// <summary>Internal Acessors for CreatedByUserPrincipalName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.CreatedByUserPrincipalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).UserPrincipalName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentityInternal)CreatedBy).UserPrincipalName = value; }

        /// <summary>Internal Acessors for RecurrencePattern</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrencePattern Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.RecurrencePattern { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecurrencePattern; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecurrencePattern = value; }

        /// <summary>Internal Acessors for RecurrenceRange</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceRange Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.RecurrenceRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecurrenceRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecurrenceRange = value; }

        /// <summary>Internal Acessors for ReviewersType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionReviewersType? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.ReviewersType { get => this._reviewersType; set { {_reviewersType = value;} } }

        /// <summary>Internal Acessors for Scope</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScope Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.Scope { get => (this._scope = this._scope ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScope()); set { {_scope = value;} } }

        /// <summary>Internal Acessors for ScopeAssignmentState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.ScopeAssignmentState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).AssignmentState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).AssignmentState = value; }

        /// <summary>Internal Acessors for ScopePrincipalType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.ScopePrincipalType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).PrincipalType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).PrincipalType = value; }

        /// <summary>Internal Acessors for ScopeResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.ScopeResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).ResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).ResourceId = value; }

        /// <summary>Internal Acessors for ScopeRoleDefinitionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.ScopeRoleDefinitionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).RoleDefinitionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).RoleDefinitionId = value; }

        /// <summary>Internal Acessors for Setting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.Setting { get => (this._setting = this._setting ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScheduleSettings()); set { {_setting = value;} } }

        /// <summary>Internal Acessors for SettingRecurrence</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceSettings Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.SettingRecurrence { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).Recurrence; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).Recurrence = value; }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionStatus? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionPropertiesInternal.Status { get => this._status; set { {_status = value;} } }

        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public int? PatternInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).PatternInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).PatternInterval = value ?? default(int); }

        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType? PatternType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).PatternType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).PatternType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType)""); }

        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? RangeEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeEndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeEndDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public int? RangeNumberOfOccurrence { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeNumberOfOccurrence; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeNumberOfOccurrence = value ?? default(int); }

        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? RangeStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeStartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeStartDate = value ?? default(global::System.DateTime); }

        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType? RangeType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RangeType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType)""); }

        /// <summary>Backing field for <see cref="Reviewer" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] _reviewer;

        /// <summary>This is the collection of reviewers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] Reviewer { get => this._reviewer; set => this._reviewer = value; }

        /// <summary>Backing field for <see cref="ReviewersType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionReviewersType? _reviewersType;

        /// <summary>
        /// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However,
        /// in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self
        /// review.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionReviewersType? ReviewersType { get => this._reviewersType; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScope _scope;

        /// <summary>
        /// This is used to define what to include in scope of the review. The scope definition includes the resourceId and roleDefinitionId.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScope Scope { get => (this._scope = this._scope ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScope()); }

        /// <summary>The role assignment state eligible/active to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? ScopeAssignmentState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).AssignmentState; }

        /// <summary>Flag to indicate whether to expand nested memberships or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? ScopeExpandNestedMembership { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).ExpandNestedMembership; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).ExpandNestedMembership = value ?? default(bool); }

        /// <summary>
        /// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
        /// code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ScopeInactiveDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).InactiveDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).InactiveDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>The identity type user/servicePrincipal to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? ScopePrincipalType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).PrincipalType; }

        /// <summary>ResourceId in which this review is getting created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string ScopeResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).ResourceId; }

        /// <summary>This is used to indicate the role being reviewed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string ScopeRoleDefinitionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal)Scope).RoleDefinitionId; }

        /// <summary>Backing field for <see cref="Setting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings _setting;

        /// <summary>Access Review Settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings Setting { get => (this._setting = this._setting ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScheduleSettings()); set => this._setting = value; }

        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? SettingAutoApplyDecisionsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).AutoApplyDecisionsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).AutoApplyDecisionsEnabled = value ?? default(bool); }

        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType? SettingDefaultDecision { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).DefaultDecision; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).DefaultDecision = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType)""); }

        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? SettingDefaultDecisionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).DefaultDecisionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).DefaultDecisionEnabled = value ?? default(bool); }

        /// <summary>The duration in days for an instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public int? SettingInstanceDurationInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).InstanceDurationInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).InstanceDurationInDay = value ?? default(int); }

        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? SettingJustificationRequiredOnApproval { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).JustificationRequiredOnApproval; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).JustificationRequiredOnApproval = value ?? default(bool); }

        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? SettingMailNotificationsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).MailNotificationsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).MailNotificationsEnabled = value ?? default(bool); }

        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? SettingRecommendationLookBackDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecommendationLookBackDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecommendationLookBackDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? SettingRecommendationsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecommendationsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).RecommendationsEnabled = value ?? default(bool); }

        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? SettingReminderNotificationsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).ReminderNotificationsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Setting).ReminderNotificationsEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionStatus? _status;

        /// <summary>This read-only field specifies the status of an accessReview.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionStatus? Status { get => this._status; }

        /// <summary>
        /// Creates an new <see cref="AccessReviewScheduleDefinitionProperties" /> instance.
        /// </summary>
        public AccessReviewScheduleDefinitionProperties()
        {

        }
    }
    /// Access Review.
    public partial interface IAccessReviewScheduleDefinitionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>This is the collection of backup reviewers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the collection of backup reviewers.",
        SerializedName = @"backupReviewers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] BackupReviewer { get; set; }
        /// <summary>The identity id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identity id",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedByPrincipalId { get;  }
        /// <summary>The identity display name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identity display name",
        SerializedName = @"principalName",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedByPrincipalName { get;  }
        /// <summary>The identity type : user/servicePrincipal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identity type : user/servicePrincipal",
        SerializedName = @"principalType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewActorIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewActorIdentityType? CreatedByPrincipalType { get;  }
        /// <summary>The user principal name(if valid)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The user principal name(if valid)",
        SerializedName = @"userPrincipalName",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedByUserPrincipalName { get;  }
        /// <summary>The description provided by the access review creator and visible to admins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description provided by the access review creator and visible to admins.",
        SerializedName = @"descriptionForAdmins",
        PossibleTypes = new [] { typeof(string) })]
        string DescriptionForAdmin { get; set; }
        /// <summary>The description provided by the access review creator to be shown to reviewers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description provided by the access review creator to be shown to reviewers.",
        SerializedName = @"descriptionForReviewers",
        PossibleTypes = new [] { typeof(string) })]
        string DescriptionForReviewer { get; set; }
        /// <summary>The display name for the schedule definition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name for the schedule definition.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>This is the collection of instances returned when one does an expand on it.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the collection of instances returned when one does an expand on it.",
        SerializedName = @"instances",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance[] Instance { get; set; }
        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(int) })]
        int? PatternInterval { get; set; }
        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recurrence type : weekly, monthly, etc.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType? PatternType { get; set; }
        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DateTime when the review is scheduled to end. Required if type is endDate",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RangeEndDate { get; set; }
        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of times to repeat the access review. Required and must be positive if type is numbered.",
        SerializedName = @"numberOfOccurrences",
        PossibleTypes = new [] { typeof(int) })]
        int? RangeNumberOfOccurrence { get; set; }
        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RangeStartDate { get; set; }
        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recurrence range type. The possible values are: endDate, noEnd, numbered.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType? RangeType { get; set; }
        /// <summary>This is the collection of reviewers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the collection of reviewers.",
        SerializedName = @"reviewers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] Reviewer { get; set; }
        /// <summary>
        /// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However,
        /// in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self
        /// review.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.",
        SerializedName = @"reviewersType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionReviewersType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionReviewersType? ReviewersType { get;  }
        /// <summary>The role assignment state eligible/active to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The role assignment state eligible/active to review",
        SerializedName = @"assignmentState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? ScopeAssignmentState { get;  }
        /// <summary>Flag to indicate whether to expand nested memberships or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether to expand nested memberships or not.",
        SerializedName = @"expandNestedMemberships",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ScopeExpandNestedMembership { get; set; }
        /// <summary>
        /// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
        /// code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))",
        SerializedName = @"inactiveDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ScopeInactiveDuration { get; set; }
        /// <summary>The identity type user/servicePrincipal to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identity type user/servicePrincipal to review",
        SerializedName = @"principalType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? ScopePrincipalType { get;  }
        /// <summary>ResourceId in which this review is getting created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ResourceId in which this review is getting created",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ScopeResourceId { get;  }
        /// <summary>This is used to indicate the role being reviewed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This is used to indicate the role being reviewed",
        SerializedName = @"roleDefinitionId",
        PossibleTypes = new [] { typeof(string) })]
        string ScopeRoleDefinitionId { get;  }
        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.",
        SerializedName = @"autoApplyDecisionsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingAutoApplyDecisionsEnabled { get; set; }
        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This specifies the behavior for the autoReview feature when an access review completes.",
        SerializedName = @"defaultDecision",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType? SettingDefaultDecision { get; set; }
        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether reviewers are required to provide a justification when reviewing access.",
        SerializedName = @"defaultDecisionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingDefaultDecisionEnabled { get; set; }
        /// <summary>The duration in days for an instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The duration in days for an instance.",
        SerializedName = @"instanceDurationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? SettingInstanceDurationInDay { get; set; }
        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether the reviewer is required to pass justification when recording a decision.",
        SerializedName = @"justificationRequiredOnApproval",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingJustificationRequiredOnApproval { get; set; }
        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether sending mails to reviewers and the review creator is enabled.",
        SerializedName = @"mailNotificationsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingMailNotificationsEnabled { get; set; }
        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))",
        SerializedName = @"recommendationLookBackDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? SettingRecommendationLookBackDuration { get; set; }
        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether showing recommendations to reviewers is enabled.",
        SerializedName = @"recommendationsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingRecommendationsEnabled { get; set; }
        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether sending reminder emails to reviewers are enabled.",
        SerializedName = @"reminderNotificationsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingReminderNotificationsEnabled { get; set; }
        /// <summary>This read-only field specifies the status of an accessReview.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This read-only field specifies the status of an accessReview.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionStatus? Status { get;  }

    }
    /// Access Review.
    internal partial interface IAccessReviewScheduleDefinitionPropertiesInternal

    {
        /// <summary>This is the collection of backup reviewers.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] BackupReviewer { get; set; }
        /// <summary>The user or other identity who created this review.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewActorIdentity CreatedBy { get; set; }
        /// <summary>The identity id</summary>
        string CreatedByPrincipalId { get; set; }
        /// <summary>The identity display name</summary>
        string CreatedByPrincipalName { get; set; }
        /// <summary>The identity type : user/servicePrincipal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewActorIdentityType? CreatedByPrincipalType { get; set; }
        /// <summary>The user principal name(if valid)</summary>
        string CreatedByUserPrincipalName { get; set; }
        /// <summary>The description provided by the access review creator and visible to admins.</summary>
        string DescriptionForAdmin { get; set; }
        /// <summary>The description provided by the access review creator to be shown to reviewers.</summary>
        string DescriptionForReviewer { get; set; }
        /// <summary>The display name for the schedule definition.</summary>
        string DisplayName { get; set; }
        /// <summary>This is the collection of instances returned when one does an expand on it.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance[] Instance { get; set; }
        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        int? PatternInterval { get; set; }
        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType? PatternType { get; set; }
        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        global::System.DateTime? RangeEndDate { get; set; }
        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        int? RangeNumberOfOccurrence { get; set; }
        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        global::System.DateTime? RangeStartDate { get; set; }
        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType? RangeType { get; set; }
        /// <summary>Access Review schedule definition recurrence pattern.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrencePattern RecurrencePattern { get; set; }
        /// <summary>Access Review schedule definition recurrence range.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceRange RecurrenceRange { get; set; }
        /// <summary>This is the collection of reviewers.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] Reviewer { get; set; }
        /// <summary>
        /// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However,
        /// in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self
        /// review.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionReviewersType? ReviewersType { get; set; }
        /// <summary>
        /// This is used to define what to include in scope of the review. The scope definition includes the resourceId and roleDefinitionId.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScope Scope { get; set; }
        /// <summary>The role assignment state eligible/active to review</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? ScopeAssignmentState { get; set; }
        /// <summary>Flag to indicate whether to expand nested memberships or not.</summary>
        bool? ScopeExpandNestedMembership { get; set; }
        /// <summary>
        /// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
        /// code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        global::System.TimeSpan? ScopeInactiveDuration { get; set; }
        /// <summary>The identity type user/servicePrincipal to review</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? ScopePrincipalType { get; set; }
        /// <summary>ResourceId in which this review is getting created</summary>
        string ScopeResourceId { get; set; }
        /// <summary>This is used to indicate the role being reviewed</summary>
        string ScopeRoleDefinitionId { get; set; }
        /// <summary>Access Review Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings Setting { get; set; }
        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        bool? SettingAutoApplyDecisionsEnabled { get; set; }
        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType? SettingDefaultDecision { get; set; }
        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        bool? SettingDefaultDecisionEnabled { get; set; }
        /// <summary>The duration in days for an instance.</summary>
        int? SettingInstanceDurationInDay { get; set; }
        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        bool? SettingJustificationRequiredOnApproval { get; set; }
        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        bool? SettingMailNotificationsEnabled { get; set; }
        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        global::System.TimeSpan? SettingRecommendationLookBackDuration { get; set; }
        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        bool? SettingRecommendationsEnabled { get; set; }
        /// <summary>Access Review Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceSettings SettingRecurrence { get; set; }
        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        bool? SettingReminderNotificationsEnabled { get; set; }
        /// <summary>This read-only field specifies the status of an accessReview.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScheduleDefinitionStatus? Status { get; set; }

    }
}