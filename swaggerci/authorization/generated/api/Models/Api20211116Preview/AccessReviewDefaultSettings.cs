// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    /// <summary>Access Review Default Settings.</summary>
    public partial class AccessReviewDefaultSettings :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettings,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal
    {

        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? AutoApplyDecisionsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).AutoApplyDecisionsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).AutoApplyDecisionsEnabled = value ?? default(bool); }

        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType? DefaultDecision { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).DefaultDecision; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).DefaultDecision = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType)""); }

        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? DefaultDecisionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).DefaultDecisionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).DefaultDecisionEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>The access review default settings id. This is only going to be default</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>The duration in days for an instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public int? InstanceDurationInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).InstanceDurationInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).InstanceDurationInDay = value ?? default(int); }

        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? JustificationRequiredOnApproval { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).JustificationRequiredOnApproval; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).JustificationRequiredOnApproval = value ?? default(bool); }

        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? MailNotificationsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).MailNotificationsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).MailNotificationsEnabled = value ?? default(bool); }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScheduleSettings()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Recurrence</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceSettings Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.Recurrence { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).Recurrence; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).Recurrence = value; }

        /// <summary>Internal Acessors for RecurrencePattern</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrencePattern Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.RecurrencePattern { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecurrencePattern; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecurrencePattern = value; }

        /// <summary>Internal Acessors for RecurrenceRange</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceRange Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.RecurrenceRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecurrenceRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecurrenceRange = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewDefaultSettingsInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// The access review default settings name. This is always going to be Access Review Default Settings
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public int? PatternInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).PatternInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).PatternInterval = value ?? default(int); }

        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType? PatternType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).PatternType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).PatternType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType)""); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings _property;

        /// <summary>Access Review properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScheduleSettings()); set => this._property = value; }

        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? RangeEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeEndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeEndDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public int? RangeNumberOfOccurrence { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeNumberOfOccurrence; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeNumberOfOccurrence = value ?? default(int); }

        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? RangeStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeStartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeStartDate = value ?? default(global::System.DateTime); }

        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType? RangeType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RangeType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType)""); }

        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? RecommendationLookBackDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecommendationLookBackDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecommendationLookBackDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? RecommendationsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecommendationsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).RecommendationsEnabled = value ?? default(bool); }

        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? ReminderNotificationsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).ReminderNotificationsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettingsInternal)Property).ReminderNotificationsEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Creates an new <see cref="AccessReviewDefaultSettings" /> instance.</summary>
        public AccessReviewDefaultSettings()
        {

        }
    }
    /// Access Review Default Settings.
    public partial interface IAccessReviewDefaultSettings :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.",
        SerializedName = @"autoApplyDecisionsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoApplyDecisionsEnabled { get; set; }
        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This specifies the behavior for the autoReview feature when an access review completes.",
        SerializedName = @"defaultDecision",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType? DefaultDecision { get; set; }
        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether reviewers are required to provide a justification when reviewing access.",
        SerializedName = @"defaultDecisionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DefaultDecisionEnabled { get; set; }
        /// <summary>The access review default settings id. This is only going to be default</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The access review default settings id. This is only going to be default",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The duration in days for an instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The duration in days for an instance.",
        SerializedName = @"instanceDurationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? InstanceDurationInDay { get; set; }
        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether the reviewer is required to pass justification when recording a decision.",
        SerializedName = @"justificationRequiredOnApproval",
        PossibleTypes = new [] { typeof(bool) })]
        bool? JustificationRequiredOnApproval { get; set; }
        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether sending mails to reviewers and the review creator is enabled.",
        SerializedName = @"mailNotificationsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MailNotificationsEnabled { get; set; }
        /// <summary>
        /// The access review default settings name. This is always going to be Access Review Default Settings
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The access review default settings name. This is always going to be Access Review Default Settings",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(int) })]
        int? PatternInterval { get; set; }
        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recurrence type : weekly, monthly, etc.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType? PatternType { get; set; }
        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DateTime when the review is scheduled to end. Required if type is endDate",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RangeEndDate { get; set; }
        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of times to repeat the access review. Required and must be positive if type is numbered.",
        SerializedName = @"numberOfOccurrences",
        PossibleTypes = new [] { typeof(int) })]
        int? RangeNumberOfOccurrence { get; set; }
        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RangeStartDate { get; set; }
        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recurrence range type. The possible values are: endDate, noEnd, numbered.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType? RangeType { get; set; }
        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))",
        SerializedName = @"recommendationLookBackDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RecommendationLookBackDuration { get; set; }
        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether showing recommendations to reviewers is enabled.",
        SerializedName = @"recommendationsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RecommendationsEnabled { get; set; }
        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether sending reminder emails to reviewers are enabled.",
        SerializedName = @"reminderNotificationsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ReminderNotificationsEnabled { get; set; }
        /// <summary>The resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }

    }
    /// Access Review Default Settings.
    internal partial interface IAccessReviewDefaultSettingsInternal

    {
        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        bool? AutoApplyDecisionsEnabled { get; set; }
        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType? DefaultDecision { get; set; }
        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        bool? DefaultDecisionEnabled { get; set; }
        /// <summary>The access review default settings id. This is only going to be default</summary>
        string Id { get; set; }
        /// <summary>The duration in days for an instance.</summary>
        int? InstanceDurationInDay { get; set; }
        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        bool? JustificationRequiredOnApproval { get; set; }
        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        bool? MailNotificationsEnabled { get; set; }
        /// <summary>
        /// The access review default settings name. This is always going to be Access Review Default Settings
        /// </summary>
        string Name { get; set; }
        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        int? PatternInterval { get; set; }
        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType? PatternType { get; set; }
        /// <summary>Access Review properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleSettings Property { get; set; }
        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        global::System.DateTime? RangeEndDate { get; set; }
        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        int? RangeNumberOfOccurrence { get; set; }
        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        global::System.DateTime? RangeStartDate { get; set; }
        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType? RangeType { get; set; }
        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        global::System.TimeSpan? RecommendationLookBackDuration { get; set; }
        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        bool? RecommendationsEnabled { get; set; }
        /// <summary>Access Review Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceSettings Recurrence { get; set; }
        /// <summary>Access Review schedule definition recurrence pattern.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrencePattern RecurrencePattern { get; set; }
        /// <summary>Access Review schedule definition recurrence range.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewRecurrenceRange RecurrenceRange { get; set; }
        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        bool? ReminderNotificationsEnabled { get; set; }
        /// <summary>The resource type.</summary>
        string Type { get; set; }

    }
}