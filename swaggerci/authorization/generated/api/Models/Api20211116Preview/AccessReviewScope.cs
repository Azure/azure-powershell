// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    /// <summary>Descriptor for what needs to be reviewed</summary>
    public partial class AccessReviewScope :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScope,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal
    {

        /// <summary>Backing field for <see cref="AssignmentState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? _assignmentState;

        /// <summary>The role assignment state eligible/active to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? AssignmentState { get => this._assignmentState; }

        /// <summary>Backing field for <see cref="ExpandNestedMembership" /> property.</summary>
        private bool? _expandNestedMembership;

        /// <summary>Flag to indicate whether to expand nested memberships or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public bool? ExpandNestedMembership { get => this._expandNestedMembership; set => this._expandNestedMembership = value; }

        /// <summary>Backing field for <see cref="InactiveDuration" /> property.</summary>
        private global::System.TimeSpan? _inactiveDuration;

        /// <summary>
        /// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
        /// code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public global::System.TimeSpan? InactiveDuration { get => this._inactiveDuration; set => this._inactiveDuration = value; }

        /// <summary>Internal Acessors for AssignmentState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal.AssignmentState { get => this._assignmentState; set { {_assignmentState = value;} } }

        /// <summary>Internal Acessors for PrincipalType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal.PrincipalType { get => this._principalType; set { {_principalType = value;} } }

        /// <summary>Internal Acessors for ResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal.ResourceId { get => this._resourceId; set { {_resourceId = value;} } }

        /// <summary>Internal Acessors for RoleDefinitionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScopeInternal.RoleDefinitionId { get => this._roleDefinitionId; set { {_roleDefinitionId = value;} } }

        /// <summary>Backing field for <see cref="PrincipalType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? _principalType;

        /// <summary>The identity type user/servicePrincipal to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? PrincipalType { get => this._principalType; }

        /// <summary>Backing field for <see cref="ResourceId" /> property.</summary>
        private string _resourceId;

        /// <summary>ResourceId in which this review is getting created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string ResourceId { get => this._resourceId; }

        /// <summary>Backing field for <see cref="RoleDefinitionId" /> property.</summary>
        private string _roleDefinitionId;

        /// <summary>This is used to indicate the role being reviewed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleDefinitionId { get => this._roleDefinitionId; }

        /// <summary>Creates an new <see cref="AccessReviewScope" /> instance.</summary>
        public AccessReviewScope()
        {

        }
    }
    /// Descriptor for what needs to be reviewed
    public partial interface IAccessReviewScope :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>The role assignment state eligible/active to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The role assignment state eligible/active to review",
        SerializedName = @"assignmentState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? AssignmentState { get;  }
        /// <summary>Flag to indicate whether to expand nested memberships or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether to expand nested memberships or not.",
        SerializedName = @"expandNestedMemberships",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExpandNestedMembership { get; set; }
        /// <summary>
        /// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
        /// code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))",
        SerializedName = @"inactiveDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? InactiveDuration { get; set; }
        /// <summary>The identity type user/servicePrincipal to review</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identity type user/servicePrincipal to review",
        SerializedName = @"principalType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? PrincipalType { get;  }
        /// <summary>ResourceId in which this review is getting created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ResourceId in which this review is getting created",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceId { get;  }
        /// <summary>This is used to indicate the role being reviewed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This is used to indicate the role being reviewed",
        SerializedName = @"roleDefinitionId",
        PossibleTypes = new [] { typeof(string) })]
        string RoleDefinitionId { get;  }

    }
    /// Descriptor for what needs to be reviewed
    internal partial interface IAccessReviewScopeInternal

    {
        /// <summary>The role assignment state eligible/active to review</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopeAssignmentState? AssignmentState { get; set; }
        /// <summary>Flag to indicate whether to expand nested memberships or not.</summary>
        bool? ExpandNestedMembership { get; set; }
        /// <summary>
        /// Duration users are inactive for. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This
        /// code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        global::System.TimeSpan? InactiveDuration { get; set; }
        /// <summary>The identity type user/servicePrincipal to review</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewScopePrincipalType? PrincipalType { get; set; }
        /// <summary>ResourceId in which this review is getting created</summary>
        string ResourceId { get; set; }
        /// <summary>This is used to indicate the role being reviewed</summary>
        string RoleDefinitionId { get; set; }

    }
}