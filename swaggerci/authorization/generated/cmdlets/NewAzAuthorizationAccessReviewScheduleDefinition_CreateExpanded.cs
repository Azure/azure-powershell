// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;
    using System;

    /// <summary>Create or Update access review schedule definition.</summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdateById=>PUT:"/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzAuthorizationAccessReviewScheduleDefinition_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinition))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Description(@"Create or Update access review schedule definition.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Generated]
    public partial class NewAzAuthorizationAccessReviewScheduleDefinition_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>This is the collection of backup reviewers.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This is the collection of backup reviewers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the collection of backup reviewers.",
        SerializedName = @"backupReviewers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] BackupReviewer { get => PropertiesBody.BackupReviewer ?? null /* arrayOf */; set => PropertiesBody.BackupReviewer = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.AuthorizationManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.Authorization.Module.Instance.ClientAPI;

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The description provided by the access review creator and visible to admins.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The description provided by the access review creator and visible to admins.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description provided by the access review creator and visible to admins.",
        SerializedName = @"descriptionForAdmins",
        PossibleTypes = new [] { typeof(string) })]
        public string DescriptionForAdmin { get => PropertiesBody.DescriptionForAdmin ?? null; set => PropertiesBody.DescriptionForAdmin = value; }

        /// <summary>The description provided by the access review creator to be shown to reviewers.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The description provided by the access review creator to be shown to reviewers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description provided by the access review creator to be shown to reviewers.",
        SerializedName = @"descriptionForReviewers",
        PossibleTypes = new [] { typeof(string) })]
        public string DescriptionForReviewer { get => PropertiesBody.DescriptionForReviewer ?? null; set => PropertiesBody.DescriptionForReviewer = value; }

        /// <summary>The display name for the schedule definition.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The display name for the schedule definition.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name for the schedule definition.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => PropertiesBody.DisplayName ?? null; set => PropertiesBody.DisplayName = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>This is the collection of instances returned when one does an expand on it.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This is the collection of instances returned when one does an expand on it.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the collection of instances returned when one does an expand on it.",
        SerializedName = @"instances",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewInstance[] Instance { get => PropertiesBody.Instance ?? null /* arrayOf */; set => PropertiesBody.Instance = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(int) })]
        public int PatternInterval { get => PropertiesBody.PatternInterval ?? default(int); set => PropertiesBody.PatternInterval = value; }

        /// <summary>The recurrence type : weekly, monthly, etc.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The recurrence type : weekly, monthly, etc.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recurrence type : weekly, monthly, etc.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType PatternType { get => PropertiesBody.PatternType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrencePatternType)""); set => PropertiesBody.PatternType = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Backing field for <see cref="PropertiesBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionProperties _propertiesBody= new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.AccessReviewScheduleDefinitionProperties();

        /// <summary>Access Review.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinitionProperties PropertiesBody { get => this._propertiesBody; set => this._propertiesBody = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The DateTime when the review is scheduled to end. Required if type is endDate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DateTime when the review is scheduled to end. Required if type is endDate")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DateTime when the review is scheduled to end. Required if type is endDate",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime RangeEndDate { get => PropertiesBody.RangeEndDate ?? default(global::System.DateTime); set => PropertiesBody.RangeEndDate = value; }

        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of times to repeat the access review. Required and must be positive if type is numbered.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of times to repeat the access review. Required and must be positive if type is numbered.",
        SerializedName = @"numberOfOccurrences",
        PossibleTypes = new [] { typeof(int) })]
        public int RangeNumberOfOccurrence { get => PropertiesBody.RangeNumberOfOccurrence ?? default(int); set => PropertiesBody.RangeNumberOfOccurrence = value; }

        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime RangeStartDate { get => PropertiesBody.RangeStartDate ?? default(global::System.DateTime); set => PropertiesBody.RangeStartDate = value; }

        /// <summary>The recurrence range type. The possible values are: endDate, noEnd, numbered.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The recurrence range type. The possible values are: endDate, noEnd, numbered.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recurrence range type. The possible values are: endDate, noEnd, numbered.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType RangeType { get => PropertiesBody.RangeType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.AccessReviewRecurrenceRangeType)""); set => PropertiesBody.RangeType = value; }

        /// <summary>This is the collection of reviewers.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This is the collection of reviewers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the collection of reviewers.",
        SerializedName = @"reviewers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewReviewer[] Reviewer { get => PropertiesBody.Reviewer ?? null /* arrayOf */; set => PropertiesBody.Reviewer = value; }

        /// <summary>Backing field for <see cref="ScheduleDefinitionId" /> property.</summary>
        private string _scheduleDefinitionId;

        /// <summary>The id of the access review schedule definition.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The id of the access review schedule definition.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The id of the access review schedule definition.",
        SerializedName = @"scheduleDefinitionId",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Path)]
        public string ScheduleDefinitionId { get => this._scheduleDefinitionId; set => this._scheduleDefinitionId = value; }

        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.",
        SerializedName = @"autoApplyDecisionsEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SettingAutoApplyDecisionsEnabled { get => PropertiesBody.SettingAutoApplyDecisionsEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => PropertiesBody.SettingAutoApplyDecisionsEnabled = value; }

        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This specifies the behavior for the autoReview feature when an access review completes.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This specifies the behavior for the autoReview feature when an access review completes.",
        SerializedName = @"defaultDecision",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType SettingDefaultDecision { get => PropertiesBody.SettingDefaultDecision ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.DefaultDecisionType)""); set => PropertiesBody.SettingDefaultDecision = value; }

        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate whether reviewers are required to provide a justification when reviewing access.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether reviewers are required to provide a justification when reviewing access.",
        SerializedName = @"defaultDecisionEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SettingDefaultDecisionEnabled { get => PropertiesBody.SettingDefaultDecisionEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => PropertiesBody.SettingDefaultDecisionEnabled = value; }

        /// <summary>The duration in days for an instance.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The duration in days for an instance.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The duration in days for an instance.",
        SerializedName = @"instanceDurationInDays",
        PossibleTypes = new [] { typeof(int) })]
        public int SettingInstanceDurationInDay { get => PropertiesBody.SettingInstanceDurationInDay ?? default(int); set => PropertiesBody.SettingInstanceDurationInDay = value; }

        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate whether the reviewer is required to pass justification when recording a decision.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether the reviewer is required to pass justification when recording a decision.",
        SerializedName = @"justificationRequiredOnApproval",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SettingJustificationRequiredOnApproval { get => PropertiesBody.SettingJustificationRequiredOnApproval ?? default(global::System.Management.Automation.SwitchParameter); set => PropertiesBody.SettingJustificationRequiredOnApproval = value; }

        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate whether sending mails to reviewers and the review creator is enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether sending mails to reviewers and the review creator is enabled.",
        SerializedName = @"mailNotificationsEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SettingMailNotificationsEnabled { get => PropertiesBody.SettingMailNotificationsEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => PropertiesBody.SettingMailNotificationsEnabled = value; }

        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review)
        /// by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days,
        /// 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string:
        /// XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))",
        SerializedName = @"recommendationLookBackDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan SettingRecommendationLookBackDuration { get => PropertiesBody.SettingRecommendationLookBackDuration ?? default(global::System.TimeSpan); set => PropertiesBody.SettingRecommendationLookBackDuration = value; }

        /// <summary>Flag to indicate whether showing recommendations to reviewers is enabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate whether showing recommendations to reviewers is enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether showing recommendations to reviewers is enabled.",
        SerializedName = @"recommendationsEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SettingRecommendationsEnabled { get => PropertiesBody.SettingRecommendationsEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => PropertiesBody.SettingRecommendationsEnabled = value; }

        /// <summary>Flag to indicate whether sending reminder emails to reviewers are enabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate whether sending reminder emails to reviewers are enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate whether sending reminder emails to reviewers are enabled.",
        SerializedName = @"reminderNotificationsEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SettingReminderNotificationsEnabled { get => PropertiesBody.SettingReminderNotificationsEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => PropertiesBody.SettingReminderNotificationsEnabled = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Authorization.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IErrorDefinition"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IErrorDefinition> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinition"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinition> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Authorization.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Authorization.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzAuthorizationAccessReviewScheduleDefinition_CreateExpanded" /> cmdlet
        /// class.
        /// </summary>
        public NewAzAuthorizationAccessReviewScheduleDefinition_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'AccessReviewScheduleDefinitionsCreateOrUpdateById' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Authorization.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.AccessReviewScheduleDefinitionsCreateOrUpdateById(ScheduleDefinitionId, SubscriptionId, PropertiesBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  ScheduleDefinitionId=ScheduleDefinitionId,SubscriptionId=SubscriptionId,body=PropertiesBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IErrorDefinition"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IErrorDefinition> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IErrorDefinition>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ScheduleDefinitionId=ScheduleDefinitionId, SubscriptionId=SubscriptionId, body=PropertiesBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ScheduleDefinitionId=ScheduleDefinitionId, SubscriptionId=SubscriptionId, body=PropertiesBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinition"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinition> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20211116Preview.IAccessReviewScheduleDefinition
                WriteObject((await response));
            }
        }
    }
}