// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Describes a supported collection within a MongoDB database</summary>
    public partial class MongoDbCollectionInfo :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbCollectionInfo,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbCollectionInfoInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfo"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfo __mongoDbObjectInfo = new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbObjectInfo();

        /// <summary>The average document size, or -1 if the average size is unknown</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public long AverageDocumentSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).AverageDocumentSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).AverageDocumentSize = value ; }

        /// <summary>The estimated total data size, in bytes, or -1 if the size is unknown.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public long DataSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).DataSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).DataSize = value ; }

        /// <summary>Backing field for <see cref="DatabaseName" /> property.</summary>
        private string _databaseName;

        /// <summary>The name of the database containing the collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string DatabaseName { get => this._databaseName; set => this._databaseName = value; }

        /// <summary>The estimated total number of documents, or -1 if the document count is unknown</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public long DocumentCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).DocumentCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).DocumentCount = value ; }

        /// <summary>Backing field for <see cref="IsCapped" /> property.</summary>
        private bool _isCapped;

        /// <summary>
        /// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool IsCapped { get => this._isCapped; set => this._isCapped = value; }

        /// <summary>Backing field for <see cref="IsSystemCollection" /> property.</summary>
        private bool _isSystemCollection;

        /// <summary>Whether the collection is system collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool IsSystemCollection { get => this._isSystemCollection; set => this._isSystemCollection = value; }

        /// <summary>Backing field for <see cref="IsView" /> property.</summary>
        private bool _isView;

        /// <summary>Whether the collection is a view of another collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool IsView { get => this._isView; set => this._isView = value; }

        /// <summary>Internal Acessors for ShardKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbCollectionInfoInternal.ShardKey { get => (this._shardKey = this._shardKey ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbShardKeyInfo()); set { {_shardKey = value;} } }

        /// <summary>The unqualified name of the database or collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).Name = value ; }

        /// <summary>
        /// The qualified name of the database or collection. For a collection, this is the database-qualified name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string QualifiedName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).QualifiedName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal)__mongoDbObjectInfo).QualifiedName = value ; }

        /// <summary>Backing field for <see cref="ShardKey" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfo _shardKey;

        /// <summary>The shard key on the collection, or null if the collection is not sharded</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfo ShardKey { get => (this._shardKey = this._shardKey ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbShardKeyInfo()); set => this._shardKey = value; }

        /// <summary>The fields within the shard key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyField[] ShardKeyField { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfoInternal)ShardKey).Field; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfoInternal)ShardKey).Field = value ?? null /* arrayOf */; }

        /// <summary>Whether the shard key is unique</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? ShardKeyIsUnique { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfoInternal)ShardKey).IsUnique; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfoInternal)ShardKey).IsUnique = value ?? default(bool); }

        /// <summary>Backing field for <see cref="SupportsSharding" /> property.</summary>
        private bool _supportsSharding;

        /// <summary>
        /// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool SupportsSharding { get => this._supportsSharding; set => this._supportsSharding = value; }

        /// <summary>Backing field for <see cref="ViewOf" /> property.</summary>
        private string _viewOf;

        /// <summary>The name of the collection that this is a view of, if IsView is true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ViewOf { get => this._viewOf; set => this._viewOf = value; }

        /// <summary>Creates an new <see cref="MongoDbCollectionInfo" /> instance.</summary>
        public MongoDbCollectionInfo()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__mongoDbObjectInfo), __mongoDbObjectInfo);
            await eventListener.AssertObjectIsValid(nameof(__mongoDbObjectInfo), __mongoDbObjectInfo);
        }
    }
    /// Describes a supported collection within a MongoDB database
    public partial interface IMongoDbCollectionInfo :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfo
    {
        /// <summary>The name of the database containing the collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the database containing the collection",
        SerializedName = @"databaseName",
        PossibleTypes = new [] { typeof(string) })]
        string DatabaseName { get; set; }
        /// <summary>
        /// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)",
        SerializedName = @"isCapped",
        PossibleTypes = new [] { typeof(bool) })]
        bool IsCapped { get; set; }
        /// <summary>Whether the collection is system collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Whether the collection is system collection",
        SerializedName = @"isSystemCollection",
        PossibleTypes = new [] { typeof(bool) })]
        bool IsSystemCollection { get; set; }
        /// <summary>Whether the collection is a view of another collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Whether the collection is a view of another collection",
        SerializedName = @"isView",
        PossibleTypes = new [] { typeof(bool) })]
        bool IsView { get; set; }
        /// <summary>The fields within the shard key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fields within the shard key",
        SerializedName = @"fields",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyField) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyField[] ShardKeyField { get; set; }
        /// <summary>Whether the shard key is unique</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the shard key is unique",
        SerializedName = @"isUnique",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ShardKeyIsUnique { get; set; }
        /// <summary>
        /// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.",
        SerializedName = @"supportsSharding",
        PossibleTypes = new [] { typeof(bool) })]
        bool SupportsSharding { get; set; }
        /// <summary>The name of the collection that this is a view of, if IsView is true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the collection that this is a view of, if IsView is true",
        SerializedName = @"viewOf",
        PossibleTypes = new [] { typeof(string) })]
        string ViewOf { get; set; }

    }
    /// Describes a supported collection within a MongoDB database
    internal partial interface IMongoDbCollectionInfoInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbObjectInfoInternal
    {
        /// <summary>The name of the database containing the collection</summary>
        string DatabaseName { get; set; }
        /// <summary>
        /// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
        /// </summary>
        bool IsCapped { get; set; }
        /// <summary>Whether the collection is system collection</summary>
        bool IsSystemCollection { get; set; }
        /// <summary>Whether the collection is a view of another collection</summary>
        bool IsView { get; set; }
        /// <summary>The shard key on the collection, or null if the collection is not sharded</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyInfo ShardKey { get; set; }
        /// <summary>The fields within the shard key</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbShardKeyField[] ShardKeyField { get; set; }
        /// <summary>Whether the shard key is unique</summary>
        bool? ShardKeyIsUnique { get; set; }
        /// <summary>
        /// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        /// </summary>
        bool SupportsSharding { get; set; }
        /// <summary>The name of the collection that this is a view of, if IsView is true</summary>
        string ViewOf { get; set; }

    }
}