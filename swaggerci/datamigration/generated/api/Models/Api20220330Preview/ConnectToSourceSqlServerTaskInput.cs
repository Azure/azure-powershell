// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>
    /// Input for the task that validates connection to SQL Server and also validates source server requirements
    /// </summary>
    public partial class ConnectToSourceSqlServerTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectToSourceSqlServerTaskInput,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectToSourceSqlServerTaskInputInternal
    {

        /// <summary>Backing field for <see cref="CheckPermissionsGroup" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ServerLevelPermissionsGroup? _checkPermissionsGroup;

        /// <summary>Permission group for validations</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ServerLevelPermissionsGroup? CheckPermissionsGroup { get => this._checkPermissionsGroup; set => this._checkPermissionsGroup = value; }

        /// <summary>Backing field for <see cref="CollectAgentJob" /> property.</summary>
        private bool? _collectAgentJob;

        /// <summary>Flag for whether to collect agent jobs from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? CollectAgentJob { get => this._collectAgentJob; set => this._collectAgentJob = value; }

        /// <summary>Backing field for <see cref="CollectDatabase" /> property.</summary>
        private bool? _collectDatabase;

        /// <summary>Flag for whether to collect databases from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? CollectDatabase { get => this._collectDatabase; set => this._collectDatabase = value; }

        /// <summary>Backing field for <see cref="CollectLogin" /> property.</summary>
        private bool? _collectLogin;

        /// <summary>Flag for whether to collect logins from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? CollectLogin { get => this._collectLogin; set => this._collectLogin = value; }

        /// <summary>Backing field for <see cref="CollectTdeCertificateInfo" /> property.</summary>
        private bool? _collectTdeCertificateInfo;

        /// <summary>Flag for whether to collect TDE Certificate names from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? CollectTdeCertificateInfo { get => this._collectTdeCertificateInfo; set => this._collectTdeCertificateInfo = value; }

        /// <summary>Backing field for <see cref="EncryptedKeyForSecureField" /> property.</summary>
        private string _encryptedKeyForSecureField;

        /// <summary>encrypted key for secure fields</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string EncryptedKeyForSecureField { get => this._encryptedKeyForSecureField; set => this._encryptedKeyForSecureField = value; }

        /// <summary>Internal Acessors for SourceConnectionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectToSourceSqlServerTaskInputInternal.SourceConnectionInfo { get => (this._sourceConnectionInfo = this._sourceConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.SqlConnectionInfo()); set { {_sourceConnectionInfo = value;} } }

        /// <summary>Backing field for <see cref="SourceConnectionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo _sourceConnectionInfo;

        /// <summary>Connection information for Source SQL Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo SourceConnectionInfo { get => (this._sourceConnectionInfo = this._sourceConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.SqlConnectionInfo()); set => this._sourceConnectionInfo = value; }

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoAdditionalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).AdditionalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).AdditionalSetting = value ?? null; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceConnectionInfoAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).DataSource = value ; }

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceConnectionInfoEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).EncryptConnection = value ?? default(bool); }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)SourceConnectionInfo).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)SourceConnectionInfo).Password = value ?? null; }

        /// <summary>Server platform type for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform? SourceConnectionInfoPlatform { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).Platform; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).Platform = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform)""); }

        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? SourceConnectionInfoPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).Port = value ?? default(int); }

        /// <summary>
        /// Represents the ID of an HTTP resource represented by an Azure resource provider.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ResourceId = value ?? null; }

        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoServerBrandVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ServerBrandVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ServerBrandVersion = value ?? null; }

        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ServerName = value ?? null; }

        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoServerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ServerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).ServerVersion = value ?? null; }

        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceConnectionInfoTrustServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).TrustServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)SourceConnectionInfo).TrustServerCertificate = value ?? default(bool); }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)SourceConnectionInfo).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)SourceConnectionInfo).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)SourceConnectionInfo).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)SourceConnectionInfo).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="ValidateSsisCatalogOnly" /> property.</summary>
        private bool? _validateSsisCatalogOnly;

        /// <summary>Flag for whether to validate SSIS catalog is reachable on the source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? ValidateSsisCatalogOnly { get => this._validateSsisCatalogOnly; set => this._validateSsisCatalogOnly = value; }

        /// <summary>Creates an new <see cref="ConnectToSourceSqlServerTaskInput" /> instance.</summary>
        public ConnectToSourceSqlServerTaskInput()
        {

        }
    }
    /// Input for the task that validates connection to SQL Server and also validates source server requirements
    public partial interface IConnectToSourceSqlServerTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Permission group for validations</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Permission group for validations",
        SerializedName = @"checkPermissionsGroup",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ServerLevelPermissionsGroup) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ServerLevelPermissionsGroup? CheckPermissionsGroup { get; set; }
        /// <summary>Flag for whether to collect agent jobs from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to collect agent jobs from source server.",
        SerializedName = @"collectAgentJobs",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CollectAgentJob { get; set; }
        /// <summary>Flag for whether to collect databases from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to collect databases from source server.",
        SerializedName = @"collectDatabases",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CollectDatabase { get; set; }
        /// <summary>Flag for whether to collect logins from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to collect logins from source server.",
        SerializedName = @"collectLogins",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CollectLogin { get; set; }
        /// <summary>Flag for whether to collect TDE Certificate names from source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to collect TDE Certificate names from source server.",
        SerializedName = @"collectTdeCertificateInfo",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CollectTdeCertificateInfo { get; set; }
        /// <summary>encrypted key for secure fields</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"encrypted key for secure fields",
        SerializedName = @"encryptedKeyForSecureFields",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptedKeyForSecureField { get; set; }
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceConnectionInfoAuthentication { get; set; }
        /// <summary>Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoPassword { get; set; }
        /// <summary>Server platform type for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Server platform type for connection",
        SerializedName = @"platform",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform? SourceConnectionInfoPlatform { get; set; }
        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Port for Server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? SourceConnectionInfoPort { get; set; }
        /// <summary>
        /// Represents the ID of an HTTP resource represented by an Azure resource provider.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents the ID of an HTTP resource represented by an Azure resource provider.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoResourceId { get; set; }
        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server brand version",
        SerializedName = @"serverBrandVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoServerName { get; set; }
        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server version",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust the server certificate",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceConnectionInfoTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoUserName { get; set; }
        /// <summary>Flag for whether to validate SSIS catalog is reachable on the source server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to validate SSIS catalog is reachable on the source server.",
        SerializedName = @"validateSsisCatalogOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ValidateSsisCatalogOnly { get; set; }

    }
    /// Input for the task that validates connection to SQL Server and also validates source server requirements
    internal partial interface IConnectToSourceSqlServerTaskInputInternal

    {
        /// <summary>Permission group for validations</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ServerLevelPermissionsGroup? CheckPermissionsGroup { get; set; }
        /// <summary>Flag for whether to collect agent jobs from source server.</summary>
        bool? CollectAgentJob { get; set; }
        /// <summary>Flag for whether to collect databases from source server.</summary>
        bool? CollectDatabase { get; set; }
        /// <summary>Flag for whether to collect logins from source server.</summary>
        bool? CollectLogin { get; set; }
        /// <summary>Flag for whether to collect TDE Certificate names from source server.</summary>
        bool? CollectTdeCertificateInfo { get; set; }
        /// <summary>encrypted key for secure fields</summary>
        string EncryptedKeyForSecureField { get; set; }
        /// <summary>Connection information for Source SQL Server</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo SourceConnectionInfo { get; set; }
        /// <summary>Additional connection settings</summary>
        string SourceConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceConnectionInfoAuthentication { get; set; }
        /// <summary>Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber</summary>
        string SourceConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? SourceConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        string SourceConnectionInfoPassword { get; set; }
        /// <summary>Server platform type for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform? SourceConnectionInfoPlatform { get; set; }
        /// <summary>Port for Server</summary>
        int? SourceConnectionInfoPort { get; set; }
        /// <summary>
        /// Represents the ID of an HTTP resource represented by an Azure resource provider.
        /// </summary>
        string SourceConnectionInfoResourceId { get; set; }
        /// <summary>server brand version</summary>
        string SourceConnectionInfoServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        string SourceConnectionInfoServerName { get; set; }
        /// <summary>server version</summary>
        string SourceConnectionInfoServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        bool? SourceConnectionInfoTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        string SourceConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        string SourceConnectionInfoUserName { get; set; }
        /// <summary>Flag for whether to validate SSIS catalog is reachable on the source server.</summary>
        bool? ValidateSsisCatalogOnly { get; set; }

    }
}