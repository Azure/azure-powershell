// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Information for connecting to PostgreSQL server</summary>
    public partial class PostgreSqlConnectionInfo :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IPostgreSqlConnectionInfo,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IPostgreSqlConnectionInfoInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfo"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfo __connectionInfo = new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ConnectionInfo();

        /// <summary>Backing field for <see cref="AdditionalSetting" /> property.</summary>
        private string _additionalSetting;

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string AdditionalSetting { get => this._additionalSetting; set => this._additionalSetting = value; }

        /// <summary>Backing field for <see cref="Authentication" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? _authentication;

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? Authentication { get => this._authentication; set => this._authentication = value; }

        /// <summary>Backing field for <see cref="DataSource" /> property.</summary>
        private string _dataSource;

        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string DataSource { get => this._dataSource; set => this._dataSource = value; }

        /// <summary>Backing field for <see cref="DatabaseName" /> property.</summary>
        private string _databaseName;

        /// <summary>Name of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string DatabaseName { get => this._databaseName; set => this._databaseName = value; }

        /// <summary>Backing field for <see cref="EncryptConnection" /> property.</summary>
        private bool? _encryptConnection;

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? EncryptConnection { get => this._encryptConnection; set => this._encryptConnection = value; }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string Password { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)__connectionInfo).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)__connectionInfo).Password = value ?? null; }

        /// <summary>Backing field for <see cref="Port" /> property.</summary>
        private int _port;

        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public int Port { get => this._port; set => this._port = value; }

        /// <summary>Backing field for <see cref="ServerBrandVersion" /> property.</summary>
        private string _serverBrandVersion;

        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerBrandVersion { get => this._serverBrandVersion; set => this._serverBrandVersion = value; }

        /// <summary>Backing field for <see cref="ServerName" /> property.</summary>
        private string _serverName;

        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerName { get => this._serverName; set => this._serverName = value; }

        /// <summary>Backing field for <see cref="ServerVersion" /> property.</summary>
        private string _serverVersion;

        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerVersion { get => this._serverVersion; set => this._serverVersion = value; }

        /// <summary>Backing field for <see cref="TrustServerCertificate" /> property.</summary>
        private bool? _trustServerCertificate;

        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? TrustServerCertificate { get => this._trustServerCertificate; set => this._trustServerCertificate = value; }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)__connectionInfo).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)__connectionInfo).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string UserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)__connectionInfo).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)__connectionInfo).UserName = value ?? null; }

        /// <summary>Creates an new <see cref="PostgreSqlConnectionInfo" /> instance.</summary>
        public PostgreSqlConnectionInfo()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__connectionInfo), __connectionInfo);
            await eventListener.AssertObjectIsValid(nameof(__connectionInfo), __connectionInfo);
        }
    }
    /// Information for connecting to PostgreSQL server
    public partial interface IPostgreSqlConnectionInfo :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfo
    {
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string AdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? Authentication { get; set; }
        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source ",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string DataSource { get; set; }
        /// <summary>Name of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the database",
        SerializedName = @"databaseName",
        PossibleTypes = new [] { typeof(string) })]
        string DatabaseName { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptConnection { get; set; }
        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Port for Server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int Port { get; set; }
        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server brand version",
        SerializedName = @"serverBrandVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ServerBrandVersion { get; set; }
        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string ServerName { get; set; }
        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server version",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust the server certificate",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrustServerCertificate { get; set; }

    }
    /// Information for connecting to PostgreSQL server
    internal partial interface IPostgreSqlConnectionInfoInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal
    {
        /// <summary>Additional connection settings</summary>
        string AdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? Authentication { get; set; }
        /// <summary>Data source</summary>
        string DataSource { get; set; }
        /// <summary>Name of the database</summary>
        string DatabaseName { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? EncryptConnection { get; set; }
        /// <summary>Port for Server</summary>
        int Port { get; set; }
        /// <summary>server brand version</summary>
        string ServerBrandVersion { get; set; }
        /// <summary>Name of the server</summary>
        string ServerName { get; set; }
        /// <summary>server version</summary>
        string ServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        bool? TrustServerCertificate { get; set; }

    }
}