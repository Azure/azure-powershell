// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Information about a single database</summary>
    public partial class Database :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IDatabase,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IDatabaseInternal
    {

        /// <summary>Backing field for <see cref="Collation" /> property.</summary>
        private string _collation;

        /// <summary>Collation name of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Collation { get => this._collation; set => this._collation = value; }

        /// <summary>Backing field for <see cref="CompatibilityLevel" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseCompatLevel? _compatibilityLevel;

        /// <summary>SQL Server compatibility level of database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseCompatLevel? CompatibilityLevel { get => this._compatibilityLevel; set => this._compatibilityLevel = value; }

        /// <summary>Backing field for <see cref="Fqdn" /> property.</summary>
        private string _fqdn;

        /// <summary>Fully qualified name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Fqdn { get => this._fqdn; set => this._fqdn = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Unique identifier for the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="InstallId" /> property.</summary>
        private string _installId;

        /// <summary>Install id of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string InstallId { get => this._installId; set => this._installId = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="ServerCoreCount" /> property.</summary>
        private int? _serverCoreCount;

        /// <summary>Number of cores on the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public int? ServerCoreCount { get => this._serverCoreCount; set => this._serverCoreCount = value; }

        /// <summary>Backing field for <see cref="ServerDefaultBackupPath" /> property.</summary>
        private string _serverDefaultBackupPath;

        /// <summary>Default path of the backup folder</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerDefaultBackupPath { get => this._serverDefaultBackupPath; set => this._serverDefaultBackupPath = value; }

        /// <summary>Backing field for <see cref="ServerDefaultDataPath" /> property.</summary>
        private string _serverDefaultDataPath;

        /// <summary>Default path of the data files</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerDefaultDataPath { get => this._serverDefaultDataPath; set => this._serverDefaultDataPath = value; }

        /// <summary>Backing field for <see cref="ServerDefaultLogPath" /> property.</summary>
        private string _serverDefaultLogPath;

        /// <summary>Default path of the log files</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerDefaultLogPath { get => this._serverDefaultLogPath; set => this._serverDefaultLogPath = value; }

        /// <summary>Backing field for <see cref="ServerEdition" /> property.</summary>
        private string _serverEdition;

        /// <summary>Edition of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerEdition { get => this._serverEdition; set => this._serverEdition = value; }

        /// <summary>Backing field for <see cref="ServerId" /> property.</summary>
        private string _serverId;

        /// <summary>The unique Server Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerId { get => this._serverId; set => this._serverId = value; }

        /// <summary>Backing field for <see cref="ServerLevel" /> property.</summary>
        private string _serverLevel;

        /// <summary>Product level of the server (RTM, SP, CTP).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerLevel { get => this._serverLevel; set => this._serverLevel = value; }

        /// <summary>Backing field for <see cref="ServerName" /> property.</summary>
        private string _serverName;

        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerName { get => this._serverName; set => this._serverName = value; }

        /// <summary>Backing field for <see cref="ServerVersion" /> property.</summary>
        private string _serverVersion;

        /// <summary>Version of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerVersion { get => this._serverVersion; set => this._serverVersion = value; }

        /// <summary>Backing field for <see cref="ServerVisibleOnlineCoreCount" /> property.</summary>
        private int? _serverVisibleOnlineCoreCount;

        /// <summary>Number of cores on the server that have VISIBLE ONLINE status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public int? ServerVisibleOnlineCoreCount { get => this._serverVisibleOnlineCoreCount; set => this._serverVisibleOnlineCoreCount = value; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseState? _state;

        /// <summary>State of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseState? State { get => this._state; set => this._state = value; }

        /// <summary>Creates an new <see cref="Database" /> instance.</summary>
        public Database()
        {

        }
    }
    /// Information about a single database
    public partial interface IDatabase :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Collation name of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Collation name of the database",
        SerializedName = @"collation",
        PossibleTypes = new [] { typeof(string) })]
        string Collation { get; set; }
        /// <summary>SQL Server compatibility level of database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server compatibility level of database",
        SerializedName = @"compatibilityLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseCompatLevel) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseCompatLevel? CompatibilityLevel { get; set; }
        /// <summary>Fully qualified name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fully qualified name",
        SerializedName = @"fqdn",
        PossibleTypes = new [] { typeof(string) })]
        string Fqdn { get; set; }
        /// <summary>Unique identifier for the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Unique identifier for the database",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Install id of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Install id of the database",
        SerializedName = @"installId",
        PossibleTypes = new [] { typeof(string) })]
        string InstallId { get; set; }
        /// <summary>Name of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the database",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Number of cores on the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of cores on the server",
        SerializedName = @"serverCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerCoreCount { get; set; }
        /// <summary>Default path of the backup folder</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default path of the backup folder",
        SerializedName = @"serverDefaultBackupPath",
        PossibleTypes = new [] { typeof(string) })]
        string ServerDefaultBackupPath { get; set; }
        /// <summary>Default path of the data files</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default path of the data files",
        SerializedName = @"serverDefaultDataPath",
        PossibleTypes = new [] { typeof(string) })]
        string ServerDefaultDataPath { get; set; }
        /// <summary>Default path of the log files</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default path of the log files",
        SerializedName = @"serverDefaultLogPath",
        PossibleTypes = new [] { typeof(string) })]
        string ServerDefaultLogPath { get; set; }
        /// <summary>Edition of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Edition of the server",
        SerializedName = @"serverEdition",
        PossibleTypes = new [] { typeof(string) })]
        string ServerEdition { get; set; }
        /// <summary>The unique Server Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique Server Id",
        SerializedName = @"serverId",
        PossibleTypes = new [] { typeof(string) })]
        string ServerId { get; set; }
        /// <summary>Product level of the server (RTM, SP, CTP).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Product level of the server (RTM, SP, CTP).",
        SerializedName = @"serverLevel",
        PossibleTypes = new [] { typeof(string) })]
        string ServerLevel { get; set; }
        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string ServerName { get; set; }
        /// <summary>Version of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of the server",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ServerVersion { get; set; }
        /// <summary>Number of cores on the server that have VISIBLE ONLINE status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of cores on the server that have VISIBLE ONLINE status",
        SerializedName = @"serverVisibleOnlineCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerVisibleOnlineCoreCount { get; set; }
        /// <summary>State of the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"State of the database",
        SerializedName = @"databaseState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseState? State { get; set; }

    }
    /// Information about a single database
    internal partial interface IDatabaseInternal

    {
        /// <summary>Collation name of the database</summary>
        string Collation { get; set; }
        /// <summary>SQL Server compatibility level of database</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseCompatLevel? CompatibilityLevel { get; set; }
        /// <summary>Fully qualified name</summary>
        string Fqdn { get; set; }
        /// <summary>Unique identifier for the database</summary>
        string Id { get; set; }
        /// <summary>Install id of the database</summary>
        string InstallId { get; set; }
        /// <summary>Name of the database</summary>
        string Name { get; set; }
        /// <summary>Number of cores on the server</summary>
        int? ServerCoreCount { get; set; }
        /// <summary>Default path of the backup folder</summary>
        string ServerDefaultBackupPath { get; set; }
        /// <summary>Default path of the data files</summary>
        string ServerDefaultDataPath { get; set; }
        /// <summary>Default path of the log files</summary>
        string ServerDefaultLogPath { get; set; }
        /// <summary>Edition of the server</summary>
        string ServerEdition { get; set; }
        /// <summary>The unique Server Id</summary>
        string ServerId { get; set; }
        /// <summary>Product level of the server (RTM, SP, CTP).</summary>
        string ServerLevel { get; set; }
        /// <summary>Name of the server</summary>
        string ServerName { get; set; }
        /// <summary>Version of the server</summary>
        string ServerVersion { get; set; }
        /// <summary>Number of cores on the server that have VISIBLE ONLINE status</summary>
        int? ServerVisibleOnlineCoreCount { get; set; }
        /// <summary>State of the database</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.DatabaseState? State { get; set; }

    }
}