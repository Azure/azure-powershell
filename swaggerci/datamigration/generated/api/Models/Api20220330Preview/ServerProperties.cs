// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Server properties for MySQL type source</summary>
    public partial class ServerProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal
    {

        /// <summary>Internal Acessors for ServerDatabaseCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal.ServerDatabaseCount { get => this._serverDatabaseCount; set { {_serverDatabaseCount = value;} } }

        /// <summary>Internal Acessors for ServerEdition</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal.ServerEdition { get => this._serverEdition; set { {_serverEdition = value;} } }

        /// <summary>Internal Acessors for ServerName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal.ServerName { get => this._serverName; set { {_serverName = value;} } }

        /// <summary>Internal Acessors for ServerOperatingSystemVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal.ServerOperatingSystemVersion { get => this._serverOperatingSystemVersion; set { {_serverOperatingSystemVersion = value;} } }

        /// <summary>Internal Acessors for ServerPlatform</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal.ServerPlatform { get => this._serverPlatform; set { {_serverPlatform = value;} } }

        /// <summary>Internal Acessors for ServerVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IServerPropertiesInternal.ServerVersion { get => this._serverVersion; set { {_serverVersion = value;} } }

        /// <summary>Backing field for <see cref="ServerDatabaseCount" /> property.</summary>
        private int? _serverDatabaseCount;

        /// <summary>Number of databases in the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public int? ServerDatabaseCount { get => this._serverDatabaseCount; }

        /// <summary>Backing field for <see cref="ServerEdition" /> property.</summary>
        private string _serverEdition;

        /// <summary>Edition of the database server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerEdition { get => this._serverEdition; }

        /// <summary>Backing field for <see cref="ServerName" /> property.</summary>
        private string _serverName;

        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerName { get => this._serverName; }

        /// <summary>Backing field for <see cref="ServerOperatingSystemVersion" /> property.</summary>
        private string _serverOperatingSystemVersion;

        /// <summary>Version of the operating system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerOperatingSystemVersion { get => this._serverOperatingSystemVersion; }

        /// <summary>Backing field for <see cref="ServerPlatform" /> property.</summary>
        private string _serverPlatform;

        /// <summary>Name of the server platform</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerPlatform { get => this._serverPlatform; }

        /// <summary>Backing field for <see cref="ServerVersion" /> property.</summary>
        private string _serverVersion;

        /// <summary>Version of the database server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string ServerVersion { get => this._serverVersion; }

        /// <summary>Creates an new <see cref="ServerProperties" /> instance.</summary>
        public ServerProperties()
        {

        }
    }
    /// Server properties for MySQL type source
    public partial interface IServerProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Number of databases in the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of databases in the server",
        SerializedName = @"serverDatabaseCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerDatabaseCount { get;  }
        /// <summary>Edition of the database server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Edition of the database server",
        SerializedName = @"serverEdition",
        PossibleTypes = new [] { typeof(string) })]
        string ServerEdition { get;  }
        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string ServerName { get;  }
        /// <summary>Version of the operating system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Version of the operating system",
        SerializedName = @"serverOperatingSystemVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ServerOperatingSystemVersion { get;  }
        /// <summary>Name of the server platform</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the server platform",
        SerializedName = @"serverPlatform",
        PossibleTypes = new [] { typeof(string) })]
        string ServerPlatform { get;  }
        /// <summary>Version of the database server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Version of the database server",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ServerVersion { get;  }

    }
    /// Server properties for MySQL type source
    internal partial interface IServerPropertiesInternal

    {
        /// <summary>Number of databases in the server</summary>
        int? ServerDatabaseCount { get; set; }
        /// <summary>Edition of the database server</summary>
        string ServerEdition { get; set; }
        /// <summary>Name of the server</summary>
        string ServerName { get; set; }
        /// <summary>Version of the operating system</summary>
        string ServerOperatingSystemVersion { get; set; }
        /// <summary>Name of the server platform</summary>
        string ServerPlatform { get; set; }
        /// <summary>Version of the database server</summary>
        string ServerVersion { get; set; }

    }
}