// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>
    /// Input for the task that validates connection to Azure SQL Database Managed Instance.
    /// </summary>
    public partial class ConnectToTargetSqlMiTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectToTargetSqlMiTaskInput,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectToTargetSqlMiTaskInputInternal
    {

        /// <summary>Backing field for <see cref="CollectAgentJob" /> property.</summary>
        private bool? _collectAgentJob;

        /// <summary>Flag for whether to collect agent jobs from target SQL MI server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? CollectAgentJob { get => this._collectAgentJob; set => this._collectAgentJob = value; }

        /// <summary>Backing field for <see cref="CollectLogin" /> property.</summary>
        private bool? _collectLogin;

        /// <summary>Flag for whether to collect logins from target SQL MI server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? CollectLogin { get => this._collectLogin; set => this._collectLogin = value; }

        /// <summary>Internal Acessors for TargetConnectionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectToTargetSqlMiTaskInputInternal.TargetConnectionInfo { get => (this._targetConnectionInfo = this._targetConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.SqlConnectionInfo()); set { {_targetConnectionInfo = value;} } }

        /// <summary>Backing field for <see cref="TargetConnectionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo _targetConnectionInfo;

        /// <summary>Connection information for target SQL Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo TargetConnectionInfo { get => (this._targetConnectionInfo = this._targetConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.SqlConnectionInfo()); set => this._targetConnectionInfo = value; }

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoAdditionalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).AdditionalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).AdditionalSetting = value ?? null; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetConnectionInfoAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).DataSource = value ; }

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetConnectionInfoEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).EncryptConnection = value ?? default(bool); }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)TargetConnectionInfo).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)TargetConnectionInfo).Password = value ?? null; }

        /// <summary>Server platform type for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform? TargetConnectionInfoPlatform { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).Platform; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).Platform = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform)""); }

        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? TargetConnectionInfoPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).Port = value ?? default(int); }

        /// <summary>
        /// Represents the ID of an HTTP resource represented by an Azure resource provider.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ResourceId = value ?? null; }

        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoServerBrandVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ServerBrandVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ServerBrandVersion = value ?? null; }

        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ServerName = value ?? null; }

        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoServerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ServerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).ServerVersion = value ?? null; }

        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetConnectionInfoTrustServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).TrustServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfoInternal)TargetConnectionInfo).TrustServerCertificate = value ?? default(bool); }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)TargetConnectionInfo).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)TargetConnectionInfo).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)TargetConnectionInfo).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)TargetConnectionInfo).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="ValidateSsisCatalogOnly" /> property.</summary>
        private bool? _validateSsisCatalogOnly;

        /// <summary>
        /// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? ValidateSsisCatalogOnly { get => this._validateSsisCatalogOnly; set => this._validateSsisCatalogOnly = value; }

        /// <summary>Creates an new <see cref="ConnectToTargetSqlMiTaskInput" /> instance.</summary>
        public ConnectToTargetSqlMiTaskInput()
        {

        }
    }
    /// Input for the task that validates connection to Azure SQL Database Managed Instance.
    public partial interface IConnectToTargetSqlMiTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Flag for whether to collect agent jobs from target SQL MI server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to collect agent jobs from target SQL MI server.",
        SerializedName = @"collectAgentJobs",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CollectAgentJob { get; set; }
        /// <summary>Flag for whether to collect logins from target SQL MI server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to collect logins from target SQL MI server.",
        SerializedName = @"collectLogins",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CollectLogin { get; set; }
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetConnectionInfoAuthentication { get; set; }
        /// <summary>Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoPassword { get; set; }
        /// <summary>Server platform type for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Server platform type for connection",
        SerializedName = @"platform",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform? TargetConnectionInfoPlatform { get; set; }
        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Port for Server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? TargetConnectionInfoPort { get; set; }
        /// <summary>
        /// Represents the ID of an HTTP resource represented by an Azure resource provider.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents the ID of an HTTP resource represented by an Azure resource provider.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoResourceId { get; set; }
        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server brand version",
        SerializedName = @"serverBrandVersion",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoServerName { get; set; }
        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server version",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust the server certificate",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetConnectionInfoTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoUserName { get; set; }
        /// <summary>
        /// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.",
        SerializedName = @"validateSsisCatalogOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ValidateSsisCatalogOnly { get; set; }

    }
    /// Input for the task that validates connection to Azure SQL Database Managed Instance.
    internal partial interface IConnectToTargetSqlMiTaskInputInternal

    {
        /// <summary>Flag for whether to collect agent jobs from target SQL MI server.</summary>
        bool? CollectAgentJob { get; set; }
        /// <summary>Flag for whether to collect logins from target SQL MI server.</summary>
        bool? CollectLogin { get; set; }
        /// <summary>Connection information for target SQL Server</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.ISqlConnectionInfo TargetConnectionInfo { get; set; }
        /// <summary>Additional connection settings</summary>
        string TargetConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetConnectionInfoAuthentication { get; set; }
        /// <summary>Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber</summary>
        string TargetConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? TargetConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        string TargetConnectionInfoPassword { get; set; }
        /// <summary>Server platform type for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.SqlSourcePlatform? TargetConnectionInfoPlatform { get; set; }
        /// <summary>Port for Server</summary>
        int? TargetConnectionInfoPort { get; set; }
        /// <summary>
        /// Represents the ID of an HTTP resource represented by an Azure resource provider.
        /// </summary>
        string TargetConnectionInfoResourceId { get; set; }
        /// <summary>server brand version</summary>
        string TargetConnectionInfoServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        string TargetConnectionInfoServerName { get; set; }
        /// <summary>server version</summary>
        string TargetConnectionInfoServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        bool? TargetConnectionInfoTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        string TargetConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        string TargetConnectionInfoUserName { get; set; }
        /// <summary>
        /// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
        /// </summary>
        bool? ValidateSsisCatalogOnly { get; set; }

    }
}