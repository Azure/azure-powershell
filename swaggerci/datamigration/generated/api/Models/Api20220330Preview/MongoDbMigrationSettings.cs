// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Describes how a MongoDB data migration should be performed</summary>
    public partial class MongoDbMigrationSettings :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettings,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsInternal
    {

        /// <summary>Backing field for <see cref="BoostRUs" /> property.</summary>
        private int? _boostRUs;

        /// <summary>
        /// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy
        /// of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not
        /// boost the RUs. This setting has no effect on non-CosmosDB targets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public int? BoostRUs { get => this._boostRUs; set => this._boostRUs = value; }

        /// <summary>Backing field for <see cref="Database" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsDatabases _database;

        /// <summary>
        /// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsDatabases Database { get => (this._database = this._database ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbMigrationSettingsDatabases()); set => this._database = value; }

        /// <summary>Internal Acessors for Source</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsInternal.Source { get => (this._source = this._source ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbConnectionInfo()); set { {_source = value;} } }

        /// <summary>Internal Acessors for Target</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsInternal.Target { get => (this._target = this._target ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbConnectionInfo()); set { {_target = value;} } }

        /// <summary>Internal Acessors for Throttling</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettings Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsInternal.Throttling { get => (this._throttling = this._throttling ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbThrottlingSettings()); set { {_throttling = value;} } }

        /// <summary>Backing field for <see cref="Replication" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.MongoDbReplication? _replication;

        /// <summary>
        /// Describes how changes will be replicated from the source to the target. The default is OneTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.MongoDbReplication? Replication { get => this._replication; set => this._replication = value; }

        /// <summary>Backing field for <see cref="Source" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo _source;

        /// <summary>Settings used to connect to the source cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo Source { get => (this._source = this._source ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbConnectionInfo()); set => this._source = value; }

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceAdditionalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).AdditionalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).AdditionalSetting = value ?? null; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>
        /// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName
        /// and password properties
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionString { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ConnectionString; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ConnectionString = value ; }

        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).DataSource = value ?? null; }

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).EncryptConnection = value ?? default(bool); }

        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceEnforceSsl { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).EnforceSsl; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).EnforceSsl = value ?? default(bool); }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourcePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Source).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Source).Password = value ?? null; }

        /// <summary>port for server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? SourcePort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).Port = value ?? default(int); }

        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceServerBrandVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ServerBrandVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ServerBrandVersion = value ?? null; }

        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ServerName = value ?? null; }

        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceServerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ServerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).ServerVersion = value ?? null; }

        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceTrustServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).TrustServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Source).TrustServerCertificate = value ?? default(bool); }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Source).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Source).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Source).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Source).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="Target" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo _target;

        /// <summary>Settings used to connect to the target cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo Target { get => (this._target = this._target ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbConnectionInfo()); set => this._target = value; }

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetAdditionalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).AdditionalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).AdditionalSetting = value ?? null; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>
        /// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName
        /// and password properties
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionString { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ConnectionString; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ConnectionString = value ; }

        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).DataSource = value ?? null; }

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).EncryptConnection = value ?? default(bool); }

        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetEnforceSsl { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).EnforceSsl; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).EnforceSsl = value ?? default(bool); }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Target).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Target).Password = value ?? null; }

        /// <summary>port for server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? TargetPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).Port = value ?? default(int); }

        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetServerBrandVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ServerBrandVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ServerBrandVersion = value ?? null; }

        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ServerName = value ?? null; }

        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetServerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ServerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).ServerVersion = value ?? null; }

        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetTrustServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).TrustServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfoInternal)Target).TrustServerCertificate = value ?? default(bool); }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Target).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Target).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Target).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)Target).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="Throttling" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettings _throttling;

        /// <summary>Settings used to limit the resource usage of the migration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettings Throttling { get => (this._throttling = this._throttling ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.MongoDbThrottlingSettings()); set => this._throttling = value; }

        /// <summary>
        /// The maximum number of work items (e.g. collection copies) that will be processed in parallel
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? ThrottlingMaxParallelism { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettingsInternal)Throttling).MaxParallelism; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettingsInternal)Throttling).MaxParallelism = value ?? default(int); }

        /// <summary>
        /// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? ThrottlingMinFreeCpu { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettingsInternal)Throttling).MinFreeCpu; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettingsInternal)Throttling).MinFreeCpu = value ?? default(int); }

        /// <summary>The number of megabytes of RAM that the migrator will try to avoid using</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? ThrottlingMinFreeMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettingsInternal)Throttling).MinFreeMemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettingsInternal)Throttling).MinFreeMemoryMb = value ?? default(int); }

        /// <summary>Creates an new <see cref="MongoDbMigrationSettings" /> instance.</summary>
        public MongoDbMigrationSettings()
        {

        }
    }
    /// Describes how a MongoDB data migration should be performed
    public partial interface IMongoDbMigrationSettings :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy
        /// of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not
        /// boost the RUs. This setting has no effect on non-CosmosDB targets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.",
        SerializedName = @"boostRUs",
        PossibleTypes = new [] { typeof(int) })]
        int? BoostRUs { get; set; }
        /// <summary>
        /// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The databases on the source cluster to migrate to the target. The keys are the names of the databases.",
        SerializedName = @"databases",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsDatabases) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsDatabases Database { get; set; }
        /// <summary>
        /// Describes how changes will be replicated from the source to the target. The default is OneTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes how changes will be replicated from the source to the target. The default is OneTime.",
        SerializedName = @"replication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.MongoDbReplication) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.MongoDbReplication? Replication { get; set; }
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string SourceAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceAuthentication { get; set; }
        /// <summary>
        /// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName
        /// and password properties
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties",
        SerializedName = @"connectionString",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionString { get; set; }
        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source ",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string SourceDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceEncryptConnection { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"enforceSSL",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceEnforceSsl { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string SourcePassword { get; set; }
        /// <summary>port for server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"port for server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? SourcePort { get; set; }
        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server brand version",
        SerializedName = @"serverBrandVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SourceServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceServerName { get; set; }
        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server version",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SourceServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust the server certificate",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string SourceType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceUserName { get; set; }
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string TargetAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetAuthentication { get; set; }
        /// <summary>
        /// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName
        /// and password properties
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties",
        SerializedName = @"connectionString",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionString { get; set; }
        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source ",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string TargetDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetEncryptConnection { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"enforceSSL",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetEnforceSsl { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string TargetPassword { get; set; }
        /// <summary>port for server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"port for server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? TargetPort { get; set; }
        /// <summary>server brand version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server brand version",
        SerializedName = @"serverBrandVersion",
        PossibleTypes = new [] { typeof(string) })]
        string TargetServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetServerName { get; set; }
        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server version",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string TargetServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust the server certificate",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string TargetType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetUserName { get; set; }
        /// <summary>
        /// The maximum number of work items (e.g. collection copies) that will be processed in parallel
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of work items (e.g. collection copies) that will be processed in parallel",
        SerializedName = @"maxParallelism",
        PossibleTypes = new [] { typeof(int) })]
        int? ThrottlingMaxParallelism { get; set; }
        /// <summary>
        /// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The percentage of CPU time that the migrator will try to avoid using, from 0 to 100",
        SerializedName = @"minFreeCpu",
        PossibleTypes = new [] { typeof(int) })]
        int? ThrottlingMinFreeCpu { get; set; }
        /// <summary>The number of megabytes of RAM that the migrator will try to avoid using</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of megabytes of RAM that the migrator will try to avoid using",
        SerializedName = @"minFreeMemoryMb",
        PossibleTypes = new [] { typeof(int) })]
        int? ThrottlingMinFreeMemoryMb { get; set; }

    }
    /// Describes how a MongoDB data migration should be performed
    internal partial interface IMongoDbMigrationSettingsInternal

    {
        /// <summary>
        /// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy
        /// of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not
        /// boost the RUs. This setting has no effect on non-CosmosDB targets.
        /// </summary>
        int? BoostRUs { get; set; }
        /// <summary>
        /// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbMigrationSettingsDatabases Database { get; set; }
        /// <summary>
        /// Describes how changes will be replicated from the source to the target. The default is OneTime.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.MongoDbReplication? Replication { get; set; }
        /// <summary>Settings used to connect to the source cluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo Source { get; set; }
        /// <summary>Additional connection settings</summary>
        string SourceAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceAuthentication { get; set; }
        /// <summary>
        /// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName
        /// and password properties
        /// </summary>
        string SourceConnectionString { get; set; }
        /// <summary>Data source</summary>
        string SourceDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? SourceEncryptConnection { get; set; }

        bool? SourceEnforceSsl { get; set; }
        /// <summary>Password credential.</summary>
        string SourcePassword { get; set; }
        /// <summary>port for server</summary>
        int? SourcePort { get; set; }
        /// <summary>server brand version</summary>
        string SourceServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        string SourceServerName { get; set; }
        /// <summary>server version</summary>
        string SourceServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        bool? SourceTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        string SourceType { get; set; }
        /// <summary>User name</summary>
        string SourceUserName { get; set; }
        /// <summary>Settings used to connect to the target cluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbConnectionInfo Target { get; set; }
        /// <summary>Additional connection settings</summary>
        string TargetAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetAuthentication { get; set; }
        /// <summary>
        /// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName
        /// and password properties
        /// </summary>
        string TargetConnectionString { get; set; }
        /// <summary>Data source</summary>
        string TargetDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? TargetEncryptConnection { get; set; }

        bool? TargetEnforceSsl { get; set; }
        /// <summary>Password credential.</summary>
        string TargetPassword { get; set; }
        /// <summary>port for server</summary>
        int? TargetPort { get; set; }
        /// <summary>server brand version</summary>
        string TargetServerBrandVersion { get; set; }
        /// <summary>name of the server</summary>
        string TargetServerName { get; set; }
        /// <summary>server version</summary>
        string TargetServerVersion { get; set; }
        /// <summary>Whether to trust the server certificate</summary>
        bool? TargetTrustServerCertificate { get; set; }
        /// <summary>Type of connection info</summary>
        string TargetType { get; set; }
        /// <summary>User name</summary>
        string TargetUserName { get; set; }
        /// <summary>Settings used to limit the resource usage of the migration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IMongoDbThrottlingSettings Throttling { get; set; }
        /// <summary>
        /// The maximum number of work items (e.g. collection copies) that will be processed in parallel
        /// </summary>
        int? ThrottlingMaxParallelism { get; set; }
        /// <summary>
        /// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
        /// </summary>
        int? ThrottlingMinFreeCpu { get; set; }
        /// <summary>The number of megabytes of RAM that the migrator will try to avoid using</summary>
        int? ThrottlingMinFreeMemoryMb { get; set; }

    }
}