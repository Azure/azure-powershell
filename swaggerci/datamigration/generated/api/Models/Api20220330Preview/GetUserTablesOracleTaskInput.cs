// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>
    /// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
    /// </summary>
    public partial class GetUserTablesOracleTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IGetUserTablesOracleTaskInput,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IGetUserTablesOracleTaskInputInternal
    {

        /// <summary>Backing field for <see cref="ConnectionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfo _connectionInfo;

        /// <summary>Information for connecting to Oracle source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfo ConnectionInfo { get => (this._connectionInfo = this._connectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.OracleConnectionInfo()); set => this._connectionInfo = value; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? ConnectionInfoAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>EZConnect or TNSName connection string.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string ConnectionInfoDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).DataSource = value ; }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string ConnectionInfoPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)ConnectionInfo).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)ConnectionInfo).Password = value ?? null; }

        /// <summary>port for server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? ConnectionInfoPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).Port = value ?? default(int); }

        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string ConnectionInfoServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).ServerName = value ?? null; }

        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string ConnectionInfoServerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).ServerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfoInternal)ConnectionInfo).ServerVersion = value ?? null; }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string ConnectionInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)ConnectionInfo).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)ConnectionInfo).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string ConnectionInfoUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)ConnectionInfo).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IConnectionInfoInternal)ConnectionInfo).UserName = value ?? null; }

        /// <summary>Internal Acessors for ConnectionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IGetUserTablesOracleTaskInputInternal.ConnectionInfo { get => (this._connectionInfo = this._connectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.OracleConnectionInfo()); set { {_connectionInfo = value;} } }

        /// <summary>Backing field for <see cref="SelectedSchema" /> property.</summary>
        private string[] _selectedSchema;

        /// <summary>List of Oracle schemas for which to collect tables</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string[] SelectedSchema { get => this._selectedSchema; set => this._selectedSchema = value; }

        /// <summary>Creates an new <see cref="GetUserTablesOracleTaskInput" /> instance.</summary>
        public GetUserTablesOracleTaskInput()
        {

        }
    }
    /// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
    public partial interface IGetUserTablesOracleTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? ConnectionInfoAuthentication { get; set; }
        /// <summary>EZConnect or TNSName connection string.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"EZConnect or TNSName connection string.",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionInfoDataSource { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionInfoPassword { get; set; }
        /// <summary>port for server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"port for server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? ConnectionInfoPort { get; set; }
        /// <summary>name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionInfoServerName { get; set; }
        /// <summary>server version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"server version",
        SerializedName = @"serverVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionInfoServerVersion { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionInfoUserName { get; set; }
        /// <summary>List of Oracle schemas for which to collect tables</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"List of Oracle schemas for which to collect tables",
        SerializedName = @"selectedSchemas",
        PossibleTypes = new [] { typeof(string) })]
        string[] SelectedSchema { get; set; }

    }
    /// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
    internal partial interface IGetUserTablesOracleTaskInputInternal

    {
        /// <summary>Information for connecting to Oracle source</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20220330Preview.IOracleConnectionInfo ConnectionInfo { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? ConnectionInfoAuthentication { get; set; }
        /// <summary>EZConnect or TNSName connection string.</summary>
        string ConnectionInfoDataSource { get; set; }
        /// <summary>Password credential.</summary>
        string ConnectionInfoPassword { get; set; }
        /// <summary>port for server</summary>
        int? ConnectionInfoPort { get; set; }
        /// <summary>name of the server</summary>
        string ConnectionInfoServerName { get; set; }
        /// <summary>server version</summary>
        string ConnectionInfoServerVersion { get; set; }
        /// <summary>Type of connection info</summary>
        string ConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        string ConnectionInfoUserName { get; set; }
        /// <summary>List of Oracle schemas for which to collect tables</summary>
        string[] SelectedSchema { get; set; }

    }
}