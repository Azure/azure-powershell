// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support
{

    /// <summary>An enumeration of target type</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ScenarioTargetTypeConverter))]
    public partial struct ScenarioTarget :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQLServer".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQLServer'", "SQLServer", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQLServer");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQLDB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQLDB'", "SQLDB", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQLDB");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQLDW".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQLDW'", "SQLDW", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQLDW");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQLMI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQLMI'", "SQLMI", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQLMI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureDBForMySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureDBForMySql'", "AzureDBForMySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureDBForMySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureDBForPostgresSQL".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureDBForPostgresSQL'", "AzureDBForPostgresSQL", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureDBForPostgresSQL");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MongoDB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MongoDB'", "MongoDB", global::System.Management.Automation.CompletionResultType.ParameterValue, "MongoDB");
            }
        }
    }
}