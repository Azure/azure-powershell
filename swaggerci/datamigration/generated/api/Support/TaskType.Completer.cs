// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support
{

    /// <summary>Task type.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.TaskTypeTypeConverter))]
    public partial struct TaskType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Connect.MongoDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Connect.MongoDb'", "Connect.MongoDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "Connect.MongoDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToSource.SqlServer".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToSource.SqlServer'", "ConnectToSource.SqlServer", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToSource.SqlServer");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToSource.SqlServer.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToSource.SqlServer.Sync'", "ConnectToSource.SqlServer.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToSource.SqlServer.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToSource.PostgreSql.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToSource.PostgreSql.Sync'", "ConnectToSource.PostgreSql.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToSource.PostgreSql.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToSource.MySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToSource.MySql'", "ConnectToSource.MySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToSource.MySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToSource.Oracle.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToSource.Oracle.Sync'", "ConnectToSource.Oracle.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToSource.Oracle.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.SqlDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.SqlDb'", "ConnectToTarget.SqlDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.SqlDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.SqlDb.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.SqlDb.Sync'", "ConnectToTarget.SqlDb.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.SqlDb.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.AzureDbForPostgreSql.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.AzureDbForPostgreSql.Sync'", "ConnectToTarget.AzureDbForPostgreSql.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.AzureDbForPostgreSql.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'", "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.AzureSqlDbMI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.AzureSqlDbMI'", "ConnectToTarget.AzureSqlDbMI", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.AzureSqlDbMI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.AzureSqlDbMI.Sync.LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.AzureSqlDbMI.Sync.LRS'", "ConnectToTarget.AzureSqlDbMI.Sync.LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.AzureSqlDbMI.Sync.LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConnectToTarget.AzureDbForMySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConnectToTarget.AzureDbForMySql'", "ConnectToTarget.AzureDbForMySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConnectToTarget.AzureDbForMySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GetUserTables.Sql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GetUserTables.Sql'", "GetUserTables.Sql", global::System.Management.Automation.CompletionResultType.ParameterValue, "GetUserTables.Sql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GetUserTables.AzureSqlDb.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GetUserTables.AzureSqlDb.Sync'", "GetUserTables.AzureSqlDb.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "GetUserTables.AzureSqlDb.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GetUserTablesOracle".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GetUserTablesOracle'", "GetUserTablesOracle", global::System.Management.Automation.CompletionResultType.ParameterValue, "GetUserTablesOracle");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GetUserTablesPostgreSql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GetUserTablesPostgreSql'", "GetUserTablesPostgreSql", global::System.Management.Automation.CompletionResultType.ParameterValue, "GetUserTablesPostgreSql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GetUserTablesMySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GetUserTablesMySql'", "GetUserTablesMySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "GetUserTablesMySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.MongoDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.MongoDb'", "Migrate.MongoDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.MongoDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.SqlServer.AzureSqlDbMI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.SqlServer.AzureSqlDbMI'", "Migrate.SqlServer.AzureSqlDbMI", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.SqlServer.AzureSqlDbMI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'", "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.SqlServer.SqlDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.SqlServer.SqlDb'", "Migrate.SqlServer.SqlDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.SqlServer.SqlDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.SqlServer.AzureSqlDb.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.SqlServer.AzureSqlDb.Sync'", "Migrate.SqlServer.AzureSqlDb.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.SqlServer.AzureSqlDb.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.MySql.AzureDbForMySql.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.MySql.AzureDbForMySql.Sync'", "Migrate.MySql.AzureDbForMySql.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.MySql.AzureDbForMySql.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.MySql.AzureDbForMySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.MySql.AzureDbForMySql'", "Migrate.MySql.AzureDbForMySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.MySql.AzureDbForMySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'", "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.Oracle.AzureDbForPostgreSql.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.Oracle.AzureDbForPostgreSql.Sync'", "Migrate.Oracle.AzureDbForPostgreSql.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.Oracle.AzureDbForPostgreSql.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ValidateMigrationInput.SqlServer.SqlDb.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ValidateMigrationInput.SqlServer.SqlDb.Sync'", "ValidateMigrationInput.SqlServer.SqlDb.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "ValidateMigrationInput.SqlServer.SqlDb.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ValidateMigrationInput.SqlServer.AzureSqlDbMI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ValidateMigrationInput.SqlServer.AzureSqlDbMI'", "ValidateMigrationInput.SqlServer.AzureSqlDbMI", global::System.Management.Automation.CompletionResultType.ParameterValue, "ValidateMigrationInput.SqlServer.AzureSqlDbMI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'", "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Validate.MongoDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Validate.MongoDb'", "Validate.MongoDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "Validate.MongoDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Validate.Oracle.AzureDbPostgreSql.Sync".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Validate.Oracle.AzureDbPostgreSql.Sync'", "Validate.Oracle.AzureDbPostgreSql.Sync", global::System.Management.Automation.CompletionResultType.ParameterValue, "Validate.Oracle.AzureDbPostgreSql.Sync");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GetTDECertificates.Sql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GetTDECertificates.Sql'", "GetTDECertificates.Sql", global::System.Management.Automation.CompletionResultType.ParameterValue, "GetTDECertificates.Sql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Migrate.Ssis".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Migrate.Ssis'", "Migrate.Ssis", global::System.Management.Automation.CompletionResultType.ParameterValue, "Migrate.Ssis");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Service.Check.OCI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Service.Check.OCI'", "Service.Check.OCI", global::System.Management.Automation.CompletionResultType.ParameterValue, "Service.Check.OCI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Service.Upload.OCI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Service.Upload.OCI'", "Service.Upload.OCI", global::System.Management.Automation.CompletionResultType.ParameterValue, "Service.Upload.OCI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Service.Install.OCI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Service.Install.OCI'", "Service.Install.OCI", global::System.Management.Automation.CompletionResultType.ParameterValue, "Service.Install.OCI");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MigrateSchemaSqlServerSqlDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MigrateSchemaSqlServerSqlDb'", "MigrateSchemaSqlServerSqlDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "MigrateSchemaSqlServerSqlDb");
            }
        }
    }
}