// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Extensions;

    /// <summary>The storage account credential properties.</summary>
    public partial class StorageAccountCredentialProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IStorageAccountCredentialProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IStorageAccountCredentialPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AccountKey" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecret _accountKey;

        /// <summary>Encrypted storage key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecret AccountKey { get => (this._accountKey = this._accountKey ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.AsymmetricEncryptedSecret()); set => this._accountKey = value; }

        /// <summary>The algorithm used to encrypt "Value".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.EncryptionAlgorithm? AccountKeyEncryptionAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecretInternal)AccountKey).EncryptionAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecretInternal)AccountKey).EncryptionAlgorithm = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.EncryptionAlgorithm)""); }

        /// <summary>
        /// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string AccountKeyEncryptionCertThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecretInternal)AccountKey).EncryptionCertThumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecretInternal)AccountKey).EncryptionCertThumbprint = value ?? null; }

        /// <summary>The value of the secret.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string AccountKeyValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecretInternal)AccountKey).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecretInternal)AccountKey).Value = value ?? null; }

        /// <summary>Backing field for <see cref="AccountType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.AccountType _accountType;

        /// <summary>Type of storage accessed on the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.AccountType AccountType { get => this._accountType; set => this._accountType = value; }

        /// <summary>Backing field for <see cref="Alias" /> property.</summary>
        private string _alias;

        /// <summary>Alias for the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public string Alias { get => this._alias; set => this._alias = value; }

        /// <summary>Backing field for <see cref="BlobDomainName" /> property.</summary>
        private string _blobDomainName;

        /// <summary>Blob end point for private clouds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public string BlobDomainName { get => this._blobDomainName; set => this._blobDomainName = value; }

        /// <summary>Backing field for <see cref="ConnectionString" /> property.</summary>
        private string _connectionString;

        /// <summary>
        /// Connection string for the storage account. Use this string if username and account key are not specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public string ConnectionString { get => this._connectionString; set => this._connectionString = value; }

        /// <summary>Internal Acessors for AccountKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecret Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IStorageAccountCredentialPropertiesInternal.AccountKey { get => (this._accountKey = this._accountKey ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.AsymmetricEncryptedSecret()); set { {_accountKey = value;} } }

        /// <summary>Backing field for <see cref="SslStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.SslStatus _sslStatus;

        /// <summary>Signifies whether SSL needs to be enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.SslStatus SslStatus { get => this._sslStatus; set => this._sslStatus = value; }

        /// <summary>Backing field for <see cref="StorageAccountId" /> property.</summary>
        private string _storageAccountId;

        /// <summary>Id of the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public string StorageAccountId { get => this._storageAccountId; set => this._storageAccountId = value; }

        /// <summary>Backing field for <see cref="UserName" /> property.</summary>
        private string _userName;

        /// <summary>Username for the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public string UserName { get => this._userName; set => this._userName = value; }

        /// <summary>Creates an new <see cref="StorageAccountCredentialProperties" /> instance.</summary>
        public StorageAccountCredentialProperties()
        {

        }
    }
    /// The storage account credential properties.
    public partial interface IStorageAccountCredentialProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.IJsonSerializable
    {
        /// <summary>The algorithm used to encrypt "Value".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The algorithm used to encrypt ""Value"".",
        SerializedName = @"encryptionAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.EncryptionAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.EncryptionAlgorithm? AccountKeyEncryptionAlgorithm { get; set; }
        /// <summary>
        /// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Thumbprint certificate used to encrypt \""Value\"". If the value is unencrypted, it will be null.",
        SerializedName = @"encryptionCertThumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string AccountKeyEncryptionCertThumbprint { get; set; }
        /// <summary>The value of the secret.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of the secret.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string AccountKeyValue { get; set; }
        /// <summary>Type of storage accessed on the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of storage accessed on the storage account.",
        SerializedName = @"accountType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.AccountType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.AccountType AccountType { get; set; }
        /// <summary>Alias for the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Alias for the storage account.",
        SerializedName = @"alias",
        PossibleTypes = new [] { typeof(string) })]
        string Alias { get; set; }
        /// <summary>Blob end point for private clouds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob end point for private clouds.",
        SerializedName = @"blobDomainName",
        PossibleTypes = new [] { typeof(string) })]
        string BlobDomainName { get; set; }
        /// <summary>
        /// Connection string for the storage account. Use this string if username and account key are not specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Connection string for the storage account. Use this string if username and account key are not specified.",
        SerializedName = @"connectionString",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionString { get; set; }
        /// <summary>Signifies whether SSL needs to be enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Signifies whether SSL needs to be enabled or not.",
        SerializedName = @"sslStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.SslStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.SslStatus SslStatus { get; set; }
        /// <summary>Id of the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of the storage account.",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountId { get; set; }
        /// <summary>Username for the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username for the storage account.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }

    }
    /// The storage account credential properties.
    internal partial interface IStorageAccountCredentialPropertiesInternal

    {
        /// <summary>Encrypted storage key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.IAsymmetricEncryptedSecret AccountKey { get; set; }
        /// <summary>The algorithm used to encrypt "Value".</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.EncryptionAlgorithm? AccountKeyEncryptionAlgorithm { get; set; }
        /// <summary>
        /// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
        /// </summary>
        string AccountKeyEncryptionCertThumbprint { get; set; }
        /// <summary>The value of the secret.</summary>
        string AccountKeyValue { get; set; }
        /// <summary>Type of storage accessed on the storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.AccountType AccountType { get; set; }
        /// <summary>Alias for the storage account.</summary>
        string Alias { get; set; }
        /// <summary>Blob end point for private clouds.</summary>
        string BlobDomainName { get; set; }
        /// <summary>
        /// Connection string for the storage account. Use this string if username and account key are not specified.
        /// </summary>
        string ConnectionString { get; set; }
        /// <summary>Signifies whether SSL needs to be enabled or not.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.SslStatus SslStatus { get; set; }
        /// <summary>Id of the storage account.</summary>
        string StorageAccountId { get; set; }
        /// <summary>Username for the storage account.</summary>
        string UserName { get; set; }

    }
}