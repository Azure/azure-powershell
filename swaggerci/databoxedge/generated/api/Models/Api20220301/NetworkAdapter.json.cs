// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Extensions;

    /// <summary>Represents the networkAdapter on a device.</summary>
    public partial class NetworkAdapter
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.INetworkAdapter.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.INetworkAdapter.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.INetworkAdapter FromJson(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject json ? new NetworkAdapter(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject into a new instance of <see cref="NetworkAdapter" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal NetworkAdapter(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_adapterPosition = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject>("adapterPosition"), out var __jsonAdapterPosition) ? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.NetworkAdapterPosition.FromJson(__jsonAdapterPosition) : AdapterPosition;}
            {_ipv4Configuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject>("ipv4Configuration"), out var __jsonIpv4Configuration) ? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.Ipv4Config.FromJson(__jsonIpv4Configuration) : Ipv4Configuration;}
            {_ipv6Configuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject>("ipv6Configuration"), out var __jsonIpv6Configuration) ? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20220301.Ipv6Config.FromJson(__jsonIpv6Configuration) : Ipv6Configuration;}
            {_adapterId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("adapterId"), out var __jsonAdapterId) ? (string)__jsonAdapterId : (string)AdapterId;}
            {_index = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNumber>("index"), out var __jsonIndex) ? (int?)__jsonIndex : Index;}
            {_nodeId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("nodeId"), out var __jsonNodeId) ? (string)__jsonNodeId : (string)NodeId;}
            {_name = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("networkAdapterName"), out var __jsonNetworkAdapterName) ? (string)__jsonNetworkAdapterName : (string)Name;}
            {_label = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("label"), out var __jsonLabel) ? (string)__jsonLabel : (string)Label;}
            {_macAddress = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("macAddress"), out var __jsonMacAddress) ? (string)__jsonMacAddress : (string)MacAddress;}
            {_linkSpeed = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNumber>("linkSpeed"), out var __jsonLinkSpeed) ? (long?)__jsonLinkSpeed : LinkSpeed;}
            {_status = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)Status;}
            {_rdmaStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("rdmaStatus"), out var __jsonRdmaStatus) ? (string)__jsonRdmaStatus : (string)RdmaStatus;}
            {_dhcpStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("dhcpStatus"), out var __jsonDhcpStatus) ? (string)__jsonDhcpStatus : (string)DhcpStatus;}
            {_ipv6LinkLocalAddress = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString>("ipv6LinkLocalAddress"), out var __jsonIpv6LinkLocalAddress) ? (string)__jsonIpv6LinkLocalAddress : (string)Ipv6LinkLocalAddress;}
            {_dnsServer = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonArray>("dnsServers"), out var __jsonDnsServers) ? If( __jsonDnsServers as Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : DnsServer;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="NetworkAdapter" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="NetworkAdapter" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._adapterPosition ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) this._adapterPosition.ToJson(null,serializationMode) : null, "adapterPosition" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._ipv4Configuration ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) this._ipv4Configuration.ToJson(null,serializationMode) : null, "ipv4Configuration" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._ipv6Configuration ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) this._ipv6Configuration.ToJson(null,serializationMode) : null, "ipv6Configuration" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._adapterId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._adapterId.ToString()) : null, "adapterId" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._index ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNumber((int)this._index) : null, "index" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._nodeId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._nodeId.ToString()) : null, "nodeId" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._name)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._name.ToString()) : null, "networkAdapterName" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._label)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._label.ToString()) : null, "label" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._macAddress)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._macAddress.ToString()) : null, "macAddress" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._linkSpeed ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNumber((long)this._linkSpeed) : null, "linkSpeed" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._status)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            }
            AddIf( null != (((object)this._rdmaStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._rdmaStatus.ToString()) : null, "rdmaStatus" ,container.Add );
            AddIf( null != (((object)this._dhcpStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._dhcpStatus.ToString()) : null, "dhcpStatus" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._ipv6LinkLocalAddress)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(this._ipv6LinkLocalAddress.ToString()) : null, "ipv6LinkLocalAddress" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._dnsServer)
                {
                    var __w = new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.XNodeArray();
                    foreach( var __x in this._dnsServer )
                    {
                        AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                    }
                    container.Add("dnsServers",__w);
                }
            }
            AfterToJson(ref container);
            return container;
        }
    }
}