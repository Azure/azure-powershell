// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support
{

    /// <summary>Status of the order as per the allowed status types.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.OrderStateTypeConverter))]
    public partial struct OrderState :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Untracked".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Untracked'", "Untracked", global::System.Management.Automation.CompletionResultType.ParameterValue, "Untracked");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AwaitingFulfillment".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AwaitingFulfillment'", "AwaitingFulfillment", global::System.Management.Automation.CompletionResultType.ParameterValue, "AwaitingFulfillment");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AwaitingPreparation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AwaitingPreparation'", "AwaitingPreparation", global::System.Management.Automation.CompletionResultType.ParameterValue, "AwaitingPreparation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AwaitingShipment".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AwaitingShipment'", "AwaitingShipment", global::System.Management.Automation.CompletionResultType.ParameterValue, "AwaitingShipment");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Shipped".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Shipped'", "Shipped", global::System.Management.Automation.CompletionResultType.ParameterValue, "Shipped");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Arriving".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Arriving'", "Arriving", global::System.Management.Automation.CompletionResultType.ParameterValue, "Arriving");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Delivered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Delivered'", "Delivered", global::System.Management.Automation.CompletionResultType.ParameterValue, "Delivered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ReplacementRequested".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ReplacementRequested'", "ReplacementRequested", global::System.Management.Automation.CompletionResultType.ParameterValue, "ReplacementRequested");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LostDevice".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'LostDevice'", "LostDevice", global::System.Management.Automation.CompletionResultType.ParameterValue, "LostDevice");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Declined".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Declined'", "Declined", global::System.Management.Automation.CompletionResultType.ParameterValue, "Declined");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ReturnInitiated".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ReturnInitiated'", "ReturnInitiated", global::System.Management.Automation.CompletionResultType.ParameterValue, "ReturnInitiated");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AwaitingReturnShipment".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AwaitingReturnShipment'", "AwaitingReturnShipment", global::System.Management.Automation.CompletionResultType.ParameterValue, "AwaitingReturnShipment");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ShippedBack".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ShippedBack'", "ShippedBack", global::System.Management.Automation.CompletionResultType.ParameterValue, "ShippedBack");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CollectedAtMicrosoft".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CollectedAtMicrosoft'", "CollectedAtMicrosoft", global::System.Management.Automation.CompletionResultType.ParameterValue, "CollectedAtMicrosoft");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AwaitingPickup".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AwaitingPickup'", "AwaitingPickup", global::System.Management.Automation.CompletionResultType.ParameterValue, "AwaitingPickup");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PickupCompleted".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PickupCompleted'", "PickupCompleted", global::System.Management.Automation.CompletionResultType.ParameterValue, "PickupCompleted");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AwaitingDrop".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AwaitingDrop'", "AwaitingDrop", global::System.Management.Automation.CompletionResultType.ParameterValue, "AwaitingDrop");
            }
        }
    }
}