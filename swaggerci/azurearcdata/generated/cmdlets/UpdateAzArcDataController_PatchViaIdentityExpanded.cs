// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Arc.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Extensions;
    using System;

    /// <summary>Updates a dataController resource</summary>
    /// <remarks>
    /// [OpenAPI] PatchDataController=>PATCH:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzArcDataController_PatchViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Description(@"Updates a dataController resource")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Generated]
    public partial class UpdateAzArcDataController_PatchViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Login password.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Login password.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Login password.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        public string BasicLoginInformationPassword { get => DataControllerResourceBody.BasicLoginInformationPassword ?? null; set => DataControllerResourceBody.BasicLoginInformationPassword = value; }

        /// <summary>Login username.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Login username.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Login username.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string BasicLoginInformationUsername { get => DataControllerResourceBody.BasicLoginInformationUsername ?? null; set => DataControllerResourceBody.BasicLoginInformationUsername = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.AzureArcDataManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.Arc.Module.Instance.ClientAPI;

        /// <summary>
        /// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.",
        SerializedName = @"clusterId",
        PossibleTypes = new [] { typeof(string) })]
        public string ClusterId { get => DataControllerResourceBody.ClusterId ?? null; set => DataControllerResourceBody.ClusterId = value; }

        /// <summary>Backing field for <see cref="DataControllerResourceBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdate _dataControllerResourceBody= new Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.DataControllerUpdate();

        /// <summary>Used for updating a data controller resource.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdate DataControllerResourceBody { get => this._dataControllerResourceBody; set => this._dataControllerResourceBody = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.",
        SerializedName = @"extensionId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExtensionId { get => DataControllerResourceBody.ExtensionId ?? null; set => DataControllerResourceBody.ExtensionId = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The infrastructure the data controller is running on.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The infrastructure the data controller is running on.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The infrastructure the data controller is running on.",
        SerializedName = @"infrastructure",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.Infrastructure) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.Infrastructure))]
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.Infrastructure Infrastructure { get => DataControllerResourceBody.Infrastructure ?? ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.Infrastructure)""); set => DataControllerResourceBody.Infrastructure = value; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IArcIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IArcIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The raw kubernetes information</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The raw kubernetes information")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The raw kubernetes information",
        SerializedName = @"k8sRaw",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IAny K8SRaw { get => DataControllerResourceBody.K8SRaw ?? null /* object */; set => DataControllerResourceBody.K8SRaw = value; }

        /// <summary>Last uploaded date from Kubernetes cluster. Defaults to current date time</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Last uploaded date from Kubernetes cluster. Defaults to current date time")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last uploaded date from Kubernetes cluster. Defaults to current date time",
        SerializedName = @"lastUploadedDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime LastUploadedDate { get => DataControllerResourceBody.LastUploadedDate ?? default(global::System.DateTime); set => DataControllerResourceBody.LastUploadedDate = value; }

        /// <summary>Primary key of the workspace</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Primary key of the workspace")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Primary key of the workspace",
        SerializedName = @"primaryKey",
        PossibleTypes = new [] { typeof(string) })]
        public string LogAnalyticWorkspaceConfigPrimaryKey { get => DataControllerResourceBody.LogAnalyticWorkspaceConfigPrimaryKey ?? null; set => DataControllerResourceBody.LogAnalyticWorkspaceConfigPrimaryKey = value; }

        /// <summary>Azure Log Analytics workspace ID</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure Log Analytics workspace ID")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Log Analytics workspace ID",
        SerializedName = @"workspaceId",
        PossibleTypes = new [] { typeof(string) })]
        public string LogAnalyticWorkspaceConfigWorkspaceId { get => DataControllerResourceBody.LogAnalyticWorkspaceConfigWorkspaceId ?? null; set => DataControllerResourceBody.LogAnalyticWorkspaceConfigWorkspaceId = value; }

        /// <summary>Login password.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Login password.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Login password.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        public string LogDashboardCredentialPassword { get => DataControllerResourceBody.LogDashboardCredentialPassword ?? null; set => DataControllerResourceBody.LogDashboardCredentialPassword = value; }

        /// <summary>Login username.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Login username.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Login username.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string LogDashboardCredentialUsername { get => DataControllerResourceBody.LogDashboardCredentialUsername ?? null; set => DataControllerResourceBody.LogDashboardCredentialUsername = value; }

        /// <summary>Login password.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Login password.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Login password.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        public string MetricDashboardCredentialPassword { get => DataControllerResourceBody.MetricDashboardCredentialPassword ?? null; set => DataControllerResourceBody.MetricDashboardCredentialPassword = value; }

        /// <summary>Login username.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Login username.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Login username.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string MetricDashboardCredentialUsername { get => DataControllerResourceBody.MetricDashboardCredentialUsername ?? null; set => DataControllerResourceBody.MetricDashboardCredentialUsername = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>A globally unique ID identifying the associated Kubernetes cluster</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A globally unique ID identifying the associated Kubernetes cluster")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A globally unique ID identifying the associated Kubernetes cluster",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string OnPremisePropertyId { get => DataControllerResourceBody.OnPremisePropertyId ?? null; set => DataControllerResourceBody.OnPremisePropertyId = value; }

        /// <summary>
        /// Certificate that contains the Kubernetes cluster public key used to verify signing
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Certificate that contains the Kubernetes cluster public key used to verify signing")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate that contains the Kubernetes cluster public key used to verify signing",
        SerializedName = @"publicSigningKey",
        PossibleTypes = new [] { typeof(string) })]
        public string OnPremisePropertyPublicSigningKey { get => DataControllerResourceBody.OnPremisePropertyPublicSigningKey ?? null; set => DataControllerResourceBody.OnPremisePropertyPublicSigningKey = value; }

        /// <summary>Unique thumbprint returned to customer to verify the certificate being uploaded</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Unique thumbprint returned to customer to verify the certificate being uploaded")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Unique thumbprint returned to customer to verify the certificate being uploaded",
        SerializedName = @"signingCertificateThumbprint",
        PossibleTypes = new [] { typeof(string) })]
        public string OnPremisePropertySigningCertificateThumbprint { get => DataControllerResourceBody.OnPremisePropertySigningCertificateThumbprint ?? null; set => DataControllerResourceBody.OnPremisePropertySigningCertificateThumbprint = value; }

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Resource tags</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdateTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdateTags Tag { get => DataControllerResourceBody.Tag ?? null /* object */; set => DataControllerResourceBody.Tag = value; }

        /// <summary>
        /// Authority for the service principal. Example: https://login.microsoftonline.com/
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Authority for the service principal. Example: https://login.microsoftonline.com/")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authority for the service principal. Example: https://login.microsoftonline.com/",
        SerializedName = @"authority",
        PossibleTypes = new [] { typeof(string) })]
        public string UploadServicePrincipalAuthority { get => DataControllerResourceBody.UploadServicePrincipalAuthority ?? null; set => DataControllerResourceBody.UploadServicePrincipalAuthority = value; }

        /// <summary>Client ID of the service principal for uploading data.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Client ID of the service principal for uploading data.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client ID of the service principal for uploading data.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        public string UploadServicePrincipalClientId { get => DataControllerResourceBody.UploadServicePrincipalClientId ?? null; set => DataControllerResourceBody.UploadServicePrincipalClientId = value; }

        /// <summary>Secret of the service principal</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Secret of the service principal")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Secret of the service principal",
        SerializedName = @"clientSecret",
        PossibleTypes = new [] { typeof(string) })]
        public string UploadServicePrincipalClientSecret { get => DataControllerResourceBody.UploadServicePrincipalClientSecret ?? null; set => DataControllerResourceBody.UploadServicePrincipalClientSecret = value; }

        /// <summary>Tenant ID of the service principal.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tenant ID of the service principal.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tenant ID of the service principal.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string UploadServicePrincipalTenantId { get => DataControllerResourceBody.UploadServicePrincipalTenantId ?? null; set => DataControllerResourceBody.UploadServicePrincipalTenantId = value; }

        /// <summary>
        /// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Last uploaded date for logs from kubernetes cluster. Defaults to current date time")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last uploaded date for logs from kubernetes cluster. Defaults to current date time",
        SerializedName = @"logs",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime UploadWatermarkLog { get => DataControllerResourceBody.UploadWatermarkLog ?? default(global::System.DateTime); set => DataControllerResourceBody.UploadWatermarkLog = value; }

        /// <summary>
        /// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Last uploaded date for metrics from kubernetes cluster. Defaults to current date time")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last uploaded date for metrics from kubernetes cluster. Defaults to current date time",
        SerializedName = @"metrics",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime UploadWatermarkMetric { get => DataControllerResourceBody.UploadWatermarkMetric ?? default(global::System.DateTime); set => DataControllerResourceBody.UploadWatermarkMetric = value; }

        /// <summary>
        /// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Last uploaded date for usages from kubernetes cluster. Defaults to current date time")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Arc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Arc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last uploaded date for usages from kubernetes cluster. Defaults to current date time",
        SerializedName = @"usages",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime UploadWatermarkUsage { get => DataControllerResourceBody.UploadWatermarkUsage ?? default(global::System.DateTime); set => DataControllerResourceBody.UploadWatermarkUsage = value; }

        /// <summary>
        /// <c>overrideOnAccepted</c> will be called before the regular onAccepted has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="returnNow">/// Determines if the rest of the onAccepted method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnAccepted(global::System.Net.Http.HttpResponseMessage responseMessage, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IErrorResponse"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Arc.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Arc.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'DataControllersPatchDataController' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Arc.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.DataControllersPatchDataControllerViaIdentity(InputObject.Id, DataControllerResourceBody, onOk, onAccepted, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.DataControllerName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.DataControllerName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.DataControllersPatchDataController(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.DataControllerName ?? null, DataControllerResourceBody, onOk, onAccepted, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=DataControllerResourceBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzArcDataController_PatchViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzArcDataController_PatchViaIdentityExpanded()
        {

        }

        /// <summary>a delegate that is called when the remote service returns 202 (Accepted).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onAccepted(global::System.Net.Http.HttpResponseMessage responseMessage)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnAccepted(responseMessage, ref _returnNow);
                // if overrideOnAccepted has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onAccepted - response for 202 /
                if (true == MyInvocation?.BoundParameters?.ContainsKey("PassThru"))
                {
                    WriteObject(true);
                }
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IErrorResponse"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=DataControllerResourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=DataControllerResourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource
                WriteObject((await response));
            }
        }
    }
}