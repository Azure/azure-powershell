
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates a dataController resource
.Description
Updates a dataController resource
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdate
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IArcIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DATACONTROLLERRESOURCE <IDataControllerUpdate>: Used for updating a data controller resource.
  [BasicLoginInformationPassword <String>]: Login password.
  [BasicLoginInformationUsername <String>]: Login username.
  [ClusterId <String>]: If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
  [ExtensionId <String>]: If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
  [Infrastructure <Infrastructure?>]: The infrastructure the data controller is running on.
  [K8SRaw <IAny>]: The raw kubernetes information
  [LastUploadedDate <DateTime?>]: Last uploaded date from Kubernetes cluster. Defaults to current date time
  [LogAnalyticWorkspaceConfigPrimaryKey <String>]: Primary key of the workspace
  [LogAnalyticWorkspaceConfigWorkspaceId <String>]: Azure Log Analytics workspace ID
  [LogDashboardCredentialPassword <String>]: Login password.
  [LogDashboardCredentialUsername <String>]: Login username.
  [MetricDashboardCredentialPassword <String>]: Login password.
  [MetricDashboardCredentialUsername <String>]: Login username.
  [OnPremisePropertyId <String>]: A globally unique ID identifying the associated Kubernetes cluster
  [OnPremisePropertyPublicSigningKey <String>]: Certificate that contains the Kubernetes cluster public key used to verify signing
  [OnPremisePropertySigningCertificateThumbprint <String>]: Unique thumbprint returned to customer to verify the certificate being uploaded
  [Tag <IDataControllerUpdateTags>]: Resource tags
    [(Any) <String>]: This indicates any property can be added to this object.
  [UploadServicePrincipalAuthority <String>]: Authority for the service principal. Example: https://login.microsoftonline.com/
  [UploadServicePrincipalClientId <String>]: Client ID of the service principal for uploading data.
  [UploadServicePrincipalClientSecret <String>]: Secret of the service principal
  [UploadServicePrincipalTenantId <String>]: Tenant ID of the service principal.
  [UploadWatermarkLog <DateTime?>]: Last uploaded date for logs from kubernetes cluster. Defaults to current date time
  [UploadWatermarkMetric <DateTime?>]: Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
  [UploadWatermarkUsage <DateTime?>]: Last uploaded date for usages from kubernetes cluster. Defaults to current date time

INPUTOBJECT <IArcIdentity>: Identity Parameter
  [ActiveDirectoryConnectorName <String>]: The name of the Active Directory connector instance
  [DataControllerName <String>]: The name of the data controller
  [Id <String>]: Resource identity path
  [PostgresInstanceName <String>]: Name of Postgres Instance
  [ResourceGroupName <String>]: The name of the Azure resource group
  [SqlManagedInstanceName <String>]: Name of SQL Managed Instance
  [SqlServerInstanceName <String>]: Name of SQL Server Instance
  [SubscriptionId <String>]: The ID of the Azure subscription
.Link
https://docs.microsoft.com/en-us/powershell/module/az.arc/update-azarcdatacontroller
#>
function Update-AzArcDataController {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerResource])]
[CmdletBinding(DefaultParameterSetName='PatchExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Patch', Mandatory)]
    [Parameter(ParameterSetName='PatchExpanded', Mandatory)]
    [Alias('DataControllerName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the data controller
    ${Name},

    [Parameter(ParameterSetName='Patch', Mandatory)]
    [Parameter(ParameterSetName='PatchExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the Azure resource group
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Patch')]
    [Parameter(ParameterSetName='PatchExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the Azure subscription
    ${SubscriptionId},

    [Parameter(ParameterSetName='PatchViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IArcIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Patch', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='PatchViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdate]
    # Used for updating a data controller resource.
    # To construct, see NOTES section for DATACONTROLLERRESOURCE properties and create a hash table.
    ${DataControllerResource},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login password.
    ${BasicLoginInformationPassword},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login username.
    ${BasicLoginInformationUsername},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
    ${ClusterId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
    ${ExtensionId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.Infrastructure])]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.Infrastructure]
    # The infrastructure the data controller is running on.
    ${Infrastructure},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IAny]
    # The raw kubernetes information
    ${K8SRaw},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Last uploaded date from Kubernetes cluster.
    # Defaults to current date time
    ${LastUploadedDate},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Primary key of the workspace
    ${LogAnalyticWorkspaceConfigPrimaryKey},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Azure Log Analytics workspace ID
    ${LogAnalyticWorkspaceConfigWorkspaceId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login password.
    ${LogDashboardCredentialPassword},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login username.
    ${LogDashboardCredentialUsername},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login password.
    ${MetricDashboardCredentialPassword},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login username.
    ${MetricDashboardCredentialUsername},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # A globally unique ID identifying the associated Kubernetes cluster
    ${OnPremisePropertyId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Certificate that contains the Kubernetes cluster public key used to verify signing
    ${OnPremisePropertyPublicSigningKey},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Unique thumbprint returned to customer to verify the certificate being uploaded
    ${OnPremisePropertySigningCertificateThumbprint},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20220301Preview.IDataControllerUpdateTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tag},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Authority for the service principal.
    # Example: https://login.microsoftonline.com/
    ${UploadServicePrincipalAuthority},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Client ID of the service principal for uploading data.
    ${UploadServicePrincipalClientId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Secret of the service principal
    ${UploadServicePrincipalClientSecret},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Tenant ID of the service principal.
    ${UploadServicePrincipalTenantId},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Last uploaded date for logs from kubernetes cluster.
    # Defaults to current date time
    ${UploadWatermarkLog},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Last uploaded date for metrics from kubernetes cluster.
    # Defaults to current date time
    ${UploadWatermarkMetric},

    [Parameter(ParameterSetName='PatchExpanded')]
    [Parameter(ParameterSetName='PatchViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Last uploaded date for usages from kubernetes cluster.
    # Defaults to current date time
    ${UploadWatermarkUsage},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Patch = 'Az.Arc.private\Update-AzArcDataController_Patch';
            PatchExpanded = 'Az.Arc.private\Update-AzArcDataController_PatchExpanded';
            PatchViaIdentity = 'Az.Arc.private\Update-AzArcDataController_PatchViaIdentity';
            PatchViaIdentityExpanded = 'Az.Arc.private\Update-AzArcDataController_PatchViaIdentityExpanded';
        }
        if (('Patch', 'PatchExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
