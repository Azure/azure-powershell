
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a job definition.
.Description
Creates or updates a job definition.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.IJobDefinition
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CUSTOMERSECRET <ICustomerSecret[]>: List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
  Algorithm <SupportedAlgorithm>: The encryption algorithm used to encrypt data.
  KeyIdentifier <String>: The identifier to the data service input object which this secret corresponds to.
  KeyValue <String>: It contains the encrypted customer secret.

SCHEDULE <ISchedule[]>: Schedule for running the job definition
  [Name <String>]: Name of the schedule.
  [PolicyList <String[]>]: A list of repetition intervals in ISO 8601 format.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.hybrid/new-azhybridjobdefinition
#>
function New-AzHybridJobDefinition {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.IJobDefinition])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Path')]
    [System.String]
    # The name of the DataManager Resource within the specified resource group.
    # DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
    ${DataManagerName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Path')]
    [System.String]
    # The data service type of the job definition.
    ${DataServiceName},

    [Parameter(Mandatory)]
    [Alias('JobDefinitionName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Path')]
    [System.String]
    # The job definition name to be created or updated.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Path')]
    [System.String]
    # The Resource Group Name
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The Subscription Id
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [System.String]
    # Data Sink Id associated to the job definition.
    ${DataSinkId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [System.String]
    # Data Source Id associated to the job definition.
    ${DataSourceId},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State])]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State]
    # State of the job definition.
    ${State},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.ICustomerSecret[]]
    # List of customer secrets containing a key identifier and key value.
    # The key identifier is a way for the specific data source to understand the key.
    # Value contains customer secret encrypted by the encryptionKeys.
    # To construct, see NOTES section for CUSTOMERSECRET properties and create a hash table.
    ${CustomerSecret},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.IAny]
    # A generic json used differently by each data service type.
    ${DataServiceInput},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [System.DateTime]
    # Last modified time of the job definition.
    ${LastModifiedTime},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.RunLocation])]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.RunLocation]
    # This is the preferred geo location for the job to run.
    ${RunLocation},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.ISchedule[]]
    # Schedule for running the job definition
    # To construct, see NOTES section for SCHEDULE properties and create a hash table.
    ${Schedule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.UserConfirmation])]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.UserConfirmation]
    # Enum to detect if user confirmation is required.
    # If not passed will default to NotRequired.
    ${UserConfirmation},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Hybrid.private\New-AzHybridJobDefinition_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
