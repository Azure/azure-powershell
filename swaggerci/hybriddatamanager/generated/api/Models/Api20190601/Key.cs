// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Extensions;

    /// <summary>Encryption Key.</summary>
    public partial class Key :
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.IKey,
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.IKeyInternal
    {

        /// <summary>Backing field for <see cref="EncryptionChunkSizeInByte" /> property.</summary>
        private int _encryptionChunkSizeInByte;

        /// <summary>
        /// The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt
        /// each chunk, append each encrypted chunk with : to mark the end of the chunk.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.PropertyOrigin.Owned)]
        public int EncryptionChunkSizeInByte { get => this._encryptionChunkSizeInByte; set => this._encryptionChunkSizeInByte = value; }

        /// <summary>Backing field for <see cref="Exponent" /> property.</summary>
        private string _exponent;

        /// <summary>Exponent of the encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.PropertyOrigin.Owned)]
        public string Exponent { get => this._exponent; set => this._exponent = value; }

        /// <summary>Backing field for <see cref="Modulu" /> property.</summary>
        private string _modulu;

        /// <summary>Modulus of the encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.PropertyOrigin.Owned)]
        public string Modulu { get => this._modulu; set => this._modulu = value; }

        /// <summary>Creates an new <see cref="Key" /> instance.</summary>
        public Key()
        {

        }
    }
    /// Encryption Key.
    public partial interface IKey :
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt
        /// each chunk, append each encrypted chunk with : to mark the end of the chunk.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk.",
        SerializedName = @"encryptionChunkSizeInBytes",
        PossibleTypes = new [] { typeof(int) })]
        int EncryptionChunkSizeInByte { get; set; }
        /// <summary>Exponent of the encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Exponent of the encryption key.",
        SerializedName = @"keyExponent",
        PossibleTypes = new [] { typeof(string) })]
        string Exponent { get; set; }
        /// <summary>Modulus of the encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Modulus of the encryption key.",
        SerializedName = @"keyModulus",
        PossibleTypes = new [] { typeof(string) })]
        string Modulu { get; set; }

    }
    /// Encryption Key.
    internal partial interface IKeyInternal

    {
        /// <summary>
        /// The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt
        /// each chunk, append each encrypted chunk with : to mark the end of the chunk.
        /// </summary>
        int EncryptionChunkSizeInByte { get; set; }
        /// <summary>Exponent of the encryption key.</summary>
        string Exponent { get; set; }
        /// <summary>Modulus of the encryption key.</summary>
        string Modulu { get; set; }

    }
}