// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Extensions;

    /// <summary>Data Service properties.</summary>
    public partial class DataServiceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.IDataServiceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Models.Api20190601.IDataServicePropertiesInternal
    {

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State _state;

        /// <summary>State of the data service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State State { get => this._state; set => this._state = value; }

        /// <summary>Backing field for <see cref="SupportedDataSinkType" /> property.</summary>
        private string[] _supportedDataSinkType;

        /// <summary>Supported data store types which can be used as a sink.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.PropertyOrigin.Owned)]
        public string[] SupportedDataSinkType { get => this._supportedDataSinkType; set => this._supportedDataSinkType = value; }

        /// <summary>Backing field for <see cref="SupportedDataSourceType" /> property.</summary>
        private string[] _supportedDataSourceType;

        /// <summary>Supported data store types which can be used as a source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.PropertyOrigin.Owned)]
        public string[] SupportedDataSourceType { get => this._supportedDataSourceType; set => this._supportedDataSourceType = value; }

        /// <summary>Creates an new <see cref="DataServiceProperties" /> instance.</summary>
        public DataServiceProperties()
        {

        }
    }
    /// Data Service properties.
    public partial interface IDataServiceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.IJsonSerializable
    {
        /// <summary>State of the data service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"State of the data service.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State) })]
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State State { get; set; }
        /// <summary>Supported data store types which can be used as a sink.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Supported data store types which can be used as a sink.",
        SerializedName = @"supportedDataSinkTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] SupportedDataSinkType { get; set; }
        /// <summary>Supported data store types which can be used as a source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Supported data store types which can be used as a source.",
        SerializedName = @"supportedDataSourceTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] SupportedDataSourceType { get; set; }

    }
    /// Data Service properties.
    internal partial interface IDataServicePropertiesInternal

    {
        /// <summary>State of the data service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Hybrid.Support.State State { get; set; }
        /// <summary>Supported data store types which can be used as a sink.</summary>
        string[] SupportedDataSinkType { get; set; }
        /// <summary>Supported data store types which can be used as a source.</summary>
        string[] SupportedDataSourceType { get; set; }

    }
}