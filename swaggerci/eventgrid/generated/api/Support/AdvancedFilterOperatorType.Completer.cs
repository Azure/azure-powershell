// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support
{

    /// <summary>
    /// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.AdvancedFilterOperatorTypeTypeConverter))]
    public partial struct AdvancedFilterOperatorType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberIn".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberIn'", "NumberIn", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberIn");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberNotIn".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberNotIn'", "NumberNotIn", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberNotIn");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberLessThan".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberLessThan'", "NumberLessThan", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberLessThan");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberGreaterThan".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberGreaterThan'", "NumberGreaterThan", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberGreaterThan");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberLessThanOrEquals".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberLessThanOrEquals'", "NumberLessThanOrEquals", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberLessThanOrEquals");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberGreaterThanOrEquals".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberGreaterThanOrEquals'", "NumberGreaterThanOrEquals", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberGreaterThanOrEquals");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BoolEquals".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BoolEquals'", "BoolEquals", global::System.Management.Automation.CompletionResultType.ParameterValue, "BoolEquals");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringIn".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringIn'", "StringIn", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringIn");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringNotIn".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringNotIn'", "StringNotIn", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringNotIn");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringBeginsWith".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringBeginsWith'", "StringBeginsWith", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringBeginsWith");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringEndsWith".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringEndsWith'", "StringEndsWith", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringEndsWith");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringContains".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringContains'", "StringContains", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringContains");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberInRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberInRange'", "NumberInRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberInRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NumberNotInRange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NumberNotInRange'", "NumberNotInRange", global::System.Management.Automation.CompletionResultType.ParameterValue, "NumberNotInRange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringNotBeginsWith".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringNotBeginsWith'", "StringNotBeginsWith", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringNotBeginsWith");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringNotEndsWith".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringNotEndsWith'", "StringNotEndsWith", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringNotEndsWith");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StringNotContains".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StringNotContains'", "StringNotContains", global::System.Management.Automation.CompletionResultType.ParameterValue, "StringNotContains");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IsNullOrUndefined".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IsNullOrUndefined'", "IsNullOrUndefined", global::System.Management.Automation.CompletionResultType.ParameterValue, "IsNullOrUndefined");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IsNotNull".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IsNotNull'", "IsNotNull", global::System.Management.Automation.CompletionResultType.ParameterValue, "IsNotNull");
            }
        }
    }
}