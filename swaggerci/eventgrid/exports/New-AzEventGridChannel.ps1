
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Synchronously creates or updates a new channel with the specified parameters.
.Description
Synchronously creates or updates a new channel with the specified parameters.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IChannel
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

PARTNERDESTINATIONINFORESOURCEMOVECHANGEHISTORY <IResourceMoveChangeHistory[]>: Change history of the resource move.
  [AzureSubscriptionId <String>]: Azure subscription ID of the resource.
  [ChangedTimeUtc <DateTime?>]: UTC timestamp of when the resource was changed.
  [ResourceGroupName <String>]: Azure Resource Group of the resource.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.eventgrid/new-azeventgridchannel
#>
function New-AzEventGridChannel {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IChannel])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ChannelName')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # Name of the channel.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # Name of the partner namespace.
    ${PartnerNamespaceName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # The name of the resource group within the partners subscription.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription credentials that uniquely identify a Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.ChannelType])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.ChannelType]
    # The type of the event channel which represents the direction flow of events.
    ${ChannelType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IEventTypeInfoInlineEventTypes]))]
    [System.Collections.Hashtable]
    # A collection of inline event types for the resource.
    # The inline event type keys are of type string which represents the name of the event.An example of a valid inline event name is "Contoso.OrderCreated".The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
    ${EventTypeInfoInlineEventType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.EventDefinitionKind])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.EventDefinitionKind]
    # The kind of event type used.
    ${EventTypeInfoKind},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.DateTime]
    # Expiration time of the channel.
    # If this timer expires while the corresponding partner topic is never activated,the channel and corresponding partner topic are deleted.
    ${ExpirationTimeIfNotActivatedUtc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Context or helpful message that can be used during the approval process by the subscriber.
    ${MessageForActivation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Azure subscription ID of the subscriber.
    # The partner destination associated with the channel will becreated under this Azure subscription.
    ${PartnerDestinationInfoAzureSubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Additional context of the partner destination endpoint.
    ${PartnerDestinationInfoEndpointServiceContext},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Name of the partner destination associated with the channel.
    ${PartnerDestinationInfoName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Azure Resource Group of the subscriber.
    # The partner destination associated with the channel will becreated under this resource group.
    ${PartnerDestinationInfoResourceGroupName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IResourceMoveChangeHistory[]]
    # Change history of the resource move.
    # To construct, see NOTES section for PARTNERDESTINATIONINFORESOURCEMOVECHANGEHISTORY properties and create a hash table.
    ${PartnerDestinationInfoResourceMoveChangeHistory},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Azure subscription ID of the subscriber.
    # The partner topic associated with the channel will becreated under this Azure subscription.
    ${PartnerTopicInfoAzureSubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Name of the partner topic associated with the channel.
    ${PartnerTopicInfoName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # Azure Resource Group of the subscriber.
    # The partner topic associated with the channel will becreated under this resource group.
    ${PartnerTopicInfoResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # The source information is provided by the publisher to determine the scope or context from which the eventsare originating.
    # This information can be used by the subscriber during the approval process of thecreated partner topic.
    ${PartnerTopicInfoSource},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.ChannelProvisioningState])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.ChannelProvisioningState]
    # Provisioning state of the channel.
    ${ProvisioningState},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.ReadinessState])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.ReadinessState]
    # The readiness state of the corresponding partner topic.
    ${ReadinessState},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.EventGrid.private\New-AzEventGridChannel_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
