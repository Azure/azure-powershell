
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Asynchronously updates a domain with the specified parameters.
.Description
Asynchronously updates a domain with the specified parameters.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INBOUNDIPRULE <IInboundIPRule[]>: This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
  [Action <IPActionType?>]: Action to perform based on the match or no match of the IpMask.
  [IPMask <String>]: IP Address in CIDR notation e.g., 10.0.0.0/8.

INPUTOBJECT <IEventGridIdentity>: Identity Parameter
  [ChannelName <String>]: Name of the channel.
  [DomainName <String>]: Name of the domain.
  [DomainTopicName <String>]: Name of the topic.
  [EventChannelName <String>]: Name of the event channel.
  [EventSubscriptionName <String>]: Name of the event subscription.
  [Id <String>]: Resource identity path
  [Location <String>]: Name of the location.
  [ParentName <String>]: The name of the parent resource (namely, either, the topic name, domain name, or partner namespace name).
  [ParentType <ParentType?>]: The type of the parent resource. This can be either \'topics\', \'domains\', or \'partnerNamespaces\'.
  [PartnerDestinationName <String>]: Name of the partner destination.
  [PartnerNamespaceName <String>]: Name of the partner namespace.
  [PartnerRegistrationName <String>]: Name of the partner registration.
  [PartnerTopicName <String>]: Name of the partner topic.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection connection.
  [PrivateLinkResourceName <String>]: The name of private link resource.
  [ProviderNamespace <String>]: Namespace of the provider of the topic.
  [ResourceGroupName <String>]: The name of the resource group within the partners subscription.
  [ResourceName <String>]: Name of the resource.
  [ResourceTypeName <String>]: Name of the resource type.
  [Scope <String>]: The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
  [SubscriptionId <String>]: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [SystemTopicName <String>]: Name of the system topic.
  [TopicName <String>]: Name of the domain topic.
  [TopicTypeName <String>]: Name of the topic type.
  [VerifiedPartnerName <String>]: Name of the verified partner.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.eventgrid/update-azeventgriddomain
#>
function Update-AzEventGridDomain {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('DomainName')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # Name of the domain.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # The name of the resource group within the user's subscription.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription credentials that uniquely identify a Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false).
    # The default value for this property is true.When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription iscreated at the scope of the domain topic.
    # If this property is set to false, then creating the first event subscription will require creating a domain topicby the user.
    # The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides theflexibility to perform less operations and manage fewer resources by the user.
    # Also, note that in auto-managed creation mode, user is allowed to create thedomain topic on demand if needed.
    ${AutoCreateTopicWithFirstSubscription},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false).
    # The default value for this property is true.When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scopeof the domain topic is deleted.
    # If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed(e.g., when last event subscription is deleted and the resource needs to be cleaned up).
    # The self-management mode can be used if the user wants fullcontrol of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewerresources by the user.
    ${AutoDeleteTopicWithLastSubscription},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.DataResidencyBoundary])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.DataResidencyBoundary]
    # The data residency boundary for the domain.
    ${DataResidencyBoundary},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # This boolean is used to enable or disable local auth.
    # Default value is false.
    # When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain.
    ${DisableLocalAuth},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # The principal ID of resource identity.
    ${IdentityPrincipalId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # The tenant ID of resource.
    ${IdentityTenantId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.IdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.IdentityType]
    # The type of managed identity used.
    # The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities.
    # The type 'None' will remove any identity.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IIdentityInfoUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The list of user identities associated with the resource.
    # The user identity dictionary key references will be ARM resource ids in the form:'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.This property is currently not used and reserved for future usage.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IInboundIPRule[]]
    # This can be used to restrict traffic from specific IPs instead of all IPs.
    # Note: These are considered only if PublicNetworkAccess is enabled.
    # To construct, see NOTES section for INBOUNDIPRULE properties and create a hash table.
    ${InboundIPRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.PublicNetworkAccess]
    # This determines if traffic is allowed over public network.
    # By default it is enabled.
    # You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules" />
    ${PublicNetworkAccess},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.Sku])]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Support.Sku]
    # The Sku name of the resource.
    # The possible values are: Basic or Premium.
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IDomainUpdateParametersTags]))]
    [System.Collections.Hashtable]
    # Tags of the domains resource.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.EventGrid.private\Update-AzEventGridDomain_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.EventGrid.private\Update-AzEventGridDomain_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
