
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Authorize a single partner either by partner registration immutable Id or by partner name.
.Description
Authorize a single partner either by partner registration immutable Id or by partner name.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IPartner
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IPartnerConfiguration
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IEventGridIdentity>: Identity Parameter
  [ChannelName <String>]: Name of the channel.
  [DomainName <String>]: Name of the domain.
  [DomainTopicName <String>]: Name of the topic.
  [EventChannelName <String>]: Name of the event channel.
  [EventSubscriptionName <String>]: Name of the event subscription.
  [Id <String>]: Resource identity path
  [Location <String>]: Name of the location.
  [ParentName <String>]: The name of the parent resource (namely, either, the topic name, domain name, or partner namespace name).
  [ParentType <ParentType?>]: The type of the parent resource. This can be either \'topics\', \'domains\', or \'partnerNamespaces\'.
  [PartnerDestinationName <String>]: Name of the partner destination.
  [PartnerNamespaceName <String>]: Name of the partner namespace.
  [PartnerRegistrationName <String>]: Name of the partner registration.
  [PartnerTopicName <String>]: Name of the partner topic.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection connection.
  [PrivateLinkResourceName <String>]: The name of private link resource.
  [ProviderNamespace <String>]: Namespace of the provider of the topic.
  [ResourceGroupName <String>]: The name of the resource group within the partners subscription.
  [ResourceName <String>]: Name of the resource.
  [ResourceTypeName <String>]: Name of the resource type.
  [Scope <String>]: The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
  [SubscriptionId <String>]: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [SystemTopicName <String>]: Name of the system topic.
  [TopicName <String>]: Name of the domain topic.
  [TopicTypeName <String>]: Name of the topic type.
  [VerifiedPartnerName <String>]: Name of the verified partner.

PARTNERINFO <IPartner>: Information about the partner.
  [AuthorizationExpirationTimeInUtc <DateTime?>]: Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's         context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.         If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
  [Name <String>]: The partner name.
  [RegistrationImmutableId <String>]: The immutableId of the corresponding partner registration.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.eventgrid/grant-azeventgridpartnerconfigurationpartner
#>
function Grant-AzEventGridPartnerConfigurationPartner {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IPartnerConfiguration])]
[CmdletBinding(DefaultParameterSetName='AuthorizeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Authorize', Mandatory)]
    [Parameter(ParameterSetName='AuthorizeExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # The name of the resource group within the user's subscription.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Authorize')]
    [Parameter(ParameterSetName='AuthorizeExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription credentials that uniquely identify a Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='AuthorizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AuthorizeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Authorize', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AuthorizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Api20211015Preview.IPartner]
    # Information about the partner.
    # To construct, see NOTES section for PARTNERINFO properties and create a hash table.
    ${PartnerInfo},

    [Parameter(ParameterSetName='AuthorizeExpanded')]
    [Parameter(ParameterSetName='AuthorizeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.DateTime]
    # Expiration time of the partner authorization.
    # If this timer expires, any request from this partner to create, update or delete resources in subscriber'scontext will fail.
    # If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
    ${AuthorizationExpirationTimeInUtc},

    [Parameter(ParameterSetName='AuthorizeExpanded')]
    [Parameter(ParameterSetName='AuthorizeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # The partner name.
    ${PartnerName},

    [Parameter(ParameterSetName='AuthorizeExpanded')]
    [Parameter(ParameterSetName='AuthorizeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Body')]
    [System.String]
    # The immutableId of the corresponding partner registration.
    ${PartnerRegistrationImmutableId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Authorize = 'Az.EventGrid.private\Grant-AzEventGridPartnerConfigurationPartner_Authorize';
            AuthorizeExpanded = 'Az.EventGrid.private\Grant-AzEventGridPartnerConfigurationPartner_AuthorizeExpanded';
            AuthorizeViaIdentity = 'Az.EventGrid.private\Grant-AzEventGridPartnerConfigurationPartner_AuthorizeViaIdentity';
            AuthorizeViaIdentityExpanded = 'Az.EventGrid.private\Grant-AzEventGridPartnerConfigurationPartner_AuthorizeViaIdentityExpanded';
        }
        if (('Authorize', 'AuthorizeExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
