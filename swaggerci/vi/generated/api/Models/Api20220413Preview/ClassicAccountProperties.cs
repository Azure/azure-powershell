// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Extensions;

    /// <summary>Azure Video Indexer classic account properties</summary>
    public partial class ClassicAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountPropertiesInternal
    {

        /// <summary>Backing field for <see cref="MediaService" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServices _mediaService;

        /// <summary>The media services details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServices MediaService { get => (this._mediaService = this._mediaService ?? new Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.ClassicAccountMediaServices()); set => this._mediaService = value; }

        /// <summary>The aad application id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public string MediaServiceAadApplicationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).AadApplicationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).AadApplicationId = value ?? null; }

        /// <summary>The aad tenant id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public string MediaServiceAadTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).AadTenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).AadTenantId = value ?? null; }

        /// <summary>Represents wether the media services is connected or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public bool? MediaServiceConnected { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).Connected; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).Connected = value ?? default(bool); }

        /// <summary>Represents if the media services event grid is connected or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public bool? MediaServiceEventGridProviderRegistered { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).EventGridProviderRegistered; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).EventGridProviderRegistered = value ?? default(bool); }

        /// <summary>The media services name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public string MediaServiceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).Name = value ?? null; }

        /// <summary>The resource group that the media services belong to</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public string MediaServiceResourceGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).ResourceGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).ResourceGroup = value ?? null; }

        /// <summary>Represents wether the media services streaming endpoint has started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public bool? MediaServiceStreamingEndpointStarted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).StreamingEndpointStarted; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).StreamingEndpointStarted = value ?? default(bool); }

        /// <summary>The media services subscriptionId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Origin(Microsoft.Azure.PowerShell.Cmdlets.Vi.PropertyOrigin.Inlined)]
        public string MediaServiceSubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).SubscriptionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServicesInternal)MediaService).SubscriptionId = value ?? null; }

        /// <summary>Internal Acessors for MediaService</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServices Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountPropertiesInternal.MediaService { get => (this._mediaService = this._mediaService ?? new Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.ClassicAccountMediaServices()); set { {_mediaService = value;} } }

        /// <summary>Creates an new <see cref="ClassicAccountProperties" /> instance.</summary>
        public ClassicAccountProperties()
        {

        }
    }
    /// Azure Video Indexer classic account properties
    public partial interface IClassicAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.IJsonSerializable
    {
        /// <summary>The aad application id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The aad application id",
        SerializedName = @"aadApplicationId",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceAadApplicationId { get; set; }
        /// <summary>The aad tenant id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The aad tenant id",
        SerializedName = @"aadTenantId",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceAadTenantId { get; set; }
        /// <summary>Represents wether the media services is connected or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents wether the media services is connected or not",
        SerializedName = @"connected",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MediaServiceConnected { get; set; }
        /// <summary>Represents if the media services event grid is connected or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents if the media services event grid is connected or not",
        SerializedName = @"eventGridProviderRegistered",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MediaServiceEventGridProviderRegistered { get; set; }
        /// <summary>The media services name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The media services name",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceName { get; set; }
        /// <summary>The resource group that the media services belong to</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource group that the media services belong to",
        SerializedName = @"resourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceResourceGroup { get; set; }
        /// <summary>Represents wether the media services streaming endpoint has started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents wether the media services streaming endpoint has started",
        SerializedName = @"streamingEndpointStarted",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MediaServiceStreamingEndpointStarted { get; set; }
        /// <summary>The media services subscriptionId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Vi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The media services subscriptionId",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceSubscriptionId { get; set; }

    }
    /// Azure Video Indexer classic account properties
    internal partial interface IClassicAccountPropertiesInternal

    {
        /// <summary>The media services details</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Vi.Models.Api20220413Preview.IClassicAccountMediaServices MediaService { get; set; }
        /// <summary>The aad application id</summary>
        string MediaServiceAadApplicationId { get; set; }
        /// <summary>The aad tenant id</summary>
        string MediaServiceAadTenantId { get; set; }
        /// <summary>Represents wether the media services is connected or not</summary>
        bool? MediaServiceConnected { get; set; }
        /// <summary>Represents if the media services event grid is connected or not</summary>
        bool? MediaServiceEventGridProviderRegistered { get; set; }
        /// <summary>The media services name</summary>
        string MediaServiceName { get; set; }
        /// <summary>The resource group that the media services belong to</summary>
        string MediaServiceResourceGroup { get; set; }
        /// <summary>Represents wether the media services streaming endpoint has started</summary>
        bool? MediaServiceStreamingEndpointStarted { get; set; }
        /// <summary>The media services subscriptionId</summary>
        string MediaServiceSubscriptionId { get; set; }

    }
}