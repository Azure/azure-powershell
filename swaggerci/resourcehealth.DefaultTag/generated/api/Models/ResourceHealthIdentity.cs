// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Extensions;

    public partial class ResourceHealthIdentity :
        Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.IResourceHealthIdentity,
        Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.IResourceHealthIdentityInternal
    {

        /// <summary>Backing field for <see cref="EventTrackingId" /> property.</summary>
        private string _eventTrackingId;

        /// <summary>Event Id which uniquely identifies ServiceHealth event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string EventTrackingId { get => this._eventTrackingId; set => this._eventTrackingId = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Resource identity path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="ImpactedResourceName" /> property.</summary>
        private string _impactedResourceName;

        /// <summary>Name of the Impacted Resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string ImpactedResourceName { get => this._impactedResourceName; set => this._impactedResourceName = value; }

        /// <summary>Backing field for <see cref="IssueName" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Support.IssueNameParameter? _issueName;

        /// <summary>The name of the emerging issue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Support.IssueNameParameter? IssueName { get => this._issueName; set => this._issueName = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="ResourceUri" /> property.</summary>
        private string _resourceUri;

        /// <summary>
        /// The fully qualified ID of the resource, including the resource name and resource type. Currently the API support not nested
        /// and one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
        /// and /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string ResourceUri { get => this._resourceUri; set => this._resourceUri = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Origin(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Creates an new <see cref="ResourceHealthIdentity" /> instance.</summary>
        public ResourceHealthIdentity()
        {

        }
    }
    public partial interface IResourceHealthIdentity :
        Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.IJsonSerializable
    {
        /// <summary>Event Id which uniquely identifies ServiceHealth event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Event Id which uniquely identifies ServiceHealth event.",
        SerializedName = @"eventTrackingId",
        PossibleTypes = new [] { typeof(string) })]
        string EventTrackingId { get; set; }
        /// <summary>Resource identity path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource identity path",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Name of the Impacted Resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the Impacted Resource.",
        SerializedName = @"impactedResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string ImpactedResourceName { get; set; }
        /// <summary>The name of the emerging issue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the emerging issue.",
        SerializedName = @"issueName",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Support.IssueNameParameter) })]
        Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Support.IssueNameParameter? IssueName { get; set; }
        /// <summary>Name of metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of metadata entity.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>The name of the resource group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceGroupName { get; set; }
        /// <summary>
        /// The fully qualified ID of the resource, including the resource name and resource type. Currently the API support not nested
        /// and one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
        /// and /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified ID of the resource, including the resource name and resource type. Currently the API support not nested and one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name} and /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}",
        SerializedName = @"resourceUri",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceUri { get; set; }
        /// <summary>The ID of the target subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the target subscription.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get; set; }

    }
    internal partial interface IResourceHealthIdentityInternal

    {
        /// <summary>Event Id which uniquely identifies ServiceHealth event.</summary>
        string EventTrackingId { get; set; }
        /// <summary>Resource identity path</summary>
        string Id { get; set; }
        /// <summary>Name of the Impacted Resource.</summary>
        string ImpactedResourceName { get; set; }
        /// <summary>The name of the emerging issue.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Support.IssueNameParameter? IssueName { get; set; }
        /// <summary>Name of metadata entity.</summary>
        string Name { get; set; }
        /// <summary>The name of the resource group.</summary>
        string ResourceGroupName { get; set; }
        /// <summary>
        /// The fully qualified ID of the resource, including the resource name and resource type. Currently the API support not nested
        /// and one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
        /// and /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        /// </summary>
        string ResourceUri { get; set; }
        /// <summary>The ID of the target subscription.</summary>
        string SubscriptionId { get; set; }

    }
}