// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Extensions;

    /// <summary>The parameters for updating the properties of a container registry.</summary>
    public partial class RegistryPropertiesUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal
    {

        /// <summary>Backing field for <see cref="AdminUserEnabled" /> property.</summary>
        private bool? _adminUserEnabled;

        /// <summary>The value that indicates whether the admin user is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public bool? AdminUserEnabled { get => this._adminUserEnabled; set => this._adminUserEnabled = value; }

        /// <summary>Backing field for <see cref="AnonymousPullEnabled" /> property.</summary>
        private bool? _anonymousPullEnabled;

        /// <summary>Enables registry-wide pull from unauthenticated clients.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public bool? AnonymousPullEnabled { get => this._anonymousPullEnabled; set => this._anonymousPullEnabled = value; }

        /// <summary>Backing field for <see cref="DataEndpointEnabled" /> property.</summary>
        private bool? _dataEndpointEnabled;

        /// <summary>Enable a single data endpoint per region for serving data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public bool? DataEndpointEnabled { get => this._dataEndpointEnabled; set => this._dataEndpointEnabled = value; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionProperty _encryption;

        /// <summary>The encryption settings of container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionProperty Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.EncryptionProperty()); set => this._encryption = value; }

        /// <summary>Indicates whether or not the encryption is enabled for container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.EncryptionStatus? EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).Status = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.EncryptionStatus)""); }

        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ExportPolicyStatus? ExportPolicyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).ExportPolicyStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).ExportPolicyStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ExportPolicyStatus)""); }

        /// <summary>The client id of the identity which will be used to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyIdentity = value ?? null; }

        /// <summary>Key vault uri to access the encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyKeyIdentifier = value ?? null; }

        /// <summary>Auto key rotation status for a CMK enabled registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public bool? KeyVaultPropertyKeyRotationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyKeyRotationEnabled; }

        /// <summary>Timestamp of the last successful key rotation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyLastKeyRotationTimestamp; }

        /// <summary>
        /// The fully qualified key identifier that includes the version of the key that is actually used for encryption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyVersionedKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyVersionedKeyIdentifier; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionProperty Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.EncryptionProperty()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultProperty = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyKeyRotationEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.KeyVaultPropertyKeyRotationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyKeyRotationEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyKeyRotationEnabled = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyLastKeyRotationTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.KeyVaultPropertyLastKeyRotationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyLastKeyRotationTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyLastKeyRotationTimestamp = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyVersionedKeyIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.KeyVaultPropertyVersionedKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyVersionedKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionPropertyInternal)Encryption).KeyVaultPropertyVersionedKeyIdentifier = value; }

        /// <summary>Internal Acessors for NetworkRuleSet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSet Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.NetworkRuleSet { get => (this._networkRuleSet = this._networkRuleSet ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.NetworkRuleSet()); set { {_networkRuleSet = value;} } }

        /// <summary>Internal Acessors for Policy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPolicies Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.Policy { get => (this._policy = this._policy ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.Policies()); set { {_policy = value;} } }

        /// <summary>Internal Acessors for PolicyExportPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IExportPolicy Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.PolicyExportPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).ExportPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).ExportPolicy = value; }

        /// <summary>Internal Acessors for PolicyQuarantinePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IQuarantinePolicy Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.PolicyQuarantinePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).QuarantinePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).QuarantinePolicy = value; }

        /// <summary>Internal Acessors for PolicyRetentionPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRetentionPolicy Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.PolicyRetentionPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicy = value; }

        /// <summary>Internal Acessors for PolicyTrustPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.ITrustPolicy Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.PolicyTrustPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).TrustPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).TrustPolicy = value; }

        /// <summary>Internal Acessors for RetentionPolicyLastUpdatedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRegistryPropertiesUpdateParametersInternal.RetentionPolicyLastUpdatedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyLastUpdatedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyLastUpdatedTime = value; }

        /// <summary>Backing field for <see cref="NetworkRuleBypassOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.NetworkRuleBypassOptions? _networkRuleBypassOption;

        /// <summary>
        /// Whether to allow trusted Azure services to access a network restricted registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.NetworkRuleBypassOptions? NetworkRuleBypassOption { get => this._networkRuleBypassOption; set => this._networkRuleBypassOption = value; }

        /// <summary>Backing field for <see cref="NetworkRuleSet" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSet _networkRuleSet;

        /// <summary>The network rule set for a container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSet NetworkRuleSet { get => (this._networkRuleSet = this._networkRuleSet ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.NetworkRuleSet()); set => this._networkRuleSet = value; }

        /// <summary>The default action of allow or deny when no other rules match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.DefaultAction? NetworkRuleSetDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSetInternal)NetworkRuleSet).DefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSetInternal)NetworkRuleSet).DefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.DefaultAction)""); }

        /// <summary>The IP ACL rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IIPRule[] NetworkRuleSetIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSetInternal)NetworkRuleSet).IPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSetInternal)NetworkRuleSet).IPRule = value ?? null /* arrayOf */; }

        /// <summary>The virtual network rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IVirtualNetworkRule[] NetworkRuleSetVirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSetInternal)NetworkRuleSet).VirtualNetworkRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSetInternal)NetworkRuleSet).VirtualNetworkRule = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Policy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPolicies _policy;

        /// <summary>The policies for a container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPolicies Policy { get => (this._policy = this._policy ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.Policies()); set => this._policy = value; }

        /// <summary>Backing field for <see cref="PublicNetworkAccess" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PublicNetworkAccess? _publicNetworkAccess;

        /// <summary>Whether or not public network access is allowed for the container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PublicNetworkAccess? PublicNetworkAccess { get => this._publicNetworkAccess; set => this._publicNetworkAccess = value; }

        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? QuarantinePolicyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).QuarantinePolicyStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).QuarantinePolicyStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus)""); }

        /// <summary>The number of days to retain an untagged manifest after which it gets purged.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public int? RetentionPolicyDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyDay = value ?? default(int); }

        /// <summary>The timestamp when the policy was last updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public global::System.DateTime? RetentionPolicyLastUpdatedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyLastUpdatedTime; }

        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? RetentionPolicyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).RetentionPolicyStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus)""); }

        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? TrustPolicyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).TrustPolicyStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).TrustPolicyStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus)""); }

        /// <summary>The type of trust policy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.TrustPolicyType? TrustPolicyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).TrustPolicyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPoliciesInternal)Policy).TrustPolicyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.TrustPolicyType)""); }

        /// <summary>Creates an new <see cref="RegistryPropertiesUpdateParameters" /> instance.</summary>
        public RegistryPropertiesUpdateParameters()
        {

        }
    }
    /// The parameters for updating the properties of a container registry.
    public partial interface IRegistryPropertiesUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.IJsonSerializable
    {
        /// <summary>The value that indicates whether the admin user is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value that indicates whether the admin user is enabled.",
        SerializedName = @"adminUserEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AdminUserEnabled { get; set; }
        /// <summary>Enables registry-wide pull from unauthenticated clients.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables registry-wide pull from unauthenticated clients.",
        SerializedName = @"anonymousPullEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AnonymousPullEnabled { get; set; }
        /// <summary>Enable a single data endpoint per region for serving data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable a single data endpoint per region for serving data.",
        SerializedName = @"dataEndpointEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DataEndpointEnabled { get; set; }
        /// <summary>Indicates whether or not the encryption is enabled for container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not the encryption is enabled for container registry.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.EncryptionStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.EncryptionStatus? EncryptionStatus { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value that indicates whether the policy is enabled or not.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ExportPolicyStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ExportPolicyStatus? ExportPolicyStatus { get; set; }
        /// <summary>The client id of the identity which will be used to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client id of the identity which will be used to access key vault.",
        SerializedName = @"identity",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyIdentity { get; set; }
        /// <summary>Key vault uri to access the encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key vault uri to access the encryption key.",
        SerializedName = @"keyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>Auto key rotation status for a CMK enabled registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Auto key rotation status for a CMK enabled registry.",
        SerializedName = @"keyRotationEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KeyVaultPropertyKeyRotationEnabled { get;  }
        /// <summary>Timestamp of the last successful key rotation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp of the last successful key rotation.",
        SerializedName = @"lastKeyRotationTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get;  }
        /// <summary>
        /// The fully qualified key identifier that includes the version of the key that is actually used for encryption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The fully qualified key identifier that includes the version of the key that is actually used for encryption.",
        SerializedName = @"versionedKeyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyVersionedKeyIdentifier { get;  }
        /// <summary>
        /// Whether to allow trusted Azure services to access a network restricted registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to allow trusted Azure services to access a network restricted registry.",
        SerializedName = @"networkRuleBypassOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.NetworkRuleBypassOptions) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.NetworkRuleBypassOptions? NetworkRuleBypassOption { get; set; }
        /// <summary>The default action of allow or deny when no other rules match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default action of allow or deny when no other rules match.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.DefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.DefaultAction? NetworkRuleSetDefaultAction { get; set; }
        /// <summary>The IP ACL rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP ACL rules.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IIPRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IIPRule[] NetworkRuleSetIPRule { get; set; }
        /// <summary>The virtual network rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The virtual network rules.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IVirtualNetworkRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IVirtualNetworkRule[] NetworkRuleSetVirtualNetworkRule { get; set; }
        /// <summary>Whether or not public network access is allowed for the container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for the container registry.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value that indicates whether the policy is enabled or not.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? QuarantinePolicyStatus { get; set; }
        /// <summary>The number of days to retain an untagged manifest after which it gets purged.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of days to retain an untagged manifest after which it gets purged.",
        SerializedName = @"days",
        PossibleTypes = new [] { typeof(int) })]
        int? RetentionPolicyDay { get; set; }
        /// <summary>The timestamp when the policy was last updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The timestamp when the policy was last updated.",
        SerializedName = @"lastUpdatedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RetentionPolicyLastUpdatedTime { get;  }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value that indicates whether the policy is enabled or not.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? RetentionPolicyStatus { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value that indicates whether the policy is enabled or not.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? TrustPolicyStatus { get; set; }
        /// <summary>The type of trust policy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of trust policy.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.TrustPolicyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.TrustPolicyType? TrustPolicyType { get; set; }

    }
    /// The parameters for updating the properties of a container registry.
    internal partial interface IRegistryPropertiesUpdateParametersInternal

    {
        /// <summary>The value that indicates whether the admin user is enabled.</summary>
        bool? AdminUserEnabled { get; set; }
        /// <summary>Enables registry-wide pull from unauthenticated clients.</summary>
        bool? AnonymousPullEnabled { get; set; }
        /// <summary>Enable a single data endpoint per region for serving data.</summary>
        bool? DataEndpointEnabled { get; set; }
        /// <summary>The encryption settings of container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IEncryptionProperty Encryption { get; set; }
        /// <summary>Key vault properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>Indicates whether or not the encryption is enabled for container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.EncryptionStatus? EncryptionStatus { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ExportPolicyStatus? ExportPolicyStatus { get; set; }
        /// <summary>The client id of the identity which will be used to access key vault.</summary>
        string KeyVaultPropertyIdentity { get; set; }
        /// <summary>Key vault uri to access the encryption key.</summary>
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>Auto key rotation status for a CMK enabled registry.</summary>
        bool? KeyVaultPropertyKeyRotationEnabled { get; set; }
        /// <summary>Timestamp of the last successful key rotation.</summary>
        global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get; set; }
        /// <summary>
        /// The fully qualified key identifier that includes the version of the key that is actually used for encryption.
        /// </summary>
        string KeyVaultPropertyVersionedKeyIdentifier { get; set; }
        /// <summary>
        /// Whether to allow trusted Azure services to access a network restricted registry.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.NetworkRuleBypassOptions? NetworkRuleBypassOption { get; set; }
        /// <summary>The network rule set for a container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.INetworkRuleSet NetworkRuleSet { get; set; }
        /// <summary>The default action of allow or deny when no other rules match.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.DefaultAction? NetworkRuleSetDefaultAction { get; set; }
        /// <summary>The IP ACL rules.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IIPRule[] NetworkRuleSetIPRule { get; set; }
        /// <summary>The virtual network rules.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IVirtualNetworkRule[] NetworkRuleSetVirtualNetworkRule { get; set; }
        /// <summary>The policies for a container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IPolicies Policy { get; set; }
        /// <summary>The export policy for a container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IExportPolicy PolicyExportPolicy { get; set; }
        /// <summary>The quarantine policy for a container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IQuarantinePolicy PolicyQuarantinePolicy { get; set; }
        /// <summary>The retention policy for a container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.IRetentionPolicy PolicyRetentionPolicy { get; set; }
        /// <summary>The content trust policy for a container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20211201Preview.ITrustPolicy PolicyTrustPolicy { get; set; }
        /// <summary>Whether or not public network access is allowed for the container registry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? QuarantinePolicyStatus { get; set; }
        /// <summary>The number of days to retain an untagged manifest after which it gets purged.</summary>
        int? RetentionPolicyDay { get; set; }
        /// <summary>The timestamp when the policy was last updated.</summary>
        global::System.DateTime? RetentionPolicyLastUpdatedTime { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? RetentionPolicyStatus { get; set; }
        /// <summary>The value that indicates whether the policy is enabled or not.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.PolicyStatus? TrustPolicyStatus { get; set; }
        /// <summary>The type of trust policy.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.TrustPolicyType? TrustPolicyType { get; set; }

    }
}