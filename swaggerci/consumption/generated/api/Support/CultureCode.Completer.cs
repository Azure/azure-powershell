// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support
{

    /// <summary>Language in which the recipient will receive the notification</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.CultureCodeTypeConverter))]
    public partial struct CultureCode :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "en-us".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'en-us'", "en-us", global::System.Management.Automation.CompletionResultType.ParameterValue, "en-us");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ja-jp".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ja-jp'", "ja-jp", global::System.Management.Automation.CompletionResultType.ParameterValue, "ja-jp");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "zh-cn".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'zh-cn'", "zh-cn", global::System.Management.Automation.CompletionResultType.ParameterValue, "zh-cn");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "de-de".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'de-de'", "de-de", global::System.Management.Automation.CompletionResultType.ParameterValue, "de-de");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "es-es".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'es-es'", "es-es", global::System.Management.Automation.CompletionResultType.ParameterValue, "es-es");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "fr-fr".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'fr-fr'", "fr-fr", global::System.Management.Automation.CompletionResultType.ParameterValue, "fr-fr");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "it-it".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'it-it'", "it-it", global::System.Management.Automation.CompletionResultType.ParameterValue, "it-it");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ko-kr".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ko-kr'", "ko-kr", global::System.Management.Automation.CompletionResultType.ParameterValue, "ko-kr");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "pt-br".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'pt-br'", "pt-br", global::System.Management.Automation.CompletionResultType.ParameterValue, "pt-br");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ru-ru".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ru-ru'", "ru-ru", global::System.Management.Automation.CompletionResultType.ParameterValue, "ru-ru");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "zh-tw".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'zh-tw'", "zh-tw", global::System.Management.Automation.CompletionResultType.ParameterValue, "zh-tw");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "cs-cz".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'cs-cz'", "cs-cz", global::System.Management.Automation.CompletionResultType.ParameterValue, "cs-cz");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "pl-pl".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'pl-pl'", "pl-pl", global::System.Management.Automation.CompletionResultType.ParameterValue, "pl-pl");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "tr-tr".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'tr-tr'", "tr-tr", global::System.Management.Automation.CompletionResultType.ParameterValue, "tr-tr");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "da-dk".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'da-dk'", "da-dk", global::System.Management.Automation.CompletionResultType.ParameterValue, "da-dk");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "en-gb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'en-gb'", "en-gb", global::System.Management.Automation.CompletionResultType.ParameterValue, "en-gb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "hu-hu".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'hu-hu'", "hu-hu", global::System.Management.Automation.CompletionResultType.ParameterValue, "hu-hu");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "nb-no".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'nb-no'", "nb-no", global::System.Management.Automation.CompletionResultType.ParameterValue, "nb-no");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "nl-nl".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'nl-nl'", "nl-nl", global::System.Management.Automation.CompletionResultType.ParameterValue, "nl-nl");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "pt-pt".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'pt-pt'", "pt-pt", global::System.Management.Automation.CompletionResultType.ParameterValue, "pt-pt");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "sv-se".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'sv-se'", "sv-se", global::System.Management.Automation.CompletionResultType.ParameterValue, "sv-se");
            }
        }
    }
}