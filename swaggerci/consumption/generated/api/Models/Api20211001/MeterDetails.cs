// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Extensions;

    /// <summary>The properties of the meter detail.</summary>
    public partial class MeterDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetails,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal
    {

        /// <summary>Backing field for <see cref="MeterCategory" /> property.</summary>
        private string _meterCategory;

        /// <summary>The category of the meter, for example, 'Cloud services', 'Networking', etc..</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterCategory { get => this._meterCategory; }

        /// <summary>Backing field for <see cref="MeterLocation" /> property.</summary>
        private string _meterLocation;

        /// <summary>The location in which the Azure service is available.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterLocation { get => this._meterLocation; }

        /// <summary>Backing field for <see cref="MeterName" /> property.</summary>
        private string _meterName;

        /// <summary>The name of the meter, within the given meter category</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterName { get => this._meterName; }

        /// <summary>Backing field for <see cref="MeterSubCategory" /> property.</summary>
        private string _meterSubCategory;

        /// <summary>
        /// The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterSubCategory { get => this._meterSubCategory; }

        /// <summary>Internal Acessors for MeterCategory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.MeterCategory { get => this._meterCategory; set { {_meterCategory = value;} } }

        /// <summary>Internal Acessors for MeterLocation</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.MeterLocation { get => this._meterLocation; set { {_meterLocation = value;} } }

        /// <summary>Internal Acessors for MeterName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.MeterName { get => this._meterName; set { {_meterName = value;} } }

        /// <summary>Internal Acessors for MeterSubCategory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.MeterSubCategory { get => this._meterSubCategory; set { {_meterSubCategory = value;} } }

        /// <summary>Internal Acessors for PretaxStandardRate</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.PretaxStandardRate { get => this._pretaxStandardRate; set { {_pretaxStandardRate = value;} } }

        /// <summary>Internal Acessors for ServiceName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.ServiceName { get => this._serviceName; set { {_serviceName = value;} } }

        /// <summary>Internal Acessors for ServiceTier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.ServiceTier { get => this._serviceTier; set { {_serviceTier = value;} } }

        /// <summary>Internal Acessors for TotalIncludedQuantity</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.TotalIncludedQuantity { get => this._totalIncludedQuantity; set { {_totalIncludedQuantity = value;} } }

        /// <summary>Internal Acessors for Unit</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetailsInternal.Unit { get => this._unit; set { {_unit = value;} } }

        /// <summary>Backing field for <see cref="PretaxStandardRate" /> property.</summary>
        private decimal? _pretaxStandardRate;

        /// <summary>The pretax listing price.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? PretaxStandardRate { get => this._pretaxStandardRate; }

        /// <summary>Backing field for <see cref="ServiceName" /> property.</summary>
        private string _serviceName;

        /// <summary>The name of the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ServiceName { get => this._serviceName; }

        /// <summary>Backing field for <see cref="ServiceTier" /> property.</summary>
        private string _serviceTier;

        /// <summary>The service tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ServiceTier { get => this._serviceTier; }

        /// <summary>Backing field for <see cref="TotalIncludedQuantity" /> property.</summary>
        private decimal? _totalIncludedQuantity;

        /// <summary>The total included quantity associated with the offer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? TotalIncludedQuantity { get => this._totalIncludedQuantity; }

        /// <summary>Backing field for <see cref="Unit" /> property.</summary>
        private string _unit;

        /// <summary>
        /// The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string Unit { get => this._unit; }

        /// <summary>Creates an new <see cref="MeterDetails" /> instance.</summary>
        public MeterDetails()
        {

        }
    }
    /// The properties of the meter detail.
    public partial interface IMeterDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IJsonSerializable
    {
        /// <summary>The category of the meter, for example, 'Cloud services', 'Networking', etc..</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The category of the meter, for example, 'Cloud services', 'Networking', etc..",
        SerializedName = @"meterCategory",
        PossibleTypes = new [] { typeof(string) })]
        string MeterCategory { get;  }
        /// <summary>The location in which the Azure service is available.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The location in which the Azure service is available.",
        SerializedName = @"meterLocation",
        PossibleTypes = new [] { typeof(string) })]
        string MeterLocation { get;  }
        /// <summary>The name of the meter, within the given meter category</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the meter, within the given meter category",
        SerializedName = @"meterName",
        PossibleTypes = new [] { typeof(string) })]
        string MeterName { get;  }
        /// <summary>
        /// The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
        SerializedName = @"meterSubCategory",
        PossibleTypes = new [] { typeof(string) })]
        string MeterSubCategory { get;  }
        /// <summary>The pretax listing price.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The pretax listing price.",
        SerializedName = @"pretaxStandardRate",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? PretaxStandardRate { get;  }
        /// <summary>The name of the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of the service.",
        SerializedName = @"serviceName",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceName { get;  }
        /// <summary>The service tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The service tier.",
        SerializedName = @"serviceTier",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceTier { get;  }
        /// <summary>The total included quantity associated with the offer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The total included quantity associated with the offer.",
        SerializedName = @"totalIncludedQuantity",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? TotalIncludedQuantity { get;  }
        /// <summary>
        /// The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string Unit { get;  }

    }
    /// The properties of the meter detail.
    internal partial interface IMeterDetailsInternal

    {
        /// <summary>The category of the meter, for example, 'Cloud services', 'Networking', etc..</summary>
        string MeterCategory { get; set; }
        /// <summary>The location in which the Azure service is available.</summary>
        string MeterLocation { get; set; }
        /// <summary>The name of the meter, within the given meter category</summary>
        string MeterName { get; set; }
        /// <summary>
        /// The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
        /// </summary>
        string MeterSubCategory { get; set; }
        /// <summary>The pretax listing price.</summary>
        decimal? PretaxStandardRate { get; set; }
        /// <summary>The name of the service.</summary>
        string ServiceName { get; set; }
        /// <summary>The service tier.</summary>
        string ServiceTier { get; set; }
        /// <summary>The total included quantity associated with the offer.</summary>
        decimal? TotalIncludedQuantity { get; set; }
        /// <summary>
        /// The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
        /// </summary>
        string Unit { get; set; }

    }
}