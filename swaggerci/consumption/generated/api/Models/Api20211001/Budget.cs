// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Extensions;

    /// <summary>A budget resource.</summary>
    public partial class Budget :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudget,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.ProxyResource();

        /// <summary>The total amount of cost to track with the budget</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public decimal? Amount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Amount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Amount = value ?? default(decimal); }

        /// <summary>The category of the budget, whether the budget tracks cost or usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string Category { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Category; }

        /// <summary>The total amount of cost which is being tracked by the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public decimal? CurrentSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpendAmount; }

        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string CurrentSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpendUnit; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string DimensionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionName = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionOperator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string[] DimensionValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionValue = value ?? null /* arrayOf */; }

        /// <summary>
        /// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
        /// the latest version or not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inherited)]
        public string ETag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).ETag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).ETag = value ?? null; }

        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilterProperties[] FilterAnd { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).FilterAnd; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).FilterAnd = value ?? null /* arrayOf */; }

        /// <summary>
        /// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the
        /// budget contains a forecast alert type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public decimal? ForecastSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpendAmount; }

        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string ForecastSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpendUnit; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Id; }

        /// <summary>Internal Acessors for Category</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.Category { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Category; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Category = value; }

        /// <summary>Internal Acessors for CurrentSpend</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.ICurrentSpend Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.CurrentSpend { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpend; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpend = value; }

        /// <summary>Internal Acessors for CurrentSpendAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.CurrentSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpendAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpendAmount = value; }

        /// <summary>Internal Acessors for CurrentSpendUnit</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.CurrentSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpendUnit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).CurrentSpendUnit = value; }

        /// <summary>Internal Acessors for DimensionOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionOperator; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).DimensionOperator = value; }

        /// <summary>Internal Acessors for Filter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilter Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.Filter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Filter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Filter = value; }

        /// <summary>Internal Acessors for FilterDimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.FilterDimension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).FilterDimension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).FilterDimension = value; }

        /// <summary>Internal Acessors for FilterTag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.FilterTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).FilterTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).FilterTag = value; }

        /// <summary>Internal Acessors for ForecastSpend</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IForecastSpend Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.ForecastSpend { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpend; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpend = value; }

        /// <summary>Internal Acessors for ForecastSpendAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.ForecastSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpendAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpendAmount = value; }

        /// <summary>Internal Acessors for ForecastSpendUnit</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.ForecastSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpendUnit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).ForecastSpendUnit = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetProperties Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.BudgetProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for TagOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagOperator; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagOperator = value; }

        /// <summary>Internal Acessors for TimePeriod</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetTimePeriod Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetInternal.TimePeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimePeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimePeriod = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Type = value; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Name; }

        /// <summary>
        /// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesNotifications Notification { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Notification; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).Notification = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetProperties _property;

        /// <summary>The properties of the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.BudgetProperties()); set => this._property = value; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string TagName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagName = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagOperator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string[] TagValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TagValue = value ?? null /* arrayOf */; }

        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
        /// and BillingAnnual are only supported by WD customers
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType? TimeGrain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimeGrain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimeGrain = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType)""); }

        /// <summary>
        /// The end date for the budget. If not provided, we default this to 10 years from the start date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public global::System.DateTime? TimePeriodEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimePeriodEndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimePeriodEndDate = value ?? default(global::System.DateTime); }

        /// <summary>The start date for the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public global::System.DateTime? TimePeriodStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimePeriodStartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesInternal)Property).TimePeriodStartDate = value ?? default(global::System.DateTime); }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal)__proxyResource).Type; }

        /// <summary>Creates an new <see cref="Budget" /> instance.</summary>
        public Budget()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// A budget resource.
    public partial interface IBudget :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResource
    {
        /// <summary>The total amount of cost to track with the budget</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The total amount of cost to track with the budget",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? Amount { get; set; }
        /// <summary>The category of the budget, whether the budget tracks cost or usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The category of the budget, whether the budget tracks cost or usage.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        string Category { get;  }
        /// <summary>The total amount of cost which is being tracked by the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The total amount of cost which is being tracked by the budget.",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CurrentSpendAmount { get;  }
        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unit of measure for the budget amount.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string CurrentSpendUnit { get;  }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        string[] DimensionValue { get; set; }
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The logical ""AND"" expression. Must have at least 2 items.",
        SerializedName = @"and",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilterProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilterProperties[] FilterAnd { get; set; }
        /// <summary>
        /// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the
        /// budget contains a forecast alert type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? ForecastSpendAmount { get;  }
        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unit of measure for the budget amount.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string ForecastSpendUnit { get;  }
        /// <summary>
        /// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
        SerializedName = @"notifications",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesNotifications) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesNotifications Notification { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string TagOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        string[] TagValue { get; set; }
        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
        /// and BillingAnnual are only supported by WD customers
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers",
        SerializedName = @"timeGrain",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType? TimeGrain { get; set; }
        /// <summary>
        /// The end date for the budget. If not provided, we default this to 10 years from the start date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The end date for the budget. If not provided, we default this to 10 years from the start date.",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TimePeriodEndDate { get; set; }
        /// <summary>The start date for the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The start date for the budget.",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TimePeriodStartDate { get; set; }

    }
    /// A budget resource.
    internal partial interface IBudgetInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IProxyResourceInternal
    {
        /// <summary>The total amount of cost to track with the budget</summary>
        decimal? Amount { get; set; }
        /// <summary>The category of the budget, whether the budget tracks cost or usage.</summary>
        string Category { get; set; }
        /// <summary>The current amount of cost which is being tracked for a budget.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.ICurrentSpend CurrentSpend { get; set; }
        /// <summary>The total amount of cost which is being tracked by the budget.</summary>
        decimal? CurrentSpendAmount { get; set; }
        /// <summary>The unit of measure for the budget amount.</summary>
        string CurrentSpendUnit { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string DimensionOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        string[] DimensionValue { get; set; }
        /// <summary>May be used to filter budgets by user-specified dimensions and/or tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilter Filter { get; set; }
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilterProperties[] FilterAnd { get; set; }
        /// <summary>Has comparison expression for a dimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetComparisonExpression FilterDimension { get; set; }
        /// <summary>Has comparison expression for a tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetComparisonExpression FilterTag { get; set; }
        /// <summary>The forecasted cost which is being tracked for a budget.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IForecastSpend ForecastSpend { get; set; }
        /// <summary>
        /// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the
        /// budget contains a forecast alert type.
        /// </summary>
        decimal? ForecastSpendAmount { get; set; }
        /// <summary>The unit of measure for the budget amount.</summary>
        string ForecastSpendUnit { get; set; }
        /// <summary>
        /// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesNotifications Notification { get; set; }
        /// <summary>The properties of the budget.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetProperties Property { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string TagOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        string[] TagValue { get; set; }
        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
        /// and BillingAnnual are only supported by WD customers
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType? TimeGrain { get; set; }
        /// <summary>
        /// Has start and end date of the budget. The start date must be first of the month and should be less than the end date.
        /// Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start
        /// date should be selected within the timegrain period. There are no restrictions on the end date.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetTimePeriod TimePeriod { get; set; }
        /// <summary>
        /// The end date for the budget. If not provided, we default this to 10 years from the start date.
        /// </summary>
        global::System.DateTime? TimePeriodEndDate { get; set; }
        /// <summary>The start date for the budget.</summary>
        global::System.DateTime? TimePeriodStartDate { get; set; }

    }
}