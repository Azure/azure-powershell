// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Extensions;

    /// <summary>The properties of the meter detail.</summary>
    public partial class MeterDetails
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetails.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetails.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IMeterDetails FromJson(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject json ? new MeterDetails(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject into a new instance of <see cref="MeterDetails" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal MeterDetails(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_meterName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("meterName"), out var __jsonMeterName) ? (string)__jsonMeterName : (string)MeterName;}
            {_meterCategory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("meterCategory"), out var __jsonMeterCategory) ? (string)__jsonMeterCategory : (string)MeterCategory;}
            {_meterSubCategory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("meterSubCategory"), out var __jsonMeterSubCategory) ? (string)__jsonMeterSubCategory : (string)MeterSubCategory;}
            {_unit = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("unit"), out var __jsonUnit) ? (string)__jsonUnit : (string)Unit;}
            {_meterLocation = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("meterLocation"), out var __jsonMeterLocation) ? (string)__jsonMeterLocation : (string)MeterLocation;}
            {_totalIncludedQuantity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNumber>("totalIncludedQuantity"), out var __jsonTotalIncludedQuantity) ? (decimal?)__jsonTotalIncludedQuantity : TotalIncludedQuantity;}
            {_pretaxStandardRate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNumber>("pretaxStandardRate"), out var __jsonPretaxStandardRate) ? (decimal?)__jsonPretaxStandardRate : PretaxStandardRate;}
            {_serviceName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("serviceName"), out var __jsonServiceName) ? (string)__jsonServiceName : (string)ServiceName;}
            {_serviceTier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString>("serviceTier"), out var __jsonServiceTier) ? (string)__jsonServiceTier : (string)ServiceTier;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="MeterDetails" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="MeterDetails" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._meterName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._meterName.ToString()) : null, "meterName" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._meterCategory)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._meterCategory.ToString()) : null, "meterCategory" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._meterSubCategory)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._meterSubCategory.ToString()) : null, "meterSubCategory" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._unit)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._unit.ToString()) : null, "unit" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._meterLocation)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._meterLocation.ToString()) : null, "meterLocation" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._totalIncludedQuantity ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNumber((decimal)this._totalIncludedQuantity) : null, "totalIncludedQuantity" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._pretaxStandardRate ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNumber((decimal)this._pretaxStandardRate) : null, "pretaxStandardRate" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._serviceName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._serviceName.ToString()) : null, "serviceName" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._serviceTier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Json.JsonString(this._serviceTier.ToString()) : null, "serviceTier" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}