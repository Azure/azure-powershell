// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Extensions;

    /// <summary>The properties of the usage detail.</summary>
    public partial class ModernUsageDetailProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AdditionalInfo" /> property.</summary>
        private string _additionalInfo;

        /// <summary>
        /// Additional details of this usage item. Use this field to get usage line item specific details such as the actual VM Size
        /// (ServiceType) or the ratio in which the reservation discount is applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string AdditionalInfo { get => this._additionalInfo; }

        /// <summary>Backing field for <see cref="BenefitId" /> property.</summary>
        private string _benefitId;

        /// <summary>Unique identifier for the applicable benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BenefitId { get => this._benefitId; }

        /// <summary>Backing field for <see cref="BenefitName" /> property.</summary>
        private string _benefitName;

        /// <summary>Name of the applicable benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BenefitName { get => this._benefitName; }

        /// <summary>Backing field for <see cref="BillingAccountId" /> property.</summary>
        private string _billingAccountId;

        /// <summary>Billing Account identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BillingAccountId { get => this._billingAccountId; }

        /// <summary>Backing field for <see cref="BillingAccountName" /> property.</summary>
        private string _billingAccountName;

        /// <summary>Name of the Billing Account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BillingAccountName { get => this._billingAccountName; }

        /// <summary>Backing field for <see cref="BillingCurrencyCode" /> property.</summary>
        private string _billingCurrencyCode;

        /// <summary>The currency defining the billed cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BillingCurrencyCode { get => this._billingCurrencyCode; }

        /// <summary>Backing field for <see cref="BillingPeriodEndDate" /> property.</summary>
        private global::System.DateTime? _billingPeriodEndDate;

        /// <summary>Billing Period End Date as in the invoice.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public global::System.DateTime? BillingPeriodEndDate { get => this._billingPeriodEndDate; }

        /// <summary>Backing field for <see cref="BillingPeriodStartDate" /> property.</summary>
        private global::System.DateTime? _billingPeriodStartDate;

        /// <summary>Billing Period Start Date as in the invoice.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public global::System.DateTime? BillingPeriodStartDate { get => this._billingPeriodStartDate; }

        /// <summary>Backing field for <see cref="BillingProfileId" /> property.</summary>
        private string _billingProfileId;

        /// <summary>
        /// Identifier for the billing profile that groups costs across invoices in the a singular billing currency across across
        /// the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases
        /// like SaaS, Marketplace, RI, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BillingProfileId { get => this._billingProfileId; }

        /// <summary>Backing field for <see cref="BillingProfileName" /> property.</summary>
        private string _billingProfileName;

        /// <summary>
        /// Name of the billing profile that groups costs across invoices in the a singular billing currency across across the customers
        /// who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like
        /// SaaS, Marketplace, RI, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string BillingProfileName { get => this._billingProfileName; }

        /// <summary>Backing field for <see cref="ChargeType" /> property.</summary>
        private string _chargeType;

        /// <summary>
        /// Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ChargeType { get => this._chargeType; }

        /// <summary>Backing field for <see cref="ConsumedService" /> property.</summary>
        private string _consumedService;

        /// <summary>
        /// Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided
        /// for marketplace usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ConsumedService { get => this._consumedService; }

        /// <summary>Backing field for <see cref="CostAllocationRuleName" /> property.</summary>
        private string _costAllocationRuleName;

        /// <summary>Name for Cost Allocation Rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string CostAllocationRuleName { get => this._costAllocationRuleName; }

        /// <summary>Backing field for <see cref="CostCenter" /> property.</summary>
        private string _costCenter;

        /// <summary>
        /// The cost center of this department if it is a department and a cost center is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string CostCenter { get => this._costCenter; }

        /// <summary>Backing field for <see cref="CostInBillingCurrency" /> property.</summary>
        private decimal? _costInBillingCurrency;

        /// <summary>ExtendedCost or blended cost before tax in billed currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? CostInBillingCurrency { get => this._costInBillingCurrency; }

        /// <summary>Backing field for <see cref="CostInPricingCurrency" /> property.</summary>
        private decimal? _costInPricingCurrency;

        /// <summary>
        /// ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? CostInPricingCurrency { get => this._costInPricingCurrency; }

        /// <summary>Backing field for <see cref="CostInUsd" /> property.</summary>
        private decimal? _costInUsd;

        /// <summary>Estimated extendedCost or blended cost before tax in USD.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? CostInUsd { get => this._costInUsd; }

        /// <summary>Backing field for <see cref="CustomerName" /> property.</summary>
        private string _customerName;

        /// <summary>Name of the customer's AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string CustomerName { get => this._customerName; }

        /// <summary>Backing field for <see cref="CustomerTenantId" /> property.</summary>
        private string _customerTenantId;

        /// <summary>Identifier of the customer's AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string CustomerTenantId { get => this._customerTenantId; }

        /// <summary>Backing field for <see cref="Date" /> property.</summary>
        private global::System.DateTime? _date;

        /// <summary>Date for the usage record.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public global::System.DateTime? Date { get => this._date; }

        /// <summary>Backing field for <see cref="EffectivePrice" /> property.</summary>
        private decimal? _effectivePrice;

        /// <summary>Effective Price that's charged for the usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? EffectivePrice { get => this._effectivePrice; }

        /// <summary>Backing field for <see cref="ExchangeRate" /> property.</summary>
        private string _exchangeRate;

        /// <summary>Exchange rate used in conversion from pricing currency to billing currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ExchangeRate { get => this._exchangeRate; }

        /// <summary>Backing field for <see cref="ExchangeRateDate" /> property.</summary>
        private global::System.DateTime? _exchangeRateDate;

        /// <summary>
        /// Date on which exchange rate used in conversion from pricing currency to billing currency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public global::System.DateTime? ExchangeRateDate { get => this._exchangeRateDate; }

        /// <summary>Backing field for <see cref="ExchangeRatePricingToBilling" /> property.</summary>
        private decimal? _exchangeRatePricingToBilling;

        /// <summary>Exchange Rate from pricing currency to billing currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? ExchangeRatePricingToBilling { get => this._exchangeRatePricingToBilling; }

        /// <summary>Backing field for <see cref="Frequency" /> property.</summary>
        private string _frequency;

        /// <summary>
        /// Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which
        /// recur every month, and UsageBased for charges based on how much a service is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string Frequency { get => this._frequency; }

        /// <summary>Backing field for <see cref="InstanceName" /> property.</summary>
        private string _instanceName;

        /// <summary>Instance Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string InstanceName { get => this._instanceName; }

        /// <summary>Backing field for <see cref="InvoiceId" /> property.</summary>
        private string _invoiceId;

        /// <summary>Invoice ID as on the invoice where the specific transaction appears.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string InvoiceId { get => this._invoiceId; }

        /// <summary>Backing field for <see cref="InvoiceSectionId" /> property.</summary>
        private string _invoiceSectionId;

        /// <summary>
        /// Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded
        /// by partners.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string InvoiceSectionId { get => this._invoiceSectionId; }

        /// <summary>Backing field for <see cref="InvoiceSectionName" /> property.</summary>
        private string _invoiceSectionName;

        /// <summary>
        /// Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by
        /// partners.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string InvoiceSectionName { get => this._invoiceSectionName; }

        /// <summary>Backing field for <see cref="IsAzureCreditEligible" /> property.</summary>
        private bool? _isAzureCreditEligible;

        /// <summary>Determines if the cost is eligible to be paid for using Azure credits.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public bool? IsAzureCreditEligible { get => this._isAzureCreditEligible; }

        /// <summary>Backing field for <see cref="MarketPrice" /> property.</summary>
        private decimal? _marketPrice;

        /// <summary>Market Price that's charged for the usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? MarketPrice { get => this._marketPrice; }

        /// <summary>Backing field for <see cref="MeterCategory" /> property.</summary>
        private string _meterCategory;

        /// <summary>Identifies the top-level service for the usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterCategory { get => this._meterCategory; }

        /// <summary>Backing field for <see cref="MeterId" /> property.</summary>
        private string _meterId;

        /// <summary>
        /// The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which
        /// the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterId { get => this._meterId; }

        /// <summary>Backing field for <see cref="MeterName" /> property.</summary>
        private string _meterName;

        /// <summary>Identifies the name of the meter against which consumption is measured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterName { get => this._meterName; }

        /// <summary>Backing field for <see cref="MeterRegion" /> property.</summary>
        private string _meterRegion;

        /// <summary>
        /// Identifies the location of the datacenter for certain services that are priced based on datacenter location.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterRegion { get => this._meterRegion; }

        /// <summary>Backing field for <see cref="MeterSubCategory" /> property.</summary>
        private string _meterSubCategory;

        /// <summary>Defines the type or sub-category of Azure service that can affect the rate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string MeterSubCategory { get => this._meterSubCategory; }

        /// <summary>Internal Acessors for AdditionalInfo</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.AdditionalInfo { get => this._additionalInfo; set { {_additionalInfo = value;} } }

        /// <summary>Internal Acessors for BenefitId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BenefitId { get => this._benefitId; set { {_benefitId = value;} } }

        /// <summary>Internal Acessors for BenefitName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BenefitName { get => this._benefitName; set { {_benefitName = value;} } }

        /// <summary>Internal Acessors for BillingAccountId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingAccountId { get => this._billingAccountId; set { {_billingAccountId = value;} } }

        /// <summary>Internal Acessors for BillingAccountName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingAccountName { get => this._billingAccountName; set { {_billingAccountName = value;} } }

        /// <summary>Internal Acessors for BillingCurrencyCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingCurrencyCode { get => this._billingCurrencyCode; set { {_billingCurrencyCode = value;} } }

        /// <summary>Internal Acessors for BillingPeriodEndDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingPeriodEndDate { get => this._billingPeriodEndDate; set { {_billingPeriodEndDate = value;} } }

        /// <summary>Internal Acessors for BillingPeriodStartDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingPeriodStartDate { get => this._billingPeriodStartDate; set { {_billingPeriodStartDate = value;} } }

        /// <summary>Internal Acessors for BillingProfileId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingProfileId { get => this._billingProfileId; set { {_billingProfileId = value;} } }

        /// <summary>Internal Acessors for BillingProfileName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.BillingProfileName { get => this._billingProfileName; set { {_billingProfileName = value;} } }

        /// <summary>Internal Acessors for ChargeType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ChargeType { get => this._chargeType; set { {_chargeType = value;} } }

        /// <summary>Internal Acessors for ConsumedService</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ConsumedService { get => this._consumedService; set { {_consumedService = value;} } }

        /// <summary>Internal Acessors for CostAllocationRuleName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CostAllocationRuleName { get => this._costAllocationRuleName; set { {_costAllocationRuleName = value;} } }

        /// <summary>Internal Acessors for CostCenter</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CostCenter { get => this._costCenter; set { {_costCenter = value;} } }

        /// <summary>Internal Acessors for CostInBillingCurrency</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CostInBillingCurrency { get => this._costInBillingCurrency; set { {_costInBillingCurrency = value;} } }

        /// <summary>Internal Acessors for CostInPricingCurrency</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CostInPricingCurrency { get => this._costInPricingCurrency; set { {_costInPricingCurrency = value;} } }

        /// <summary>Internal Acessors for CostInUsd</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CostInUsd { get => this._costInUsd; set { {_costInUsd = value;} } }

        /// <summary>Internal Acessors for CustomerName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CustomerName { get => this._customerName; set { {_customerName = value;} } }

        /// <summary>Internal Acessors for CustomerTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.CustomerTenantId { get => this._customerTenantId; set { {_customerTenantId = value;} } }

        /// <summary>Internal Acessors for Date</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.Date { get => this._date; set { {_date = value;} } }

        /// <summary>Internal Acessors for EffectivePrice</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.EffectivePrice { get => this._effectivePrice; set { {_effectivePrice = value;} } }

        /// <summary>Internal Acessors for ExchangeRate</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ExchangeRate { get => this._exchangeRate; set { {_exchangeRate = value;} } }

        /// <summary>Internal Acessors for ExchangeRateDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ExchangeRateDate { get => this._exchangeRateDate; set { {_exchangeRateDate = value;} } }

        /// <summary>Internal Acessors for ExchangeRatePricingToBilling</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ExchangeRatePricingToBilling { get => this._exchangeRatePricingToBilling; set { {_exchangeRatePricingToBilling = value;} } }

        /// <summary>Internal Acessors for Frequency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.Frequency { get => this._frequency; set { {_frequency = value;} } }

        /// <summary>Internal Acessors for InstanceName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.InstanceName { get => this._instanceName; set { {_instanceName = value;} } }

        /// <summary>Internal Acessors for InvoiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.InvoiceId { get => this._invoiceId; set { {_invoiceId = value;} } }

        /// <summary>Internal Acessors for InvoiceSectionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.InvoiceSectionId { get => this._invoiceSectionId; set { {_invoiceSectionId = value;} } }

        /// <summary>Internal Acessors for InvoiceSectionName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.InvoiceSectionName { get => this._invoiceSectionName; set { {_invoiceSectionName = value;} } }

        /// <summary>Internal Acessors for IsAzureCreditEligible</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.IsAzureCreditEligible { get => this._isAzureCreditEligible; set { {_isAzureCreditEligible = value;} } }

        /// <summary>Internal Acessors for MarketPrice</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.MarketPrice { get => this._marketPrice; set { {_marketPrice = value;} } }

        /// <summary>Internal Acessors for MeterCategory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.MeterCategory { get => this._meterCategory; set { {_meterCategory = value;} } }

        /// <summary>Internal Acessors for MeterId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.MeterId { get => this._meterId; set { {_meterId = value;} } }

        /// <summary>Internal Acessors for MeterName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.MeterName { get => this._meterName; set { {_meterName = value;} } }

        /// <summary>Internal Acessors for MeterRegion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.MeterRegion { get => this._meterRegion; set { {_meterRegion = value;} } }

        /// <summary>Internal Acessors for MeterSubCategory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.MeterSubCategory { get => this._meterSubCategory; set { {_meterSubCategory = value;} } }

        /// <summary>Internal Acessors for PartnerEarnedCreditApplied</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PartnerEarnedCreditApplied { get => this._partnerEarnedCreditApplied; set { {_partnerEarnedCreditApplied = value;} } }

        /// <summary>Internal Acessors for PartnerEarnedCreditRate</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PartnerEarnedCreditRate { get => this._partnerEarnedCreditRate; set { {_partnerEarnedCreditRate = value;} } }

        /// <summary>Internal Acessors for PartnerName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PartnerName { get => this._partnerName; set { {_partnerName = value;} } }

        /// <summary>Internal Acessors for PartnerTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PartnerTenantId { get => this._partnerTenantId; set { {_partnerTenantId = value;} } }

        /// <summary>Internal Acessors for PayGPrice</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PayGPrice { get => this._payGPrice; set { {_payGPrice = value;} } }

        /// <summary>Internal Acessors for PaygCostInBillingCurrency</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PaygCostInBillingCurrency { get => this._paygCostInBillingCurrency; set { {_paygCostInBillingCurrency = value;} } }

        /// <summary>Internal Acessors for PaygCostInUsd</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PaygCostInUsd { get => this._paygCostInUsd; set { {_paygCostInUsd = value;} } }

        /// <summary>Internal Acessors for PreviousInvoiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PreviousInvoiceId { get => this._previousInvoiceId; set { {_previousInvoiceId = value;} } }

        /// <summary>Internal Acessors for PricingCurrencyCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PricingCurrencyCode { get => this._pricingCurrencyCode; set { {_pricingCurrencyCode = value;} } }

        /// <summary>Internal Acessors for PricingModel</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.PricingModelType? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PricingModel { get => this._pricingModel; set { {_pricingModel = value;} } }

        /// <summary>Internal Acessors for Product</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.Product { get => this._product; set { {_product = value;} } }

        /// <summary>Internal Acessors for ProductIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ProductIdentifier { get => this._productIdentifier; set { {_productIdentifier = value;} } }

        /// <summary>Internal Acessors for ProductOrderId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ProductOrderId { get => this._productOrderId; set { {_productOrderId = value;} } }

        /// <summary>Internal Acessors for ProductOrderName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ProductOrderName { get => this._productOrderName; set { {_productOrderName = value;} } }

        /// <summary>Internal Acessors for Provider</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.Provider { get => this._provider; set { {_provider = value;} } }

        /// <summary>Internal Acessors for PublisherId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PublisherId { get => this._publisherId; set { {_publisherId = value;} } }

        /// <summary>Internal Acessors for PublisherName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PublisherName { get => this._publisherName; set { {_publisherName = value;} } }

        /// <summary>Internal Acessors for PublisherType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.PublisherType { get => this._publisherType; set { {_publisherType = value;} } }

        /// <summary>Internal Acessors for Quantity</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.Quantity { get => this._quantity; set { {_quantity = value;} } }

        /// <summary>Internal Acessors for ResellerMpnId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ResellerMpnId { get => this._resellerMpnId; set { {_resellerMpnId = value;} } }

        /// <summary>Internal Acessors for ResellerName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ResellerName { get => this._resellerName; set { {_resellerName = value;} } }

        /// <summary>Internal Acessors for ReservationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ReservationId { get => this._reservationId; set { {_reservationId = value;} } }

        /// <summary>Internal Acessors for ReservationName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ReservationName { get => this._reservationName; set { {_reservationName = value;} } }

        /// <summary>Internal Acessors for ResourceGroup</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ResourceGroup { get => this._resourceGroup; set { {_resourceGroup = value;} } }

        /// <summary>Internal Acessors for ResourceLocation</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ResourceLocation { get => this._resourceLocation; set { {_resourceLocation = value;} } }

        /// <summary>Internal Acessors for ResourceLocationNormalized</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ResourceLocationNormalized { get => this._resourceLocationNormalized; set { {_resourceLocationNormalized = value;} } }

        /// <summary>Internal Acessors for ServiceFamily</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ServiceFamily { get => this._serviceFamily; set { {_serviceFamily = value;} } }

        /// <summary>Internal Acessors for ServiceInfo1</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ServiceInfo1 { get => this._serviceInfo1; set { {_serviceInfo1 = value;} } }

        /// <summary>Internal Acessors for ServiceInfo2</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ServiceInfo2 { get => this._serviceInfo2; set { {_serviceInfo2 = value;} } }

        /// <summary>Internal Acessors for ServicePeriodEndDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ServicePeriodEndDate { get => this._servicePeriodEndDate; set { {_servicePeriodEndDate = value;} } }

        /// <summary>Internal Acessors for ServicePeriodStartDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.ServicePeriodStartDate { get => this._servicePeriodStartDate; set { {_servicePeriodStartDate = value;} } }

        /// <summary>Internal Acessors for SubscriptionGuid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.SubscriptionGuid { get => this._subscriptionGuid; set { {_subscriptionGuid = value;} } }

        /// <summary>Internal Acessors for SubscriptionName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.SubscriptionName { get => this._subscriptionName; set { {_subscriptionName = value;} } }

        /// <summary>Internal Acessors for Term</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.Term { get => this._term; set { {_term = value;} } }

        /// <summary>Internal Acessors for UnitOfMeasure</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.UnitOfMeasure { get => this._unitOfMeasure; set { {_unitOfMeasure = value;} } }

        /// <summary>Internal Acessors for UnitPrice</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IModernUsageDetailPropertiesInternal.UnitPrice { get => this._unitPrice; set { {_unitPrice = value;} } }

        /// <summary>Backing field for <see cref="PartnerEarnedCreditApplied" /> property.</summary>
        private string _partnerEarnedCreditApplied;

        /// <summary>Flag to indicate if partner earned credit has been applied or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PartnerEarnedCreditApplied { get => this._partnerEarnedCreditApplied; }

        /// <summary>Backing field for <see cref="PartnerEarnedCreditRate" /> property.</summary>
        private decimal? _partnerEarnedCreditRate;

        /// <summary>
        /// Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? PartnerEarnedCreditRate { get => this._partnerEarnedCreditRate; }

        /// <summary>Backing field for <see cref="PartnerName" /> property.</summary>
        private string _partnerName;

        /// <summary>Name of the partner' AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PartnerName { get => this._partnerName; }

        /// <summary>Backing field for <see cref="PartnerTenantId" /> property.</summary>
        private string _partnerTenantId;

        /// <summary>Identifier for the partner's AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PartnerTenantId { get => this._partnerTenantId; }

        /// <summary>Backing field for <see cref="PayGPrice" /> property.</summary>
        private decimal? _payGPrice;

        /// <summary>Retail price for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? PayGPrice { get => this._payGPrice; }

        /// <summary>Backing field for <see cref="PaygCostInBillingCurrency" /> property.</summary>
        private decimal? _paygCostInBillingCurrency;

        /// <summary>The amount of PayG cost before tax in billing currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? PaygCostInBillingCurrency { get => this._paygCostInBillingCurrency; }

        /// <summary>Backing field for <see cref="PaygCostInUsd" /> property.</summary>
        private decimal? _paygCostInUsd;

        /// <summary>The amount of PayG cost before tax in US Dollar currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? PaygCostInUsd { get => this._paygCostInUsd; }

        /// <summary>Backing field for <see cref="PreviousInvoiceId" /> property.</summary>
        private string _previousInvoiceId;

        /// <summary>
        /// Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PreviousInvoiceId { get => this._previousInvoiceId; }

        /// <summary>Backing field for <see cref="PricingCurrencyCode" /> property.</summary>
        private string _pricingCurrencyCode;

        /// <summary>Pricing Billing Currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PricingCurrencyCode { get => this._pricingCurrencyCode; }

        /// <summary>Backing field for <see cref="PricingModel" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.PricingModelType? _pricingModel;

        /// <summary>Identifier that indicates how the meter is priced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.PricingModelType? PricingModel { get => this._pricingModel; }

        /// <summary>Backing field for <see cref="Product" /> property.</summary>
        private string _product;

        /// <summary>
        /// Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available for Marketplace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string Product { get => this._product; }

        /// <summary>Backing field for <see cref="ProductIdentifier" /> property.</summary>
        private string _productIdentifier;

        /// <summary>
        /// Identifier for the product that has accrued charges by consumption or purchase . This is the concatenated key of productId
        /// and SkuId in partner center.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ProductIdentifier { get => this._productIdentifier; }

        /// <summary>Backing field for <see cref="ProductOrderId" /> property.</summary>
        private string _productOrderId;

        /// <summary>
        /// The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For reservations
        /// this is the Reservation Order ID.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ProductOrderId { get => this._productOrderId; }

        /// <summary>Backing field for <see cref="ProductOrderName" /> property.</summary>
        private string _productOrderName;

        /// <summary>Product Order Name. For reservations this is the SKU that was purchased.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ProductOrderName { get => this._productOrderName; }

        /// <summary>Backing field for <see cref="Provider" /> property.</summary>
        private string _provider;

        /// <summary>
        /// Identifier for Product Category or Line Of Business, Ex - Azure, Microsoft 365, AWS e.t.c
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string Provider { get => this._provider; }

        /// <summary>Backing field for <see cref="PublisherId" /> property.</summary>
        private string _publisherId;

        /// <summary>Publisher Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PublisherId { get => this._publisherId; }

        /// <summary>Backing field for <see cref="PublisherName" /> property.</summary>
        private string _publisherName;

        /// <summary>
        /// Name of the publisher of the service including Microsoft or Third Party publishers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PublisherName { get => this._publisherName; }

        /// <summary>Backing field for <see cref="PublisherType" /> property.</summary>
        private string _publisherType;

        /// <summary>
        /// Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string PublisherType { get => this._publisherType; }

        /// <summary>Backing field for <see cref="Quantity" /> property.</summary>
        private decimal? _quantity;

        /// <summary>
        /// Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? Quantity { get => this._quantity; }

        /// <summary>Backing field for <see cref="ResellerMpnId" /> property.</summary>
        private string _resellerMpnId;

        /// <summary>MPNId for the reseller associated with the subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ResellerMpnId { get => this._resellerMpnId; }

        /// <summary>Backing field for <see cref="ResellerName" /> property.</summary>
        private string _resellerName;

        /// <summary>Reseller Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ResellerName { get => this._resellerName; }

        /// <summary>Backing field for <see cref="ReservationId" /> property.</summary>
        private string _reservationId;

        /// <summary>
        /// ARM resource id of the reservation. Only applies to records relevant to reservations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ReservationId { get => this._reservationId; }

        /// <summary>Backing field for <see cref="ReservationName" /> property.</summary>
        private string _reservationName;

        /// <summary>
        /// User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only
        /// applies to records relevant to reservations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ReservationName { get => this._reservationName; }

        /// <summary>Backing field for <see cref="ResourceGroup" /> property.</summary>
        private string _resourceGroup;

        /// <summary>
        /// Name of the Azure resource group used for cohesive lifecycle management of resources.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ResourceGroup { get => this._resourceGroup; }

        /// <summary>Backing field for <see cref="ResourceLocation" /> property.</summary>
        private string _resourceLocation;

        /// <summary>Name of the resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ResourceLocation { get => this._resourceLocation; }

        /// <summary>Backing field for <see cref="ResourceLocationNormalized" /> property.</summary>
        private string _resourceLocationNormalized;

        /// <summary>Resource Location Normalized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ResourceLocationNormalized { get => this._resourceLocationNormalized; }

        /// <summary>Backing field for <see cref="ServiceFamily" /> property.</summary>
        private string _serviceFamily;

        /// <summary>
        /// List the service family for the product purchased or charged (Example: Storage ; Compute).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ServiceFamily { get => this._serviceFamily; }

        /// <summary>Backing field for <see cref="ServiceInfo1" /> property.</summary>
        private string _serviceInfo1;

        /// <summary>Service-specific metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ServiceInfo1 { get => this._serviceInfo1; }

        /// <summary>Backing field for <see cref="ServiceInfo2" /> property.</summary>
        private string _serviceInfo2;

        /// <summary>Legacy field with optional service-specific metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string ServiceInfo2 { get => this._serviceInfo2; }

        /// <summary>Backing field for <see cref="ServicePeriodEndDate" /> property.</summary>
        private global::System.DateTime? _servicePeriodEndDate;

        /// <summary>
        /// End date for the period when the service usage was rated for charges. The prices for Azure services are determined based
        /// on the rating period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public global::System.DateTime? ServicePeriodEndDate { get => this._servicePeriodEndDate; }

        /// <summary>Backing field for <see cref="ServicePeriodStartDate" /> property.</summary>
        private global::System.DateTime? _servicePeriodStartDate;

        /// <summary>
        /// Start date for the rating period when the service usage was rated for charges. The prices for Azure services are determined
        /// for the rating period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public global::System.DateTime? ServicePeriodStartDate { get => this._servicePeriodStartDate; }

        /// <summary>Backing field for <see cref="SubscriptionGuid" /> property.</summary>
        private string _subscriptionGuid;

        /// <summary>Unique Microsoft generated identifier for the Azure Subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string SubscriptionGuid { get => this._subscriptionGuid; }

        /// <summary>Backing field for <see cref="SubscriptionName" /> property.</summary>
        private string _subscriptionName;

        /// <summary>Name of the Azure Subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string SubscriptionName { get => this._subscriptionName; }

        /// <summary>Backing field for <see cref="Term" /> property.</summary>
        private string _term;

        /// <summary>
        /// Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it displays
        /// 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms displays 1 month;
        /// This is not applicable for Azure consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string Term { get => this._term; }

        /// <summary>Backing field for <see cref="UnitOfMeasure" /> property.</summary>
        private string _unitOfMeasure;

        /// <summary>
        /// Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string UnitOfMeasure { get => this._unitOfMeasure; }

        /// <summary>Backing field for <see cref="UnitPrice" /> property.</summary>
        private decimal? _unitPrice;

        /// <summary>Unit Price is the price applicable to you. (your EA or other contract price).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal? UnitPrice { get => this._unitPrice; }

        /// <summary>Creates an new <see cref="ModernUsageDetailProperties" /> instance.</summary>
        public ModernUsageDetailProperties()
        {

        }
    }
    /// The properties of the usage detail.
    public partial interface IModernUsageDetailProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Additional details of this usage item. Use this field to get usage line item specific details such as the actual VM Size
        /// (ServiceType) or the ratio in which the reservation discount is applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Additional details of this usage item. Use this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is applied.",
        SerializedName = @"additionalInfo",
        PossibleTypes = new [] { typeof(string) })]
        string AdditionalInfo { get;  }
        /// <summary>Unique identifier for the applicable benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Unique identifier for the applicable benefit.",
        SerializedName = @"benefitId",
        PossibleTypes = new [] { typeof(string) })]
        string BenefitId { get;  }
        /// <summary>Name of the applicable benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the applicable benefit.",
        SerializedName = @"benefitName",
        PossibleTypes = new [] { typeof(string) })]
        string BenefitName { get;  }
        /// <summary>Billing Account identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Billing Account identifier.",
        SerializedName = @"billingAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string BillingAccountId { get;  }
        /// <summary>Name of the Billing Account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the Billing Account.",
        SerializedName = @"billingAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string BillingAccountName { get;  }
        /// <summary>The currency defining the billed cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency defining the billed cost.",
        SerializedName = @"billingCurrencyCode",
        PossibleTypes = new [] { typeof(string) })]
        string BillingCurrencyCode { get;  }
        /// <summary>Billing Period End Date as in the invoice.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Billing Period End Date as in the invoice.",
        SerializedName = @"billingPeriodEndDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BillingPeriodEndDate { get;  }
        /// <summary>Billing Period Start Date as in the invoice.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Billing Period Start Date as in the invoice.",
        SerializedName = @"billingPeriodStartDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BillingPeriodStartDate { get;  }
        /// <summary>
        /// Identifier for the billing profile that groups costs across invoices in the a singular billing currency across across
        /// the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases
        /// like SaaS, Marketplace, RI, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier for the billing profile that groups costs across invoices in the a singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.",
        SerializedName = @"billingProfileId",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileId { get;  }
        /// <summary>
        /// Name of the billing profile that groups costs across invoices in the a singular billing currency across across the customers
        /// who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like
        /// SaaS, Marketplace, RI, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the billing profile that groups costs across invoices in the a singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.",
        SerializedName = @"billingProfileName",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileName { get;  }
        /// <summary>
        /// Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.",
        SerializedName = @"chargeType",
        PossibleTypes = new [] { typeof(string) })]
        string ChargeType { get;  }
        /// <summary>
        /// Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided
        /// for marketplace usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided for marketplace usage.",
        SerializedName = @"consumedService",
        PossibleTypes = new [] { typeof(string) })]
        string ConsumedService { get;  }
        /// <summary>Name for Cost Allocation Rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name for Cost Allocation Rule.",
        SerializedName = @"costAllocationRuleName",
        PossibleTypes = new [] { typeof(string) })]
        string CostAllocationRuleName { get;  }
        /// <summary>
        /// The cost center of this department if it is a department and a cost center is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The cost center of this department if it is a department and a cost center is provided.",
        SerializedName = @"costCenter",
        PossibleTypes = new [] { typeof(string) })]
        string CostCenter { get;  }
        /// <summary>ExtendedCost or blended cost before tax in billed currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ExtendedCost or blended cost before tax in billed currency.",
        SerializedName = @"costInBillingCurrency",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CostInBillingCurrency { get;  }
        /// <summary>
        /// ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ExtendedCost or blended cost before tax in pricing currency to correlate with prices.",
        SerializedName = @"costInPricingCurrency",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CostInPricingCurrency { get;  }
        /// <summary>Estimated extendedCost or blended cost before tax in USD.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Estimated extendedCost or blended cost before tax in USD.",
        SerializedName = @"costInUSD",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CostInUsd { get;  }
        /// <summary>Name of the customer's AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the customer's AAD tenant.",
        SerializedName = @"customerName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerName { get;  }
        /// <summary>Identifier of the customer's AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier of the customer's AAD tenant.",
        SerializedName = @"customerTenantId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerTenantId { get;  }
        /// <summary>Date for the usage record.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Date for the usage record.",
        SerializedName = @"date",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Date { get;  }
        /// <summary>Effective Price that's charged for the usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Effective Price that's charged for the usage.",
        SerializedName = @"effectivePrice",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? EffectivePrice { get;  }
        /// <summary>Exchange rate used in conversion from pricing currency to billing currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Exchange rate used in conversion from pricing currency to billing currency.",
        SerializedName = @"exchangeRate",
        PossibleTypes = new [] { typeof(string) })]
        string ExchangeRate { get;  }
        /// <summary>
        /// Date on which exchange rate used in conversion from pricing currency to billing currency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Date on which exchange rate used in conversion from pricing currency to billing currency.",
        SerializedName = @"exchangeRateDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExchangeRateDate { get;  }
        /// <summary>Exchange Rate from pricing currency to billing currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Exchange Rate from pricing currency to billing currency.",
        SerializedName = @"exchangeRatePricingToBilling",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? ExchangeRatePricingToBilling { get;  }
        /// <summary>
        /// Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which
        /// recur every month, and UsageBased for charges based on how much a service is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is used.",
        SerializedName = @"frequency",
        PossibleTypes = new [] { typeof(string) })]
        string Frequency { get;  }
        /// <summary>Instance Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Instance Name.",
        SerializedName = @"instanceName",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceName { get;  }
        /// <summary>Invoice ID as on the invoice where the specific transaction appears.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Invoice ID as on the invoice where the specific transaction appears.",
        SerializedName = @"invoiceId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceId { get;  }
        /// <summary>
        /// Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded
        /// by partners.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by partners.",
        SerializedName = @"invoiceSectionId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionId { get;  }
        /// <summary>
        /// Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by
        /// partners.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by partners.",
        SerializedName = @"invoiceSectionName",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionName { get;  }
        /// <summary>Determines if the cost is eligible to be paid for using Azure credits.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Determines if the cost is eligible to be paid for using Azure credits.",
        SerializedName = @"isAzureCreditEligible",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsAzureCreditEligible { get;  }
        /// <summary>Market Price that's charged for the usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Market Price that's charged for the usage.",
        SerializedName = @"marketPrice",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? MarketPrice { get;  }
        /// <summary>Identifies the top-level service for the usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifies the top-level service for the usage.",
        SerializedName = @"meterCategory",
        PossibleTypes = new [] { typeof(string) })]
        string MeterCategory { get;  }
        /// <summary>
        /// The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which
        /// the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.",
        SerializedName = @"meterId",
        PossibleTypes = new [] { typeof(string) })]
        string MeterId { get;  }
        /// <summary>Identifies the name of the meter against which consumption is measured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifies the name of the meter against which consumption is measured.",
        SerializedName = @"meterName",
        PossibleTypes = new [] { typeof(string) })]
        string MeterName { get;  }
        /// <summary>
        /// Identifies the location of the datacenter for certain services that are priced based on datacenter location.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifies the location of the datacenter for certain services that are priced based on datacenter location.",
        SerializedName = @"meterRegion",
        PossibleTypes = new [] { typeof(string) })]
        string MeterRegion { get;  }
        /// <summary>Defines the type or sub-category of Azure service that can affect the rate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Defines the type or sub-category of Azure service that can affect the rate.",
        SerializedName = @"meterSubCategory",
        PossibleTypes = new [] { typeof(string) })]
        string MeterSubCategory { get;  }
        /// <summary>Flag to indicate if partner earned credit has been applied or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Flag to indicate if partner earned credit has been applied or not.",
        SerializedName = @"partnerEarnedCreditApplied",
        PossibleTypes = new [] { typeof(string) })]
        string PartnerEarnedCreditApplied { get;  }
        /// <summary>
        /// Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.",
        SerializedName = @"partnerEarnedCreditRate",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? PartnerEarnedCreditRate { get;  }
        /// <summary>Name of the partner' AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the partner' AAD tenant.",
        SerializedName = @"partnerName",
        PossibleTypes = new [] { typeof(string) })]
        string PartnerName { get;  }
        /// <summary>Identifier for the partner's AAD tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier for the partner's AAD tenant.",
        SerializedName = @"partnerTenantId",
        PossibleTypes = new [] { typeof(string) })]
        string PartnerTenantId { get;  }
        /// <summary>Retail price for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Retail price for the resource.",
        SerializedName = @"payGPrice",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? PayGPrice { get;  }
        /// <summary>The amount of PayG cost before tax in billing currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount of PayG cost before tax in billing currency.",
        SerializedName = @"paygCostInBillingCurrency",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? PaygCostInBillingCurrency { get;  }
        /// <summary>The amount of PayG cost before tax in US Dollar currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount of PayG cost before tax in US Dollar currency.",
        SerializedName = @"paygCostInUSD",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? PaygCostInUsd { get;  }
        /// <summary>
        /// Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.",
        SerializedName = @"previousInvoiceId",
        PossibleTypes = new [] { typeof(string) })]
        string PreviousInvoiceId { get;  }
        /// <summary>Pricing Billing Currency.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Pricing Billing Currency.",
        SerializedName = @"pricingCurrencyCode",
        PossibleTypes = new [] { typeof(string) })]
        string PricingCurrencyCode { get;  }
        /// <summary>Identifier that indicates how the meter is priced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier that indicates how the meter is priced",
        SerializedName = @"pricingModel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.PricingModelType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.PricingModelType? PricingModel { get;  }
        /// <summary>
        /// Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available for Marketplace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available for Marketplace.",
        SerializedName = @"product",
        PossibleTypes = new [] { typeof(string) })]
        string Product { get;  }
        /// <summary>
        /// Identifier for the product that has accrued charges by consumption or purchase . This is the concatenated key of productId
        /// and SkuId in partner center.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier for the product that has accrued charges by consumption or purchase . This is the concatenated key of productId and SkuId in partner center.",
        SerializedName = @"productIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string ProductIdentifier { get;  }
        /// <summary>
        /// The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For reservations
        /// this is the Reservation Order ID.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For reservations this is the Reservation Order ID.",
        SerializedName = @"productOrderId",
        PossibleTypes = new [] { typeof(string) })]
        string ProductOrderId { get;  }
        /// <summary>Product Order Name. For reservations this is the SKU that was purchased.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Product Order Name. For reservations this is the SKU that was purchased.",
        SerializedName = @"productOrderName",
        PossibleTypes = new [] { typeof(string) })]
        string ProductOrderName { get;  }
        /// <summary>
        /// Identifier for Product Category or Line Of Business, Ex - Azure, Microsoft 365, AWS e.t.c
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier for Product Category or Line Of Business, Ex - Azure, Microsoft 365, AWS e.t.c",
        SerializedName = @"provider",
        PossibleTypes = new [] { typeof(string) })]
        string Provider { get;  }
        /// <summary>Publisher Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Publisher Id.",
        SerializedName = @"publisherId",
        PossibleTypes = new [] { typeof(string) })]
        string PublisherId { get;  }
        /// <summary>
        /// Name of the publisher of the service including Microsoft or Third Party publishers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the publisher of the service including Microsoft or Third Party publishers.",
        SerializedName = @"publisherName",
        PossibleTypes = new [] { typeof(string) })]
        string PublisherName { get;  }
        /// <summary>
        /// Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.",
        SerializedName = @"publisherType",
        PossibleTypes = new [] { typeof(string) })]
        string PublisherType { get;  }
        /// <summary>
        /// Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Measure the quantity purchased or consumed.The amount of the meter used during the billing period.",
        SerializedName = @"quantity",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? Quantity { get;  }
        /// <summary>MPNId for the reseller associated with the subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"MPNId for the reseller associated with the subscription.",
        SerializedName = @"resellerMpnId",
        PossibleTypes = new [] { typeof(string) })]
        string ResellerMpnId { get;  }
        /// <summary>Reseller Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Reseller Name.",
        SerializedName = @"resellerName",
        PossibleTypes = new [] { typeof(string) })]
        string ResellerName { get;  }
        /// <summary>
        /// ARM resource id of the reservation. Only applies to records relevant to reservations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ARM resource id of the reservation. Only applies to records relevant to reservations.",
        SerializedName = @"reservationId",
        PossibleTypes = new [] { typeof(string) })]
        string ReservationId { get;  }
        /// <summary>
        /// User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only
        /// applies to records relevant to reservations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only applies to records relevant to reservations.",
        SerializedName = @"reservationName",
        PossibleTypes = new [] { typeof(string) })]
        string ReservationName { get;  }
        /// <summary>
        /// Name of the Azure resource group used for cohesive lifecycle management of resources.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the Azure resource group used for cohesive lifecycle management of resources.",
        SerializedName = @"resourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceGroup { get;  }
        /// <summary>Name of the resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the resource location.",
        SerializedName = @"resourceLocation",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceLocation { get;  }
        /// <summary>Resource Location Normalized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource Location Normalized.",
        SerializedName = @"resourceLocationNormalized",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceLocationNormalized { get;  }
        /// <summary>
        /// List the service family for the product purchased or charged (Example: Storage ; Compute).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List the service family for the product purchased or charged (Example: Storage ; Compute).",
        SerializedName = @"serviceFamily",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceFamily { get;  }
        /// <summary>Service-specific metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Service-specific metadata.",
        SerializedName = @"serviceInfo1",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceInfo1 { get;  }
        /// <summary>Legacy field with optional service-specific metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Legacy field with optional service-specific metadata.",
        SerializedName = @"serviceInfo2",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceInfo2 { get;  }
        /// <summary>
        /// End date for the period when the service usage was rated for charges. The prices for Azure services are determined based
        /// on the rating period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End date for the period when the service usage was rated for charges. The prices for Azure services are determined based on the rating period.",
        SerializedName = @"servicePeriodEndDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodEndDate { get;  }
        /// <summary>
        /// Start date for the rating period when the service usage was rated for charges. The prices for Azure services are determined
        /// for the rating period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Start date for the rating period when the service usage was rated for charges. The prices for Azure services are determined for the rating period.",
        SerializedName = @"servicePeriodStartDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodStartDate { get;  }
        /// <summary>Unique Microsoft generated identifier for the Azure Subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Unique Microsoft generated identifier for the Azure Subscription.",
        SerializedName = @"subscriptionGuid",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionGuid { get;  }
        /// <summary>Name of the Azure Subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the Azure Subscription.",
        SerializedName = @"subscriptionName",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionName { get;  }
        /// <summary>
        /// Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it displays
        /// 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms displays 1 month;
        /// This is not applicable for Azure consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it displays 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms displays 1 month; This is not applicable for Azure consumption.",
        SerializedName = @"term",
        PossibleTypes = new [] { typeof(string) })]
        string Term { get;  }
        /// <summary>
        /// Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.",
        SerializedName = @"unitOfMeasure",
        PossibleTypes = new [] { typeof(string) })]
        string UnitOfMeasure { get;  }
        /// <summary>Unit Price is the price applicable to you. (your EA or other contract price).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Unit Price is the price applicable to you. (your EA or other contract price).",
        SerializedName = @"unitPrice",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? UnitPrice { get;  }

    }
    /// The properties of the usage detail.
    internal partial interface IModernUsageDetailPropertiesInternal

    {
        /// <summary>
        /// Additional details of this usage item. Use this field to get usage line item specific details such as the actual VM Size
        /// (ServiceType) or the ratio in which the reservation discount is applied.
        /// </summary>
        string AdditionalInfo { get; set; }
        /// <summary>Unique identifier for the applicable benefit.</summary>
        string BenefitId { get; set; }
        /// <summary>Name of the applicable benefit.</summary>
        string BenefitName { get; set; }
        /// <summary>Billing Account identifier.</summary>
        string BillingAccountId { get; set; }
        /// <summary>Name of the Billing Account.</summary>
        string BillingAccountName { get; set; }
        /// <summary>The currency defining the billed cost.</summary>
        string BillingCurrencyCode { get; set; }
        /// <summary>Billing Period End Date as in the invoice.</summary>
        global::System.DateTime? BillingPeriodEndDate { get; set; }
        /// <summary>Billing Period Start Date as in the invoice.</summary>
        global::System.DateTime? BillingPeriodStartDate { get; set; }
        /// <summary>
        /// Identifier for the billing profile that groups costs across invoices in the a singular billing currency across across
        /// the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases
        /// like SaaS, Marketplace, RI, etc.
        /// </summary>
        string BillingProfileId { get; set; }
        /// <summary>
        /// Name of the billing profile that groups costs across invoices in the a singular billing currency across across the customers
        /// who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like
        /// SaaS, Marketplace, RI, etc.
        /// </summary>
        string BillingProfileName { get; set; }
        /// <summary>
        /// Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
        /// </summary>
        string ChargeType { get; set; }
        /// <summary>
        /// Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided
        /// for marketplace usage.
        /// </summary>
        string ConsumedService { get; set; }
        /// <summary>Name for Cost Allocation Rule.</summary>
        string CostAllocationRuleName { get; set; }
        /// <summary>
        /// The cost center of this department if it is a department and a cost center is provided.
        /// </summary>
        string CostCenter { get; set; }
        /// <summary>ExtendedCost or blended cost before tax in billed currency.</summary>
        decimal? CostInBillingCurrency { get; set; }
        /// <summary>
        /// ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
        /// </summary>
        decimal? CostInPricingCurrency { get; set; }
        /// <summary>Estimated extendedCost or blended cost before tax in USD.</summary>
        decimal? CostInUsd { get; set; }
        /// <summary>Name of the customer's AAD tenant.</summary>
        string CustomerName { get; set; }
        /// <summary>Identifier of the customer's AAD tenant.</summary>
        string CustomerTenantId { get; set; }
        /// <summary>Date for the usage record.</summary>
        global::System.DateTime? Date { get; set; }
        /// <summary>Effective Price that's charged for the usage.</summary>
        decimal? EffectivePrice { get; set; }
        /// <summary>Exchange rate used in conversion from pricing currency to billing currency.</summary>
        string ExchangeRate { get; set; }
        /// <summary>
        /// Date on which exchange rate used in conversion from pricing currency to billing currency.
        /// </summary>
        global::System.DateTime? ExchangeRateDate { get; set; }
        /// <summary>Exchange Rate from pricing currency to billing currency.</summary>
        decimal? ExchangeRatePricingToBilling { get; set; }
        /// <summary>
        /// Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which
        /// recur every month, and UsageBased for charges based on how much a service is used.
        /// </summary>
        string Frequency { get; set; }
        /// <summary>Instance Name.</summary>
        string InstanceName { get; set; }
        /// <summary>Invoice ID as on the invoice where the specific transaction appears.</summary>
        string InvoiceId { get; set; }
        /// <summary>
        /// Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded
        /// by partners.
        /// </summary>
        string InvoiceSectionId { get; set; }
        /// <summary>
        /// Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by
        /// partners.
        /// </summary>
        string InvoiceSectionName { get; set; }
        /// <summary>Determines if the cost is eligible to be paid for using Azure credits.</summary>
        bool? IsAzureCreditEligible { get; set; }
        /// <summary>Market Price that's charged for the usage.</summary>
        decimal? MarketPrice { get; set; }
        /// <summary>Identifies the top-level service for the usage.</summary>
        string MeterCategory { get; set; }
        /// <summary>
        /// The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which
        /// the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
        /// </summary>
        string MeterId { get; set; }
        /// <summary>Identifies the name of the meter against which consumption is measured.</summary>
        string MeterName { get; set; }
        /// <summary>
        /// Identifies the location of the datacenter for certain services that are priced based on datacenter location.
        /// </summary>
        string MeterRegion { get; set; }
        /// <summary>Defines the type or sub-category of Azure service that can affect the rate.</summary>
        string MeterSubCategory { get; set; }
        /// <summary>Flag to indicate if partner earned credit has been applied or not.</summary>
        string PartnerEarnedCreditApplied { get; set; }
        /// <summary>
        /// Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
        /// </summary>
        decimal? PartnerEarnedCreditRate { get; set; }
        /// <summary>Name of the partner' AAD tenant.</summary>
        string PartnerName { get; set; }
        /// <summary>Identifier for the partner's AAD tenant.</summary>
        string PartnerTenantId { get; set; }
        /// <summary>Retail price for the resource.</summary>
        decimal? PayGPrice { get; set; }
        /// <summary>The amount of PayG cost before tax in billing currency.</summary>
        decimal? PaygCostInBillingCurrency { get; set; }
        /// <summary>The amount of PayG cost before tax in US Dollar currency.</summary>
        decimal? PaygCostInUsd { get; set; }
        /// <summary>
        /// Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.
        /// </summary>
        string PreviousInvoiceId { get; set; }
        /// <summary>Pricing Billing Currency.</summary>
        string PricingCurrencyCode { get; set; }
        /// <summary>Identifier that indicates how the meter is priced</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.PricingModelType? PricingModel { get; set; }
        /// <summary>
        /// Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available for Marketplace.
        /// </summary>
        string Product { get; set; }
        /// <summary>
        /// Identifier for the product that has accrued charges by consumption or purchase . This is the concatenated key of productId
        /// and SkuId in partner center.
        /// </summary>
        string ProductIdentifier { get; set; }
        /// <summary>
        /// The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For reservations
        /// this is the Reservation Order ID.
        /// </summary>
        string ProductOrderId { get; set; }
        /// <summary>Product Order Name. For reservations this is the SKU that was purchased.</summary>
        string ProductOrderName { get; set; }
        /// <summary>
        /// Identifier for Product Category or Line Of Business, Ex - Azure, Microsoft 365, AWS e.t.c
        /// </summary>
        string Provider { get; set; }
        /// <summary>Publisher Id.</summary>
        string PublisherId { get; set; }
        /// <summary>
        /// Name of the publisher of the service including Microsoft or Third Party publishers.
        /// </summary>
        string PublisherName { get; set; }
        /// <summary>
        /// Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
        /// </summary>
        string PublisherType { get; set; }
        /// <summary>
        /// Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
        /// </summary>
        decimal? Quantity { get; set; }
        /// <summary>MPNId for the reseller associated with the subscription.</summary>
        string ResellerMpnId { get; set; }
        /// <summary>Reseller Name.</summary>
        string ResellerName { get; set; }
        /// <summary>
        /// ARM resource id of the reservation. Only applies to records relevant to reservations.
        /// </summary>
        string ReservationId { get; set; }
        /// <summary>
        /// User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only
        /// applies to records relevant to reservations.
        /// </summary>
        string ReservationName { get; set; }
        /// <summary>
        /// Name of the Azure resource group used for cohesive lifecycle management of resources.
        /// </summary>
        string ResourceGroup { get; set; }
        /// <summary>Name of the resource location.</summary>
        string ResourceLocation { get; set; }
        /// <summary>Resource Location Normalized.</summary>
        string ResourceLocationNormalized { get; set; }
        /// <summary>
        /// List the service family for the product purchased or charged (Example: Storage ; Compute).
        /// </summary>
        string ServiceFamily { get; set; }
        /// <summary>Service-specific metadata.</summary>
        string ServiceInfo1 { get; set; }
        /// <summary>Legacy field with optional service-specific metadata.</summary>
        string ServiceInfo2 { get; set; }
        /// <summary>
        /// End date for the period when the service usage was rated for charges. The prices for Azure services are determined based
        /// on the rating period.
        /// </summary>
        global::System.DateTime? ServicePeriodEndDate { get; set; }
        /// <summary>
        /// Start date for the rating period when the service usage was rated for charges. The prices for Azure services are determined
        /// for the rating period.
        /// </summary>
        global::System.DateTime? ServicePeriodStartDate { get; set; }
        /// <summary>Unique Microsoft generated identifier for the Azure Subscription.</summary>
        string SubscriptionGuid { get; set; }
        /// <summary>Name of the Azure Subscription.</summary>
        string SubscriptionName { get; set; }
        /// <summary>
        /// Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it displays
        /// 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms displays 1 month;
        /// This is not applicable for Azure consumption.
        /// </summary>
        string Term { get; set; }
        /// <summary>
        /// Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
        /// </summary>
        string UnitOfMeasure { get; set; }
        /// <summary>Unit Price is the price applicable to you. (your EA or other contract price).</summary>
        decimal? UnitPrice { get; set; }

    }
}