// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Extensions;

    /// <summary>The notification associated with a budget.</summary>
    public partial class Notification :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.INotification,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.INotificationInternal
    {

        /// <summary>Backing field for <see cref="ContactEmail" /> property.</summary>
        private string[] _contactEmail;

        /// <summary>
        /// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email
        /// or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact
        /// email specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string[] ContactEmail { get => this._contactEmail; set => this._contactEmail = value; }

        /// <summary>Backing field for <see cref="ContactGroup" /> property.</summary>
        private string[] _contactGroup;

        /// <summary>
        /// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified
        /// Azure resource id. Only supported at Subscription or Resource Group scopes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string[] ContactGroup { get => this._contactGroup; set => this._contactGroup = value; }

        /// <summary>Backing field for <see cref="ContactRole" /> property.</summary>
        private string[] _contactRole;

        /// <summary>
        /// Contact roles to send the budget notification to when the threshold is exceeded.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string[] ContactRole { get => this._contactRole; set => this._contactRole = value; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool _enabled;

        /// <summary>The notification is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public bool Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="Locale" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.CultureCode? _locale;

        /// <summary>Language in which the recipient will receive the notification</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.CultureCode? Locale { get => this._locale; set => this._locale = value; }

        /// <summary>Backing field for <see cref="Operator" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.OperatorType _operator;

        /// <summary>The comparison operator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.OperatorType Operator { get => this._operator; set => this._operator = value; }

        /// <summary>Backing field for <see cref="Threshold" /> property.</summary>
        private decimal _threshold;

        /// <summary>
        /// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always
        /// percent and has to be between 0 and 1000.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal Threshold { get => this._threshold; set => this._threshold = value; }

        /// <summary>Backing field for <see cref="ThresholdType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.ThresholdType? _thresholdType;

        /// <summary>The type of threshold</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.ThresholdType? ThresholdType { get => this._thresholdType; set => this._thresholdType = value; }

        /// <summary>Creates an new <see cref="Notification" /> instance.</summary>
        public Notification()
        {

        }
    }
    /// The notification associated with a budget.
    public partial interface INotification :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email
        /// or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact
        /// email specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.",
        SerializedName = @"contactEmails",
        PossibleTypes = new [] { typeof(string) })]
        string[] ContactEmail { get; set; }
        /// <summary>
        /// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified
        /// Azure resource id. Only supported at Subscription or Resource Group scopes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.",
        SerializedName = @"contactGroups",
        PossibleTypes = new [] { typeof(string) })]
        string[] ContactGroup { get; set; }
        /// <summary>
        /// Contact roles to send the budget notification to when the threshold is exceeded.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Contact roles to send the budget notification to when the threshold is exceeded.",
        SerializedName = @"contactRoles",
        PossibleTypes = new [] { typeof(string) })]
        string[] ContactRole { get; set; }
        /// <summary>The notification is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The notification is enabled or not.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool Enabled { get; set; }
        /// <summary>Language in which the recipient will receive the notification</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Language in which the recipient will receive the notification",
        SerializedName = @"locale",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.CultureCode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.CultureCode? Locale { get; set; }
        /// <summary>The comparison operator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The comparison operator.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.OperatorType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.OperatorType Operator { get; set; }
        /// <summary>
        /// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always
        /// percent and has to be between 0 and 1000.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
        SerializedName = @"threshold",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal Threshold { get; set; }
        /// <summary>The type of threshold</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of threshold",
        SerializedName = @"thresholdType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.ThresholdType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.ThresholdType? ThresholdType { get; set; }

    }
    /// The notification associated with a budget.
    internal partial interface INotificationInternal

    {
        /// <summary>
        /// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email
        /// or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact
        /// email specified.
        /// </summary>
        string[] ContactEmail { get; set; }
        /// <summary>
        /// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified
        /// Azure resource id. Only supported at Subscription or Resource Group scopes.
        /// </summary>
        string[] ContactGroup { get; set; }
        /// <summary>
        /// Contact roles to send the budget notification to when the threshold is exceeded.
        /// </summary>
        string[] ContactRole { get; set; }
        /// <summary>The notification is enabled or not.</summary>
        bool Enabled { get; set; }
        /// <summary>Language in which the recipient will receive the notification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.CultureCode? Locale { get; set; }
        /// <summary>The comparison operator.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.OperatorType Operator { get; set; }
        /// <summary>
        /// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always
        /// percent and has to be between 0 and 1000.
        /// </summary>
        decimal Threshold { get; set; }
        /// <summary>The type of threshold</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.ThresholdType? ThresholdType { get; set; }

    }
}