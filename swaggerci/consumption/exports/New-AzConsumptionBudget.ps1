
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to create or update a budget.
You can optionally provide an eTag if desired as a form of concurrency control.
To obtain the latest eTag for a given budget, perform a get operation prior to your put operation.
.Description
The operation to create or update a budget.
You can optionally provide an eTag if desired as a form of concurrency control.
To obtain the latest eTag for a given budget, perform a get operation prior to your put operation.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudget
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

FILTERAND <IBudgetFilterProperties[]>: The logical "AND" expression. Must have at least 2 items.
  [DimensionName <String>]: The name of the column to use in comparison.
  [DimensionValue <String[]>]: Array of values to use for comparison
  [TagName <String>]: The name of the column to use in comparison.
  [TagValue <String[]>]: Array of values to use for comparison
.Link
https://docs.microsoft.com/en-us/powershell/module/az.consumption/new-azconsumptionbudget
#>
function New-AzConsumptionBudget {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudget])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('BudgetName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Path')]
    [System.String]
    # Budget Name.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Path')]
    [System.String]
    # The scope associated with budget operations.
    # This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope.
    ${Scope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.Decimal]
    # The total amount of cost to track with the budget
    ${Amount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.String]
    # The name of the column to use in comparison.
    ${DimensionName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.String[]]
    # Array of values to use for comparison
    ${DimensionValue},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.String]
    # eTag of the resource.
    # To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
    ${ETag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetFilterProperties[]]
    # The logical "AND" expression.
    # Must have at least 2 items.
    # To construct, see NOTES section for FILTERAND properties and create a hash table.
    ${FilterAnd},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20211001.IBudgetPropertiesNotifications]))]
    [System.Collections.Hashtable]
    # Dictionary of notifications associated with the budget.
    # Budget can have up to five notifications.
    ${Notification},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.String]
    # The name of the column to use in comparison.
    ${TagName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.String[]]
    # Array of values to use for comparison
    ${TagValue},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType]
    # The time covered by a budget.
    # Tracking of the amount will be reset based on the time grain.
    # BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
    ${TimeGrain},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.DateTime]
    # The end date for the budget.
    # If not provided, we default this to 10 years from the start date.
    ${TimePeriodEndDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Body')]
    [System.DateTime]
    # The start date for the budget.
    ${TimePeriodStartDate},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Consumption.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Consumption.private\New-AzConsumptionBudget_CreateExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Consumption.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
