
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates an existing search service in the given resource group.
.Description
Updates an existing search service in the given resource group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Search.Models.ISearchIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20200801.ISearchService
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ISearchIdentity>: Identity Parameter
  [Id <String>]: Resource identity path
  [Key <String>]: The query key to be deleted. Query keys are identified by value, not by name.
  [KeyKind <AdminKeyKind?>]: Specifies which key to regenerate. Valid values include 'primary' and 'secondary'.
  [Name <String>]: The name of the new query API key.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection to the Azure Cognitive Search service with the specified resource group.
  [ResourceGroupName <String>]: The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.
  [SearchServiceName <String>]: The name of the Azure Cognitive Search service associated with the specified resource group.
  [SharedPrivateLinkResourceName <String>]: The name of the shared private link resource managed by the Azure Cognitive Search service within the specified resource group.
  [SubscriptionId <String>]: The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.

NETWORKRULESETIPRULE <IIPRule[]>: A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service endpoint. At the meantime, all other public IP networks are blocked by the firewall. These restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public interface is not allowed even with any public IP rules, and private endpoint connections would be the exclusive access method.
  [Value <String>]: Value corresponding to a single IPv4 address (eg., 123.1.2.3) or an IP range in CIDR format (eg., 123.1.2.3/24) to be allowed.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.search/update-azsearchservice
#>
function Update-AzSearchService {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20200801.ISearchService])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Path')]
    [System.String]
    # The name of the resource group within the current subscription.
    # You can obtain this value from the Azure Resource Manager API or the portal.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Path')]
    [System.String]
    # The name of the Azure Cognitive Search service to update.
    ${SearchServiceName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The unique identifier for a Microsoft Azure subscription.
    # You can obtain this value from the Azure Resource Manager API or the portal.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Models.ISearchIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Header')]
    [System.String]
    # A client-generated GUID value that identifies this request.
    # If specified, this will be included in response information as a way to track the request.
    ${ClientRequestId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Search.Support.HostingMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Support.HostingMode]
    # Applicable only for the standard3 SKU.
    # You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU.
    # For the standard3 SKU, the value is either 'default' or 'highDensity'.
    # For all other SKUs, this value must be 'default'.
    ${HostingMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Search.Support.IdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Support.IdentityType]
    # The identity type.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [System.String]
    # The geographic location of the resource.
    # This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth).
    # This property is required when creating a new resource.
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20200801.IIPRule[]]
    # A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service endpoint.
    # At the meantime, all other public IP networks are blocked by the firewall.
    # These restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public interface is not allowed even with any public IP rules, and private endpoint connections would be the exclusive access method.
    # To construct, see NOTES section for NETWORKRULESETIPRULE properties and create a hash table.
    ${NetworkRuleSetIPRule},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [System.Int32]
    # The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12.
    # Values greater than 1 are only valid for standard SKUs.
    # For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
    ${PartitionCount},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Search.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Support.PublicNetworkAccess]
    # This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates.
    # If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
    ${PublicNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [System.Int32]
    # The number of replicas in the search service.
    # If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
    ${ReplicaCount},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName])]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName]
    # The SKU of the search service.
    # Valid values include: 'free': Shared service.
    # 'basic': Dedicated service with up to 3 replicas.
    # 'standard': Dedicated service with up to 12 partitions and 12 replicas.
    # 'standard2': Similar to standard, but with more capacity per search unit.
    # 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity').
    # 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions.
    # 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20200801.ISearchServiceUpdateTags]))]
    [System.Collections.Hashtable]
    # Tags to help categorize the resource in the Azure portal.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Search.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Search.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Search.private\Update-AzSearchService_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Search.private\Update-AzSearchService_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Search.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
