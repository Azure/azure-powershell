// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Extensions;

    /// <summary>Properties of availability state.</summary>
    public partial class AvailabilityStatusProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject into a new instance of <see cref="AvailabilityStatusProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal AvailabilityStatusProperties(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_recentlyResolved = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject>("recentlyResolved"), out var __jsonRecentlyResolved) ? Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.AvailabilityStatusPropertiesRecentlyResolved.FromJson(__jsonRecentlyResolved) : RecentlyResolved;}
            {_availabilityState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("availabilityState"), out var __jsonAvailabilityState) ? (string)__jsonAvailabilityState : (string)AvailabilityState;}
            {_title = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("title"), out var __jsonTitle) ? (string)__jsonTitle : (string)Title;}
            {_summary = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("summary"), out var __jsonSummary) ? (string)__jsonSummary : (string)Summary;}
            {_detailedStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("detailedStatus"), out var __jsonDetailedStatus) ? (string)__jsonDetailedStatus : (string)DetailedStatus;}
            {_reasonType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("reasonType"), out var __jsonReasonType) ? (string)__jsonReasonType : (string)ReasonType;}
            {_rootCauseAttributionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("rootCauseAttributionTime"), out var __jsonRootCauseAttributionTime) ? global::System.DateTime.TryParse((string)__jsonRootCauseAttributionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonRootCauseAttributionTimeValue) ? __jsonRootCauseAttributionTimeValue : RootCauseAttributionTime : RootCauseAttributionTime;}
            {_healthEventType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("healthEventType"), out var __jsonHealthEventType) ? (string)__jsonHealthEventType : (string)HealthEventType;}
            {_healthEventCause = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("healthEventCause"), out var __jsonHealthEventCause) ? (string)__jsonHealthEventCause : (string)HealthEventCause;}
            {_healthEventCategory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("healthEventCategory"), out var __jsonHealthEventCategory) ? (string)__jsonHealthEventCategory : (string)HealthEventCategory;}
            {_healthEventId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("healthEventId"), out var __jsonHealthEventId) ? (string)__jsonHealthEventId : (string)HealthEventId;}
            {_resolutionEta = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("resolutionETA"), out var __jsonResolutionEta) ? global::System.DateTime.TryParse((string)__jsonResolutionEta, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonResolutionEtaValue) ? __jsonResolutionEtaValue : ResolutionEta : ResolutionEta;}
            {_occurredTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("occurredTime"), out var __jsonOccurredTime) ? global::System.DateTime.TryParse((string)__jsonOccurredTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonOccurredTimeValue) ? __jsonOccurredTimeValue : OccurredTime : OccurredTime;}
            {_reasonChronicity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("reasonChronicity"), out var __jsonReasonChronicity) ? (string)__jsonReasonChronicity : (string)ReasonChronicity;}
            {_reportedTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString>("reportedTime"), out var __jsonReportedTime) ? global::System.DateTime.TryParse((string)__jsonReportedTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonReportedTimeValue) ? __jsonReportedTimeValue : ReportedTime : ReportedTime;}
            {_recommendedAction = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonArray>("recommendedActions"), out var __jsonRecommendedActions) ? If( __jsonRecommendedActions as Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IRecommendedAction[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IRecommendedAction) (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.RecommendedAction.FromJson(__u) )) ))() : null : RecommendedAction;}
            {_serviceImpactingEvent = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonArray>("serviceImpactingEvents"), out var __jsonServiceImpactingEvents) ? If( __jsonServiceImpactingEvents as Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IServiceImpactingEvent[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IServiceImpactingEvent) (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.ServiceImpactingEvent.FromJson(__p) )) ))() : null : ServiceImpactingEvent;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IAvailabilityStatusProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IAvailabilityStatusProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Models.Api20200501.IAvailabilityStatusProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject json ? new AvailabilityStatusProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="AvailabilityStatusProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="AvailabilityStatusProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._recentlyResolved ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) this._recentlyResolved.ToJson(null,serializationMode) : null, "recentlyResolved" ,container.Add );
            AddIf( null != (((object)this._availabilityState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._availabilityState.ToString()) : null, "availabilityState" ,container.Add );
            AddIf( null != (((object)this._title)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._title.ToString()) : null, "title" ,container.Add );
            AddIf( null != (((object)this._summary)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._summary.ToString()) : null, "summary" ,container.Add );
            AddIf( null != (((object)this._detailedStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._detailedStatus.ToString()) : null, "detailedStatus" ,container.Add );
            AddIf( null != (((object)this._reasonType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._reasonType.ToString()) : null, "reasonType" ,container.Add );
            AddIf( null != this._rootCauseAttributionTime ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._rootCauseAttributionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "rootCauseAttributionTime" ,container.Add );
            AddIf( null != (((object)this._healthEventType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._healthEventType.ToString()) : null, "healthEventType" ,container.Add );
            AddIf( null != (((object)this._healthEventCause)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._healthEventCause.ToString()) : null, "healthEventCause" ,container.Add );
            AddIf( null != (((object)this._healthEventCategory)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._healthEventCategory.ToString()) : null, "healthEventCategory" ,container.Add );
            AddIf( null != (((object)this._healthEventId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._healthEventId.ToString()) : null, "healthEventId" ,container.Add );
            AddIf( null != this._resolutionEta ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._resolutionEta?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "resolutionETA" ,container.Add );
            AddIf( null != this._occurredTime ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._occurredTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "occurredTime" ,container.Add );
            AddIf( null != (((object)this._reasonChronicity)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._reasonChronicity.ToString()) : null, "reasonChronicity" ,container.Add );
            AddIf( null != this._reportedTime ? (Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.JsonString(this._reportedTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "reportedTime" ,container.Add );
            if (null != this._recommendedAction)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.XNodeArray();
                foreach( var __x in this._recommendedAction )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("recommendedActions",__w);
            }
            if (null != this._serviceImpactingEvent)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.ResourceHealth.Runtime.Json.XNodeArray();
                foreach( var __s in this._serviceImpactingEvent )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("serviceImpactingEvents",__r);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}