// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support
{

    /// <summary>
    /// The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
    /// </summary>
    public partial struct LiveEventResourceState :
        System.IEquatable<LiveEventResourceState>
    {
        /// <summary>
        /// Allocate action was called on the live event and resources are being provisioned for this live event. Once allocation
        /// completes successfully, the live event will transition to StandBy state.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState Allocating = @"Allocating";

        /// <summary>
        /// The live event is being deleted. No billing occurs in this transient state. Updates or streaming are not allowed during
        /// this state.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState Deleting = @"Deleting";

        /// <summary>
        /// The live event resources have been allocated, ingest and preview URLs have been generated, and it is capable of receiving
        /// live streams. At this point, billing is active. You must explicitly call Stop on the live event resource to halt further
        /// billing.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState Running = @"Running";

        /// <summary>
        /// Live event resources have been provisioned and is ready to start. Billing occurs in this state. Most properties can still
        /// be updated, however ingest or streaming is not allowed during this state.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState StandBy = @"StandBy";

        /// <summary>
        /// The live event is being started and resources are being allocated. No billing occurs in this state. Updates or streaming
        /// are not allowed during this state. If an error occurs, the live event returns to the Stopped state.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState Starting = @"Starting";

        /// <summary>
        /// This is the initial state of the live event after creation (unless autostart was set to true.) No billing occurs in this
        /// state. In this state, the live event properties can be updated but streaming is not allowed.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState Stopped = @"Stopped";

        /// <summary>
        /// The live event is being stopped and resources are being de-provisioned. No billing occurs in this transient state. Updates
        /// or streaming are not allowed during this state.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState Stopping = @"Stopping";

        /// <summary>the value for an instance of the <see cref="LiveEventResourceState" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to LiveEventResourceState</summary>
        /// <param name="value">the value to convert to an instance of <see cref="LiveEventResourceState" />.</param>
        internal static object CreateFrom(object value)
        {
            return new LiveEventResourceState(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type LiveEventResourceState</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type LiveEventResourceState (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is LiveEventResourceState && Equals((LiveEventResourceState)obj);
        }

        /// <summary>Returns hashCode for enum LiveEventResourceState</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="LiveEventResourceState"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private LiveEventResourceState(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for LiveEventResourceState</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to LiveEventResourceState</summary>
        /// <param name="value">the value to convert to an instance of <see cref="LiveEventResourceState" />.</param>

        public static implicit operator LiveEventResourceState(string value)
        {
            return new LiveEventResourceState(value);
        }

        /// <summary>Implicit operator to convert LiveEventResourceState to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="LiveEventResourceState" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum LiveEventResourceState</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum LiveEventResourceState</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState e2)
        {
            return e2.Equals(e1);
        }
    }
}