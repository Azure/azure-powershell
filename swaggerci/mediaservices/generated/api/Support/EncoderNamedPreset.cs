// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support
{

    /// <summary>The built-in preset to be used for encoding videos.</summary>
    public partial struct EncoderNamedPreset :
        System.IEquatable<EncoderNamedPreset>
    {
        /// <summary>Produces a single MP4 file containing only stereo audio encoded at 192 kbps.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset AacGoodQualityAudio = @"AACGoodQualityAudio";

        /// <summary>
        /// Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on
        /// the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example,
        /// if the input is 720p, output will remain 720p at best.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset AdaptiveStreaming = @"AdaptiveStreaming";

        /// <summary>
        /// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial
        /// lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate
        /// bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and
        /// medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good
        /// experience to viewers. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset ContentAwareEncoding = @"ContentAwareEncoding";

        /// <summary>
        /// Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically
        /// determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming.
        /// The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset ContentAwareEncodingExperimental = @"ContentAwareEncodingExperimental";

        /// <summary>
        /// Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can
        /// be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset CopyAllBitrateNonInterleaved = @"CopyAllBitrateNonInterleaved";

        /// <summary>
        /// Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts
        /// at 1080p and goes down to 180p.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H264MultipleBitrate1080P = @"H264MultipleBitrate1080p";

        /// <summary>
        /// Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts
        /// at 720p and goes down to 180p.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H264MultipleBitrate720P = @"H264MultipleBitrate720p";

        /// <summary>
        /// Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts
        /// at 480p and goes down to 240p.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H264MultipleBitrateSd = @"H264MultipleBitrateSD";

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and
        /// the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H264SingleBitrate1080P = @"H264SingleBitrate1080p";

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and
        /// the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H264SingleBitrate720P = @"H264SingleBitrate720p";

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and
        /// the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H264SingleBitrateSd = @"H264SingleBitrateSD";

        /// <summary>
        /// Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on
        /// the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example,
        /// if the input is 720p, output will remain 720p at best.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H265AdaptiveStreaming = @"H265AdaptiveStreaming";

        /// <summary>
        /// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial
        /// lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate
        /// bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and
        /// medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good
        /// experience to viewers. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H265ContentAwareEncoding = @"H265ContentAwareEncoding";

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and
        /// the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H265SingleBitrate1080P = @"H265SingleBitrate1080p";

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and
        /// the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H265SingleBitrate4K = @"H265SingleBitrate4K";

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and
        /// the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset H265SingleBitrate720P = @"H265SingleBitrate720p";

        /// <summary>the value for an instance of the <see cref="EncoderNamedPreset" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to EncoderNamedPreset</summary>
        /// <param name="value">the value to convert to an instance of <see cref="EncoderNamedPreset" />.</param>
        internal static object CreateFrom(object value)
        {
            return new EncoderNamedPreset(global::System.Convert.ToString(value));
        }

        /// <summary>Creates an instance of the <see cref="EncoderNamedPreset"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private EncoderNamedPreset(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Compares values of enum type EncoderNamedPreset</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type EncoderNamedPreset (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is EncoderNamedPreset && Equals((EncoderNamedPreset)obj);
        }

        /// <summary>Returns hashCode for enum EncoderNamedPreset</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for EncoderNamedPreset</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to EncoderNamedPreset</summary>
        /// <param name="value">the value to convert to an instance of <see cref="EncoderNamedPreset" />.</param>

        public static implicit operator EncoderNamedPreset(string value)
        {
            return new EncoderNamedPreset(value);
        }

        /// <summary>Implicit operator to convert EncoderNamedPreset to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="EncoderNamedPreset" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum EncoderNamedPreset</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum EncoderNamedPreset</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset e2)
        {
            return e2.Equals(e1);
        }
    }
}