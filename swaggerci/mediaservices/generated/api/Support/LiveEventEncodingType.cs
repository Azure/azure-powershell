// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support
{

    /// <summary>
    /// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through
    /// the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder
    /// transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for
    /// more information. This property cannot be modified after the live event is created.
    /// </summary>
    public partial struct LiveEventEncodingType :
        System.IEquatable<LiveEventEncodingType>
    {
        /// <summary>
        /// This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType None = @"None";

        /// <summary>
        /// The ingested stream passes through the live event from the contribution encoder without any further processing. In the
        /// PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription
        /// is not available.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType PassthroughBasic = @"PassthroughBasic";

        /// <summary>
        /// The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription
        /// is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType PassthroughStandard = @"PassthroughStandard";

        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate
        /// streams. The output cannot exceed 1080p in resolution.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType Premium1080P = @"Premium1080p";

        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate
        /// streams. The output cannot exceed 720p in resolution.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType Standard = @"Standard";

        /// <summary>the value for an instance of the <see cref="LiveEventEncodingType" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to LiveEventEncodingType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="LiveEventEncodingType" />.</param>
        internal static object CreateFrom(object value)
        {
            return new LiveEventEncodingType(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type LiveEventEncodingType</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type LiveEventEncodingType (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is LiveEventEncodingType && Equals((LiveEventEncodingType)obj);
        }

        /// <summary>Returns hashCode for enum LiveEventEncodingType</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="LiveEventEncodingType"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private LiveEventEncodingType(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for LiveEventEncodingType</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to LiveEventEncodingType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="LiveEventEncodingType" />.</param>

        public static implicit operator LiveEventEncodingType(string value)
        {
            return new LiveEventEncodingType(value);
        }

        /// <summary>Implicit operator to convert LiveEventEncodingType to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="LiveEventEncodingType" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum LiveEventEncodingType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum LiveEventEncodingType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType e2)
        {
            return e2.Equals(e1);
        }
    }
}