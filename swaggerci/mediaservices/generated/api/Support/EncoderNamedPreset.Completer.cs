// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support
{

    /// <summary>The built-in preset to be used for encoding videos.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPresetTypeConverter))]
    public partial struct EncoderNamedPreset :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H264SingleBitrateSD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H264SingleBitrateSD'", "H264SingleBitrateSD", global::System.Management.Automation.CompletionResultType.ParameterValue, "H264SingleBitrateSD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H264SingleBitrate720p".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H264SingleBitrate720p'", "H264SingleBitrate720p", global::System.Management.Automation.CompletionResultType.ParameterValue, "H264SingleBitrate720p");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H264SingleBitrate1080p".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H264SingleBitrate1080p'", "H264SingleBitrate1080p", global::System.Management.Automation.CompletionResultType.ParameterValue, "H264SingleBitrate1080p");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdaptiveStreaming".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdaptiveStreaming'", "AdaptiveStreaming", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdaptiveStreaming");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AACGoodQualityAudio".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AACGoodQualityAudio'", "AACGoodQualityAudio", global::System.Management.Automation.CompletionResultType.ParameterValue, "AACGoodQualityAudio");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ContentAwareEncodingExperimental".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ContentAwareEncodingExperimental'", "ContentAwareEncodingExperimental", global::System.Management.Automation.CompletionResultType.ParameterValue, "ContentAwareEncodingExperimental");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ContentAwareEncoding".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ContentAwareEncoding'", "ContentAwareEncoding", global::System.Management.Automation.CompletionResultType.ParameterValue, "ContentAwareEncoding");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CopyAllBitrateNonInterleaved".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CopyAllBitrateNonInterleaved'", "CopyAllBitrateNonInterleaved", global::System.Management.Automation.CompletionResultType.ParameterValue, "CopyAllBitrateNonInterleaved");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H264MultipleBitrate1080p".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H264MultipleBitrate1080p'", "H264MultipleBitrate1080p", global::System.Management.Automation.CompletionResultType.ParameterValue, "H264MultipleBitrate1080p");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H264MultipleBitrate720p".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H264MultipleBitrate720p'", "H264MultipleBitrate720p", global::System.Management.Automation.CompletionResultType.ParameterValue, "H264MultipleBitrate720p");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H264MultipleBitrateSD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H264MultipleBitrateSD'", "H264MultipleBitrateSD", global::System.Management.Automation.CompletionResultType.ParameterValue, "H264MultipleBitrateSD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H265ContentAwareEncoding".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H265ContentAwareEncoding'", "H265ContentAwareEncoding", global::System.Management.Automation.CompletionResultType.ParameterValue, "H265ContentAwareEncoding");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H265AdaptiveStreaming".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H265AdaptiveStreaming'", "H265AdaptiveStreaming", global::System.Management.Automation.CompletionResultType.ParameterValue, "H265AdaptiveStreaming");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H265SingleBitrate720p".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H265SingleBitrate720p'", "H265SingleBitrate720p", global::System.Management.Automation.CompletionResultType.ParameterValue, "H265SingleBitrate720p");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H265SingleBitrate1080p".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H265SingleBitrate1080p'", "H265SingleBitrate1080p", global::System.Management.Automation.CompletionResultType.ParameterValue, "H265SingleBitrate1080p");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "H265SingleBitrate4K".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'H265SingleBitrate4K'", "H265SingleBitrate4K", global::System.Management.Automation.CompletionResultType.ParameterValue, "H265SingleBitrate4K");
            }
        }
    }
}