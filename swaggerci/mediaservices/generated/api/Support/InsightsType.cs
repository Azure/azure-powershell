// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support
{

    /// <summary>
    /// Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly',
    /// and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio
    /// insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended
    /// that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you
    /// expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
    /// </summary>
    public partial struct InsightsType :
        System.IEquatable<InsightsType>
    {
        /// <summary>
        /// Generate both audio and video insights. Fails if either audio or video Insights fail.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType AllInsights = @"AllInsights";

        /// <summary>
        /// Generate audio only insights. Ignore video even if present. Fails if no audio is present.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType AudioInsightsOnly = @"AudioInsightsOnly";

        /// <summary>
        /// Generate video only insights. Ignore audio if present. Fails if no video is present.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType VideoInsightsOnly = @"VideoInsightsOnly";

        /// <summary>the value for an instance of the <see cref="InsightsType" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to InsightsType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="InsightsType" />.</param>
        internal static object CreateFrom(object value)
        {
            return new InsightsType(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type InsightsType</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type InsightsType (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is InsightsType && Equals((InsightsType)obj);
        }

        /// <summary>Returns hashCode for enum InsightsType</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="InsightsType"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private InsightsType(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for InsightsType</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to InsightsType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="InsightsType" />.</param>

        public static implicit operator InsightsType(string value)
        {
            return new InsightsType(value);
        }

        /// <summary>Implicit operator to convert InsightsType to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="InsightsType" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum InsightsType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum InsightsType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType e1, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InsightsType e2)
        {
            return e2.Equals(e1);
        }
    }
}