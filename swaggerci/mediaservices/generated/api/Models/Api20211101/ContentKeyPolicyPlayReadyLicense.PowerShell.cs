// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.PowerShell;

    /// <summary>The PlayReady license</summary>
    [System.ComponentModel.TypeConverter(typeof(ContentKeyPolicyPlayReadyLicenseTypeConverter))]
    public partial class ContentKeyPolicyPlayReadyLicense
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyLicense"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ContentKeyPolicyPlayReadyLicense(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("PlayRight"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRight = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight) content.GetValueForProperty("PlayRight",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRight, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRightTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContentKeyLocation"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocation = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocation) content.GetValueForProperty("ContentKeyLocation",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocation, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyContentKeyLocationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AllowTestDevice"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).AllowTestDevice = (bool) content.GetValueForProperty("AllowTestDevice",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).AllowTestDevice, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BeginDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).BeginDate = (global::System.DateTime?) content.GetValueForProperty("BeginDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).BeginDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExpirationDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExpirationDate = (global::System.DateTime?) content.GetValueForProperty("ExpirationDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExpirationDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("RelativeBeginDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeBeginDate = (global::System.TimeSpan?) content.GetValueForProperty("RelativeBeginDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeBeginDate, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("RelativeExpirationDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeExpirationDate = (global::System.TimeSpan?) content.GetValueForProperty("RelativeExpirationDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeExpirationDate, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("GracePeriod"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).GracePeriod = (global::System.TimeSpan?) content.GetValueForProperty("GracePeriod",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).GracePeriod, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("LicenseType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).LicenseType = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType) content.GetValueForProperty("LicenseType",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).LicenseType, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType.CreateFrom);
            }
            if (content.Contains("ContentType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentType = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType) content.GetValueForProperty("ContentType",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentType, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType.CreateFrom);
            }
            if (content.Contains("PlayRightExplicitAnalogTelevisionOutputRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightExplicitAnalogTelevisionOutputRestriction = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) content.GetValueForProperty("PlayRightExplicitAnalogTelevisionOutputRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightExplicitAnalogTelevisionOutputRestriction, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionTypeConverter.ConvertFrom);
            }
            if (content.Contains("PlayRightFirstPlayExpiration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightFirstPlayExpiration = (global::System.TimeSpan?) content.GetValueForProperty("PlayRightFirstPlayExpiration",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightFirstPlayExpiration, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("PlayRightScmsRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightScmsRestriction = (int?) content.GetValueForProperty("PlayRightScmsRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightScmsRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightAgcAndColorStripeRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAgcAndColorStripeRestriction = (int?) content.GetValueForProperty("PlayRightAgcAndColorStripeRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAgcAndColorStripeRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightDigitalVideoOnlyContentRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightDigitalVideoOnlyContentRestriction = (bool) content.GetValueForProperty("PlayRightDigitalVideoOnlyContentRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightDigitalVideoOnlyContentRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PlayRightImageConstraintForAnalogComponentVideoRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComponentVideoRestriction = (bool) content.GetValueForProperty("PlayRightImageConstraintForAnalogComponentVideoRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComponentVideoRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PlayRightImageConstraintForAnalogComputerMonitorRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComputerMonitorRestriction = (bool) content.GetValueForProperty("PlayRightImageConstraintForAnalogComputerMonitorRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComputerMonitorRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PlayRightAllowPassingVideoContentToUnknownOutput"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAllowPassingVideoContentToUnknownOutput = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption) content.GetValueForProperty("PlayRightAllowPassingVideoContentToUnknownOutput",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAllowPassingVideoContentToUnknownOutput, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption.CreateFrom);
            }
            if (content.Contains("PlayRightUncompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalVideoOpl = (int?) content.GetValueForProperty("PlayRightUncompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightCompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalVideoOpl = (int?) content.GetValueForProperty("PlayRightCompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightAnalogVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAnalogVideoOpl = (int?) content.GetValueForProperty("PlayRightAnalogVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAnalogVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightCompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalAudioOpl = (int?) content.GetValueForProperty("PlayRightCompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightUncompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalAudioOpl = (int?) content.GetValueForProperty("PlayRightUncompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ContentKeyLocationOdataType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocationOdataType = (string) content.GetValueForProperty("ContentKeyLocationOdataType",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocationOdataType, global::System.Convert.ToString);
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionBestEffort"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort = (bool) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionBestEffort",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionConfigurationData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData = (int) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionConfigurationData",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyLicense"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ContentKeyPolicyPlayReadyLicense(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("PlayRight"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRight = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight) content.GetValueForProperty("PlayRight",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRight, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRightTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContentKeyLocation"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocation = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocation) content.GetValueForProperty("ContentKeyLocation",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocation, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyContentKeyLocationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AllowTestDevice"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).AllowTestDevice = (bool) content.GetValueForProperty("AllowTestDevice",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).AllowTestDevice, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BeginDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).BeginDate = (global::System.DateTime?) content.GetValueForProperty("BeginDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).BeginDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExpirationDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExpirationDate = (global::System.DateTime?) content.GetValueForProperty("ExpirationDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExpirationDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("RelativeBeginDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeBeginDate = (global::System.TimeSpan?) content.GetValueForProperty("RelativeBeginDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeBeginDate, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("RelativeExpirationDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeExpirationDate = (global::System.TimeSpan?) content.GetValueForProperty("RelativeExpirationDate",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).RelativeExpirationDate, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("GracePeriod"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).GracePeriod = (global::System.TimeSpan?) content.GetValueForProperty("GracePeriod",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).GracePeriod, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("LicenseType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).LicenseType = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType) content.GetValueForProperty("LicenseType",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).LicenseType, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType.CreateFrom);
            }
            if (content.Contains("ContentType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentType = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType) content.GetValueForProperty("ContentType",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentType, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType.CreateFrom);
            }
            if (content.Contains("PlayRightExplicitAnalogTelevisionOutputRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightExplicitAnalogTelevisionOutputRestriction = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) content.GetValueForProperty("PlayRightExplicitAnalogTelevisionOutputRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightExplicitAnalogTelevisionOutputRestriction, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionTypeConverter.ConvertFrom);
            }
            if (content.Contains("PlayRightFirstPlayExpiration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightFirstPlayExpiration = (global::System.TimeSpan?) content.GetValueForProperty("PlayRightFirstPlayExpiration",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightFirstPlayExpiration, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("PlayRightScmsRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightScmsRestriction = (int?) content.GetValueForProperty("PlayRightScmsRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightScmsRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightAgcAndColorStripeRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAgcAndColorStripeRestriction = (int?) content.GetValueForProperty("PlayRightAgcAndColorStripeRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAgcAndColorStripeRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightDigitalVideoOnlyContentRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightDigitalVideoOnlyContentRestriction = (bool) content.GetValueForProperty("PlayRightDigitalVideoOnlyContentRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightDigitalVideoOnlyContentRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PlayRightImageConstraintForAnalogComponentVideoRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComponentVideoRestriction = (bool) content.GetValueForProperty("PlayRightImageConstraintForAnalogComponentVideoRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComponentVideoRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PlayRightImageConstraintForAnalogComputerMonitorRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComputerMonitorRestriction = (bool) content.GetValueForProperty("PlayRightImageConstraintForAnalogComputerMonitorRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightImageConstraintForAnalogComputerMonitorRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PlayRightAllowPassingVideoContentToUnknownOutput"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAllowPassingVideoContentToUnknownOutput = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption) content.GetValueForProperty("PlayRightAllowPassingVideoContentToUnknownOutput",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAllowPassingVideoContentToUnknownOutput, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption.CreateFrom);
            }
            if (content.Contains("PlayRightUncompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalVideoOpl = (int?) content.GetValueForProperty("PlayRightUncompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightCompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalVideoOpl = (int?) content.GetValueForProperty("PlayRightCompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightAnalogVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAnalogVideoOpl = (int?) content.GetValueForProperty("PlayRightAnalogVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightAnalogVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightCompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalAudioOpl = (int?) content.GetValueForProperty("PlayRightCompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightCompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("PlayRightUncompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalAudioOpl = (int?) content.GetValueForProperty("PlayRightUncompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).PlayRightUncompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ContentKeyLocationOdataType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocationOdataType = (string) content.GetValueForProperty("ContentKeyLocationOdataType",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ContentKeyLocationOdataType, global::System.Convert.ToString);
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionBestEffort"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort = (bool) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionBestEffort",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionConfigurationData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData = (int) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionConfigurationData",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyLicense"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicense"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicense DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ContentKeyPolicyPlayReadyLicense(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyLicense"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicense"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicense DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ContentKeyPolicyPlayReadyLicense(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ContentKeyPolicyPlayReadyLicense" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ContentKeyPolicyPlayReadyLicense" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicense FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// The PlayReady license
    [System.ComponentModel.TypeConverter(typeof(ContentKeyPolicyPlayReadyLicenseTypeConverter))]
    public partial interface IContentKeyPolicyPlayReadyLicense

    {

    }
}