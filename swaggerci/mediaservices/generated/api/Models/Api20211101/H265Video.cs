// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Describes all the properties for encoding a video with the H.265 codec.</summary>
    public partial class H265Video :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265Video,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265VideoInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideo"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideo __video = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.Video();

        /// <summary>Backing field for <see cref="Complexity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.H265Complexity? _complexity;

        /// <summary>
        /// Tells the encoder how to choose its encoding settings. Quality will provide for a higher compression ratio but at a higher
        /// cost and longer compute time. Speed will produce a relatively larger file but is faster and more economical. The default
        /// value is Balanced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.H265Complexity? Complexity { get => this._complexity; set => this._complexity = value; }

        /// <summary>
        /// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601
        /// format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the
        /// KeyFrameInterval value will follow the input source setting.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public global::System.TimeSpan? KeyFrameInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).KeyFrameInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).KeyFrameInterval = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// An optional label for the codec. The label can be used to control muxing behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Label { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).Label = value ?? null; }

        /// <summary>Backing field for <see cref="Layer" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265Layer[] _layer;

        /// <summary>The collection of output H.265 layers to be produced by the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265Layer[] Layer { get => this._layer; set => this._layer = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).OdataType = value ; }

        /// <summary>Backing field for <see cref="SceneChangeDetection" /> property.</summary>
        private bool? _sceneChangeDetection;

        /// <summary>
        /// Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false.
        /// This flag should be set to true only when the encoder is being configured to produce a single output video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool? SceneChangeDetection { get => this._sceneChangeDetection; set => this._sceneChangeDetection = value; }

        /// <summary>
        /// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode? StretchMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).StretchMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).StretchMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode)""); }

        /// <summary>The Video Sync Mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.VideoSyncMode? SyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).SyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).SyncMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.VideoSyncMode)""); }

        /// <summary>Creates an new <see cref="H265Video" /> instance.</summary>
        public H265Video()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__video), __video);
            await eventListener.AssertObjectIsValid(nameof(__video), __video);
        }
    }
    /// Describes all the properties for encoding a video with the H.265 codec.
    public partial interface IH265Video :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideo
    {
        /// <summary>
        /// Tells the encoder how to choose its encoding settings. Quality will provide for a higher compression ratio but at a higher
        /// cost and longer compute time. Speed will produce a relatively larger file but is faster and more economical. The default
        /// value is Balanced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced.",
        SerializedName = @"complexity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.H265Complexity) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.H265Complexity? Complexity { get; set; }
        /// <summary>The collection of output H.265 layers to be produced by the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The collection of output H.265 layers to be produced by the encoder.",
        SerializedName = @"layers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265Layer) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265Layer[] Layer { get; set; }
        /// <summary>
        /// Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false.
        /// This flag should be set to true only when the encoder is being configured to produce a single output video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.",
        SerializedName = @"sceneChangeDetection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SceneChangeDetection { get; set; }

    }
    /// Describes all the properties for encoding a video with the H.265 codec.
    internal partial interface IH265VideoInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal
    {
        /// <summary>
        /// Tells the encoder how to choose its encoding settings. Quality will provide for a higher compression ratio but at a higher
        /// cost and longer compute time. Speed will produce a relatively larger file but is faster and more economical. The default
        /// value is Balanced.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.H265Complexity? Complexity { get; set; }
        /// <summary>The collection of output H.265 layers to be produced by the encoder.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265Layer[] Layer { get; set; }
        /// <summary>
        /// Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false.
        /// This flag should be set to true only when the encoder is being configured to produce a single output video.
        /// </summary>
        bool? SceneChangeDetection { get; set; }

    }
}