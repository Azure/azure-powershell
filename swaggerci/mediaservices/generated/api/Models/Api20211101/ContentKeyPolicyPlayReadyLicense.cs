// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The PlayReady license</summary>
    public partial class ContentKeyPolicyPlayReadyLicense :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicense,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal
    {

        /// <summary>Backing field for <see cref="AllowTestDevice" /> property.</summary>
        private bool _allowTestDevice;

        /// <summary>A flag indicating whether test devices can use the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool AllowTestDevice { get => this._allowTestDevice; set => this._allowTestDevice = value; }

        /// <summary>Backing field for <see cref="BeginDate" /> property.</summary>
        private global::System.DateTime? _beginDate;

        /// <summary>The begin date of license</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? BeginDate { get => this._beginDate; set => this._beginDate = value; }

        /// <summary>Backing field for <see cref="ContentKeyLocation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocation _contentKeyLocation;

        /// <summary>The content key location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocation ContentKeyLocation { get => (this._contentKeyLocation = this._contentKeyLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyContentKeyLocation()); set => this._contentKeyLocation = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string ContentKeyLocationOdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocationInternal)ContentKeyLocation).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocationInternal)ContentKeyLocation).OdataType = value ; }

        /// <summary>Backing field for <see cref="ContentType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType _contentType;

        /// <summary>The PlayReady content type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType ContentType { get => this._contentType; set => this._contentType = value; }

        /// <summary>Backing field for <see cref="ExpirationDate" /> property.</summary>
        private global::System.DateTime? _expirationDate;

        /// <summary>The expiration date of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? ExpirationDate { get => this._expirationDate; set => this._expirationDate = value; }

        /// <summary>Indicates whether this restriction is enforced on a Best Effort basis.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? ExplicitAnalogTelevisionOutputRestrictionBestEffort { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ExplicitAnalogTelevisionOutputRestrictionBestEffort; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ExplicitAnalogTelevisionOutputRestrictionBestEffort = value ?? default(bool); }

        /// <summary>Configures the restriction control bits. Must be between 0 and 3 inclusive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ExplicitAnalogTelevisionOutputRestrictionConfigurationData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ExplicitAnalogTelevisionOutputRestrictionConfigurationData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ExplicitAnalogTelevisionOutputRestrictionConfigurationData = value ?? default(int); }

        /// <summary>Backing field for <see cref="GracePeriod" /> property.</summary>
        private global::System.TimeSpan? _gracePeriod;

        /// <summary>The grace period of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.TimeSpan? GracePeriod { get => this._gracePeriod; set => this._gracePeriod = value; }

        /// <summary>Backing field for <see cref="LicenseType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType _licenseType;

        /// <summary>The license type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType LicenseType { get => this._licenseType; set => this._licenseType = value; }

        /// <summary>Internal Acessors for ContentKeyLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocation Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal.ContentKeyLocation { get => (this._contentKeyLocation = this._contentKeyLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyContentKeyLocation()); set { {_contentKeyLocation = value;} } }

        /// <summary>Internal Acessors for PlayRight</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal.PlayRight { get => (this._playRight = this._playRight ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRight()); set { {_playRight = value;} } }

        /// <summary>Internal Acessors for PlayRightExplicitAnalogTelevisionOutputRestriction</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyLicenseInternal.PlayRightExplicitAnalogTelevisionOutputRestriction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ExplicitAnalogTelevisionOutputRestriction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ExplicitAnalogTelevisionOutputRestriction = value; }

        /// <summary>Backing field for <see cref="PlayRight" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight _playRight;

        /// <summary>The license PlayRight</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight PlayRight { get => (this._playRight = this._playRight ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRight()); set => this._playRight = value; }

        /// <summary>
        /// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightAgcAndColorStripeRestriction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).AgcAndColorStripeRestriction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).AgcAndColorStripeRestriction = value ?? default(int); }

        /// <summary>Configures Unknown output handling settings of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption? PlayRightAllowPassingVideoContentToUnknownOutput { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).AllowPassingVideoContentToUnknownOutput; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).AllowPassingVideoContentToUnknownOutput = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption)""); }

        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightAnalogVideoOpl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).AnalogVideoOpl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).AnalogVideoOpl = value ?? default(int); }

        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightCompressedDigitalAudioOpl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).CompressedDigitalAudioOpl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).CompressedDigitalAudioOpl = value ?? default(int); }

        /// <summary>Specifies the output protection level for compressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightCompressedDigitalVideoOpl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).CompressedDigitalVideoOpl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).CompressedDigitalVideoOpl = value ?? default(int); }

        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? PlayRightDigitalVideoOnlyContentRestriction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).DigitalVideoOnlyContentRestriction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).DigitalVideoOnlyContentRestriction = value ?? default(bool); }

        /// <summary>
        /// The amount of time that the license is valid after the license is first used to play content.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? PlayRightFirstPlayExpiration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).FirstPlayExpiration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).FirstPlayExpiration = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? PlayRightImageConstraintForAnalogComponentVideoRestriction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ImageConstraintForAnalogComponentVideoRestriction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ImageConstraintForAnalogComponentVideoRestriction = value ?? default(bool); }

        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? PlayRightImageConstraintForAnalogComputerMonitorRestriction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ImageConstraintForAnalogComputerMonitorRestriction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ImageConstraintForAnalogComputerMonitorRestriction = value ?? default(bool); }

        /// <summary>
        /// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightScmsRestriction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ScmsRestriction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).ScmsRestriction = value ?? default(int); }

        /// <summary>Specifies the output protection level for uncompressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightUncompressedDigitalAudioOpl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).UncompressedDigitalAudioOpl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).UncompressedDigitalAudioOpl = value ?? default(int); }

        /// <summary>Specifies the output protection level for uncompressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? PlayRightUncompressedDigitalVideoOpl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).UncompressedDigitalVideoOpl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)PlayRight).UncompressedDigitalVideoOpl = value ?? default(int); }

        /// <summary>Backing field for <see cref="RelativeBeginDate" /> property.</summary>
        private global::System.TimeSpan? _relativeBeginDate;

        /// <summary>The relative begin date of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.TimeSpan? RelativeBeginDate { get => this._relativeBeginDate; set => this._relativeBeginDate = value; }

        /// <summary>Backing field for <see cref="RelativeExpirationDate" /> property.</summary>
        private global::System.TimeSpan? _relativeExpirationDate;

        /// <summary>The relative expiration date of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.TimeSpan? RelativeExpirationDate { get => this._relativeExpirationDate; set => this._relativeExpirationDate = value; }

        /// <summary>Creates an new <see cref="ContentKeyPolicyPlayReadyLicense" /> instance.</summary>
        public ContentKeyPolicyPlayReadyLicense()
        {

        }
    }
    /// The PlayReady license
    public partial interface IContentKeyPolicyPlayReadyLicense :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>A flag indicating whether test devices can use the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A flag indicating whether test devices can use the license.",
        SerializedName = @"allowTestDevices",
        PossibleTypes = new [] { typeof(bool) })]
        bool AllowTestDevice { get; set; }
        /// <summary>The begin date of license</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The begin date of license",
        SerializedName = @"beginDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BeginDate { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@odata.type",
        PossibleTypes = new [] { typeof(string) })]
        string ContentKeyLocationOdataType { get; set; }
        /// <summary>The PlayReady content type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The PlayReady content type.",
        SerializedName = @"contentType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType ContentType { get; set; }
        /// <summary>The expiration date of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The expiration date of license.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>Indicates whether this restriction is enforced on a Best Effort basis.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this restriction is enforced on a Best Effort basis.",
        SerializedName = @"bestEffort",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExplicitAnalogTelevisionOutputRestrictionBestEffort { get; set; }
        /// <summary>Configures the restriction control bits. Must be between 0 and 3 inclusive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures the restriction control bits. Must be between 0 and 3 inclusive.",
        SerializedName = @"configurationData",
        PossibleTypes = new [] { typeof(int) })]
        int? ExplicitAnalogTelevisionOutputRestrictionConfigurationData { get; set; }
        /// <summary>The grace period of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The grace period of license.",
        SerializedName = @"gracePeriod",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? GracePeriod { get; set; }
        /// <summary>The license type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The license type.",
        SerializedName = @"licenseType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType LicenseType { get; set; }
        /// <summary>
        /// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.",
        SerializedName = @"agcAndColorStripeRestriction",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightAgcAndColorStripeRestriction { get; set; }
        /// <summary>Configures Unknown output handling settings of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures Unknown output handling settings of the license.",
        SerializedName = @"allowPassingVideoContentToUnknownOutput",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption? PlayRightAllowPassingVideoContentToUnknownOutput { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for compressed digital audio.",
        SerializedName = @"analogVideoOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightAnalogVideoOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for compressed digital audio.",
        SerializedName = @"compressedDigitalAudioOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightCompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for compressed digital video.",
        SerializedName = @"compressedDigitalVideoOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightCompressedDigitalVideoOpl { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables the Image Constraint For Analog Component Video Restriction in the license.",
        SerializedName = @"digitalVideoOnlyContentRestriction",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PlayRightDigitalVideoOnlyContentRestriction { get; set; }
        /// <summary>
        /// The amount of time that the license is valid after the license is first used to play content.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time that the license is valid after the license is first used to play content.",
        SerializedName = @"firstPlayExpiration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? PlayRightFirstPlayExpiration { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables the Image Constraint For Analog Component Video Restriction in the license.",
        SerializedName = @"imageConstraintForAnalogComponentVideoRestriction",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PlayRightImageConstraintForAnalogComponentVideoRestriction { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables the Image Constraint For Analog Component Video Restriction in the license.",
        SerializedName = @"imageConstraintForAnalogComputerMonitorRestriction",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PlayRightImageConstraintForAnalogComputerMonitorRestriction { get; set; }
        /// <summary>
        /// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.",
        SerializedName = @"scmsRestriction",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightScmsRestriction { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for uncompressed digital audio.",
        SerializedName = @"uncompressedDigitalAudioOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightUncompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for uncompressed digital video.",
        SerializedName = @"uncompressedDigitalVideoOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? PlayRightUncompressedDigitalVideoOpl { get; set; }
        /// <summary>The relative begin date of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The relative begin date of license.",
        SerializedName = @"relativeBeginDate",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RelativeBeginDate { get; set; }
        /// <summary>The relative expiration date of license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The relative expiration date of license.",
        SerializedName = @"relativeExpirationDate",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RelativeExpirationDate { get; set; }

    }
    /// The PlayReady license
    internal partial interface IContentKeyPolicyPlayReadyLicenseInternal

    {
        /// <summary>A flag indicating whether test devices can use the license.</summary>
        bool AllowTestDevice { get; set; }
        /// <summary>The begin date of license</summary>
        global::System.DateTime? BeginDate { get; set; }
        /// <summary>The content key location.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyContentKeyLocation ContentKeyLocation { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string ContentKeyLocationOdataType { get; set; }
        /// <summary>The PlayReady content type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyContentType ContentType { get; set; }
        /// <summary>The expiration date of license.</summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>Indicates whether this restriction is enforced on a Best Effort basis.</summary>
        bool? ExplicitAnalogTelevisionOutputRestrictionBestEffort { get; set; }
        /// <summary>Configures the restriction control bits. Must be between 0 and 3 inclusive.</summary>
        int? ExplicitAnalogTelevisionOutputRestrictionConfigurationData { get; set; }
        /// <summary>The grace period of license.</summary>
        global::System.TimeSpan? GracePeriod { get; set; }
        /// <summary>The license type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyLicenseType LicenseType { get; set; }
        /// <summary>The license PlayRight</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight PlayRight { get; set; }
        /// <summary>
        /// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        int? PlayRightAgcAndColorStripeRestriction { get; set; }
        /// <summary>Configures Unknown output handling settings of the license.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption? PlayRightAllowPassingVideoContentToUnknownOutput { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        int? PlayRightAnalogVideoOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        int? PlayRightCompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital video.</summary>
        int? PlayRightCompressedDigitalVideoOpl { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        bool? PlayRightDigitalVideoOnlyContentRestriction { get; set; }
        /// <summary>
        /// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and
        /// 3 inclusive.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction PlayRightExplicitAnalogTelevisionOutputRestriction { get; set; }
        /// <summary>
        /// The amount of time that the license is valid after the license is first used to play content.
        /// </summary>
        global::System.TimeSpan? PlayRightFirstPlayExpiration { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        bool? PlayRightImageConstraintForAnalogComponentVideoRestriction { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        bool? PlayRightImageConstraintForAnalogComputerMonitorRestriction { get; set; }
        /// <summary>
        /// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        int? PlayRightScmsRestriction { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital audio.</summary>
        int? PlayRightUncompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital video.</summary>
        int? PlayRightUncompressedDigitalVideoOpl { get; set; }
        /// <summary>The relative begin date of license.</summary>
        global::System.TimeSpan? RelativeBeginDate { get; set; }
        /// <summary>The relative expiration date of license.</summary>
        global::System.TimeSpan? RelativeExpirationDate { get; set; }

    }
}