// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event.</summary>
    public partial class LiveEvent :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEvent,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.TrackedResource();

        /// <summary>The creation time for the live event</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? Created { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Created; }

        /// <summary>The content of clientaccesspolicy.xml used by Silverlight.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string CrossSiteAccessPolicyClientAccessPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).CrossSiteAccessPolicyClientAccessPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).CrossSiteAccessPolicyClientAccessPolicy = value ?? null; }

        /// <summary>The content of crossdomain.xml used by Silverlight.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string CrossSiteAccessPolicyCrossDomainPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).CrossSiteAccessPolicyCrossDomainPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).CrossSiteAccessPolicyCrossDomainPolicy = value ?? null; }

        /// <summary>A description for the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Description = value ?? null; }

        /// <summary>
        /// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks
        /// of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame
        /// interval, or the length of a GoP (group of pictures). If this value is not set for an encoding live event, the fragment
        /// duration defaults to 2 seconds. The value cannot be set for pass-through live events.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? EncodingKeyFrameInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingKeyFrameInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingKeyFrameInterval = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot
        /// be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType
        /// is set to Premium1080p, the default preset is ‘Default1080p’.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string EncodingPresetName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingPresetName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingPresetName = value ?? null; }

        /// <summary>
        /// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode? EncodingStretchMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingStretchMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingStretchMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode)""); }

        /// <summary>
        /// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through
        /// the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder
        /// transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for
        /// more information. This property cannot be modified after the live event is created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType? EncodingType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).EncodingType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType)""); }

        /// <summary>
        /// When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live
        /// event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account
        /// name and a short code for the Azure Media Services data center.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string HostnamePrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).HostnamePrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).HostnamePrefix = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Id; }

        /// <summary>The IP allow list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[] InputAccessControlIPAllow { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessControlIPAllow; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessControlIPAllow = value ?? null /* arrayOf */; }

        /// <summary>
        /// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If
        /// omitted, the service will generate a unique value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string InputAccessToken { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessToken; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessToken = value ?? null; }

        /// <summary>The input endpoints for the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[] InputEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputEndpoint = value ?? null /* arrayOf */; }

        /// <summary>
        /// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property
        /// in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string InputKeyFrameIntervalDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputKeyFrameIntervalDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputKeyFrameIntervalDuration = value ?? null; }

        /// <summary>
        /// The input protocol for the live event. This is specified at creation time and cannot be updated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol? InputStreamingProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputStreamingProtocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputStreamingProtocol = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol)""); }

        /// <summary>The last modified time of the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastModified { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).LastModified; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for Created</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.Created { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Created; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Created = value; }

        /// <summary>Internal Acessors for CrossSiteAccessPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICrossSiteAccessPolicies Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.CrossSiteAccessPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).CrossSiteAccessPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).CrossSiteAccessPolicy = value; }

        /// <summary>Internal Acessors for Encoding</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEncoding Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.Encoding { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Encoding; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Encoding = value; }

        /// <summary>Internal Acessors for Input</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInput Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.Input { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Input; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Input = value; }

        /// <summary>Internal Acessors for InputAccessControl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInputAccessControl Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.InputAccessControl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessControl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessControl = value; }

        /// <summary>Internal Acessors for InputAccessControlIP</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPAccessControl Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.InputAccessControlIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessControlIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).InputAccessControlIP = value; }

        /// <summary>Internal Acessors for LastModified</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.LastModified { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).LastModified; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).LastModified = value; }

        /// <summary>Internal Acessors for Preview</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPreview Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.Preview { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Preview; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Preview = value; }

        /// <summary>Internal Acessors for PreviewAccessControl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPreviewAccessControl Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.PreviewAccessControl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAccessControl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAccessControl = value; }

        /// <summary>Internal Acessors for PreviewAccessControlIP</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPAccessControl Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.PreviewAccessControlIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAccessControlIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAccessControlIP = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventProperties Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.LiveEventProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for ResourceState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState? Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.ResourceState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).ResourceState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).ResourceState = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.SystemData()); set { {_systemData = value;} } }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Name; }

        /// <summary>The IP allow list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[] PreviewAccessControlIPAllow { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAccessControlIPAllow; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAccessControlIPAllow = value ?? null /* arrayOf */; }

        /// <summary>
        /// An alternative media identifier associated with the streaming locator created for the preview. This value is specified
        /// at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate
        /// of the StreamingPolicy specified in the StreamingPolicyName field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string PreviewAlternativeMediaId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAlternativeMediaId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewAlternativeMediaId = value ?? null; }

        /// <summary>
        /// The endpoints for preview. Do not share the preview URL with the live event audience.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[] PreviewEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewEndpoint = value ?? null /* arrayOf */; }

        /// <summary>
        /// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview
        /// locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot
        /// be updated once the live event is created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string PreviewLocator { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewLocator; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewLocator = value ?? null; }

        /// <summary>
        /// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string PreviewStreamingPolicyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewStreamingPolicyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).PreviewStreamingPolicyName = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventProperties _property;

        /// <summary>The live event properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.LiveEventProperties()); set => this._property = value; }

        /// <summary>The provisioning state of the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).ProvisioningState; }

        /// <summary>
        /// The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState? ResourceState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).ResourceState; }

        /// <summary>
        /// The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values
        /// for the array entry values are 'Default' and 'LowLatency'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StreamOptionsFlag[] StreamOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).StreamOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).StreamOption = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData _systemData;

        /// <summary>The system metadata relating to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information
        /// about the live transcription feature.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventTranscription[] Transcription { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Transcription; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).Transcription = value ?? null /* arrayOf */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Type; }

        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only
        /// be updated if the live event is in Standby state
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? UseStaticHostname { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).UseStaticHostname; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPropertiesInternal)Property).UseStaticHostname = value ?? default(bool); }

        /// <summary>Creates an new <see cref="LiveEvent" /> instance.</summary>
        public LiveEvent()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// The live event.
    public partial interface ILiveEvent :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResource
    {
        /// <summary>The creation time for the live event</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The creation time for the live event",
        SerializedName = @"created",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Created { get;  }
        /// <summary>The content of clientaccesspolicy.xml used by Silverlight.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The content of clientaccesspolicy.xml used by Silverlight.",
        SerializedName = @"clientAccessPolicy",
        PossibleTypes = new [] { typeof(string) })]
        string CrossSiteAccessPolicyClientAccessPolicy { get; set; }
        /// <summary>The content of crossdomain.xml used by Silverlight.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The content of crossdomain.xml used by Silverlight.",
        SerializedName = @"crossDomainPolicy",
        PossibleTypes = new [] { typeof(string) })]
        string CrossSiteAccessPolicyCrossDomainPolicy { get; set; }
        /// <summary>A description for the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A description for the live event.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks
        /// of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame
        /// interval, or the length of a GoP (group of pictures). If this value is not set for an encoding live event, the fragment
        /// duration defaults to 2 seconds. The value cannot be set for pass-through live events.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.",
        SerializedName = @"keyFrameInterval",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? EncodingKeyFrameInterval { get; set; }
        /// <summary>
        /// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot
        /// be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType
        /// is set to Premium1080p, the default preset is ‘Default1080p’.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.",
        SerializedName = @"presetName",
        PossibleTypes = new [] { typeof(string) })]
        string EncodingPresetName { get; set; }
        /// <summary>
        /// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies how the input video will be resized to fit the desired output resolution(s). Default is None",
        SerializedName = @"stretchMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode? EncodingStretchMode { get; set; }
        /// <summary>
        /// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through
        /// the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder
        /// transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for
        /// more information. This property cannot be modified after the live event is created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.",
        SerializedName = @"encodingType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType? EncodingType { get; set; }
        /// <summary>
        /// When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live
        /// event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account
        /// name and a short code for the Azure Media Services data center.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.",
        SerializedName = @"hostnamePrefix",
        PossibleTypes = new [] { typeof(string) })]
        string HostnamePrefix { get; set; }
        /// <summary>The IP allow list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP allow list.",
        SerializedName = @"allow",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[] InputAccessControlIPAllow { get; set; }
        /// <summary>
        /// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If
        /// omitted, the service will generate a unique value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.",
        SerializedName = @"accessToken",
        PossibleTypes = new [] { typeof(string) })]
        string InputAccessToken { get; set; }
        /// <summary>The input endpoints for the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The input endpoints for the live event.",
        SerializedName = @"endpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[] InputEndpoint { get; set; }
        /// <summary>
        /// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property
        /// in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.",
        SerializedName = @"keyFrameIntervalDuration",
        PossibleTypes = new [] { typeof(string) })]
        string InputKeyFrameIntervalDuration { get; set; }
        /// <summary>
        /// The input protocol for the live event. This is specified at creation time and cannot be updated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The input protocol for the live event. This is specified at creation time and cannot be updated.",
        SerializedName = @"streamingProtocol",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol? InputStreamingProtocol { get; set; }
        /// <summary>The last modified time of the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The last modified time of the live event.",
        SerializedName = @"lastModified",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModified { get;  }
        /// <summary>The IP allow list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP allow list.",
        SerializedName = @"allow",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[] PreviewAccessControlIPAllow { get; set; }
        /// <summary>
        /// An alternative media identifier associated with the streaming locator created for the preview. This value is specified
        /// at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate
        /// of the StreamingPolicy specified in the StreamingPolicyName field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.",
        SerializedName = @"alternativeMediaId",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewAlternativeMediaId { get; set; }
        /// <summary>
        /// The endpoints for preview. Do not share the preview URL with the live event audience.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The endpoints for preview. Do not share the preview URL with the live event audience.",
        SerializedName = @"endpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[] PreviewEndpoint { get; set; }
        /// <summary>
        /// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview
        /// locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot
        /// be updated once the live event is created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.",
        SerializedName = @"previewLocator",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewLocator { get; set; }
        /// <summary>
        /// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.",
        SerializedName = @"streamingPolicyName",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewStreamingPolicyName { get; set; }
        /// <summary>The provisioning state of the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the live event.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>
        /// The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.",
        SerializedName = @"resourceState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState? ResourceState { get;  }
        /// <summary>
        /// The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values
        /// for the array entry values are 'Default' and 'LowLatency'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.",
        SerializedName = @"streamOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StreamOptionsFlag) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StreamOptionsFlag[] StreamOption { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>
        /// Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information
        /// about the live transcription feature.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature.",
        SerializedName = @"transcriptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventTranscription) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventTranscription[] Transcription { get; set; }
        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only
        /// be updated if the live event is in Standby state
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state",
        SerializedName = @"useStaticHostname",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseStaticHostname { get; set; }

    }
    /// The live event.
    internal partial interface ILiveEventInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal
    {
        /// <summary>The creation time for the live event</summary>
        global::System.DateTime? Created { get; set; }
        /// <summary>Live event cross site access policies.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICrossSiteAccessPolicies CrossSiteAccessPolicy { get; set; }
        /// <summary>The content of clientaccesspolicy.xml used by Silverlight.</summary>
        string CrossSiteAccessPolicyClientAccessPolicy { get; set; }
        /// <summary>The content of crossdomain.xml used by Silverlight.</summary>
        string CrossSiteAccessPolicyCrossDomainPolicy { get; set; }
        /// <summary>A description for the live event.</summary>
        string Description { get; set; }
        /// <summary>
        /// Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for
        /// the live encoder if it is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEncoding Encoding { get; set; }
        /// <summary>
        /// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks
        /// of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame
        /// interval, or the length of a GoP (group of pictures). If this value is not set for an encoding live event, the fragment
        /// duration defaults to 2 seconds. The value cannot be set for pass-through live events.
        /// </summary>
        global::System.TimeSpan? EncodingKeyFrameInterval { get; set; }
        /// <summary>
        /// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot
        /// be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType
        /// is set to Premium1080p, the default preset is ‘Default1080p’.
        /// </summary>
        string EncodingPresetName { get; set; }
        /// <summary>
        /// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode? EncodingStretchMode { get; set; }
        /// <summary>
        /// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through
        /// the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder
        /// transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for
        /// more information. This property cannot be modified after the live event is created.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType? EncodingType { get; set; }
        /// <summary>
        /// When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live
        /// event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account
        /// name and a short code for the Azure Media Services data center.
        /// </summary>
        string HostnamePrefix { get; set; }
        /// <summary>
        /// Live event input settings. It defines how the live event receives input from a contribution encoder.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInput Input { get; set; }
        /// <summary>Access control for live event input.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventInputAccessControl InputAccessControl { get; set; }
        /// <summary>The IP access control properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPAccessControl InputAccessControlIP { get; set; }
        /// <summary>The IP allow list.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[] InputAccessControlIPAllow { get; set; }
        /// <summary>
        /// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If
        /// omitted, the service will generate a unique value.
        /// </summary>
        string InputAccessToken { get; set; }
        /// <summary>The input endpoints for the live event.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[] InputEndpoint { get; set; }
        /// <summary>
        /// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property
        /// in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
        /// </summary>
        string InputKeyFrameIntervalDuration { get; set; }
        /// <summary>
        /// The input protocol for the live event. This is specified at creation time and cannot be updated.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol? InputStreamingProtocol { get; set; }
        /// <summary>The last modified time of the live event.</summary>
        global::System.DateTime? LastModified { get; set; }
        /// <summary>
        /// Live event preview settings. Preview allows live event producers to preview the live streaming content without creating
        /// any live output.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPreview Preview { get; set; }
        /// <summary>The access control for live event preview.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventPreviewAccessControl PreviewAccessControl { get; set; }
        /// <summary>The IP access control properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPAccessControl PreviewAccessControlIP { get; set; }
        /// <summary>The IP allow list.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[] PreviewAccessControlIPAllow { get; set; }
        /// <summary>
        /// An alternative media identifier associated with the streaming locator created for the preview. This value is specified
        /// at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate
        /// of the StreamingPolicy specified in the StreamingPolicyName field.
        /// </summary>
        string PreviewAlternativeMediaId { get; set; }
        /// <summary>
        /// The endpoints for preview. Do not share the preview URL with the live event audience.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[] PreviewEndpoint { get; set; }
        /// <summary>
        /// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview
        /// locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot
        /// be updated once the live event is created.
        /// </summary>
        string PreviewLocator { get; set; }
        /// <summary>
        /// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
        /// </summary>
        string PreviewStreamingPolicyName { get; set; }
        /// <summary>The live event properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventProperties Property { get; set; }
        /// <summary>The provisioning state of the live event.</summary>
        string ProvisioningState { get; set; }
        /// <summary>
        /// The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventResourceState? ResourceState { get; set; }
        /// <summary>
        /// The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values
        /// for the array entry values are 'Default' and 'LowLatency'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StreamOptionsFlag[] StreamOption { get; set; }
        /// <summary>The system metadata relating to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>
        /// Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information
        /// about the live transcription feature.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventTranscription[] Transcription { get; set; }
        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only
        /// be updated if the live event is in Standby state
        /// </summary>
        bool? UseStaticHostname { get; set; }

    }
}