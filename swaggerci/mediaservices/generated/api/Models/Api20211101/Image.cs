// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Describes the basic properties for generating thumbnails from the input video</summary>
    public partial class Image :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IImage,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IImageInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideo"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideo __video = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.Video();

        /// <summary>
        /// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601
        /// format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the
        /// KeyFrameInterval value will follow the input source setting.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public global::System.TimeSpan? KeyFrameInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).KeyFrameInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).KeyFrameInterval = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// An optional label for the codec. The label can be used to control muxing behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Label { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).Label = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__video).OdataType = value ; }

        /// <summary>Backing field for <see cref="Range" /> property.</summary>
        private string _range;

        /// <summary>
        /// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value
        /// can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count
        /// (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing
        /// one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration
        /// from start time). The default value is 100%, which means to stop at the end of the stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Range { get => this._range; set => this._range = value; }

        /// <summary>Backing field for <see cref="Start" /> property.</summary>
        private string _start;

        /// <summary>
        /// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example,
        /// PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream
        /// duration (For example, 10% to start at 10% of stream duration). Also supports a macro {Best}, which tells the encoder
        /// to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what
        /// other settings are for Step and Range. The default value is macro {Best}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Start { get => this._start; set => this._start = value; }

        /// <summary>Backing field for <see cref="Step" /> property.</summary>
        private string _step;

        /// <summary>
        /// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image
        /// every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration
        /// (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail,
        /// which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to
        /// select the best thumbnail between start time and Step position from start time as the first output. As the default value
        /// is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at
        /// start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range
        /// value at 1 if only one thumbnail is needed at start time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Step { get => this._step; set => this._step = value; }

        /// <summary>
        /// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode? StretchMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).StretchMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).StretchMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode)""); }

        /// <summary>The Video Sync Mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.VideoSyncMode? SyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).SyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal)__video).SyncMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.VideoSyncMode)""); }

        /// <summary>Creates an new <see cref="Image" /> instance.</summary>
        public Image()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__video), __video);
            await eventListener.AssertObjectIsValid(nameof(__video), __video);
        }
    }
    /// Describes the basic properties for generating thumbnails from the input video
    public partial interface IImage :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideo
    {
        /// <summary>
        /// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value
        /// can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count
        /// (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing
        /// one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration
        /// from start time). The default value is 100%, which means to stop at the end of the stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.",
        SerializedName = @"range",
        PossibleTypes = new [] { typeof(string) })]
        string Range { get; set; }
        /// <summary>
        /// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example,
        /// PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream
        /// duration (For example, 10% to start at 10% of stream duration). Also supports a macro {Best}, which tells the encoder
        /// to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what
        /// other settings are for Step and Range. The default value is macro {Best}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For example, 10% to start at 10% of stream duration). Also supports a macro {Best}, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for Step and Range. The default value is macro {Best}.",
        SerializedName = @"start",
        PossibleTypes = new [] { typeof(string) })]
        string Start { get; set; }
        /// <summary>
        /// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image
        /// every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration
        /// (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail,
        /// which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to
        /// select the best thumbnail between start time and Step position from start time as the first output. As the default value
        /// is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at
        /// start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range
        /// value at 1 if only one thumbnail is needed at start time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.",
        SerializedName = @"step",
        PossibleTypes = new [] { typeof(string) })]
        string Step { get; set; }

    }
    /// Describes the basic properties for generating thumbnails from the input video
    internal partial interface IImageInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IVideoInternal
    {
        /// <summary>
        /// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value
        /// can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count
        /// (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing
        /// one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration
        /// from start time). The default value is 100%, which means to stop at the end of the stream.
        /// </summary>
        string Range { get; set; }
        /// <summary>
        /// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example,
        /// PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream
        /// duration (For example, 10% to start at 10% of stream duration). Also supports a macro {Best}, which tells the encoder
        /// to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what
        /// other settings are for Step and Range. The default value is macro {Best}.
        /// </summary>
        string Start { get; set; }
        /// <summary>
        /// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image
        /// every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration
        /// (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail,
        /// which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to
        /// select the best thumbnail between start time and Step position from start time as the first output. As the default value
        /// is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at
        /// start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range
        /// value at 1 if only one thumbnail is needed at start time.
        /// </summary>
        string Step { get; set; }

    }
}