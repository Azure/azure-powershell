// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
    /// </summary>
    public partial class CbcsDrmConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICbcsDrmConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICbcsDrmConfigurationInternal
    {

        /// <summary>Backing field for <see cref="FairPlay" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfiguration _fairPlay;

        /// <summary>FairPlay configurations</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfiguration FairPlay { get => (this._fairPlay = this._fairPlay ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicyFairPlayConfiguration()); set => this._fairPlay = value; }

        /// <summary>All license to be persistent or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? FairPlayAllowPersistentLicense { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfigurationInternal)FairPlay).AllowPersistentLicense; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfigurationInternal)FairPlay).AllowPersistentLicense = value ?? default(bool); }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string FairPlayCustomLicenseAcquisitionUrlTemplate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfigurationInternal)FairPlay).CustomLicenseAcquisitionUrlTemplate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfigurationInternal)FairPlay).CustomLicenseAcquisitionUrlTemplate = value ?? null; }

        /// <summary>Internal Acessors for FairPlay</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfiguration Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICbcsDrmConfigurationInternal.FairPlay { get => (this._fairPlay = this._fairPlay ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicyFairPlayConfiguration()); set { {_fairPlay = value;} } }

        /// <summary>Internal Acessors for PlayReady</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfiguration Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICbcsDrmConfigurationInternal.PlayReady { get => (this._playReady = this._playReady ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicyPlayReadyConfiguration()); set { {_playReady = value;} } }

        /// <summary>Internal Acessors for Widevine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyWidevineConfiguration Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICbcsDrmConfigurationInternal.Widevine { get => (this._widevine = this._widevine ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicyWidevineConfiguration()); set { {_widevine = value;} } }

        /// <summary>Backing field for <see cref="PlayReady" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfiguration _playReady;

        /// <summary>PlayReady configurations</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfiguration PlayReady { get => (this._playReady = this._playReady ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicyPlayReadyConfiguration()); set => this._playReady = value; }

        /// <summary>Custom attributes for PlayReady</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string PlayReadyCustomAttribute { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfigurationInternal)PlayReady).PlayReadyCustomAttribute; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfigurationInternal)PlayReady).PlayReadyCustomAttribute = value ?? null; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string PlayReadyCustomLicenseAcquisitionUrlTemplate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfigurationInternal)PlayReady).CustomLicenseAcquisitionUrlTemplate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfigurationInternal)PlayReady).CustomLicenseAcquisitionUrlTemplate = value ?? null; }

        /// <summary>Backing field for <see cref="Widevine" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyWidevineConfiguration _widevine;

        /// <summary>Widevine configurations</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyWidevineConfiguration Widevine { get => (this._widevine = this._widevine ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicyWidevineConfiguration()); set => this._widevine = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string WidevineCustomLicenseAcquisitionUrlTemplate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyWidevineConfigurationInternal)Widevine).CustomLicenseAcquisitionUrlTemplate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyWidevineConfigurationInternal)Widevine).CustomLicenseAcquisitionUrlTemplate = value ?? null; }

        /// <summary>Creates an new <see cref="CbcsDrmConfiguration" /> instance.</summary>
        public CbcsDrmConfiguration()
        {

        }
    }
    /// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
    public partial interface ICbcsDrmConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>All license to be persistent or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"All license to be persistent or not",
        SerializedName = @"allowPersistentLicense",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FairPlayAllowPersistentLicense { get; set; }
        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        string FairPlayCustomLicenseAcquisitionUrlTemplate { get; set; }
        /// <summary>Custom attributes for PlayReady</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attributes for PlayReady",
        SerializedName = @"playReadyCustomAttributes",
        PossibleTypes = new [] { typeof(string) })]
        string PlayReadyCustomAttribute { get; set; }
        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        string PlayReadyCustomLicenseAcquisitionUrlTemplate { get; set; }
        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        string WidevineCustomLicenseAcquisitionUrlTemplate { get; set; }

    }
    /// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
    internal partial interface ICbcsDrmConfigurationInternal

    {
        /// <summary>FairPlay configurations</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyFairPlayConfiguration FairPlay { get; set; }
        /// <summary>All license to be persistent or not</summary>
        bool? FairPlayAllowPersistentLicense { get; set; }
        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        string FairPlayCustomLicenseAcquisitionUrlTemplate { get; set; }
        /// <summary>PlayReady configurations</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyPlayReadyConfiguration PlayReady { get; set; }
        /// <summary>Custom attributes for PlayReady</summary>
        string PlayReadyCustomAttribute { get; set; }
        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        string PlayReadyCustomLicenseAcquisitionUrlTemplate { get; set; }
        /// <summary>Widevine configurations</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyWidevineConfiguration Widevine { get; set; }
        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        string WidevineCustomLicenseAcquisitionUrlTemplate { get; set; }

    }
}