// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>An object of optional configuration settings for encoder.</summary>
    public partial class PresetConfigurations :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurations,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal
    {

        /// <summary>Backing field for <see cref="Complexity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? _complexity;

        /// <summary>
        /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity
        /// as Speed for faster encoding but less compression efficiency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? Complexity { get => this._complexity; set => this._complexity = value; }

        /// <summary>Backing field for <see cref="InterleaveOutput" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? _interleaveOutput;

        /// <summary>
        /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set
        /// InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? InterleaveOutput { get => this._interleaveOutput; set => this._interleaveOutput = value; }

        /// <summary>Backing field for <see cref="KeyFrameIntervalInSecond" /> property.</summary>
        private float? _keyFrameIntervalInSecond;

        /// <summary>
        /// The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some
        /// players.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public float? KeyFrameIntervalInSecond { get => this._keyFrameIntervalInSecond; set => this._keyFrameIntervalInSecond = value; }

        /// <summary>Backing field for <see cref="MaxBitrateBps" /> property.</summary>
        private int? _maxBitrateBps;

        /// <summary>
        /// The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid
        /// producing very high bitrate outputs for contents with high complexity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? MaxBitrateBps { get => this._maxBitrateBps; set => this._maxBitrateBps = value; }

        /// <summary>Backing field for <see cref="MaxHeight" /> property.</summary>
        private int? _maxHeight;

        /// <summary>
        /// The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the
        /// input is 4K.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? MaxHeight { get => this._maxHeight; set => this._maxHeight = value; }

        /// <summary>Backing field for <see cref="MaxLayer" /> property.</summary>
        private int? _maxLayer;

        /// <summary>
        /// The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced
        /// to control the overall cost of the encoding job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? MaxLayer { get => this._maxLayer; set => this._maxLayer = value; }

        /// <summary>Backing field for <see cref="MinBitrateBps" /> property.</summary>
        private int? _minBitrateBps;

        /// <summary>
        /// The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to
        /// have a bottom layer that covers users with low network bandwidth.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? MinBitrateBps { get => this._minBitrateBps; set => this._minBitrateBps = value; }

        /// <summary>Backing field for <see cref="MinHeight" /> property.</summary>
        private int? _minHeight;

        /// <summary>
        /// The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions
        /// like 180P.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? MinHeight { get => this._minHeight; set => this._minHeight = value; }

        /// <summary>Creates an new <see cref="PresetConfigurations" /> instance.</summary>
        public PresetConfigurations()
        {

        }
    }
    /// An object of optional configuration settings for encoder.
    public partial interface IPresetConfigurations :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity
        /// as Speed for faster encoding but less compression efficiency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity as Speed for faster encoding but less compression efficiency.",
        SerializedName = @"complexity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? Complexity { get; set; }
        /// <summary>
        /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set
        /// InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.",
        SerializedName = @"interleaveOutput",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? InterleaveOutput { get; set; }
        /// <summary>
        /// The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some
        /// players.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some players.",
        SerializedName = @"keyFrameIntervalInSeconds",
        PossibleTypes = new [] { typeof(float) })]
        float? KeyFrameIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid
        /// producing very high bitrate outputs for contents with high complexity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid producing very high bitrate outputs for contents with high complexity.",
        SerializedName = @"maxBitrateBps",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxBitrateBps { get; set; }
        /// <summary>
        /// The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the
        /// input is 4K.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the input is 4K.",
        SerializedName = @"maxHeight",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxHeight { get; set; }
        /// <summary>
        /// The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced
        /// to control the overall cost of the encoding job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced to control the overall cost of the encoding job.",
        SerializedName = @"maxLayers",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxLayer { get; set; }
        /// <summary>
        /// The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to
        /// have a bottom layer that covers users with low network bandwidth.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to have a bottom layer that covers users with low network bandwidth.",
        SerializedName = @"minBitrateBps",
        PossibleTypes = new [] { typeof(int) })]
        int? MinBitrateBps { get; set; }
        /// <summary>
        /// The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions
        /// like 180P.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions like 180P.",
        SerializedName = @"minHeight",
        PossibleTypes = new [] { typeof(int) })]
        int? MinHeight { get; set; }

    }
    /// An object of optional configuration settings for encoder.
    internal partial interface IPresetConfigurationsInternal

    {
        /// <summary>
        /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity
        /// as Speed for faster encoding but less compression efficiency.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? Complexity { get; set; }
        /// <summary>
        /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set
        /// InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? InterleaveOutput { get; set; }
        /// <summary>
        /// The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some
        /// players.
        /// </summary>
        float? KeyFrameIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid
        /// producing very high bitrate outputs for contents with high complexity.
        /// </summary>
        int? MaxBitrateBps { get; set; }
        /// <summary>
        /// The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the
        /// input is 4K.
        /// </summary>
        int? MaxHeight { get; set; }
        /// <summary>
        /// The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced
        /// to control the overall cost of the encoding job.
        /// </summary>
        int? MaxLayer { get; set; }
        /// <summary>
        /// The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to
        /// have a bottom layer that covers users with low network bandwidth.
        /// </summary>
        int? MinBitrateBps { get; set; }
        /// <summary>
        /// The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions
        /// like 180P.
        /// </summary>
        int? MinHeight { get; set; }

    }
}