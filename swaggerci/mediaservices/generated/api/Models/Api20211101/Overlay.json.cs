// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Base type for all overlays - image, audio or video.</summary>
    public partial class Overlay
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IOverlay.
        /// Note: the Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IOverlay interface is polymorphic, and the
        /// precise model class that will get deserialized is determined at runtime based on the payload.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IOverlay.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IOverlay FromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode node)
        {
            if (!(node is Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json))
            {
                return null;
            }
            // Polymorphic type -- select the appropriate constructor using the discriminator

            switch ( json.StringProperty("@odata.type") )
            {
                case "#Microsoft.Media.AudioOverlay":
                {
                    return new AudioOverlay(json);
                }
                case "#Microsoft.Media.VideoOverlay":
                {
                    return new VideoOverlay(json);
                }
            }
            return new Overlay(json);
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject into a new instance of <see cref="Overlay" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal Overlay(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_odataType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("@odata.type"), out var __jsonOdataType) ? (string)__jsonOdataType : (string)OdataType;}
            {_inputLabel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("inputLabel"), out var __jsonInputLabel) ? (string)__jsonInputLabel : (string)InputLabel;}
            {_start = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("start"), out var __jsonStart) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonStart ) : Start;}
            {_end = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("end"), out var __jsonEnd) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonEnd ) : End;}
            {_fadeInDuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fadeInDuration"), out var __jsonFadeInDuration) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonFadeInDuration ) : FadeInDuration;}
            {_fadeOutDuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fadeOutDuration"), out var __jsonFadeOutDuration) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonFadeOutDuration ) : FadeOutDuration;}
            {_audioGainLevel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("audioGainLevel"), out var __jsonAudioGainLevel) ? (double?)__jsonAudioGainLevel : AudioGainLevel;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="Overlay" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="Overlay" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._odataType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._odataType.ToString()) : null, "@odata.type" ,container.Add );
            AddIf( null != (((object)this._inputLabel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._inputLabel.ToString()) : null, "inputLabel" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)(null != this._start ? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._start)): null), "start" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)(null != this._end ? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._end)): null), "end" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)(null != this._fadeInDuration ? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._fadeInDuration)): null), "fadeInDuration" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)(null != this._fadeOutDuration ? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._fadeOutDuration)): null), "fadeOutDuration" ,container.Add );
            AddIf( null != this._audioGainLevel ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((double)this._audioGainLevel) : null, "audioGainLevel" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}