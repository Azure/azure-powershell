// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.PowerShell;

    /// <summary>Configures the Play Right in the PlayReady license.</summary>
    [System.ComponentModel.TypeConverter(typeof(ContentKeyPolicyPlayReadyPlayRightTypeConverter))]
    public partial class ContentKeyPolicyPlayReadyPlayRight
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRight"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ContentKeyPolicyPlayReadyPlayRight(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ExplicitAnalogTelevisionOutputRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestriction = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestriction, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionTypeConverter.ConvertFrom);
            }
            if (content.Contains("FirstPlayExpiration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).FirstPlayExpiration = (global::System.TimeSpan?) content.GetValueForProperty("FirstPlayExpiration",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).FirstPlayExpiration, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ScmsRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ScmsRestriction = (int?) content.GetValueForProperty("ScmsRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ScmsRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AgcAndColorStripeRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AgcAndColorStripeRestriction = (int?) content.GetValueForProperty("AgcAndColorStripeRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AgcAndColorStripeRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DigitalVideoOnlyContentRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).DigitalVideoOnlyContentRestriction = (bool) content.GetValueForProperty("DigitalVideoOnlyContentRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).DigitalVideoOnlyContentRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ImageConstraintForAnalogComponentVideoRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComponentVideoRestriction = (bool) content.GetValueForProperty("ImageConstraintForAnalogComponentVideoRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComponentVideoRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ImageConstraintForAnalogComputerMonitorRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComputerMonitorRestriction = (bool) content.GetValueForProperty("ImageConstraintForAnalogComputerMonitorRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComputerMonitorRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AllowPassingVideoContentToUnknownOutput"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AllowPassingVideoContentToUnknownOutput = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption) content.GetValueForProperty("AllowPassingVideoContentToUnknownOutput",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AllowPassingVideoContentToUnknownOutput, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption.CreateFrom);
            }
            if (content.Contains("UncompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalVideoOpl = (int?) content.GetValueForProperty("UncompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalVideoOpl = (int?) content.GetValueForProperty("CompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AnalogVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AnalogVideoOpl = (int?) content.GetValueForProperty("AnalogVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AnalogVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalAudioOpl = (int?) content.GetValueForProperty("CompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UncompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalAudioOpl = (int?) content.GetValueForProperty("UncompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionBestEffort"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort = (bool) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionBestEffort",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionConfigurationData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData = (int) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionConfigurationData",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRight"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ContentKeyPolicyPlayReadyPlayRight(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ExplicitAnalogTelevisionOutputRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestriction = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestriction, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionTypeConverter.ConvertFrom);
            }
            if (content.Contains("FirstPlayExpiration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).FirstPlayExpiration = (global::System.TimeSpan?) content.GetValueForProperty("FirstPlayExpiration",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).FirstPlayExpiration, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ScmsRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ScmsRestriction = (int?) content.GetValueForProperty("ScmsRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ScmsRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AgcAndColorStripeRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AgcAndColorStripeRestriction = (int?) content.GetValueForProperty("AgcAndColorStripeRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AgcAndColorStripeRestriction, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DigitalVideoOnlyContentRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).DigitalVideoOnlyContentRestriction = (bool) content.GetValueForProperty("DigitalVideoOnlyContentRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).DigitalVideoOnlyContentRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ImageConstraintForAnalogComponentVideoRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComponentVideoRestriction = (bool) content.GetValueForProperty("ImageConstraintForAnalogComponentVideoRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComponentVideoRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ImageConstraintForAnalogComputerMonitorRestriction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComputerMonitorRestriction = (bool) content.GetValueForProperty("ImageConstraintForAnalogComputerMonitorRestriction",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ImageConstraintForAnalogComputerMonitorRestriction, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AllowPassingVideoContentToUnknownOutput"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AllowPassingVideoContentToUnknownOutput = (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption) content.GetValueForProperty("AllowPassingVideoContentToUnknownOutput",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AllowPassingVideoContentToUnknownOutput, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption.CreateFrom);
            }
            if (content.Contains("UncompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalVideoOpl = (int?) content.GetValueForProperty("UncompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CompressedDigitalVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalVideoOpl = (int?) content.GetValueForProperty("CompressedDigitalVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AnalogVideoOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AnalogVideoOpl = (int?) content.GetValueForProperty("AnalogVideoOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).AnalogVideoOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalAudioOpl = (int?) content.GetValueForProperty("CompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).CompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UncompressedDigitalAudioOpl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalAudioOpl = (int?) content.GetValueForProperty("UncompressedDigitalAudioOpl",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).UncompressedDigitalAudioOpl, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionBestEffort"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort = (bool) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionBestEffort",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionBestEffort, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ExplicitAnalogTelevisionOutputRestrictionConfigurationData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData = (int) content.GetValueForProperty("ExplicitAnalogTelevisionOutputRestrictionConfigurationData",((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal)this).ExplicitAnalogTelevisionOutputRestrictionConfigurationData, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRight"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ContentKeyPolicyPlayReadyPlayRight(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyPlayRight"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ContentKeyPolicyPlayReadyPlayRight(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ContentKeyPolicyPlayReadyPlayRight" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>
        /// an instance of the <see cref="ContentKeyPolicyPlayReadyPlayRight" /> model class.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Configures the Play Right in the PlayReady license.
    [System.ComponentModel.TypeConverter(typeof(ContentKeyPolicyPlayReadyPlayRightTypeConverter))]
    public partial interface IContentKeyPolicyPlayReadyPlayRight

    {

    }
}