// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// Describes a built-in preset for encoding the input video with the Standard Encoder.
    /// </summary>
    public partial class BuiltInStandardEncoderPreset :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IBuiltInStandardEncoderPreset,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IBuiltInStandardEncoderPresetInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPreset"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPreset __preset = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.Preset();

        /// <summary>Backing field for <see cref="Configuration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurations _configuration;

        /// <summary>
        /// Optional configuration settings for encoder. Configurations is only supported for ContentAwareEncoding and H265ContentAwareEncoding
        /// BuiltInStandardEncoderPreset.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurations Configuration { get => (this._configuration = this._configuration ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.PresetConfigurations()); set => this._configuration = value; }

        /// <summary>
        /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity
        /// as Speed for faster encoding but less compression efficiency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? ConfigurationComplexity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).Complexity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).Complexity = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity)""); }

        /// <summary>
        /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set
        /// InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? ConfigurationInterleaveOutput { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).InterleaveOutput; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).InterleaveOutput = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput)""); }

        /// <summary>
        /// The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some
        /// players.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public float? ConfigurationKeyFrameIntervalInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).KeyFrameIntervalInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).KeyFrameIntervalInSecond = value ?? default(float); }

        /// <summary>
        /// The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid
        /// producing very high bitrate outputs for contents with high complexity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ConfigurationMaxBitrateBps { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MaxBitrateBps; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MaxBitrateBps = value ?? default(int); }

        /// <summary>
        /// The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the
        /// input is 4K.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ConfigurationMaxHeight { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MaxHeight; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MaxHeight = value ?? default(int); }

        /// <summary>
        /// The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced
        /// to control the overall cost of the encoding job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ConfigurationMaxLayer { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MaxLayer; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MaxLayer = value ?? default(int); }

        /// <summary>
        /// The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to
        /// have a bottom layer that covers users with low network bandwidth.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ConfigurationMinBitrateBps { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MinBitrateBps; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MinBitrateBps = value ?? default(int); }

        /// <summary>
        /// The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions
        /// like 180P.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ConfigurationMinHeight { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MinHeight; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurationsInternal)Configuration).MinHeight = value ?? default(int); }

        /// <summary>Internal Acessors for Configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurations Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IBuiltInStandardEncoderPresetInternal.Configuration { get => (this._configuration = this._configuration ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.PresetConfigurations()); set { {_configuration = value;} } }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetInternal)__preset).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetInternal)__preset).OdataType = value ; }

        /// <summary>Backing field for <see cref="PresetName" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset _presetName;

        /// <summary>The built-in preset to be used for encoding videos.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset PresetName { get => this._presetName; set => this._presetName = value; }

        /// <summary>Creates an new <see cref="BuiltInStandardEncoderPreset" /> instance.</summary>
        public BuiltInStandardEncoderPreset()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__preset), __preset);
            await eventListener.AssertObjectIsValid(nameof(__preset), __preset);
        }
    }
    /// Describes a built-in preset for encoding the input video with the Standard Encoder.
    public partial interface IBuiltInStandardEncoderPreset :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPreset
    {
        /// <summary>
        /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity
        /// as Speed for faster encoding but less compression efficiency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity as Speed for faster encoding but less compression efficiency.",
        SerializedName = @"complexity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? ConfigurationComplexity { get; set; }
        /// <summary>
        /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set
        /// InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.",
        SerializedName = @"interleaveOutput",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? ConfigurationInterleaveOutput { get; set; }
        /// <summary>
        /// The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some
        /// players.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some players.",
        SerializedName = @"keyFrameIntervalInSeconds",
        PossibleTypes = new [] { typeof(float) })]
        float? ConfigurationKeyFrameIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid
        /// producing very high bitrate outputs for contents with high complexity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid producing very high bitrate outputs for contents with high complexity.",
        SerializedName = @"maxBitrateBps",
        PossibleTypes = new [] { typeof(int) })]
        int? ConfigurationMaxBitrateBps { get; set; }
        /// <summary>
        /// The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the
        /// input is 4K.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the input is 4K.",
        SerializedName = @"maxHeight",
        PossibleTypes = new [] { typeof(int) })]
        int? ConfigurationMaxHeight { get; set; }
        /// <summary>
        /// The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced
        /// to control the overall cost of the encoding job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced to control the overall cost of the encoding job.",
        SerializedName = @"maxLayers",
        PossibleTypes = new [] { typeof(int) })]
        int? ConfigurationMaxLayer { get; set; }
        /// <summary>
        /// The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to
        /// have a bottom layer that covers users with low network bandwidth.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to have a bottom layer that covers users with low network bandwidth.",
        SerializedName = @"minBitrateBps",
        PossibleTypes = new [] { typeof(int) })]
        int? ConfigurationMinBitrateBps { get; set; }
        /// <summary>
        /// The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions
        /// like 180P.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions like 180P.",
        SerializedName = @"minHeight",
        PossibleTypes = new [] { typeof(int) })]
        int? ConfigurationMinHeight { get; set; }
        /// <summary>The built-in preset to be used for encoding videos.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The built-in preset to be used for encoding videos.",
        SerializedName = @"presetName",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset PresetName { get; set; }

    }
    /// Describes a built-in preset for encoding the input video with the Standard Encoder.
    internal partial interface IBuiltInStandardEncoderPresetInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetInternal
    {
        /// <summary>
        /// Optional configuration settings for encoder. Configurations is only supported for ContentAwareEncoding and H265ContentAwareEncoding
        /// BuiltInStandardEncoderPreset.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetConfigurations Configuration { get; set; }
        /// <summary>
        /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity
        /// as Speed for faster encoding but less compression efficiency.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Complexity? ConfigurationComplexity { get; set; }
        /// <summary>
        /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set
        /// InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.InterleaveOutput? ConfigurationInterleaveOutput { get; set; }
        /// <summary>
        /// The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some
        /// players.
        /// </summary>
        float? ConfigurationKeyFrameIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid
        /// producing very high bitrate outputs for contents with high complexity.
        /// </summary>
        int? ConfigurationMaxBitrateBps { get; set; }
        /// <summary>
        /// The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the
        /// input is 4K.
        /// </summary>
        int? ConfigurationMaxHeight { get; set; }
        /// <summary>
        /// The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced
        /// to control the overall cost of the encoding job.
        /// </summary>
        int? ConfigurationMaxLayer { get; set; }
        /// <summary>
        /// The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to
        /// have a bottom layer that covers users with low network bandwidth.
        /// </summary>
        int? ConfigurationMinBitrateBps { get; set; }
        /// <summary>
        /// The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions
        /// like 180P.
        /// </summary>
        int? ConfigurationMinHeight { get; set; }
        /// <summary>The built-in preset to be used for encoding videos.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.EncoderNamedPreset PresetName { get; set; }

    }
}