// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// Describes the settings to be used when encoding the input video into a desired output bitrate layer.
    /// </summary>
    public partial class H265VideoLayer :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265VideoLayer,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IH265VideoLayerInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayer"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayer __layer = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.Layer();

        /// <summary>Backing field for <see cref="AdaptiveBFrame" /> property.</summary>
        private bool? _adaptiveBFrame;

        /// <summary>
        /// Specifies whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will
        /// turn it on whenever the video profile permits its use.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool? AdaptiveBFrame { get => this._adaptiveBFrame; set => this._adaptiveBFrame = value; }

        /// <summary>Backing field for <see cref="BFrame" /> property.</summary>
        private int? _bFrame;

        /// <summary>
        /// The number of B-frames to be used when encoding this layer. If not specified, the encoder chooses an appropriate number
        /// based on the video profile and level.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? BFrame { get => this._bFrame; set => this._bFrame = value; }

        /// <summary>Backing field for <see cref="Bitrate" /> property.</summary>
        private int _bitrate;

        /// <summary>
        /// The average bitrate in bits per second at which to encode the input video when generating this layer. For example: a target
        /// bitrate of 3000Kbps or 3Mbps means this value should be 3000000 This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int Bitrate { get => this._bitrate; set => this._bitrate = value; }

        /// <summary>Backing field for <see cref="FrameRate" /> property.</summary>
        private string _frameRate;

        /// <summary>
        /// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N
        /// are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints
        /// on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate
        /// as the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FrameRate { get => this._frameRate; set => this._frameRate = value; }

        /// <summary>
        /// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For
        /// example 50% means the output video has half as many pixels in height as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Height { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal)__layer).Height; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal)__layer).Height = value ?? null; }

        /// <summary>
        /// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming
        /// the output file.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Label { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal)__layer).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal)__layer).Label = value ?? null; }

        /// <summary>Backing field for <see cref="MaxBitrate" /> property.</summary>
        private int? _maxBitrate;

        /// <summary>
        /// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults
        /// to the same value as bitrate.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? MaxBitrate { get => this._maxBitrate; set => this._maxBitrate = value; }

        /// <summary>Backing field for <see cref="Slice" /> property.</summary>
        private int? _slice;

        /// <summary>
        /// The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder
        /// will use a single slice for each frame.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? Slice { get => this._slice; set => this._slice = value; }

        /// <summary>
        /// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example
        /// 50% means the output video has half as many pixels in width as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Width { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal)__layer).Width; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal)__layer).Width = value ?? null; }

        /// <summary>Creates an new <see cref="H265VideoLayer" /> instance.</summary>
        public H265VideoLayer()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__layer), __layer);
            await eventListener.AssertObjectIsValid(nameof(__layer), __layer);
        }
    }
    /// Describes the settings to be used when encoding the input video into a desired output bitrate layer.
    public partial interface IH265VideoLayer :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayer
    {
        /// <summary>
        /// Specifies whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will
        /// turn it on whenever the video profile permits its use.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.",
        SerializedName = @"adaptiveBFrame",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AdaptiveBFrame { get; set; }
        /// <summary>
        /// The number of B-frames to be used when encoding this layer. If not specified, the encoder chooses an appropriate number
        /// based on the video profile and level.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.",
        SerializedName = @"bFrames",
        PossibleTypes = new [] { typeof(int) })]
        int? BFrame { get; set; }
        /// <summary>
        /// The average bitrate in bits per second at which to encode the input video when generating this layer. For example: a target
        /// bitrate of 3000Kbps or 3Mbps means this value should be 3000000 This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The average bitrate in bits per second at which to encode the input video when generating this layer. For example: a target bitrate of 3000Kbps or 3Mbps means this value should be 3000000 This is a required field.",
        SerializedName = @"bitrate",
        PossibleTypes = new [] { typeof(int) })]
        int Bitrate { get; set; }
        /// <summary>
        /// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N
        /// are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints
        /// on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate
        /// as the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.",
        SerializedName = @"frameRate",
        PossibleTypes = new [] { typeof(string) })]
        string FrameRate { get; set; }
        /// <summary>
        /// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults
        /// to the same value as bitrate.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.",
        SerializedName = @"maxBitrate",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxBitrate { get; set; }
        /// <summary>
        /// The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder
        /// will use a single slice for each frame.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.",
        SerializedName = @"slices",
        PossibleTypes = new [] { typeof(int) })]
        int? Slice { get; set; }

    }
    /// Describes the settings to be used when encoding the input video into a desired output bitrate layer.
    internal partial interface IH265VideoLayerInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal
    {
        /// <summary>
        /// Specifies whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will
        /// turn it on whenever the video profile permits its use.
        /// </summary>
        bool? AdaptiveBFrame { get; set; }
        /// <summary>
        /// The number of B-frames to be used when encoding this layer. If not specified, the encoder chooses an appropriate number
        /// based on the video profile and level.
        /// </summary>
        int? BFrame { get; set; }
        /// <summary>
        /// The average bitrate in bits per second at which to encode the input video when generating this layer. For example: a target
        /// bitrate of 3000Kbps or 3Mbps means this value should be 3000000 This is a required field.
        /// </summary>
        int Bitrate { get; set; }
        /// <summary>
        /// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N
        /// are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints
        /// on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate
        /// as the input video.
        /// </summary>
        string FrameRate { get; set; }
        /// <summary>
        /// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults
        /// to the same value as bitrate.
        /// </summary>
        int? MaxBitrate { get; set; }
        /// <summary>
        /// The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder
        /// will use a single slice for each frame.
        /// </summary>
        int? Slice { get; set; }

    }
}