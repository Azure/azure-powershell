// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Defines the common properties for all audio codecs.</summary>
    public partial class Audio :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IAudio,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IAudioInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodec"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodec __codec = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.Codec();

        /// <summary>Backing field for <see cref="Bitrate" /> property.</summary>
        private int? _bitrate;

        /// <summary>The bitrate, in bits per second, of the output encoded audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? Bitrate { get => this._bitrate; set => this._bitrate = value; }

        /// <summary>Backing field for <see cref="Channel" /> property.</summary>
        private int? _channel;

        /// <summary>The number of channels in the audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? Channel { get => this._channel; set => this._channel = value; }

        /// <summary>
        /// An optional label for the codec. The label can be used to control muxing behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Label { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__codec).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__codec).Label = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__codec).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal)__codec).OdataType = value ; }

        /// <summary>Backing field for <see cref="SamplingRate" /> property.</summary>
        private int? _samplingRate;

        /// <summary>The sampling rate to use for encoding in hertz.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? SamplingRate { get => this._samplingRate; set => this._samplingRate = value; }

        /// <summary>Creates an new <see cref="Audio" /> instance.</summary>
        public Audio()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__codec), __codec);
            await eventListener.AssertObjectIsValid(nameof(__codec), __codec);
        }
    }
    /// Defines the common properties for all audio codecs.
    public partial interface IAudio :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodec
    {
        /// <summary>The bitrate, in bits per second, of the output encoded audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The bitrate, in bits per second, of the output encoded audio.",
        SerializedName = @"bitrate",
        PossibleTypes = new [] { typeof(int) })]
        int? Bitrate { get; set; }
        /// <summary>The number of channels in the audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of channels in the audio.",
        SerializedName = @"channels",
        PossibleTypes = new [] { typeof(int) })]
        int? Channel { get; set; }
        /// <summary>The sampling rate to use for encoding in hertz.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The sampling rate to use for encoding in hertz.",
        SerializedName = @"samplingRate",
        PossibleTypes = new [] { typeof(int) })]
        int? SamplingRate { get; set; }

    }
    /// Defines the common properties for all audio codecs.
    internal partial interface IAudioInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ICodecInternal
    {
        /// <summary>The bitrate, in bits per second, of the output encoded audio.</summary>
        int? Bitrate { get; set; }
        /// <summary>The number of channels in the audio.</summary>
        int? Channel { get; set; }
        /// <summary>The sampling rate to use for encoding in hertz.</summary>
        int? SamplingRate { get; set; }

    }
}