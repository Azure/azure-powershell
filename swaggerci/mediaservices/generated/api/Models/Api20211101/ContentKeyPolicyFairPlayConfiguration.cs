// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Specifies a configuration for FairPlay licenses.</summary>
    public partial class ContentKeyPolicyFairPlayConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayConfigurationInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyConfiguration"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyConfiguration __contentKeyPolicyConfiguration = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyConfiguration();

        /// <summary>Backing field for <see cref="Ask" /> property.</summary>
        private byte[] _ask;

        /// <summary>The key that must be used as FairPlay Application Secret key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public byte[] Ask { get => this._ask; set => this._ask = value; }

        /// <summary>Backing field for <see cref="FairPlayPfx" /> property.</summary>
        private string _fairPlayPfx;

        /// <summary>
        /// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FairPlayPfx { get => this._fairPlayPfx; set => this._fairPlayPfx = value; }

        /// <summary>Backing field for <see cref="FairPlayPfxPassword" /> property.</summary>
        private string _fairPlayPfxPassword;

        /// <summary>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FairPlayPfxPassword { get => this._fairPlayPfxPassword; set => this._fairPlayPfxPassword = value; }

        /// <summary>Internal Acessors for OfflineRentalConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfiguration Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayConfigurationInternal.OfflineRentalConfiguration { get => (this._offlineRentalConfiguration = this._offlineRentalConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyFairPlayOfflineRentalConfiguration()); set { {_offlineRentalConfiguration = value;} } }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyConfigurationInternal)__contentKeyPolicyConfiguration).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyConfigurationInternal)__contentKeyPolicyConfiguration).OdataType = value ; }

        /// <summary>Backing field for <see cref="OfflineRentalConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfiguration _offlineRentalConfiguration;

        /// <summary>Offline rental policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfiguration OfflineRentalConfiguration { get => (this._offlineRentalConfiguration = this._offlineRentalConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyFairPlayOfflineRentalConfiguration()); set => this._offlineRentalConfiguration = value; }

        /// <summary>Playback duration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public long? OfflineRentalConfigurationPlaybackDurationSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfigurationInternal)OfflineRentalConfiguration).PlaybackDurationSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfigurationInternal)OfflineRentalConfiguration).PlaybackDurationSecond = value ?? default(long); }

        /// <summary>Storage duration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public long? OfflineRentalConfigurationStorageDurationSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfigurationInternal)OfflineRentalConfiguration).StorageDurationSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfigurationInternal)OfflineRentalConfiguration).StorageDurationSecond = value ?? default(long); }

        /// <summary>Backing field for <see cref="RentalAndLeaseKeyType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyFairPlayRentalAndLeaseKeyType _rentalAndLeaseKeyType;

        /// <summary>The rental and lease key type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyFairPlayRentalAndLeaseKeyType RentalAndLeaseKeyType { get => this._rentalAndLeaseKeyType; set => this._rentalAndLeaseKeyType = value; }

        /// <summary>Backing field for <see cref="RentalDuration" /> property.</summary>
        private long _rentalDuration;

        /// <summary>The rental duration. Must be greater than or equal to 0.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long RentalDuration { get => this._rentalDuration; set => this._rentalDuration = value; }

        /// <summary>Creates an new <see cref="ContentKeyPolicyFairPlayConfiguration" /> instance.</summary>
        public ContentKeyPolicyFairPlayConfiguration()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__contentKeyPolicyConfiguration), __contentKeyPolicyConfiguration);
            await eventListener.AssertObjectIsValid(nameof(__contentKeyPolicyConfiguration), __contentKeyPolicyConfiguration);
        }
    }
    /// Specifies a configuration for FairPlay licenses.
    public partial interface IContentKeyPolicyFairPlayConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyConfiguration
    {
        /// <summary>The key that must be used as FairPlay Application Secret key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The key that must be used as FairPlay Application Secret key.",
        SerializedName = @"ask",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] Ask { get; set; }
        /// <summary>
        /// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).",
        SerializedName = @"fairPlayPfx",
        PossibleTypes = new [] { typeof(string) })]
        string FairPlayPfx { get; set; }
        /// <summary>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The password encrypting FairPlay certificate in PKCS 12 (pfx) format.",
        SerializedName = @"fairPlayPfxPassword",
        PossibleTypes = new [] { typeof(string) })]
        string FairPlayPfxPassword { get; set; }
        /// <summary>Playback duration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Playback duration",
        SerializedName = @"playbackDurationSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? OfflineRentalConfigurationPlaybackDurationSecond { get; set; }
        /// <summary>Storage duration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage duration",
        SerializedName = @"storageDurationSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? OfflineRentalConfigurationStorageDurationSecond { get; set; }
        /// <summary>The rental and lease key type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The rental and lease key type.",
        SerializedName = @"rentalAndLeaseKeyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyFairPlayRentalAndLeaseKeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyFairPlayRentalAndLeaseKeyType RentalAndLeaseKeyType { get; set; }
        /// <summary>The rental duration. Must be greater than or equal to 0.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The rental duration. Must be greater than or equal to 0.",
        SerializedName = @"rentalDuration",
        PossibleTypes = new [] { typeof(long) })]
        long RentalDuration { get; set; }

    }
    /// Specifies a configuration for FairPlay licenses.
    internal partial interface IContentKeyPolicyFairPlayConfigurationInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyConfigurationInternal
    {
        /// <summary>The key that must be used as FairPlay Application Secret key.</summary>
        byte[] Ask { get; set; }
        /// <summary>
        /// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
        /// </summary>
        string FairPlayPfx { get; set; }
        /// <summary>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</summary>
        string FairPlayPfxPassword { get; set; }
        /// <summary>Offline rental policy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyFairPlayOfflineRentalConfiguration OfflineRentalConfiguration { get; set; }
        /// <summary>Playback duration</summary>
        long? OfflineRentalConfigurationPlaybackDurationSecond { get; set; }
        /// <summary>Storage duration</summary>
        long? OfflineRentalConfigurationStorageDurationSecond { get; set; }
        /// <summary>The rental and lease key type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyFairPlayRentalAndLeaseKeyType RentalAndLeaseKeyType { get; set; }
        /// <summary>The rental duration. Must be greater than or equal to 0.</summary>
        long RentalDuration { get; set; }

    }
}