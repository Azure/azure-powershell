// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Configures the Play Right in the PlayReady license.</summary>
    public partial class ContentKeyPolicyPlayReadyPlayRight :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRight,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal
    {

        /// <summary>Backing field for <see cref="AgcAndColorStripeRestriction" /> property.</summary>
        private int? _agcAndColorStripeRestriction;

        /// <summary>
        /// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? AgcAndColorStripeRestriction { get => this._agcAndColorStripeRestriction; set => this._agcAndColorStripeRestriction = value; }

        /// <summary>
        /// Backing field for <see cref="AllowPassingVideoContentToUnknownOutput" /> property.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption _allowPassingVideoContentToUnknownOutput;

        /// <summary>Configures Unknown output handling settings of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowPassingVideoContentToUnknownOutput { get => this._allowPassingVideoContentToUnknownOutput; set => this._allowPassingVideoContentToUnknownOutput = value; }

        /// <summary>Backing field for <see cref="AnalogVideoOpl" /> property.</summary>
        private int? _analogVideoOpl;

        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? AnalogVideoOpl { get => this._analogVideoOpl; set => this._analogVideoOpl = value; }

        /// <summary>Backing field for <see cref="CompressedDigitalAudioOpl" /> property.</summary>
        private int? _compressedDigitalAudioOpl;

        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? CompressedDigitalAudioOpl { get => this._compressedDigitalAudioOpl; set => this._compressedDigitalAudioOpl = value; }

        /// <summary>Backing field for <see cref="CompressedDigitalVideoOpl" /> property.</summary>
        private int? _compressedDigitalVideoOpl;

        /// <summary>Specifies the output protection level for compressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? CompressedDigitalVideoOpl { get => this._compressedDigitalVideoOpl; set => this._compressedDigitalVideoOpl = value; }

        /// <summary>Backing field for <see cref="DigitalVideoOnlyContentRestriction" /> property.</summary>
        private bool _digitalVideoOnlyContentRestriction;

        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool DigitalVideoOnlyContentRestriction { get => this._digitalVideoOnlyContentRestriction; set => this._digitalVideoOnlyContentRestriction = value; }

        /// <summary>
        /// Backing field for <see cref="ExplicitAnalogTelevisionOutputRestriction" /> property.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction _explicitAnalogTelevisionOutputRestriction;

        /// <summary>
        /// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and
        /// 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction ExplicitAnalogTelevisionOutputRestriction { get => (this._explicitAnalogTelevisionOutputRestriction = this._explicitAnalogTelevisionOutputRestriction ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction()); set => this._explicitAnalogTelevisionOutputRestriction = value; }

        /// <summary>Indicates whether this restriction is enforced on a Best Effort basis.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? ExplicitAnalogTelevisionOutputRestrictionBestEffort { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInternal)ExplicitAnalogTelevisionOutputRestriction).BestEffort; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInternal)ExplicitAnalogTelevisionOutputRestriction).BestEffort = value ?? default(bool); }

        /// <summary>Configures the restriction control bits. Must be between 0 and 3 inclusive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public int? ExplicitAnalogTelevisionOutputRestrictionConfigurationData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInternal)ExplicitAnalogTelevisionOutputRestriction).ConfigurationData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInternal)ExplicitAnalogTelevisionOutputRestriction).ConfigurationData = value ?? default(int); }

        /// <summary>Backing field for <see cref="FirstPlayExpiration" /> property.</summary>
        private global::System.TimeSpan? _firstPlayExpiration;

        /// <summary>
        /// The amount of time that the license is valid after the license is first used to play content.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.TimeSpan? FirstPlayExpiration { get => this._firstPlayExpiration; set => this._firstPlayExpiration = value; }

        /// <summary>
        /// Backing field for <see cref="ImageConstraintForAnalogComponentVideoRestriction" /> property.
        /// </summary>
        private bool _imageConstraintForAnalogComponentVideoRestriction;

        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool ImageConstraintForAnalogComponentVideoRestriction { get => this._imageConstraintForAnalogComponentVideoRestriction; set => this._imageConstraintForAnalogComponentVideoRestriction = value; }

        /// <summary>
        /// Backing field for <see cref="ImageConstraintForAnalogComputerMonitorRestriction" /> property.
        /// </summary>
        private bool _imageConstraintForAnalogComputerMonitorRestriction;

        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool ImageConstraintForAnalogComputerMonitorRestriction { get => this._imageConstraintForAnalogComputerMonitorRestriction; set => this._imageConstraintForAnalogComputerMonitorRestriction = value; }

        /// <summary>Internal Acessors for ExplicitAnalogTelevisionOutputRestriction</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyPlayRightInternal.ExplicitAnalogTelevisionOutputRestriction { get => (this._explicitAnalogTelevisionOutputRestriction = this._explicitAnalogTelevisionOutputRestriction ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction()); set { {_explicitAnalogTelevisionOutputRestriction = value;} } }

        /// <summary>Backing field for <see cref="ScmsRestriction" /> property.</summary>
        private int? _scmsRestriction;

        /// <summary>
        /// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? ScmsRestriction { get => this._scmsRestriction; set => this._scmsRestriction = value; }

        /// <summary>Backing field for <see cref="UncompressedDigitalAudioOpl" /> property.</summary>
        private int? _uncompressedDigitalAudioOpl;

        /// <summary>Specifies the output protection level for uncompressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? UncompressedDigitalAudioOpl { get => this._uncompressedDigitalAudioOpl; set => this._uncompressedDigitalAudioOpl = value; }

        /// <summary>Backing field for <see cref="UncompressedDigitalVideoOpl" /> property.</summary>
        private int? _uncompressedDigitalVideoOpl;

        /// <summary>Specifies the output protection level for uncompressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? UncompressedDigitalVideoOpl { get => this._uncompressedDigitalVideoOpl; set => this._uncompressedDigitalVideoOpl = value; }

        /// <summary>Creates an new <see cref="ContentKeyPolicyPlayReadyPlayRight" /> instance.</summary>
        public ContentKeyPolicyPlayReadyPlayRight()
        {

        }
    }
    /// Configures the Play Right in the PlayReady license.
    public partial interface IContentKeyPolicyPlayReadyPlayRight :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.",
        SerializedName = @"agcAndColorStripeRestriction",
        PossibleTypes = new [] { typeof(int) })]
        int? AgcAndColorStripeRestriction { get; set; }
        /// <summary>Configures Unknown output handling settings of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Configures Unknown output handling settings of the license.",
        SerializedName = @"allowPassingVideoContentToUnknownOutput",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowPassingVideoContentToUnknownOutput { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for compressed digital audio.",
        SerializedName = @"analogVideoOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? AnalogVideoOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for compressed digital audio.",
        SerializedName = @"compressedDigitalAudioOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? CompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for compressed digital video.",
        SerializedName = @"compressedDigitalVideoOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? CompressedDigitalVideoOpl { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Enables the Image Constraint For Analog Component Video Restriction in the license.",
        SerializedName = @"digitalVideoOnlyContentRestriction",
        PossibleTypes = new [] { typeof(bool) })]
        bool DigitalVideoOnlyContentRestriction { get; set; }
        /// <summary>Indicates whether this restriction is enforced on a Best Effort basis.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this restriction is enforced on a Best Effort basis.",
        SerializedName = @"bestEffort",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExplicitAnalogTelevisionOutputRestrictionBestEffort { get; set; }
        /// <summary>Configures the restriction control bits. Must be between 0 and 3 inclusive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures the restriction control bits. Must be between 0 and 3 inclusive.",
        SerializedName = @"configurationData",
        PossibleTypes = new [] { typeof(int) })]
        int? ExplicitAnalogTelevisionOutputRestrictionConfigurationData { get; set; }
        /// <summary>
        /// The amount of time that the license is valid after the license is first used to play content.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time that the license is valid after the license is first used to play content.",
        SerializedName = @"firstPlayExpiration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? FirstPlayExpiration { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Enables the Image Constraint For Analog Component Video Restriction in the license.",
        SerializedName = @"imageConstraintForAnalogComponentVideoRestriction",
        PossibleTypes = new [] { typeof(bool) })]
        bool ImageConstraintForAnalogComponentVideoRestriction { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Enables the Image Constraint For Analog Component Video Restriction in the license.",
        SerializedName = @"imageConstraintForAnalogComputerMonitorRestriction",
        PossibleTypes = new [] { typeof(bool) })]
        bool ImageConstraintForAnalogComputerMonitorRestriction { get; set; }
        /// <summary>
        /// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.",
        SerializedName = @"scmsRestriction",
        PossibleTypes = new [] { typeof(int) })]
        int? ScmsRestriction { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for uncompressed digital audio.",
        SerializedName = @"uncompressedDigitalAudioOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? UncompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the output protection level for uncompressed digital video.",
        SerializedName = @"uncompressedDigitalVideoOpl",
        PossibleTypes = new [] { typeof(int) })]
        int? UncompressedDigitalVideoOpl { get; set; }

    }
    /// Configures the Play Right in the PlayReady license.
    internal partial interface IContentKeyPolicyPlayReadyPlayRightInternal

    {
        /// <summary>
        /// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        int? AgcAndColorStripeRestriction { get; set; }
        /// <summary>Configures Unknown output handling settings of the license.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowPassingVideoContentToUnknownOutput { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        int? AnalogVideoOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital audio.</summary>
        int? CompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for compressed digital video.</summary>
        int? CompressedDigitalVideoOpl { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        bool DigitalVideoOnlyContentRestriction { get; set; }
        /// <summary>
        /// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and
        /// 3 inclusive.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction ExplicitAnalogTelevisionOutputRestriction { get; set; }
        /// <summary>Indicates whether this restriction is enforced on a Best Effort basis.</summary>
        bool? ExplicitAnalogTelevisionOutputRestrictionBestEffort { get; set; }
        /// <summary>Configures the restriction control bits. Must be between 0 and 3 inclusive.</summary>
        int? ExplicitAnalogTelevisionOutputRestrictionConfigurationData { get; set; }
        /// <summary>
        /// The amount of time that the license is valid after the license is first used to play content.
        /// </summary>
        global::System.TimeSpan? FirstPlayExpiration { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        bool ImageConstraintForAnalogComponentVideoRestriction { get; set; }
        /// <summary>
        /// Enables the Image Constraint For Analog Component Video Restriction in the license.
        /// </summary>
        bool ImageConstraintForAnalogComputerMonitorRestriction { get; set; }
        /// <summary>
        /// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        int? ScmsRestriction { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital audio.</summary>
        int? UncompressedDigitalAudioOpl { get; set; }
        /// <summary>Specifies the output protection level for uncompressed digital video.</summary>
        int? UncompressedDigitalVideoOpl { get; set; }

    }
}