// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// Describes all the settings to be used when analyzing a video in order to detect (and optionally redact) all the faces
    /// present.
    /// </summary>
    public partial class FaceDetectorPreset :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPreset,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPresetInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPreset"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPreset __preset = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.Preset();

        /// <summary>Backing field for <see cref="BlurType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.BlurType? _blurType;

        /// <summary>Blur type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.BlurType? BlurType { get => this._blurType; set => this._blurType = value; }

        /// <summary>Backing field for <see cref="ExperimentalOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPresetExperimentalOptions _experimentalOption;

        /// <summary>
        /// Dictionary containing key value pairs for parameters not exposed in the preset itself
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPresetExperimentalOptions ExperimentalOption { get => (this._experimentalOption = this._experimentalOption ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.FaceDetectorPresetExperimentalOptions()); set => this._experimentalOption = value; }

        /// <summary>Backing field for <see cref="Mode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.FaceRedactorMode? _mode;

        /// <summary>
        /// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates
        /// a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person
        /// are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass
        /// process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze
        /// pass, along with the source video, and a user-selected subset of IDs that require redaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.FaceRedactorMode? Mode { get => this._mode; set => this._mode = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetInternal)__preset).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetInternal)__preset).OdataType = value ; }

        /// <summary>Backing field for <see cref="Resolution" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AnalysisResolution? _resolution;

        /// <summary>
        /// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will
        /// keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to
        /// standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution.
        /// For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce
        /// the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics
        /// for details). However, faces that end up being too small in the resized video may not be detected.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AnalysisResolution? Resolution { get => this._resolution; set => this._resolution = value; }

        /// <summary>Creates an new <see cref="FaceDetectorPreset" /> instance.</summary>
        public FaceDetectorPreset()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__preset), __preset);
            await eventListener.AssertObjectIsValid(nameof(__preset), __preset);
        }
    }
    /// Describes all the settings to be used when analyzing a video in order to detect (and optionally redact) all the faces
    /// present.
    public partial interface IFaceDetectorPreset :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPreset
    {
        /// <summary>Blur type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blur type",
        SerializedName = @"blurType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.BlurType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.BlurType? BlurType { get; set; }
        /// <summary>
        /// Dictionary containing key value pairs for parameters not exposed in the preset itself
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dictionary containing key value pairs for parameters not exposed in the preset itself",
        SerializedName = @"experimentalOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPresetExperimentalOptions) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPresetExperimentalOptions ExperimentalOption { get; set; }
        /// <summary>
        /// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates
        /// a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person
        /// are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass
        /// process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze
        /// pass, along with the source video, and a user-selected subset of IDs that require redaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.FaceRedactorMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.FaceRedactorMode? Mode { get; set; }
        /// <summary>
        /// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will
        /// keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to
        /// standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution.
        /// For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce
        /// the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics
        /// for details). However, faces that end up being too small in the resized video may not be detected.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the maximum resolution at which your video is analyzed. The default behavior is ""SourceResolution,"" which will keep the input video at its original resolution when analyzed. Using ""StandardDefinition"" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to ""StandardDefinition"" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.",
        SerializedName = @"resolution",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AnalysisResolution) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AnalysisResolution? Resolution { get; set; }

    }
    /// Describes all the settings to be used when analyzing a video in order to detect (and optionally redact) all the faces
    /// present.
    internal partial interface IFaceDetectorPresetInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IPresetInternal
    {
        /// <summary>Blur type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.BlurType? BlurType { get; set; }
        /// <summary>
        /// Dictionary containing key value pairs for parameters not exposed in the preset itself
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IFaceDetectorPresetExperimentalOptions ExperimentalOption { get; set; }
        /// <summary>
        /// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates
        /// a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person
        /// are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass
        /// process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze
        /// pass, along with the source video, and a user-selected subset of IDs that require redaction.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.FaceRedactorMode? Mode { get; set; }
        /// <summary>
        /// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will
        /// keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to
        /// standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution.
        /// For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce
        /// the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics
        /// for details). However, faces that end up being too small in the resized video may not be detected.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AnalysisResolution? Resolution { get; set; }

    }
}