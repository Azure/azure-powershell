// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// The encoder can be configured to produce video and/or images (thumbnails) at different resolutions, by specifying a layer
    /// for each desired resolution. A layer represents the properties for the video or image at a resolution.
    /// </summary>
    public partial class Layer :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayer,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILayerInternal
    {

        /// <summary>Backing field for <see cref="Height" /> property.</summary>
        private string _height;

        /// <summary>
        /// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For
        /// example 50% means the output video has half as many pixels in height as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Height { get => this._height; set => this._height = value; }

        /// <summary>Backing field for <see cref="Label" /> property.</summary>
        private string _label;

        /// <summary>
        /// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming
        /// the output file.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Label { get => this._label; set => this._label = value; }

        /// <summary>Backing field for <see cref="Width" /> property.</summary>
        private string _width;

        /// <summary>
        /// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example
        /// 50% means the output video has half as many pixels in width as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Width { get => this._width; set => this._width = value; }

        /// <summary>Creates an new <see cref="Layer" /> instance.</summary>
        public Layer()
        {

        }
    }
    /// The encoder can be configured to produce video and/or images (thumbnails) at different resolutions, by specifying a layer
    /// for each desired resolution. A layer represents the properties for the video or image at a resolution.
    public partial interface ILayer :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For
        /// example 50% means the output video has half as many pixels in height as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.",
        SerializedName = @"height",
        PossibleTypes = new [] { typeof(string) })]
        string Height { get; set; }
        /// <summary>
        /// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming
        /// the output file.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.",
        SerializedName = @"label",
        PossibleTypes = new [] { typeof(string) })]
        string Label { get; set; }
        /// <summary>
        /// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example
        /// 50% means the output video has half as many pixels in width as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.",
        SerializedName = @"width",
        PossibleTypes = new [] { typeof(string) })]
        string Width { get; set; }

    }
    /// The encoder can be configured to produce video and/or images (thumbnails) at different resolutions, by specifying a layer
    /// for each desired resolution. A layer represents the properties for the video or image at a resolution.
    internal partial interface ILayerInternal

    {
        /// <summary>
        /// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For
        /// example 50% means the output video has half as many pixels in height as the input.
        /// </summary>
        string Height { get; set; }
        /// <summary>
        /// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming
        /// the output file.
        /// </summary>
        string Label { get; set; }
        /// <summary>
        /// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example
        /// 50% means the output video has half as many pixels in width as the input.
        /// </summary>
        string Width { get; set; }

    }
}