// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>Properties of the Media Services account.</summary>
    public partial class MediaServiceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal
    {

        /// <summary>The behavior for IP access control in Key Delivery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction? AccessControlDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDeliveryInternal)KeyDelivery).AccessControlDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDeliveryInternal)KeyDelivery).AccessControlDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction)""); }

        /// <summary>
        /// The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must
        /// be empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string[] AccessControlIPAllowList { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDeliveryInternal)KeyDelivery).AccessControlIPAllowList; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDeliveryInternal)KeyDelivery).AccessControlIPAllowList = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryption _encryption;

        /// <summary>The account encryption properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.AccountEncryption()); set => this._encryption = value; }

        /// <summary>The current status of the Key Vault mapping.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Status; }

        /// <summary>The type of key used to encrypt the Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType? EncryptionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType)""); }

        /// <summary>
        /// Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? IdentityUseSystemAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).IdentityUseSystemAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).IdentityUseSystemAssignedIdentity = value ?? default(bool); }

        /// <summary>The user assigned managed identity's ARM ID to use when accessing a resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).IdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).IdentityUserAssignedIdentity = value ?? null; }

        /// <summary>Backing field for <see cref="KeyDelivery" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDelivery _keyDelivery;

        /// <summary>The Key Delivery properties for Media Services account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDelivery KeyDelivery { get => (this._keyDelivery = this._keyDelivery ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.KeyDelivery()); set => this._keyDelivery = value; }

        /// <summary>
        /// The current key used to encrypt the Media Services account, including the key version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyCurrentKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultPropertyCurrentKeyIdentifier; }

        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyIdentifier = value ?? null; }

        /// <summary>Backing field for <see cref="MediaServiceId" /> property.</summary>
        private string _mediaServiceId;

        /// <summary>The Media Services account ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string MediaServiceId { get => this._mediaServiceId; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryption Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.AccountEncryption()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for EncryptionIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IResourceIdentity Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.EncryptionIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Identity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Identity = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultProperty = value; }

        /// <summary>Internal Acessors for EncryptionStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).Status = value; }

        /// <summary>Internal Acessors for KeyDelivery</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDelivery Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.KeyDelivery { get => (this._keyDelivery = this._keyDelivery ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.KeyDelivery()); set { {_keyDelivery = value;} } }

        /// <summary>Internal Acessors for KeyDeliveryAccessControl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccessControl Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.KeyDeliveryAccessControl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDeliveryInternal)KeyDelivery).AccessControl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDeliveryInternal)KeyDelivery).AccessControl = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyCurrentKeyIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.KeyVaultPropertyCurrentKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultPropertyCurrentKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryptionInternal)Encryption).KeyVaultPropertyCurrentKeyIdentifier = value; }

        /// <summary>Internal Acessors for MediaServiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal.MediaServiceId { get => this._mediaServiceId; set { {_mediaServiceId = value;} } }

        /// <summary>Backing field for <see cref="PublicNetworkAccess" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? _publicNetworkAccess;

        /// <summary>
        /// Whether or not public network access is allowed for resources under the Media Services account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? PublicNetworkAccess { get => this._publicNetworkAccess; set => this._publicNetworkAccess = value; }

        /// <summary>Backing field for <see cref="StorageAccount" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] _storageAccount;

        /// <summary>The storage accounts for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] StorageAccount { get => this._storageAccount; set => this._storageAccount = value; }

        /// <summary>Backing field for <see cref="StorageAuthentication" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? _storageAuthentication;

        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? StorageAuthentication { get => this._storageAuthentication; set => this._storageAuthentication = value; }

        /// <summary>Creates an new <see cref="MediaServiceProperties" /> instance.</summary>
        public MediaServiceProperties()
        {

        }
    }
    /// Properties of the Media Services account.
    public partial interface IMediaServiceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>The behavior for IP access control in Key Delivery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The behavior for IP access control in Key Delivery.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction? AccessControlDefaultAction { get; set; }
        /// <summary>
        /// The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must
        /// be empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must be empty.",
        SerializedName = @"ipAllowList",
        PossibleTypes = new [] { typeof(string) })]
        string[] AccessControlIPAllowList { get; set; }
        /// <summary>The current status of the Key Vault mapping.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current status of the Key Vault mapping.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionStatus { get;  }
        /// <summary>The type of key used to encrypt the Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of key used to encrypt the Account Key.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType? EncryptionType { get; set; }
        /// <summary>
        /// Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.",
        SerializedName = @"useSystemAssignedIdentity",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IdentityUseSystemAssignedIdentity { get; set; }
        /// <summary>The user assigned managed identity's ARM ID to use when accessing a resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user assigned managed identity's ARM ID to use when accessing a resource.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// The current key used to encrypt the Media Services account, including the key version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current key used to encrypt the Media Services account, including the key version.",
        SerializedName = @"currentKeyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyCurrentKeyIdentifier { get;  }
        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).",
        SerializedName = @"keyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>The Media Services account ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Media Services account ID.",
        SerializedName = @"mediaServiceId",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceId { get;  }
        /// <summary>
        /// Whether or not public network access is allowed for resources under the Media Services account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for resources under the Media Services account.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The storage accounts for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage accounts for this resource.",
        SerializedName = @"storageAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] StorageAccount { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"storageAuthentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? StorageAuthentication { get; set; }

    }
    /// Properties of the Media Services account.
    internal partial interface IMediaServicePropertiesInternal

    {
        /// <summary>The behavior for IP access control in Key Delivery.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction? AccessControlDefaultAction { get; set; }
        /// <summary>
        /// The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must
        /// be empty.
        /// </summary>
        string[] AccessControlIPAllowList { get; set; }
        /// <summary>The account encryption properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryption Encryption { get; set; }
        /// <summary>The Key Vault identity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IResourceIdentity EncryptionIdentity { get; set; }
        /// <summary>The properties of the key used to encrypt the account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>The current status of the Key Vault mapping.</summary>
        string EncryptionStatus { get; set; }
        /// <summary>The type of key used to encrypt the Account Key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType? EncryptionType { get; set; }
        /// <summary>
        /// Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.
        /// </summary>
        bool? IdentityUseSystemAssignedIdentity { get; set; }
        /// <summary>The user assigned managed identity's ARM ID to use when accessing a resource.</summary>
        string IdentityUserAssignedIdentity { get; set; }
        /// <summary>The Key Delivery properties for Media Services account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDelivery KeyDelivery { get; set; }
        /// <summary>The access control properties for Key Delivery.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccessControl KeyDeliveryAccessControl { get; set; }
        /// <summary>
        /// The current key used to encrypt the Media Services account, including the key version.
        /// </summary>
        string KeyVaultPropertyCurrentKeyIdentifier { get; set; }
        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>The Media Services account ID.</summary>
        string MediaServiceId { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for resources under the Media Services account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The storage accounts for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] StorageAccount { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? StorageAuthentication { get; set; }

    }
}