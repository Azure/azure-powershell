// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>A Media Services account.</summary>
    public partial class MediaService :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaService,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.TrackedResource();

        /// <summary>The behavior for IP access control in Key Delivery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction? AccessControlDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).AccessControlDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).AccessControlDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction)""); }

        /// <summary>
        /// The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must
        /// be empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string[] AccessControlIPAllowList { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).AccessControlIPAllowList; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).AccessControlIPAllowList = value ?? null /* arrayOf */; }

        /// <summary>The current status of the Key Vault mapping.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionStatus; }

        /// <summary>The type of key used to encrypt the Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType? EncryptionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType)""); }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentity _identity;

        /// <summary>The Managed Identity for the Media Services account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.MediaServiceIdentity()); set => this._identity = value; }

        /// <summary>The Principal ID of the identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>The Tenant ID of the identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).TenantId; }

        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>
        /// Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public bool? IdentityUseSystemAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).IdentityUseSystemAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).IdentityUseSystemAssignedIdentity = value ?? default(bool); }

        /// <summary>The user assigned managed identities.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IUserAssignedManagedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>
        /// The current key used to encrypt the Media Services account, including the key version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyCurrentKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyVaultPropertyCurrentKeyIdentifier; }

        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyVaultPropertyKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyVaultPropertyKeyIdentifier = value ?? null; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>The Media Services account ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string MediaServiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).MediaServiceId; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryption Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.Encryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).Encryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).Encryption = value; }

        /// <summary>Internal Acessors for EncryptionIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IResourceIdentity Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.EncryptionIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionIdentity = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionKeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionKeyVaultProperty = value; }

        /// <summary>Internal Acessors for EncryptionStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).EncryptionStatus = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.MediaServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for KeyDelivery</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDelivery Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.KeyDelivery { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyDelivery; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyDelivery = value; }

        /// <summary>Internal Acessors for KeyDeliveryAccessControl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccessControl Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.KeyDeliveryAccessControl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyDeliveryAccessControl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyDeliveryAccessControl = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyCurrentKeyIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.KeyVaultPropertyCurrentKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyVaultPropertyCurrentKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).KeyVaultPropertyCurrentKeyIdentifier = value; }

        /// <summary>Internal Acessors for MediaServiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.MediaServiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).MediaServiceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).MediaServiceId = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceProperties Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.MediaServiceProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.SystemData()); set { {_systemData = value;} } }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Name; }

        /// <summary>The user assigned managed identity's ARM ID to use when accessing a resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string PropertiesEncryptionIdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).IdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).IdentityUserAssignedIdentity = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceProperties _property;

        /// <summary>The resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.MediaServiceProperties()); set => this._property = value; }

        /// <summary>
        /// Whether or not public network access is allowed for resources under the Media Services account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).PublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess)""); }

        /// <summary>The storage accounts for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] StorageAccount { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).StorageAccount; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).StorageAccount = value ?? null /* arrayOf */; }

        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? StorageAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).StorageAuthentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServicePropertiesInternal)Property).StorageAuthentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication)""); }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData _systemData;

        /// <summary>The system metadata relating to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).CreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="MediaService" /> instance.</summary>
        public MediaService()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A Media Services account.
    public partial interface IMediaService :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResource
    {
        /// <summary>The behavior for IP access control in Key Delivery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The behavior for IP access control in Key Delivery.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction? AccessControlDefaultAction { get; set; }
        /// <summary>
        /// The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must
        /// be empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must be empty.",
        SerializedName = @"ipAllowList",
        PossibleTypes = new [] { typeof(string) })]
        string[] AccessControlIPAllowList { get; set; }
        /// <summary>The current status of the Key Vault mapping.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current status of the Key Vault mapping.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionStatus { get;  }
        /// <summary>The type of key used to encrypt the Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of key used to encrypt the Account Key.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType? EncryptionType { get; set; }
        /// <summary>The Principal ID of the identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Principal ID of the identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The Tenant ID of the identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Tenant ID of the identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityType { get; set; }
        /// <summary>
        /// Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.",
        SerializedName = @"useSystemAssignedIdentity",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IdentityUseSystemAssignedIdentity { get; set; }
        /// <summary>The user assigned managed identities.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user assigned managed identities.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IUserAssignedManagedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IUserAssignedManagedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// The current key used to encrypt the Media Services account, including the key version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current key used to encrypt the Media Services account, including the key version.",
        SerializedName = @"currentKeyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyCurrentKeyIdentifier { get;  }
        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).",
        SerializedName = @"keyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>The Media Services account ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Media Services account ID.",
        SerializedName = @"mediaServiceId",
        PossibleTypes = new [] { typeof(string) })]
        string MediaServiceId { get;  }
        /// <summary>The user assigned managed identity's ARM ID to use when accessing a resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user assigned managed identity's ARM ID to use when accessing a resource.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string PropertiesEncryptionIdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for resources under the Media Services account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for resources under the Media Services account.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The storage accounts for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage accounts for this resource.",
        SerializedName = @"storageAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] StorageAccount { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"storageAuthentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? StorageAuthentication { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }

    }
    /// A Media Services account.
    internal partial interface IMediaServiceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceInternal
    {
        /// <summary>The behavior for IP access control in Key Delivery.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DefaultAction? AccessControlDefaultAction { get; set; }
        /// <summary>
        /// The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must
        /// be empty.
        /// </summary>
        string[] AccessControlIPAllowList { get; set; }
        /// <summary>The account encryption properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccountEncryption Encryption { get; set; }
        /// <summary>The Key Vault identity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IResourceIdentity EncryptionIdentity { get; set; }
        /// <summary>The properties of the key used to encrypt the account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>The current status of the Key Vault mapping.</summary>
        string EncryptionStatus { get; set; }
        /// <summary>The type of key used to encrypt the Account Key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.AccountEncryptionKeyType? EncryptionType { get; set; }
        /// <summary>The Managed Identity for the Media Services account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceIdentity Identity { get; set; }
        /// <summary>The Principal ID of the identity.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The Tenant ID of the identity.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>The identity type.</summary>
        string IdentityType { get; set; }
        /// <summary>
        /// Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity.
        /// </summary>
        bool? IdentityUseSystemAssignedIdentity { get; set; }
        /// <summary>The user assigned managed identities.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IUserAssignedManagedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The Key Delivery properties for Media Services account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IKeyDelivery KeyDelivery { get; set; }
        /// <summary>The access control properties for Key Delivery.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IAccessControl KeyDeliveryAccessControl { get; set; }
        /// <summary>
        /// The current key used to encrypt the Media Services account, including the key version.
        /// </summary>
        string KeyVaultPropertyCurrentKeyIdentifier { get; set; }
        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>The Media Services account ID.</summary>
        string MediaServiceId { get; set; }
        /// <summary>The user assigned managed identity's ARM ID to use when accessing a resource.</summary>
        string PropertiesEncryptionIdentityUserAssignedIdentity { get; set; }
        /// <summary>The resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IMediaServiceProperties Property { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for resources under the Media Services account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The storage accounts for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20210601.IStorageAccount[] StorageAccount { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StorageAuthentication? StorageAuthentication { get; set; }
        /// <summary>The system metadata relating to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }

    }
}