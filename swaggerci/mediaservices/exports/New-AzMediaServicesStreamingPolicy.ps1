
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a Streaming Policy in the Media Services account
.Description
Create a Streaming Policy in the Media Services account
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

COMMONENCRYPTIONCBCCLEARTRACK <ITrackSelection[]>: Representing which tracks should not be encrypted
  [TrackSelections <ITrackPropertyCondition[]>]: TrackSelections is a track property condition list which can specify track(s)
    Operation <TrackPropertyCompareOperation>: Track property condition operation
    Property <TrackPropertyType>: Track property type
    [Value <String>]: Track property value

COMMONENCRYPTIONCBCSCONTENTKEYSKEYTOTRACKMAPPING <IStreamingPolicyContentKey[]>: Representing tracks needs separate content key
  [Label <String>]: Label can be used to specify Content Key when creating a Streaming Locator
  [PolicyName <String>]: Policy used by Content Key
  [Track <ITrackSelection[]>]: Tracks which use this content key
    [TrackSelections <ITrackPropertyCondition[]>]: TrackSelections is a track property condition list which can specify track(s)
      Operation <TrackPropertyCompareOperation>: Track property condition operation
      Property <TrackPropertyType>: Track property type
      [Value <String>]: Track property value

COMMONENCRYPTIONCENCCLEARTRACK <ITrackSelection[]>: Representing which tracks should not be encrypted
  [TrackSelections <ITrackPropertyCondition[]>]: TrackSelections is a track property condition list which can specify track(s)
    Operation <TrackPropertyCompareOperation>: Track property condition operation
    Property <TrackPropertyType>: Track property type
    [Value <String>]: Track property value

COMMONENCRYPTIONCENCCONTENTKEYSKEYTOTRACKMAPPING <IStreamingPolicyContentKey[]>: Representing tracks needs separate content key
  [Label <String>]: Label can be used to specify Content Key when creating a Streaming Locator
  [PolicyName <String>]: Policy used by Content Key
  [Track <ITrackSelection[]>]: Tracks which use this content key
    [TrackSelections <ITrackPropertyCondition[]>]: TrackSelections is a track property condition list which can specify track(s)
      Operation <TrackPropertyCompareOperation>: Track property condition operation
      Property <TrackPropertyType>: Track property type
      [Value <String>]: Track property value

ENVELOPEENCRYPTIONCLEARTRACK <ITrackSelection[]>: Representing which tracks should not be encrypted
  [TrackSelections <ITrackPropertyCondition[]>]: TrackSelections is a track property condition list which can specify track(s)
    Operation <TrackPropertyCompareOperation>: Track property condition operation
    Property <TrackPropertyType>: Track property type
    [Value <String>]: Track property value

ENVELOPEENCRYPTIONCONTENTKEYSKEYTOTRACKMAPPING <IStreamingPolicyContentKey[]>: Representing tracks needs separate content key
  [Label <String>]: Label can be used to specify Content Key when creating a Streaming Locator
  [PolicyName <String>]: Policy used by Content Key
  [Track <ITrackSelection[]>]: Tracks which use this content key
    [TrackSelections <ITrackPropertyCondition[]>]: TrackSelections is a track property condition list which can specify track(s)
      Operation <TrackPropertyCompareOperation>: Track property condition operation
      Property <TrackPropertyType>: Track property type
      [Value <String>]: Track property value
.Link
https://docs.microsoft.com/en-us/powershell/module/az.mediaservices/new-azmediaservicesstreamingpolicy
#>
function New-AzMediaServicesStreamingPolicy {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [System.String]
    # The Media Services account name.
    ${AccountName},

    [Parameter(Mandatory)]
    [Alias('StreamingPolicyName')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [System.String]
    # The Streaming Policy name.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [System.String]
    # The name of the resource group within the Azure subscription.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The unique identifier for a Microsoft Azure subscription.
    ${SubscriptionId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection[]]
    # Representing which tracks should not be encrypted
    # To construct, see NOTES section for COMMONENCRYPTIONCBCCLEARTRACK properties and create a hash table.
    ${CommonEncryptionCbcClearTrack},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Label can be used to specify Content Key when creating a Streaming Locator
    ${CommonEncryptionCbcsContentKeysDefaultKeyLabel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Policy used by Default Key
    ${CommonEncryptionCbcsContentKeysDefaultKeyPolicyName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey[]]
    # Representing tracks needs separate content key
    # To construct, see NOTES section for COMMONENCRYPTIONCBCSCONTENTKEYSKEYTOTRACKMAPPING properties and create a hash table.
    ${CommonEncryptionCbcsContentKeysKeyToTrackMapping},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Custom attributes for PlayReady
    ${CommonEncryptionCbcsDrmPlayReadyCustomAttribute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Template for the URL of the custom service delivering licenses to end user players.
    # Not required when using Azure Media Services for issuing licenses.
    # The template supports replaceable tokens that the service will update at runtime with the value specific to the request.
    # The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    ${CommonEncryptionCbcsDrmPlayReadyCustomLicenseAcquisitionUrlTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Template for the URL of the custom service delivering licenses to end user players.
    # Not required when using Azure Media Services for issuing licenses.
    # The template supports replaceable tokens that the service will update at runtime with the value specific to the request.
    # The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    ${CommonEncryptionCbcsDrmWidevineCustomLicenseAcquisitionUrlTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable DASH protocol or not
    ${CommonEncryptionCbcsEnabledProtocolsDash},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable Download protocol or not
    ${CommonEncryptionCbcsEnabledProtocolsDownload},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable HLS protocol or not
    ${CommonEncryptionCbcsEnabledProtocolsHl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable SmoothStreaming protocol or not
    ${CommonEncryptionCbcsEnabledProtocolsSmoothStreaming},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection[]]
    # Representing which tracks should not be encrypted
    # To construct, see NOTES section for COMMONENCRYPTIONCENCCLEARTRACK properties and create a hash table.
    ${CommonEncryptionCencClearTrack},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Label can be used to specify Content Key when creating a Streaming Locator
    ${CommonEncryptionCencContentKeysDefaultKeyLabel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Policy used by Default Key
    ${CommonEncryptionCencContentKeysDefaultKeyPolicyName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey[]]
    # Representing tracks needs separate content key
    # To construct, see NOTES section for COMMONENCRYPTIONCENCCONTENTKEYSKEYTOTRACKMAPPING properties and create a hash table.
    ${CommonEncryptionCencContentKeysKeyToTrackMapping},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Custom attributes for PlayReady
    ${CommonEncryptionCencDrmPlayReadyCustomAttribute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Template for the URL of the custom service delivering licenses to end user players.
    # Not required when using Azure Media Services for issuing licenses.
    # The template supports replaceable tokens that the service will update at runtime with the value specific to the request.
    # The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    ${CommonEncryptionCencDrmPlayReadyCustomLicenseAcquisitionUrlTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Template for the URL of the custom service delivering licenses to end user players.
    # Not required when using Azure Media Services for issuing licenses.
    # The template supports replaceable tokens that the service will update at runtime with the value specific to the request.
    # The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    ${CommonEncryptionCencDrmWidevineCustomLicenseAcquisitionUrlTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable DASH protocol or not
    ${CommonEncryptionCencEnabledProtocolsDash},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable Download protocol or not
    ${CommonEncryptionCencEnabledProtocolsDownload},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable HLS protocol or not
    ${CommonEncryptionCencEnabledProtocolsHl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable SmoothStreaming protocol or not
    ${CommonEncryptionCencEnabledProtocolsSmoothStreaming},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Default ContentKey used by current Streaming Policy
    ${DefaultContentKeyPolicyName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection[]]
    # Representing which tracks should not be encrypted
    # To construct, see NOTES section for ENVELOPEENCRYPTIONCLEARTRACK properties and create a hash table.
    ${EnvelopeEncryptionClearTrack},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Label can be used to specify Content Key when creating a Streaming Locator
    ${EnvelopeEncryptionContentKeysDefaultKeyLabel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Policy used by Default Key
    ${EnvelopeEncryptionContentKeysDefaultKeyPolicyName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey[]]
    # Representing tracks needs separate content key
    # To construct, see NOTES section for ENVELOPEENCRYPTIONCONTENTKEYSKEYTOTRACKMAPPING properties and create a hash table.
    ${EnvelopeEncryptionContentKeysKeyToTrackMapping},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Template for the URL of the custom service delivering keys to end user players.
    # Not required when using Azure Media Services for issuing keys.
    # The template supports replaceable tokens that the service will update at runtime with the value specific to the request.
    # The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    ${EnvelopeEncryptionCustomKeyAcquisitionUrlTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable DASH protocol or not
    ${EnvelopeEncryptionEnabledProtocolsDash},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable Download protocol or not
    ${EnvelopeEncryptionEnabledProtocolsDownload},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable HLS protocol or not
    ${EnvelopeEncryptionEnabledProtocolsHl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable SmoothStreaming protocol or not
    ${EnvelopeEncryptionEnabledProtocolsSmoothStreaming},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # All license to be persistent or not
    ${FairPlayAllowPersistentLicense},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # Template for the URL of the custom service delivering licenses to end user players.
    # Not required when using Azure Media Services for issuing licenses.
    # The template supports replaceable tokens that the service will update at runtime with the value specific to the request.
    # The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    ${FairPlayCustomLicenseAcquisitionUrlTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable DASH protocol or not
    ${NoEncryptionEnabledProtocolsDash},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable Download protocol or not
    ${NoEncryptionEnabledProtocolsDownload},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable HLS protocol or not
    ${NoEncryptionEnabledProtocolsHl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable SmoothStreaming protocol or not
    ${NoEncryptionEnabledProtocolsSmoothStreaming},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.MediaServices.private\New-AzMediaServicesStreamingPolicy_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
