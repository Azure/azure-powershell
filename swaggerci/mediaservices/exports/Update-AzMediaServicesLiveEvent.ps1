
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates settings on an existing live event.
.Description
Updates settings on an existing live event.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.IMediaServicesIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEvent
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTACCESSCONTROLIPALLOW <IIPRange[]>: The IP allow list.
  [Address <String>]: The IP address.
  [Name <String>]: The friendly name for the IP address range.
  [SubnetPrefixLength <Int32?>]: The subnet mask prefix length (see CIDR notation).

INPUTENDPOINT <ILiveEventEndpoint[]>: The input endpoints for the live event.
  [Protocol <String>]: The endpoint protocol.
  [Url <String>]: The endpoint URL.

INPUTOBJECT <IMediaServicesIdentity>: Identity Parameter
  [AccountName <String>]: The Media Services account name.
  [AssetName <String>]: The Asset name.
  [ContentKeyPolicyName <String>]: The Content Key Policy name.
  [FilterName <String>]: The Account Filter name
  [Id <String>]: Resource identity path
  [JobName <String>]: The Job name.
  [LiveEventName <String>]: The name of the live event, maximum length is 32.
  [LiveOutputName <String>]: The name of the live output.
  [LocationName <String>]: The name of the location
  [Name <String>]: 
  [OperationId <String>]: Operation Id.
  [ResourceGroupName <String>]: The name of the resource group within the Azure subscription.
  [StreamingEndpointName <String>]: The name of the streaming endpoint, maximum length is 24.
  [StreamingLocatorName <String>]: The Streaming Locator name.
  [StreamingPolicyName <String>]: The Streaming Policy name.
  [SubscriptionId <String>]: The unique identifier for a Microsoft Azure subscription.
  [TrackName <String>]: The Asset Track name.
  [TransformName <String>]: The Transform name.

PREVIEWACCESSCONTROLIPALLOW <IIPRange[]>: The IP allow list.
  [Address <String>]: The IP address.
  [Name <String>]: The friendly name for the IP address range.
  [SubnetPrefixLength <Int32?>]: The subnet mask prefix length (see CIDR notation).

PREVIEWENDPOINT <ILiveEventEndpoint[]>: The endpoints for preview. Do not share the preview URL with the live event audience.
  [Protocol <String>]: The endpoint protocol.
  [Url <String>]: The endpoint URL.

TRANSCRIPTION <ILiveEventTranscription[]>: Live transcription settings for the live event. See https://go.microsoft.com/fwlink/linkid=2133742 for more information about the live transcription feature.
  [InputTrackSelection <ILiveEventInputTrackSelection[]>]: Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
    [Operation <String>]: Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
    [Property <String>]: Property name to select. This property is reserved for future use, any value set on this property will be ignored.
    [Value <String>]: Property value to select. This property is reserved for future use, any value set on this property will be ignored.
  [Language <String>]: Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
  [OutputTranscriptionTrackName <String>]: The output track name. This property is reserved for future use, any value set on this property will be ignored.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.mediaservices/update-azmediaservicesliveevent
#>
function Update-AzMediaServicesLiveEvent {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEvent])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [System.String]
    # The Media Services account name.
    ${AccountName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('LiveEventName')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [System.String]
    # The name of the live event, maximum length is 32.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [System.String]
    # The name of the resource group within the Azure subscription.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The unique identifier for a Microsoft Azure subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.IMediaServicesIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # The content of clientaccesspolicy.xml used by Silverlight.
    ${CrossSiteAccessPolicyClientAccessPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # The content of crossdomain.xml used by Silverlight.
    ${CrossSiteAccessPolicyCrossDomainPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # A description for the live event.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.TimeSpan]
    # Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event.
    # For example, use PT2S to indicate 2 seconds.
    # For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).
    # If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds.
    # The value cannot be set for pass-through live events.
    ${EncodingKeyFrameInterval},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # The optional encoding preset name, used when encodingType is not None.
    # This value is specified at creation time and cannot be updated.
    # If the encodingType is set to Standard, then the default preset name is ‘Default720p’.
    # Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
    ${EncodingPresetName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StretchMode]
    # Specifies how the input video will be resized to fit the desired output resolution(s).
    # Default is None
    ${EncodingStretchMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventEncodingType]
    # Live event type.
    # When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output.
    # When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers.
    # See https://go.microsoft.com/fwlink/linkid=2095101 for more information.
    # This property cannot be modified after the live event is created.
    ${EncodingType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints.
    # The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
    ${HostnamePrefix},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[]]
    # The IP allow list.
    # To construct, see NOTES section for INPUTACCESSCONTROLIPALLOW properties and create a hash table.
    ${InputAccessControlIPAllow},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # A UUID in string form to uniquely identify the stream.
    # This can be specified at creation time but cannot be updated.
    # If omitted, the service will generate a unique value.
    ${InputAccessToken},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[]]
    # The input endpoints for the live event.
    # To construct, see NOTES section for INPUTENDPOINT properties and create a hash table.
    ${InputEndpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # ISO 8601 time duration of the key frame interval duration of the input.
    # This value sets the EXT-X-TARGETDURATION property in the HLS output.
    # For example, use PT2S to indicate 2 seconds.
    # Leave the value empty for encoding live events.
    ${InputKeyFrameIntervalDuration},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol])]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventInputProtocol]
    # The input protocol for the live event.
    # This is specified at creation time and cannot be updated.
    ${InputStreamingProtocol},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IIPRange[]]
    # The IP allow list.
    # To construct, see NOTES section for PREVIEWACCESSCONTROLIPALLOW properties and create a hash table.
    ${PreviewAccessControlIPAllow},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # An alternative media identifier associated with the streaming locator created for the preview.
    # This value is specified at creation time and cannot be updated.
    # The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
    ${PreviewAlternativeMediaId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventEndpoint[]]
    # The endpoints for preview.
    # Do not share the preview URL with the live event audience.
    # To construct, see NOTES section for PREVIEWENDPOINT properties and create a hash table.
    ${PreviewEndpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # The identifier of the preview locator in Guid format.
    # Specifying this at creation time allows the caller to know the preview locator url before the event is created.
    # If omitted, the service will generate a random identifier.
    # This value cannot be updated once the live event is created.
    ${PreviewLocator},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.String]
    # The name of streaming policy used for the live event preview.
    # This value is specified at creation time and cannot be updated.
    ${PreviewStreamingPolicyName},

    [Parameter()]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StreamOptionsFlag])]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.StreamOptionsFlag[]]
    # The options to use for the LiveEvent.
    # This value is specified at creation time and cannot be updated.
    # The valid values for the array entry values are 'Default' and 'LowLatency'.
    ${StreamOption},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ILiveEventTranscription[]]
    # Live transcription settings for the live event.
    # See https://go.microsoft.com/fwlink/linkid=2133742 for more information about the live transcription feature.
    # To construct, see NOTES section for TRANSCRIPTION properties and create a hash table.
    ${Transcription},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints.
    # This value can only be updated if the live event is in Standby state
    ${UseStaticHostname},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.MediaServices.private\Update-AzMediaServicesLiveEvent_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.MediaServices.private\Update-AzMediaServicesLiveEvent_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
