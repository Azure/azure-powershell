
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Apply artifacts to virtual machine.
This operation can take a while to complete.
.Description
Apply artifacts to virtual machine.
This operation can take a while to complete.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IApplyArtifactsRequest
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.IDevTestLabsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

APPLYARTIFACTSREQUEST <IApplyArtifactsRequest>: Request body for applying artifacts to a virtual machine.
  [Artifact <IArtifactInstallProperties[]>]: The list of artifacts to apply.
    [ArtifactId <String>]: The artifact's identifier.
    [ArtifactTitle <String>]: The artifact's title.
    [DeploymentStatusMessage <String>]: The status message from the deployment.
    [InstallTime <DateTime?>]: The time that the artifact starts to install on the virtual machine.
    [Parameter <IArtifactParameterProperties[]>]: The parameters of the artifact.
      [Name <String>]: The name of the artifact parameter.
      [Value <String>]: The value of the artifact parameter.
    [Status <String>]: The status of the artifact.
    [VMExtensionStatusMessage <String>]: The status message from the virtual machine extension.

ARTIFACT <IArtifactInstallProperties[]>: The list of artifacts to apply.
  [ArtifactId <String>]: The artifact's identifier.
  [ArtifactTitle <String>]: The artifact's title.
  [DeploymentStatusMessage <String>]: The status message from the deployment.
  [InstallTime <DateTime?>]: The time that the artifact starts to install on the virtual machine.
  [Parameter <IArtifactParameterProperties[]>]: The parameters of the artifact.
    [Name <String>]: The name of the artifact parameter.
    [Value <String>]: The value of the artifact parameter.
  [Status <String>]: The status of the artifact.
  [VMExtensionStatusMessage <String>]: The status message from the virtual machine extension.

INPUTOBJECT <IDevTestLabsIdentity>: Identity Parameter
  [ArtifactSourceName <String>]: The name of the artifact source.
  [Id <String>]: Resource identity path
  [LabName <String>]: The name of the lab.
  [LocationName <String>]: The name of the location.
  [Name <String>]: The name of the lab.
  [PolicySetName <String>]: The name of the policy set.
  [ResourceGroupName <String>]: The name of the resource group.
  [ServiceFabricName <String>]: The name of the service fabric.
  [SubscriptionId <String>]: The subscription ID.
  [UserName <String>]: The name of the user profile.
  [VirtualMachineName <String>]: The name of the virtual machine.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.devtestlabs/add-azdevtestlabsvirtualmachineartifact
#>
function Add-AzDevTestLabsVirtualMachineArtifact {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ApplyExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Apply', Mandatory)]
    [Parameter(ParameterSetName='ApplyExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [System.String]
    # The name of the lab.
    ${LabName},

    [Parameter(ParameterSetName='Apply', Mandatory)]
    [Parameter(ParameterSetName='ApplyExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [System.String]
    # The name of the virtual machine.
    ${Name},

    [Parameter(ParameterSetName='Apply', Mandatory)]
    [Parameter(ParameterSetName='ApplyExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Apply')]
    [Parameter(ParameterSetName='ApplyExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='ApplyViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ApplyViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.IDevTestLabsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Apply', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ApplyViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IApplyArtifactsRequest]
    # Request body for applying artifacts to a virtual machine.
    # To construct, see NOTES section for APPLYARTIFACTSREQUEST properties and create a hash table.
    ${ApplyArtifactsRequest},

    [Parameter(ParameterSetName='ApplyExpanded')]
    [Parameter(ParameterSetName='ApplyViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IArtifactInstallProperties[]]
    # The list of artifacts to apply.
    # To construct, see NOTES section for ARTIFACT properties and create a hash table.
    ${Artifact},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Apply = 'Az.DevTestLabs.private\Add-AzDevTestLabsVirtualMachineArtifact_Apply';
            ApplyExpanded = 'Az.DevTestLabs.private\Add-AzDevTestLabsVirtualMachineArtifact_ApplyExpanded';
            ApplyViaIdentity = 'Az.DevTestLabs.private\Add-AzDevTestLabsVirtualMachineArtifact_ApplyViaIdentity';
            ApplyViaIdentityExpanded = 'Az.DevTestLabs.private\Add-AzDevTestLabsVirtualMachineArtifact_ApplyViaIdentityExpanded';
        }
        if (('Apply', 'ApplyExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
