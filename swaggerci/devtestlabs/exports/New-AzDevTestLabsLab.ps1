
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or replace an existing lab.
This operation can take a while to complete.
.Description
Create or replace an existing lab.
This operation can take a while to complete.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab
.Link
https://docs.microsoft.com/en-us/powershell/module/az.devtestlabs/new-azdevtestlabslab
#>
function New-AzDevTestLabsLab {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [System.String]
    # The name of the lab.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription ID.
    ${SubscriptionId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus]
    # Is the lab announcement active/enabled at this time
    ${AnnouncementEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.DateTime]
    # The time at which the announcement expires (null for never)
    ${AnnouncementExpirationDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Has this announcement expired
    ${AnnouncementExpired},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.String]
    # The markdown text (if any) that this lab displays in the UI.
    # If left empty/null, nothing will be shown.
    ${AnnouncementMarkdown},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.String]
    # The plain text title for the lab announcement
    ${AnnouncementTitle},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission])]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission]
    # The access rights to be granted to the user when provisioning an environment
    ${EnvironmentPermission},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabPropertiesExtendedProperties]))]
    [System.Collections.Hashtable]
    # Extended properties of the lab used for experimental features
    ${ExtendedProperty},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType])]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType]
    # Type of storage used by the lab.
    # It can be either Premium or Standard.
    # Default is Premium.
    ${LabStorageType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.String]
    # The location of the resource.
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.String[]]
    # The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
    ${MandatoryArtifactsResourceIdsLinux},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.String[]]
    # The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
    ${MandatoryArtifactsResourceIdsWindow},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk])]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk]
    # The setting to enable usage of premium data disks.When its value is 'Enabled', creation of standard or premium data disks is allowed.When its value is 'Disabled', only creation of standard data disks is allowed.
    ${PremiumDataDisk},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus]
    # Is the lab support banner active/enabled at this time
    ${SupportEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [System.String]
    # The markdown text (if any) that this lab displays in the UI.
    # If left empty/null, nothing will be shown.
    ${SupportMarkdown},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IResourceTags]))]
    [System.Collections.Hashtable]
    # The tags of the resource.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.DevTestLabs.private\New-AzDevTestLabsLab_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
