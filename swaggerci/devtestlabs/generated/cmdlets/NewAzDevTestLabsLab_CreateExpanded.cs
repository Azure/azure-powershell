// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Extensions;
    using System;

    /// <summary>Create or replace an existing lab. This operation can take a while to complete.</summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzDevTestLabsLab_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Description(@"Create or replace an existing lab. This operation can take a while to complete.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Generated]
    public partial class NewAzDevTestLabsLab_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Is the lab announcement active/enabled at this time</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Is the lab announcement active/enabled at this time")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is the lab announcement active/enabled at this time",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus))]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus AnnouncementEnabled { get => LabBody.AnnouncementEnabled ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus)""); set => LabBody.AnnouncementEnabled = value; }

        /// <summary>The time at which the announcement expires (null for never)</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time at which the announcement expires (null for never)")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the announcement expires (null for never)",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime AnnouncementExpirationDate { get => LabBody.AnnouncementExpirationDate ?? default(global::System.DateTime); set => LabBody.AnnouncementExpirationDate = value; }

        /// <summary>Has this announcement expired</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Has this announcement expired")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Has this announcement expired",
        SerializedName = @"expired",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AnnouncementExpired { get => LabBody.AnnouncementExpired ?? default(global::System.Management.Automation.SwitchParameter); set => LabBody.AnnouncementExpired = value; }

        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.",
        SerializedName = @"markdown",
        PossibleTypes = new [] { typeof(string) })]
        public string AnnouncementMarkdown { get => LabBody.AnnouncementMarkdown ?? null; set => LabBody.AnnouncementMarkdown = value; }

        /// <summary>The plain text title for the lab announcement</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The plain text title for the lab announcement")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The plain text title for the lab announcement",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        public string AnnouncementTitle { get => LabBody.AnnouncementTitle ?? null; set => LabBody.AnnouncementTitle = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.DevTestLabsClient Client => Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.ClientAPI;

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The access rights to be granted to the user when provisioning an environment</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The access rights to be granted to the user when provisioning an environment")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The access rights to be granted to the user when provisioning an environment",
        SerializedName = @"environmentPermission",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission))]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission EnvironmentPermission { get => LabBody.EnvironmentPermission ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission)""); set => LabBody.EnvironmentPermission = value; }

        /// <summary>Extended properties of the lab used for experimental features</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Extended properties of the lab used for experimental features")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Extended properties of the lab used for experimental features",
        SerializedName = @"extendedProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabPropertiesExtendedProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabPropertiesExtendedProperties ExtendedProperty { get => LabBody.ExtendedProperty ?? null /* object */; set => LabBody.ExtendedProperty = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Backing field for <see cref="LabBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab _labBody= new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.Lab();

        /// <summary>A lab.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab LabBody { get => this._labBody; set => this._labBody = value; }

        /// <summary>
        /// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.",
        SerializedName = @"labStorageType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType))]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType LabStorageType { get => LabBody.StorageType ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType)""); set => LabBody.StorageType = value; }

        /// <summary>The location of the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the resource.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => LabBody.Location ?? null; set => LabBody.Location = value; }

        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts
        /// specified by the user.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.",
        SerializedName = @"mandatoryArtifactsResourceIdsLinux",
        PossibleTypes = new [] { typeof(string) })]
        public string[] MandatoryArtifactsResourceIdsLinux { get => LabBody.MandatoryArtifactsResourceIdsLinux ?? null /* arrayOf */; set => LabBody.MandatoryArtifactsResourceIdsLinux = value; }

        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the
        /// artifacts specified by the user.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.",
        SerializedName = @"mandatoryArtifactsResourceIdsWindows",
        PossibleTypes = new [] { typeof(string) })]
        public string[] MandatoryArtifactsResourceIdsWindow { get => LabBody.MandatoryArtifactsResourceIdsWindow ?? null /* arrayOf */; set => LabBody.MandatoryArtifactsResourceIdsWindow = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the lab.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the lab.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the lab.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// The setting to enable usage of premium data disks.When its value is 'Enabled', creation of standard or premium data disks
        /// is allowed.When its value is 'Disabled', only creation of standard data disks is allowed.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The setting to enable usage of premium data disks.When its value is 'Enabled', creation of standard or premium data disks is allowed.When its value is 'Disabled', only creation of standard data disks is allowed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The setting to enable usage of premium data disks.When its value is 'Enabled', creation of standard or premium data disks is allowed.When its value is 'Disabled', only creation of standard data disks is allowed.",
        SerializedName = @"premiumDataDisks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk))]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk PremiumDataDisk { get => LabBody.PremiumDataDisk ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk)""); set => LabBody.PremiumDataDisk = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The subscription ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The subscription ID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The subscription ID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Is the lab support banner active/enabled at this time</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Is the lab support banner active/enabled at this time")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is the lab support banner active/enabled at this time",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus))]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus SupportEnabled { get => LabBody.SupportEnabled ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus)""); set => LabBody.SupportEnabled = value; }

        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.",
        SerializedName = @"markdown",
        PossibleTypes = new [] { typeof(string) })]
        public string SupportMarkdown { get => LabBody.SupportMarkdown ?? null; set => LabBody.SupportMarkdown = value; }

        /// <summary>The tags of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The tags of the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tags of the resource.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IResourceTags Tag { get => LabBody.Tag ?? null /* object */; set => LabBody.Tag = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of NewAzDevTestLabsLab_CreateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Cmdlets.NewAzDevTestLabsLab_CreateExpanded Clone()
        {
            var clone = new NewAzDevTestLabsLab_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone.LabBody = this.LabBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.Name = this.Name;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzDevTestLabsLab_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzDevTestLabsLab_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'LabsCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.LabsCreateOrUpdate(SubscriptionId, ResourceGroupName, Name, LabBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,Name=Name,body=LabBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Name=Name, body=LabBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Name=Name, body=LabBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILab
                WriteObject((await response));
            }
        }
    }
}