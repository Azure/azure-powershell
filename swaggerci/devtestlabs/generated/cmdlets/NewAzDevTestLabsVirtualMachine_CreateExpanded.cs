// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Extensions;
    using System;

    /// <summary>
    /// Create or replace an existing virtual machine. This operation can take a while to complete.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzDevTestLabsVirtualMachine_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Description(@"Create or replace an existing virtual machine. This operation can take a while to complete.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Generated]
    public partial class NewAzDevTestLabsVirtualMachine_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Indicates whether another user can take ownership of the virtual machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether another user can take ownership of the virtual machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether another user can take ownership of the virtual machine",
        SerializedName = @"allowClaim",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AllowClaim { get => LabVirtualMachineBody.AllowClaim ?? default(global::System.Management.Automation.SwitchParameter); set => LabVirtualMachineBody.AllowClaim = value; }

        /// <summary>The artifacts to be installed on the virtual machine.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The artifacts to be installed on the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The artifacts to be installed on the virtual machine.",
        SerializedName = @"artifacts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IArtifactInstallProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IArtifactInstallProperties[] Artifact { get => LabVirtualMachineBody.Artifact ?? null /* arrayOf */; set => LabVirtualMachineBody.Artifact = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.DevTestLabsClient Client => Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.ClientAPI;

        /// <summary>The creation date of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The creation date of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The creation date of the virtual machine.",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime CreatedDate { get => LabVirtualMachineBody.CreatedDate ?? default(global::System.DateTime); set => LabVirtualMachineBody.CreatedDate = value; }

        /// <summary>The custom image identifier of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The custom image identifier of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The custom image identifier of the virtual machine.",
        SerializedName = @"customImageId",
        PossibleTypes = new [] { typeof(string) })]
        public string CustomImageId { get => LabVirtualMachineBody.CustomImageId ?? null; set => LabVirtualMachineBody.CustomImageId = value; }

        /// <summary>New or existing data disks to attach to the virtual machine after creation</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "New or existing data disks to attach to the virtual machine after creation")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"New or existing data disks to attach to the virtual machine after creation",
        SerializedName = @"dataDiskParameters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDataDiskProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDataDiskProperties[] DataDiskParameter { get => LabVirtualMachineBody.DataDiskParameter ?? null /* arrayOf */; set => LabVirtualMachineBody.DataDiskParameter = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// Indicates whether the virtual machine is to be created without a public IP address.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether the virtual machine is to be created without a public IP address.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the virtual machine is to be created without a public IP address.",
        SerializedName = @"disallowPublicIpAddress",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DisallowPublicIPAddress { get => LabVirtualMachineBody.DisallowPublicIPAddress ?? default(global::System.Management.Automation.SwitchParameter); set => LabVirtualMachineBody.DisallowPublicIPAddress = value; }

        /// <summary>The resource ID of the environment that contains this virtual machine, if any.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the environment that contains this virtual machine, if any.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the environment that contains this virtual machine, if any.",
        SerializedName = @"environmentId",
        PossibleTypes = new [] { typeof(string) })]
        public string EnvironmentId { get => LabVirtualMachineBody.EnvironmentId ?? null; set => LabVirtualMachineBody.EnvironmentId = value; }

        /// <summary>The expiration date for VM.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The expiration date for VM.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The expiration date for VM.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime ExpirationDate { get => LabVirtualMachineBody.ExpirationDate ?? default(global::System.DateTime); set => LabVirtualMachineBody.ExpirationDate = value; }

        /// <summary>The OS type of the gallery image.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The OS type of the gallery image.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The OS type of the gallery image.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        public string GalleryImageReferenceOSType { get => LabVirtualMachineBody.GalleryImageReferenceOSType ?? null; set => LabVirtualMachineBody.GalleryImageReferenceOSType = value; }

        /// <summary>The offer of the gallery image.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The offer of the gallery image.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The offer of the gallery image.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        public string GalleryImageReferenceOffer { get => LabVirtualMachineBody.GalleryImageReferenceOffer ?? null; set => LabVirtualMachineBody.GalleryImageReferenceOffer = value; }

        /// <summary>The publisher of the gallery image.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The publisher of the gallery image.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The publisher of the gallery image.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        public string GalleryImageReferencePublisher { get => LabVirtualMachineBody.GalleryImageReferencePublisher ?? null; set => LabVirtualMachineBody.GalleryImageReferencePublisher = value; }

        /// <summary>The SKU of the gallery image.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The SKU of the gallery image.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU of the gallery image.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        public string GalleryImageReferenceSku { get => LabVirtualMachineBody.GalleryImageReferenceSku ?? null; set => LabVirtualMachineBody.GalleryImageReferenceSku = value; }

        /// <summary>The version of the gallery image.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The version of the gallery image.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the gallery image.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        public string GalleryImageReferenceVersion { get => LabVirtualMachineBody.GalleryImageReferenceVersion ?? null; set => LabVirtualMachineBody.GalleryImageReferenceVersion = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Indicates whether this virtual machine uses an SSH key for authentication.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether this virtual machine uses an SSH key for authentication.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this virtual machine uses an SSH key for authentication.",
        SerializedName = @"isAuthenticationWithSshKey",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsAuthenticationWithSshKey { get => LabVirtualMachineBody.IsAuthenticationWithSshKey ?? default(global::System.Management.Automation.SwitchParameter); set => LabVirtualMachineBody.IsAuthenticationWithSshKey = value; }

        /// <summary>Backing field for <see cref="LabName" /> property.</summary>
        private string _labName;

        /// <summary>The name of the lab.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the lab.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the lab.",
        SerializedName = @"labName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string LabName { get => this._labName; set => this._labName = value; }

        /// <summary>The lab subnet name of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The lab subnet name of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The lab subnet name of the virtual machine.",
        SerializedName = @"labSubnetName",
        PossibleTypes = new [] { typeof(string) })]
        public string LabSubnetName { get => LabVirtualMachineBody.LabSubnetName ?? null; set => LabVirtualMachineBody.LabSubnetName = value; }

        /// <summary>Backing field for <see cref="LabVirtualMachineBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine _labVirtualMachineBody= new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.LabVirtualMachine();

        /// <summary>A virtual machine.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine LabVirtualMachineBody { get => this._labVirtualMachineBody; set => this._labVirtualMachineBody = value; }

        /// <summary>The lab virtual network identifier of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The lab virtual network identifier of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The lab virtual network identifier of the virtual machine.",
        SerializedName = @"labVirtualNetworkId",
        PossibleTypes = new [] { typeof(string) })]
        public string LabVirtualNetworkId { get => LabVirtualMachineBody.LabVirtualNetworkId ?? null; set => LabVirtualMachineBody.LabVirtualNetworkId = value; }

        /// <summary>The location of the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the resource.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => LabVirtualMachineBody.Location ?? null; set => LabVirtualMachineBody.Location = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the virtual machine.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the virtual machine.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>The DNS name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DNS name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DNS name.",
        SerializedName = @"dnsName",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfaceDnsName { get => LabVirtualMachineBody.NetworkInterfaceDnsName ?? null; set => LabVirtualMachineBody.NetworkInterfaceDnsName = value; }

        /// <summary>The private IP address.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The private IP address.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The private IP address.",
        SerializedName = @"privateIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfacePrivateIPAddress { get => LabVirtualMachineBody.NetworkInterfacePrivateIPAddress ?? null; set => LabVirtualMachineBody.NetworkInterfacePrivateIPAddress = value; }

        /// <summary>The public IP address.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The public IP address.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The public IP address.",
        SerializedName = @"publicIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfacePublicIPAddress { get => LabVirtualMachineBody.NetworkInterfacePublicIPAddress ?? null; set => LabVirtualMachineBody.NetworkInterfacePublicIPAddress = value; }

        /// <summary>The resource ID of the public IP address.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the public IP address.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the public IP address.",
        SerializedName = @"publicIpAddressId",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfacePublicIPAddressId { get => LabVirtualMachineBody.NetworkInterfacePublicIPAddressId ?? null; set => LabVirtualMachineBody.NetworkInterfacePublicIPAddressId = value; }

        /// <summary>
        /// The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote
        /// Desktop Protocol).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).",
        SerializedName = @"rdpAuthority",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfaceRdpAuthority { get => LabVirtualMachineBody.NetworkInterfaceRdpAuthority ?? null; set => LabVirtualMachineBody.NetworkInterfaceRdpAuthority = value; }

        /// <summary>
        /// The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.",
        SerializedName = @"sshAuthority",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfaceSshAuthority { get => LabVirtualMachineBody.NetworkInterfaceSshAuthority ?? null; set => LabVirtualMachineBody.NetworkInterfaceSshAuthority = value; }

        /// <summary>The resource ID of the sub net.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the sub net.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the sub net.",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfaceSubnetId { get => LabVirtualMachineBody.NetworkInterfaceSubnetId ?? null; set => LabVirtualMachineBody.NetworkInterfaceSubnetId = value; }

        /// <summary>The resource ID of the virtual network.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the virtual network.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the virtual network.",
        SerializedName = @"virtualNetworkId",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkInterfaceVirtualNetworkId { get => LabVirtualMachineBody.NetworkInterfaceVirtualNetworkId ?? null; set => LabVirtualMachineBody.NetworkInterfaceVirtualNetworkId = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>The notes of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The notes of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The notes of the virtual machine.",
        SerializedName = @"notes",
        PossibleTypes = new [] { typeof(string) })]
        public string Note { get => LabVirtualMachineBody.Note ?? null; set => LabVirtualMachineBody.Note = value; }

        /// <summary>The object identifier of the owner of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The object identifier of the owner of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The object identifier of the owner of the virtual machine.",
        SerializedName = @"ownerObjectId",
        PossibleTypes = new [] { typeof(string) })]
        public string OwnerObjectId { get => LabVirtualMachineBody.OwnerObjectId ?? null; set => LabVirtualMachineBody.OwnerObjectId = value; }

        /// <summary>The user principal name of the virtual machine owner.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user principal name of the virtual machine owner.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user principal name of the virtual machine owner.",
        SerializedName = @"ownerUserPrincipalName",
        PossibleTypes = new [] { typeof(string) })]
        public string OwnerUserPrincipalName { get => LabVirtualMachineBody.OwnerUserPrincipalName ?? null; set => LabVirtualMachineBody.OwnerUserPrincipalName = value; }

        /// <summary>The password of the virtual machine administrator.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The password of the virtual machine administrator.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password of the virtual machine administrator.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        public string Password { get => LabVirtualMachineBody.Password ?? null; set => LabVirtualMachineBody.Password = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The id of the plan associated with the virtual machine image</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The id of the plan associated with the virtual machine image")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The id of the plan associated with the virtual machine image",
        SerializedName = @"planId",
        PossibleTypes = new [] { typeof(string) })]
        public string PlanId { get => LabVirtualMachineBody.PlanId ?? null; set => LabVirtualMachineBody.PlanId = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Virtual Machine schedules to be created</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Virtual Machine schedules to be created")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual Machine schedules to be created",
        SerializedName = @"scheduleParameters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IScheduleCreationParameter) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IScheduleCreationParameter[] ScheduleParameter { get => LabVirtualMachineBody.ScheduleParameter ?? null /* arrayOf */; set => LabVirtualMachineBody.ScheduleParameter = value; }

        /// <summary>The incoming NAT rules</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The incoming NAT rules")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The incoming NAT rules",
        SerializedName = @"inboundNatRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IInboundNatRule) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IInboundNatRule[] SharedPublicIPAddressConfigurationInboundNatRule { get => LabVirtualMachineBody.SharedPublicIPAddressConfigurationInboundNatRule ?? null /* arrayOf */; set => LabVirtualMachineBody.SharedPublicIPAddressConfigurationInboundNatRule = value; }

        /// <summary>The size of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The size of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size of the virtual machine.",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        public string Size { get => LabVirtualMachineBody.Size ?? null; set => LabVirtualMachineBody.Size = value; }

        /// <summary>The SSH key of the virtual machine administrator.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The SSH key of the virtual machine administrator.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SSH key of the virtual machine administrator.",
        SerializedName = @"sshKey",
        PossibleTypes = new [] { typeof(string) })]
        public string SshKey { get => LabVirtualMachineBody.SshKey ?? null; set => LabVirtualMachineBody.SshKey = value; }

        /// <summary>Storage type to use for virtual machine (i.e. Standard, Premium).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Storage type to use for virtual machine (i.e. Standard, Premium).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage type to use for virtual machine (i.e. Standard, Premium).",
        SerializedName = @"storageType",
        PossibleTypes = new [] { typeof(string) })]
        public string StorageType { get => LabVirtualMachineBody.StorageType ?? null; set => LabVirtualMachineBody.StorageType = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The subscription ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The subscription ID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The subscription ID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>The tags of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The tags of the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tags of the resource.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IResourceTags Tag { get => LabVirtualMachineBody.Tag ?? null /* object */; set => LabVirtualMachineBody.Tag = value; }

        /// <summary>The user name of the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user name of the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user name of the virtual machine.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        public string UserName { get => LabVirtualMachineBody.UserName ?? null; set => LabVirtualMachineBody.UserName = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of NewAzDevTestLabsVirtualMachine_CreateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Cmdlets.NewAzDevTestLabsVirtualMachine_CreateExpanded Clone()
        {
            var clone = new NewAzDevTestLabsVirtualMachine_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone.LabVirtualMachineBody = this.LabVirtualMachineBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.LabName = this.LabName;
            clone.Name = this.Name;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzDevTestLabsVirtualMachine_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzDevTestLabsVirtualMachine_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'VirtualMachinesCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.VirtualMachinesCreateOrUpdate(SubscriptionId, ResourceGroupName, LabName, Name, LabVirtualMachineBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,LabName=LabName,Name=Name,body=LabVirtualMachineBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ICloudError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, LabName=LabName, Name=Name, body=LabVirtualMachineBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, LabName=LabName, Name=Name, body=LabVirtualMachineBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ILabVirtualMachine
                WriteObject((await response));
            }
        }
    }
}