// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Extensions;

    /// <summary>Properties of a gallery image.</summary>
    public partial class GalleryImageProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImagePropertiesInternal
    {

        /// <summary>Backing field for <see cref="Author" /> property.</summary>
        private string _author;

        /// <summary>The author of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string Author { get => this._author; set => this._author = value; }

        /// <summary>Backing field for <see cref="CreatedDate" /> property.</summary>
        private global::System.DateTime? _createdDate;

        /// <summary>The creation date of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedDate { get => this._createdDate; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>The description of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>Indicates whether this gallery image is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="Icon" /> property.</summary>
        private string _icon;

        /// <summary>The icon of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string Icon { get => this._icon; set => this._icon = value; }

        /// <summary>Backing field for <see cref="ImageReference" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReference _imageReference;

        /// <summary>The image reference of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReference ImageReference { get => (this._imageReference = this._imageReference ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.GalleryImageReference()); set => this._imageReference = value; }

        /// <summary>The OS type of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string ImageReferenceOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).OSType = value ?? null; }

        /// <summary>The offer of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string ImageReferenceOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Offer; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Offer = value ?? null; }

        /// <summary>The publisher of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string ImageReferencePublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Publisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Publisher = value ?? null; }

        /// <summary>The SKU of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string ImageReferenceSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Sku = value ?? null; }

        /// <summary>The version of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string ImageReferenceVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReferenceInternal)ImageReference).Version = value ?? null; }

        /// <summary>Backing field for <see cref="IsPlanAuthorized" /> property.</summary>
        private bool? _isPlanAuthorized;

        /// <summary>Indicates if the plan has been authorized for programmatic deployment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public bool? IsPlanAuthorized { get => this._isPlanAuthorized; set => this._isPlanAuthorized = value; }

        /// <summary>Internal Acessors for CreatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImagePropertiesInternal.CreatedDate { get => this._createdDate; set { {_createdDate = value;} } }

        /// <summary>Internal Acessors for ImageReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReference Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImagePropertiesInternal.ImageReference { get => (this._imageReference = this._imageReference ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.GalleryImageReference()); set { {_imageReference = value;} } }

        /// <summary>Backing field for <see cref="PlanId" /> property.</summary>
        private string _planId;

        /// <summary>The third party plan that applies to this image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string PlanId { get => this._planId; set => this._planId = value; }

        /// <summary>Creates an new <see cref="GalleryImageProperties" /> instance.</summary>
        public GalleryImageProperties()
        {

        }
    }
    /// Properties of a gallery image.
    public partial interface IGalleryImageProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IJsonSerializable
    {
        /// <summary>The author of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The author of the gallery image.",
        SerializedName = @"author",
        PossibleTypes = new [] { typeof(string) })]
        string Author { get; set; }
        /// <summary>The creation date of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The creation date of the gallery image.",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDate { get;  }
        /// <summary>The description of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the gallery image.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>Indicates whether this gallery image is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this gallery image is enabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>The icon of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The icon of the gallery image.",
        SerializedName = @"icon",
        PossibleTypes = new [] { typeof(string) })]
        string Icon { get; set; }
        /// <summary>The OS type of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The OS type of the gallery image.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceOSType { get; set; }
        /// <summary>The offer of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The offer of the gallery image.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceOffer { get; set; }
        /// <summary>The publisher of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The publisher of the gallery image.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferencePublisher { get; set; }
        /// <summary>The SKU of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU of the gallery image.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceSku { get; set; }
        /// <summary>The version of the gallery image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the gallery image.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceVersion { get; set; }
        /// <summary>Indicates if the plan has been authorized for programmatic deployment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if the plan has been authorized for programmatic deployment.",
        SerializedName = @"isPlanAuthorized",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsPlanAuthorized { get; set; }
        /// <summary>The third party plan that applies to this image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The third party plan that applies to this image",
        SerializedName = @"planId",
        PossibleTypes = new [] { typeof(string) })]
        string PlanId { get; set; }

    }
    /// Properties of a gallery image.
    internal partial interface IGalleryImagePropertiesInternal

    {
        /// <summary>The author of the gallery image.</summary>
        string Author { get; set; }
        /// <summary>The creation date of the gallery image.</summary>
        global::System.DateTime? CreatedDate { get; set; }
        /// <summary>The description of the gallery image.</summary>
        string Description { get; set; }
        /// <summary>Indicates whether this gallery image is enabled.</summary>
        bool? Enabled { get; set; }
        /// <summary>The icon of the gallery image.</summary>
        string Icon { get; set; }
        /// <summary>The image reference of the gallery image.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IGalleryImageReference ImageReference { get; set; }
        /// <summary>The OS type of the gallery image.</summary>
        string ImageReferenceOSType { get; set; }
        /// <summary>The offer of the gallery image.</summary>
        string ImageReferenceOffer { get; set; }
        /// <summary>The publisher of the gallery image.</summary>
        string ImageReferencePublisher { get; set; }
        /// <summary>The SKU of the gallery image.</summary>
        string ImageReferenceSku { get; set; }
        /// <summary>The version of the gallery image.</summary>
        string ImageReferenceVersion { get; set; }
        /// <summary>Indicates if the plan has been authorized for programmatic deployment.</summary>
        bool? IsPlanAuthorized { get; set; }
        /// <summary>The third party plan that applies to this image</summary>
        string PlanId { get; set; }

    }
}