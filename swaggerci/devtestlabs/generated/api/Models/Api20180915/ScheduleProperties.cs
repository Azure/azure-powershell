// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Extensions;

    /// <summary>Properties of a schedule.</summary>
    public partial class ScheduleProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IScheduleProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal
    {

        /// <summary>Backing field for <see cref="CreatedDate" /> property.</summary>
        private global::System.DateTime? _createdDate;

        /// <summary>The creation date of the schedule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedDate { get => this._createdDate; }

        /// <summary>Backing field for <see cref="DailyRecurrence" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDayDetails _dailyRecurrence;

        /// <summary>
        /// If the schedule will occur once each day of the week, specify the daily recurrence.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDayDetails DailyRecurrence { get => (this._dailyRecurrence = this._dailyRecurrence ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.DayDetails()); set => this._dailyRecurrence = value; }

        /// <summary>The time of day the schedule will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string DailyRecurrenceTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDayDetailsInternal)DailyRecurrence).Time; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDayDetailsInternal)DailyRecurrence).Time = value ?? null; }

        /// <summary>Backing field for <see cref="HourlyRecurrence" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IHourDetails _hourlyRecurrence;

        /// <summary>If the schedule will occur multiple times a day, specify the hourly recurrence.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IHourDetails HourlyRecurrence { get => (this._hourlyRecurrence = this._hourlyRecurrence ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.HourDetails()); set => this._hourlyRecurrence = value; }

        /// <summary>Minutes of the hour the schedule will run.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public int? HourlyRecurrenceMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IHourDetailsInternal)HourlyRecurrence).Minute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IHourDetailsInternal)HourlyRecurrence).Minute = value ?? default(int); }

        /// <summary>Internal Acessors for CreatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.CreatedDate { get => this._createdDate; set { {_createdDate = value;} } }

        /// <summary>Internal Acessors for DailyRecurrence</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDayDetails Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.DailyRecurrence { get => (this._dailyRecurrence = this._dailyRecurrence ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.DayDetails()); set { {_dailyRecurrence = value;} } }

        /// <summary>Internal Acessors for HourlyRecurrence</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IHourDetails Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.HourlyRecurrence { get => (this._hourlyRecurrence = this._hourlyRecurrence ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.HourDetails()); set { {_hourlyRecurrence = value;} } }

        /// <summary>Internal Acessors for NotificationSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettings Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.NotificationSetting { get => (this._notificationSetting = this._notificationSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.NotificationSettings()); set { {_notificationSetting = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for UniqueIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.UniqueIdentifier { get => this._uniqueIdentifier; set { {_uniqueIdentifier = value;} } }

        /// <summary>Internal Acessors for WeeklyRecurrence</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetails Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.ISchedulePropertiesInternal.WeeklyRecurrence { get => (this._weeklyRecurrence = this._weeklyRecurrence ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.WeekDetails()); set { {_weeklyRecurrence = value;} } }

        /// <summary>Backing field for <see cref="NotificationSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettings _notificationSetting;

        /// <summary>Notification settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettings NotificationSetting { get => (this._notificationSetting = this._notificationSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.NotificationSettings()); set => this._notificationSetting = value; }

        /// <summary>
        /// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string NotificationSettingEmailRecipient { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).EmailRecipient; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).EmailRecipient = value ?? null; }

        /// <summary>
        /// The locale to use when sending a notification (fallback for unsupported languages is EN).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string NotificationSettingNotificationLocale { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).NotificationLocale; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).NotificationLocale = value ?? null; }

        /// <summary>If notifications are enabled for this schedule (i.e. Enabled, Disabled).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? NotificationSettingStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).Status = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus)""); }

        /// <summary>Time in minutes before event at which notification will be sent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public int? NotificationSettingTimeInMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).TimeInMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).TimeInMinute = value ?? default(int); }

        /// <summary>The webhook URL to which the notification will be sent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string NotificationSettingWebhookUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).WebhookUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettingsInternal)NotificationSetting).WebhookUrl = value ?? null; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? _status;

        /// <summary>The status of the schedule (i.e. Enabled, Disabled)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="TargetResourceId" /> property.</summary>
        private string _targetResourceId;

        /// <summary>The resource ID to which the schedule belongs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string TargetResourceId { get => this._targetResourceId; set => this._targetResourceId = value; }

        /// <summary>Backing field for <see cref="TaskType" /> property.</summary>
        private string _taskType;

        /// <summary>The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string TaskType { get => this._taskType; set => this._taskType = value; }

        /// <summary>Backing field for <see cref="TimeZoneId" /> property.</summary>
        private string _timeZoneId;

        /// <summary>The time zone ID (e.g. Pacific Standard time).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string TimeZoneId { get => this._timeZoneId; set => this._timeZoneId = value; }

        /// <summary>Backing field for <see cref="UniqueIdentifier" /> property.</summary>
        private string _uniqueIdentifier;

        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string UniqueIdentifier { get => this._uniqueIdentifier; }

        /// <summary>Backing field for <see cref="WeeklyRecurrence" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetails _weeklyRecurrence;

        /// <summary>
        /// If the schedule will occur only some days of the week, specify the weekly recurrence.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetails WeeklyRecurrence { get => (this._weeklyRecurrence = this._weeklyRecurrence ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.WeekDetails()); set => this._weeklyRecurrence = value; }

        /// <summary>The time of the day the schedule will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string WeeklyRecurrenceTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetailsInternal)WeeklyRecurrence).Time; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetailsInternal)WeeklyRecurrence).Time = value ?? null; }

        /// <summary>
        /// The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string[] WeeklyRecurrenceWeekday { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetailsInternal)WeeklyRecurrence).Weekday; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetailsInternal)WeeklyRecurrence).Weekday = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="ScheduleProperties" /> instance.</summary>
        public ScheduleProperties()
        {

        }
    }
    /// Properties of a schedule.
    public partial interface IScheduleProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IJsonSerializable
    {
        /// <summary>The creation date of the schedule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The creation date of the schedule.",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDate { get;  }
        /// <summary>The time of day the schedule will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time of day the schedule will occur.",
        SerializedName = @"time",
        PossibleTypes = new [] { typeof(string) })]
        string DailyRecurrenceTime { get; set; }
        /// <summary>Minutes of the hour the schedule will run.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minutes of the hour the schedule will run.",
        SerializedName = @"minute",
        PossibleTypes = new [] { typeof(int) })]
        int? HourlyRecurrenceMinute { get; set; }
        /// <summary>
        /// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The email recipient to send notifications to (can be a list of semi-colon separated email addresses).",
        SerializedName = @"emailRecipient",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationSettingEmailRecipient { get; set; }
        /// <summary>
        /// The locale to use when sending a notification (fallback for unsupported languages is EN).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The locale to use when sending a notification (fallback for unsupported languages is EN).",
        SerializedName = @"notificationLocale",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationSettingNotificationLocale { get; set; }
        /// <summary>If notifications are enabled for this schedule (i.e. Enabled, Disabled).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If notifications are enabled for this schedule (i.e. Enabled, Disabled).",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? NotificationSettingStatus { get; set; }
        /// <summary>Time in minutes before event at which notification will be sent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time in minutes before event at which notification will be sent.",
        SerializedName = @"timeInMinutes",
        PossibleTypes = new [] { typeof(int) })]
        int? NotificationSettingTimeInMinute { get; set; }
        /// <summary>The webhook URL to which the notification will be sent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The webhook URL to which the notification will be sent.",
        SerializedName = @"webhookUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationSettingWebhookUrl { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning status of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>The status of the schedule (i.e. Enabled, Disabled)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the schedule (i.e. Enabled, Disabled)",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? Status { get; set; }
        /// <summary>The resource ID to which the schedule belongs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID to which the schedule belongs",
        SerializedName = @"targetResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string TargetResourceId { get; set; }
        /// <summary>The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).",
        SerializedName = @"taskType",
        PossibleTypes = new [] { typeof(string) })]
        string TaskType { get; set; }
        /// <summary>The time zone ID (e.g. Pacific Standard time).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time zone ID (e.g. Pacific Standard time).",
        SerializedName = @"timeZoneId",
        PossibleTypes = new [] { typeof(string) })]
        string TimeZoneId { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unique immutable identifier of a resource (Guid).",
        SerializedName = @"uniqueIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string UniqueIdentifier { get;  }
        /// <summary>The time of the day the schedule will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time of the day the schedule will occur.",
        SerializedName = @"time",
        PossibleTypes = new [] { typeof(string) })]
        string WeeklyRecurrenceTime { get; set; }
        /// <summary>
        /// The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).",
        SerializedName = @"weekdays",
        PossibleTypes = new [] { typeof(string) })]
        string[] WeeklyRecurrenceWeekday { get; set; }

    }
    /// Properties of a schedule.
    internal partial interface ISchedulePropertiesInternal

    {
        /// <summary>The creation date of the schedule.</summary>
        global::System.DateTime? CreatedDate { get; set; }
        /// <summary>
        /// If the schedule will occur once each day of the week, specify the daily recurrence.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDayDetails DailyRecurrence { get; set; }
        /// <summary>The time of day the schedule will occur.</summary>
        string DailyRecurrenceTime { get; set; }
        /// <summary>If the schedule will occur multiple times a day, specify the hourly recurrence.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IHourDetails HourlyRecurrence { get; set; }
        /// <summary>Minutes of the hour the schedule will run.</summary>
        int? HourlyRecurrenceMinute { get; set; }
        /// <summary>Notification settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.INotificationSettings NotificationSetting { get; set; }
        /// <summary>
        /// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
        /// </summary>
        string NotificationSettingEmailRecipient { get; set; }
        /// <summary>
        /// The locale to use when sending a notification (fallback for unsupported languages is EN).
        /// </summary>
        string NotificationSettingNotificationLocale { get; set; }
        /// <summary>If notifications are enabled for this schedule (i.e. Enabled, Disabled).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? NotificationSettingStatus { get; set; }
        /// <summary>Time in minutes before event at which notification will be sent.</summary>
        int? NotificationSettingTimeInMinute { get; set; }
        /// <summary>The webhook URL to which the notification will be sent.</summary>
        string NotificationSettingWebhookUrl { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        string ProvisioningState { get; set; }
        /// <summary>The status of the schedule (i.e. Enabled, Disabled)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? Status { get; set; }
        /// <summary>The resource ID to which the schedule belongs</summary>
        string TargetResourceId { get; set; }
        /// <summary>The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).</summary>
        string TaskType { get; set; }
        /// <summary>The time zone ID (e.g. Pacific Standard time).</summary>
        string TimeZoneId { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        string UniqueIdentifier { get; set; }
        /// <summary>
        /// If the schedule will occur only some days of the week, specify the weekly recurrence.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IWeekDetails WeeklyRecurrence { get; set; }
        /// <summary>The time of the day the schedule will occur.</summary>
        string WeeklyRecurrenceTime { get; set; }
        /// <summary>
        /// The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
        /// </summary>
        string[] WeeklyRecurrenceWeekday { get; set; }

    }
}