// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Extensions;

    /// <summary>Properties of a disk.</summary>
    public partial class DiskProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDiskProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDiskPropertiesInternal
    {

        /// <summary>Backing field for <see cref="CreatedDate" /> property.</summary>
        private global::System.DateTime? _createdDate;

        /// <summary>The creation date of the disk.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedDate { get => this._createdDate; }

        /// <summary>Backing field for <see cref="DiskBlobName" /> property.</summary>
        private string _diskBlobName;

        /// <summary>When backed by a blob, the name of the VHD blob without extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string DiskBlobName { get => this._diskBlobName; set => this._diskBlobName = value; }

        /// <summary>Backing field for <see cref="DiskSizeGiB" /> property.</summary>
        private int? _diskSizeGiB;

        /// <summary>The size of the disk in Gibibytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public int? DiskSizeGiB { get => this._diskSizeGiB; set => this._diskSizeGiB = value; }

        /// <summary>Backing field for <see cref="DiskType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? _diskType;

        /// <summary>The storage type for the disk (i.e. Standard, Premium).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? DiskType { get => this._diskType; set => this._diskType = value; }

        /// <summary>Backing field for <see cref="DiskUri" /> property.</summary>
        private string _diskUri;

        /// <summary>When backed by a blob, the URI of underlying blob.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string DiskUri { get => this._diskUri; set => this._diskUri = value; }

        /// <summary>Backing field for <see cref="HostCaching" /> property.</summary>
        private string _hostCaching;

        /// <summary>The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string HostCaching { get => this._hostCaching; set => this._hostCaching = value; }

        /// <summary>Backing field for <see cref="LeasedByLabVMId" /> property.</summary>
        private string _leasedByLabVMId;

        /// <summary>The resource ID of the VM to which this disk is leased.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string LeasedByLabVMId { get => this._leasedByLabVMId; set => this._leasedByLabVMId = value; }

        /// <summary>Backing field for <see cref="ManagedDiskId" /> property.</summary>
        private string _managedDiskId;

        /// <summary>When backed by managed disk, this is the ID of the compute disk resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string ManagedDiskId { get => this._managedDiskId; set => this._managedDiskId = value; }

        /// <summary>Internal Acessors for CreatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDiskPropertiesInternal.CreatedDate { get => this._createdDate; set { {_createdDate = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDiskPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for UniqueIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20180915.IDiskPropertiesInternal.UniqueIdentifier { get => this._uniqueIdentifier; set { {_uniqueIdentifier = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="StorageAccountId" /> property.</summary>
        private string _storageAccountId;

        /// <summary>When backed by a blob, the storage account where the blob is.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string StorageAccountId { get => this._storageAccountId; set => this._storageAccountId = value; }

        /// <summary>Backing field for <see cref="UniqueIdentifier" /> property.</summary>
        private string _uniqueIdentifier;

        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string UniqueIdentifier { get => this._uniqueIdentifier; }

        /// <summary>Creates an new <see cref="DiskProperties" /> instance.</summary>
        public DiskProperties()
        {

        }
    }
    /// Properties of a disk.
    public partial interface IDiskProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IJsonSerializable
    {
        /// <summary>The creation date of the disk.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The creation date of the disk.",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDate { get;  }
        /// <summary>When backed by a blob, the name of the VHD blob without extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When backed by a blob, the name of the VHD blob without extension.",
        SerializedName = @"diskBlobName",
        PossibleTypes = new [] { typeof(string) })]
        string DiskBlobName { get; set; }
        /// <summary>The size of the disk in Gibibytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size of the disk in Gibibytes.",
        SerializedName = @"diskSizeGiB",
        PossibleTypes = new [] { typeof(int) })]
        int? DiskSizeGiB { get; set; }
        /// <summary>The storage type for the disk (i.e. Standard, Premium).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage type for the disk (i.e. Standard, Premium).",
        SerializedName = @"diskType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? DiskType { get; set; }
        /// <summary>When backed by a blob, the URI of underlying blob.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When backed by a blob, the URI of underlying blob.",
        SerializedName = @"diskUri",
        PossibleTypes = new [] { typeof(string) })]
        string DiskUri { get; set; }
        /// <summary>The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).",
        SerializedName = @"hostCaching",
        PossibleTypes = new [] { typeof(string) })]
        string HostCaching { get; set; }
        /// <summary>The resource ID of the VM to which this disk is leased.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the VM to which this disk is leased.",
        SerializedName = @"leasedByLabVmId",
        PossibleTypes = new [] { typeof(string) })]
        string LeasedByLabVMId { get; set; }
        /// <summary>When backed by managed disk, this is the ID of the compute disk resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When backed by managed disk, this is the ID of the compute disk resource.",
        SerializedName = @"managedDiskId",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedDiskId { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning status of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>When backed by a blob, the storage account where the blob is.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When backed by a blob, the storage account where the blob is.",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountId { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unique immutable identifier of a resource (Guid).",
        SerializedName = @"uniqueIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string UniqueIdentifier { get;  }

    }
    /// Properties of a disk.
    internal partial interface IDiskPropertiesInternal

    {
        /// <summary>The creation date of the disk.</summary>
        global::System.DateTime? CreatedDate { get; set; }
        /// <summary>When backed by a blob, the name of the VHD blob without extension.</summary>
        string DiskBlobName { get; set; }
        /// <summary>The size of the disk in Gibibytes.</summary>
        int? DiskSizeGiB { get; set; }
        /// <summary>The storage type for the disk (i.e. Standard, Premium).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? DiskType { get; set; }
        /// <summary>When backed by a blob, the URI of underlying blob.</summary>
        string DiskUri { get; set; }
        /// <summary>The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).</summary>
        string HostCaching { get; set; }
        /// <summary>The resource ID of the VM to which this disk is leased.</summary>
        string LeasedByLabVMId { get; set; }
        /// <summary>When backed by managed disk, this is the ID of the compute disk resource.</summary>
        string ManagedDiskId { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        string ProvisioningState { get; set; }
        /// <summary>When backed by a blob, the storage account where the blob is.</summary>
        string StorageAccountId { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        string UniqueIdentifier { get; set; }

    }
}