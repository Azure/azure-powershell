// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Arc.Support
{

    /// <summary>SQL Server version.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.SqlVersionTypeConverter))]
    public partial struct SqlVersion :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQL Server 2012".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQL Server 2012'", "SQL Server 2012", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQL Server 2012");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQL Server 2014".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQL Server 2014'", "SQL Server 2014", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQL Server 2014");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQL Server 2016".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQL Server 2016'", "SQL Server 2016", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQL Server 2016");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQL Server 2017".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQL Server 2017'", "SQL Server 2017", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQL Server 2017");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQL Server 2019".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQL Server 2019'", "SQL Server 2019", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQL Server 2019");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQL Server 2022".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQL Server 2022'", "SQL Server 2022", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQL Server 2022");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Unknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Unknown'", "Unknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "Unknown");
            }
        }
    }
}