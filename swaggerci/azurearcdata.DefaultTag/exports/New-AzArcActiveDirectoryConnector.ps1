
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or replaces an Active Directory connector resource.
.Description
Creates or replaces an Active Directory connector resource.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.IActiveDirectoryConnectorResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DOMAINCONTROLLERSECONDARYDOMAINCONTROLLER <IActiveDirectoryDomainController[]>: null
  Hostname <String>: Fully-qualified domain name of a domain controller in the AD domain.

STATUS <IActiveDirectoryConnectorStatus>: null
  [(Any) <Object>]: This indicates any property can be added to this object.
  [LastUpdateTime <String>]: The time that the custom resource was last updated.
  [ObservedGeneration <Int64?>]: The version of the replicaSet associated with the AD connector custom resource.
  [State <String>]: The state of the AD connector custom resource.
.Link
https://learn.microsoft.com/powershell/module/az.arc/new-azarcactivedirectoryconnector
#>
function New-AzArcActiveDirectoryConnector {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.IActiveDirectoryConnectorResource])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the data controller
    ${DataControllerName},

    [Parameter(Mandatory)]
    [Alias('ActiveDirectoryConnectorName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the Active Directory connector instance
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the Azure resource group
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the Azure subscription
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
    ${ActiveDirectoryRealm},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String[]]
    # List of Active Directory DNS server IP addresses.
    ${DnsNameserverIPAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # NETBIOS name of the Active Directory domain.
    ${ActiveDirectoryNetbiosDomainName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The distinguished name of the Active Directory Organizational Unit.
    ${ActiveDirectoryOuDistinguishedName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.AccountProvisioningMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.AccountProvisioningMode]
    # The service account provisioning mode for this Active Directory connector.
    ${ActiveDirectoryServiceAccountProvisioning},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
    ${DnsDomainName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
    ${DnsPreferK8SDnsForPtrLookup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.Int64]
    # Replica count for DNS proxy service.
    # Default value is 1.
    ${DnsReplica},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.IActiveDirectoryDomainController[]]
    # null
    # To construct, see NOTES section for DOMAINCONTROLLERSECONDARYDOMAINCONTROLLER properties and create a hash table.
    ${DomainControllerSecondaryDomainController},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login password.
    ${DomainServiceAccountLoginInformationPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login username.
    ${DomainServiceAccountLoginInformationUsername},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Fully-qualified domain name of a domain controller in the AD domain.
    ${PrimaryDomainControllerHostname},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.IActiveDirectoryConnectorStatus]
    # null
    # To construct, see NOTES section for STATUS properties and create a hash table.
    ${Status},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Arc.private\New-AzArcActiveDirectoryConnector_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
