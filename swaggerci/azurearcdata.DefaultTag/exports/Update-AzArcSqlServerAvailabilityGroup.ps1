
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates an existing Availability Group.
.Description
Updates an existing Availability Group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IArcIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.ISqlServerAvailabilityGroupResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IArcIdentity>: Identity Parameter
  [ActiveDirectoryConnectorName <String>]: The name of the Active Directory connector instance
  [DataControllerName <String>]: The name of the data controller
  [DatabaseName <String>]: Name of the database
  [FailoverGroupName <String>]: The name of the Failover Group
  [Id <String>]: Resource identity path
  [PostgresInstanceName <String>]: Name of Postgres Instance
  [ResourceGroupName <String>]: The name of the Azure resource group
  [SqlAvailabilityGroupDatabaseName <String>]: Name of SQL Availability Group Database
  [SqlAvailabilityGroupName <String>]: Name of SQL Availability Group
  [SqlManagedInstanceName <String>]: Name of SQL Managed Instance
  [SqlServerInstanceName <String>]: Name of SQL Server Instance
  [SubscriptionId <String>]: The ID of the Azure subscription
.Link
https://learn.microsoft.com/powershell/module/az.arc/update-azarcsqlserveravailabilitygroup
#>
function Update-AzArcSqlServerAvailabilityGroup {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.ISqlServerAvailabilityGroupResource])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the Azure resource group
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # Name of SQL Availability Group
    ${SqlAvailabilityGroupName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # Name of SQL Server Instance
    ${SqlServerInstanceName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the Azure subscription
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.IArcIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # ID GUID of the availability group.
    ${AvailabilityGroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # the availability group name.
    ${AvailabilityGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Availability Synchronization mode description of availability group replica.
    ${ConfigureAvailabilityModeDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.Int32]
    # Represents the user-specified priority for performing backups on this replica relative to the other replicas in the same availability group.
    ${ConfigureBackupPriority},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Date that the replica was created.
    ${ConfigureCreateDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Mirroring endpoint URL of availability group replica
    ${ConfigureEndpointUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # failover mode description of the availability group replica.
    ${ConfigureFailoverModeDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Date that the replica was modified.
    ${ConfigureModifyDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Allowed the connections for primary role of the availability group replica.
    ${ConfigurePrimaryRoleAllowConnectionsDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Connectivity endpoint (URL) of the read only availability replica.
    ${ConfigureReadOnlyRoutingUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Connectivity endpoint (URL) of the read write availability replica.
    ${ConfigureReadWriteRoutingUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Allowed the connections for secondary role of availability group replica.
    ${ConfigureSecondaryRoleAllowConnectionsDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Describes seeding mode.
    ${ConfigureSeedingModeDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.Int32]
    # The time-out period of availability group session replica, in seconds.
    ${ConfigureSessionTimeout},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Role description of the availability group replica.
    ${StateAvailabilityGroupReplicaRole},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Connected state description of the availability group replica.
    ${StateConnectedStateDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Last connect error description of the availability group replica.
    ${StateLastConnectErrorDescription},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Last connect error time stamp of the availability group replica.
    ${StateLastConnectErrorTimestamp},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Operation state description of the availability group replica
    ${StateOperationalStateDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Recovery health description of the availability group replica.
    ${StateRecoveryHealthDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Synchronization health description of the availability group replica.
    ${StateSynchronizationHealthDesc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.ISqlServerAvailabilityGroupUpdateTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Arc.private\Update-AzArcSqlServerAvailabilityGroup_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Arc.private\Update-AzArcSqlServerAvailabilityGroup_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
