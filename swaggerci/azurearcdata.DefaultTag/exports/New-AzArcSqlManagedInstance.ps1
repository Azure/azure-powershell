
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or replaces a SQL Managed Instance resource
.Description
Creates or replaces a SQL Managed Instance resource
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.ISqlManagedInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

K8SRAW <ISqlManagedInstanceK8SRaw>: The raw kubernetes information
  [(Any) <Object>]: This indicates any property can be added to this object.
  [Spec <ISqlManagedInstanceK8SSpec>]: The kubernetes spec information.
    [(Any) <Object>]: This indicates any property can be added to this object.
    [Replica <Int32?>]: This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
    [Scheduling <IK8SScheduling>]: The kubernetes scheduling information.
      [(Any) <Object>]: This indicates any property can be added to this object.
      [Default <IK8SSchedulingOptions>]: The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
        [(Any) <Object>]: This indicates any property can be added to this object.
        [Resource <IK8SResourceRequirements>]: The kubernetes resource limits and requests used to restrict or reserve resource usage.
          [(Any) <Object>]: This indicates any property can be added to this object.
          [Limit <IK8SResourceRequirementsLimits>]: Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
            [(Any) <String>]: This indicates any property can be added to this object.
          [Request <IK8SResourceRequirementsRequests>]: Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
            [(Any) <String>]: This indicates any property can be added to this object.
.Link
https://learn.microsoft.com/powershell/module/az.arc/new-azarcsqlmanagedinstance
#>
function New-AzArcSqlManagedInstance {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.ISqlManagedInstance])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('SqlManagedInstanceName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # Name of SQL Managed Instance
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [System.String]
    # The name of the Azure resource group
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the Azure subscription
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The instance admin user
    ${Admin},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login password.
    ${BasicLoginInformationPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # Login username.
    ${BasicLoginInformationUsername},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
    ${ClusterId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # null
    ${DataControllerId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The instance end time
    ${EndTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The name of the extended location.
    ${ExtendedLocationName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.ExtendedLocationTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.ExtendedLocationTypes]
    # The type of the extended location.
    ${ExtendedLocationType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
    ${ExtensionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230315Preview.ISqlManagedInstanceK8SRaw]
    # The raw kubernetes information
    # To construct, see NOTES section for K8SRAW properties and create a hash table.
    ${K8SRaw},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # A base64-encoded keytab.
    ${KeytabInformationKeytab},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.DateTime]
    # Last uploaded date from Kubernetes cluster.
    # Defaults to current date time
    ${LastUploadedDate},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.ArcSqlManagedInstanceLicenseType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.ArcSqlManagedInstanceLicenseType]
    # The license type to apply for this managed instance.
    ${LicenseType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.Int32]
    # The SKU capacity
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether dev/test is enabled.
    # When the dev field is set to true, the resource is used for dev/test purpose.
    ${SkuDev},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The SKU family
    ${SkuFamily},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The SKU size.
    # When the name field is the combination of tier and some other value, this would be the standalone code.
    ${SkuSize},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.SqlManagedInstanceSkuTier])]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Support.SqlManagedInstanceSkuTier]
    # The pricing tier for the instance.
    ${SkuTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [System.String]
    # The instance start time
    ${StartTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api30.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Arc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Arc.private\New-AzArcSqlManagedInstance_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Arc.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
