// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Extensions;

    /// <summary>Properties of a lab resource used for updates.</summary>
    public partial class LabUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AutoShutdownProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfile _autoShutdownProfile;

        /// <summary>
        /// The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting
        /// idle.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfile AutoShutdownProfile { get => (this._autoShutdownProfile = this._autoShutdownProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.AutoShutdownProfile()); set => this._autoShutdownProfile = value; }

        /// <summary>
        /// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoShutdownProfileDisconnectDelay { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).DisconnectDelay; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).DisconnectDelay = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoShutdownProfileIdleDelay { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).IdleDelay; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).IdleDelay = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoShutdownProfileNoConnectDelay { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).NoConnectDelay; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).NoConnectDelay = value ?? default(global::System.TimeSpan); }

        /// <summary>Whether shutdown on disconnect is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AutoShutdownProfileShutdownOnDisconnect { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnDisconnect; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnDisconnect = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState)""); }

        /// <summary>Whether a VM will get shutdown when it has idled for a period of time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ShutdownOnIdleMode? AutoShutdownProfileShutdownOnIdle { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnIdle; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnIdle = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ShutdownOnIdleMode)""); }

        /// <summary>
        /// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AutoShutdownProfileShutdownWhenNotConnected { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownWhenNotConnected; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownWhenNotConnected = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState)""); }

        /// <summary>Backing field for <see cref="ConnectionProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfile _connectionProfile;

        /// <summary>
        /// The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports
        /// are open.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfile ConnectionProfile { get => (this._connectionProfile = this._connectionProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ConnectionProfile()); set => this._connectionProfile = value; }

        /// <summary>The enabled access level for Client Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileClientRdpAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).ClientRdpAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).ClientRdpAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType)""); }

        /// <summary>The enabled access level for Client Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileClientSshAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).ClientSshAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).ClientSshAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType)""); }

        /// <summary>The enabled access level for Web Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileWebRdpAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).WebRdpAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).WebRdpAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType)""); }

        /// <summary>The enabled access level for Web Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileWebSshAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).WebSshAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfileInternal)ConnectionProfile).WebSshAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType)""); }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>The description of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="LabPlanId" /> property.</summary>
        private string _labPlanId;

        /// <summary>
        /// The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating
        /// a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string LabPlanId { get => this._labPlanId; set => this._labPlanId = value; }

        /// <summary>Internal Acessors for AutoShutdownProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdatePropertiesInternal.AutoShutdownProfile { get => (this._autoShutdownProfile = this._autoShutdownProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.AutoShutdownProfile()); set { {_autoShutdownProfile = value;} } }

        /// <summary>Internal Acessors for ConnectionProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdatePropertiesInternal.ConnectionProfile { get => (this._connectionProfile = this._connectionProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ConnectionProfile()); set { {_connectionProfile = value;} } }

        /// <summary>Internal Acessors for RosterProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdatePropertiesInternal.RosterProfile { get => (this._rosterProfile = this._rosterProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.RosterProfile()); set { {_rosterProfile = value;} } }

        /// <summary>Internal Acessors for SecurityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdatePropertiesInternal.SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.SecurityProfile()); set { {_securityProfile = value;} } }

        /// <summary>Internal Acessors for SecurityProfileRegistrationCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ILabUpdatePropertiesInternal.SecurityProfileRegistrationCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfileInternal)SecurityProfile).RegistrationCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfileInternal)SecurityProfile).RegistrationCode = value; }

        /// <summary>Backing field for <see cref="RosterProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfile _rosterProfile;

        /// <summary>The lab user list management profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfile RosterProfile { get => (this._rosterProfile = this._rosterProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.RosterProfile()); set => this._rosterProfile = value; }

        /// <summary>
        /// The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileActiveDirectoryGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).ActiveDirectoryGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).ActiveDirectoryGroupId = value ?? null; }

        /// <summary>The base URI identifying the lms instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLmsInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LmsInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LmsInstance = value ?? null; }

        /// <summary>The unique id of the azure lab services tool in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLtiClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LtiClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LtiClientId = value ?? null; }

        /// <summary>The unique context identifier for the lab in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLtiContextId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LtiContextId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LtiContextId = value ?? null; }

        /// <summary>
        /// The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLtiRosterEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LtiRosterEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfileInternal)RosterProfile).LtiRosterEndpoint = value ?? null; }

        /// <summary>Backing field for <see cref="SecurityProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfile _securityProfile;

        /// <summary>The lab security profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfile SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.SecurityProfile()); set => this._securityProfile = value; }

        /// <summary>Whether any user or only specified users can register to a lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? SecurityProfileOpenAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfileInternal)SecurityProfile).OpenAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfileInternal)SecurityProfile).OpenAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState)""); }

        /// <summary>The registration code for the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SecurityProfileRegistrationCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfileInternal)SecurityProfile).RegistrationCode; }

        /// <summary>Backing field for <see cref="Title" /> property.</summary>
        private string _title;

        /// <summary>The title of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string Title { get => this._title; set => this._title = value; }

        /// <summary>Backing field for <see cref="VirtualMachineProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IVirtualMachineProfile _virtualMachineProfile;

        /// <summary>The profile used for creating lab virtual machines.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IVirtualMachineProfile VirtualMachineProfile { get => (this._virtualMachineProfile = this._virtualMachineProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.VirtualMachineProfile()); set => this._virtualMachineProfile = value; }

        /// <summary>Creates an new <see cref="LabUpdateProperties" /> instance.</summary>
        public LabUpdateProperties()
        {

        }
    }
    /// Properties of a lab resource used for updates.
    public partial interface ILabUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time a VM will stay running after a user disconnects if this behavior is enabled.",
        SerializedName = @"disconnectDelay",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoShutdownProfileDisconnectDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time a VM will idle before it is shutdown if this behavior is enabled.",
        SerializedName = @"idleDelay",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoShutdownProfileIdleDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.",
        SerializedName = @"noConnectDelay",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoShutdownProfileNoConnectDelay { get; set; }
        /// <summary>Whether shutdown on disconnect is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether shutdown on disconnect is enabled",
        SerializedName = @"shutdownOnDisconnect",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AutoShutdownProfileShutdownOnDisconnect { get; set; }
        /// <summary>Whether a VM will get shutdown when it has idled for a period of time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether a VM will get shutdown when it has idled for a period of time.",
        SerializedName = @"shutdownOnIdle",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ShutdownOnIdleMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ShutdownOnIdleMode? AutoShutdownProfileShutdownOnIdle { get; set; }
        /// <summary>
        /// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether a VM will get shutdown when it hasn't been connected to after a period of time.",
        SerializedName = @"shutdownWhenNotConnected",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AutoShutdownProfileShutdownWhenNotConnected { get; set; }
        /// <summary>The enabled access level for Client Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The enabled access level for Client Access over RDP.",
        SerializedName = @"clientRdpAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileClientRdpAccess { get; set; }
        /// <summary>The enabled access level for Client Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The enabled access level for Client Access over SSH.",
        SerializedName = @"clientSshAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileClientSshAccess { get; set; }
        /// <summary>The enabled access level for Web Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The enabled access level for Web Access over RDP.",
        SerializedName = @"webRdpAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileWebRdpAccess { get; set; }
        /// <summary>The enabled access level for Web Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The enabled access level for Web Access over SSH.",
        SerializedName = @"webSshAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileWebSshAccess { get; set; }
        /// <summary>The description of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the lab.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating
        /// a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..",
        SerializedName = @"labPlanId",
        PossibleTypes = new [] { typeof(string) })]
        string LabPlanId { get; set; }
        /// <summary>
        /// The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.",
        SerializedName = @"activeDirectoryGroupId",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileActiveDirectoryGroupId { get; set; }
        /// <summary>The base URI identifying the lms instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The base URI identifying the lms instance.",
        SerializedName = @"lmsInstance",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLmsInstance { get; set; }
        /// <summary>The unique id of the azure lab services tool in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique id of the azure lab services tool in the lms.",
        SerializedName = @"ltiClientId",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLtiClientId { get; set; }
        /// <summary>The unique context identifier for the lab in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique context identifier for the lab in the lms.",
        SerializedName = @"ltiContextId",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLtiContextId { get; set; }
        /// <summary>
        /// The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The uri of the names and roles service endpoint on the lms for the class attached to this lab.",
        SerializedName = @"ltiRosterEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLtiRosterEndpoint { get; set; }
        /// <summary>Whether any user or only specified users can register to a lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether any user or only specified users can register to a lab.",
        SerializedName = @"openAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? SecurityProfileOpenAccess { get; set; }
        /// <summary>The registration code for the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The registration code for the lab.",
        SerializedName = @"registrationCode",
        PossibleTypes = new [] { typeof(string) })]
        string SecurityProfileRegistrationCode { get;  }
        /// <summary>The title of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The title of the lab.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        string Title { get; set; }
        /// <summary>The profile used for creating lab virtual machines.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The profile used for creating lab virtual machines.",
        SerializedName = @"virtualMachineProfile",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IVirtualMachineProfile) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IVirtualMachineProfile VirtualMachineProfile { get; set; }

    }
    /// Properties of a lab resource used for updates.
    internal partial interface ILabUpdatePropertiesInternal

    {
        /// <summary>
        /// The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting
        /// idle.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IAutoShutdownProfile AutoShutdownProfile { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        /// </summary>
        global::System.TimeSpan? AutoShutdownProfileDisconnectDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        /// </summary>
        global::System.TimeSpan? AutoShutdownProfileIdleDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        /// </summary>
        global::System.TimeSpan? AutoShutdownProfileNoConnectDelay { get; set; }
        /// <summary>Whether shutdown on disconnect is enabled</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AutoShutdownProfileShutdownOnDisconnect { get; set; }
        /// <summary>Whether a VM will get shutdown when it has idled for a period of time.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ShutdownOnIdleMode? AutoShutdownProfileShutdownOnIdle { get; set; }
        /// <summary>
        /// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AutoShutdownProfileShutdownWhenNotConnected { get; set; }
        /// <summary>
        /// The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports
        /// are open.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IConnectionProfile ConnectionProfile { get; set; }
        /// <summary>The enabled access level for Client Access over RDP.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileClientRdpAccess { get; set; }
        /// <summary>The enabled access level for Client Access over SSH.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileClientSshAccess { get; set; }
        /// <summary>The enabled access level for Web Access over RDP.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileWebRdpAccess { get; set; }
        /// <summary>The enabled access level for Web Access over SSH.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.ConnectionType? ConnectionProfileWebSshAccess { get; set; }
        /// <summary>The description of the lab.</summary>
        string Description { get; set; }
        /// <summary>
        /// The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating
        /// a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..
        /// </summary>
        string LabPlanId { get; set; }
        /// <summary>The lab user list management profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IRosterProfile RosterProfile { get; set; }
        /// <summary>
        /// The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        /// </summary>
        string RosterProfileActiveDirectoryGroupId { get; set; }
        /// <summary>The base URI identifying the lms instance.</summary>
        string RosterProfileLmsInstance { get; set; }
        /// <summary>The unique id of the azure lab services tool in the lms.</summary>
        string RosterProfileLtiClientId { get; set; }
        /// <summary>The unique context identifier for the lab in the lms.</summary>
        string RosterProfileLtiContextId { get; set; }
        /// <summary>
        /// The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        /// </summary>
        string RosterProfileLtiRosterEndpoint { get; set; }
        /// <summary>The lab security profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.ISecurityProfile SecurityProfile { get; set; }
        /// <summary>Whether any user or only specified users can register to a lab.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? SecurityProfileOpenAccess { get; set; }
        /// <summary>The registration code for the lab.</summary>
        string SecurityProfileRegistrationCode { get; set; }
        /// <summary>The title of the lab.</summary>
        string Title { get; set; }
        /// <summary>The profile used for creating lab virtual machines.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211115Preview.IVirtualMachineProfile VirtualMachineProfile { get; set; }

    }
}