
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
**WARNING**: This API will be deprecated.
Please see [AKS-managed Azure Active Directory integration](https://aka.ms/aks-managed-aad) to update your cluster with AKS-managed Azure AD.
.Description
**WARNING**: This API will be deprecated.
Please see [AKS-managed Azure Active Directory integration](https://aka.ms/aks-managed-aad) to update your cluster with AKS-managed Azure AD.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.IManagedClusterAadProfile
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.IContainerServiceIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IContainerServiceIdentity>: Identity Parameter
  [AgentPoolName <String>]: The name of the agent pool.
  [CommandId <String>]: Id of the command.
  [ConfigName <String>]: The name of the maintenance configuration.
  [Id <String>]: Resource identity path
  [Location <String>]: The name of Azure region.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [ResourceName <String>]: The name of the managed cluster resource.
  [RoleName <String>]: The name of the role for managed cluster accessProfile resource.
  [SubscriptionId <String>]: The ID of the target subscription.

PARAMETER <IManagedClusterAadProfile>: For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
  [AdminGroupObjectID <String[]>]: The list of AAD group object IDs that will have admin role of the cluster.
  [ClientAppId <String>]: (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
  [EnableAzureRbac <Boolean?>]: Whether to enable Azure RBAC for Kubernetes authorization.
  [Managed <Boolean?>]: Whether to enable managed AAD.
  [ServerAppId <String>]: (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
  [ServerAppSecret <String>]: (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
  [TenantId <String>]: The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
.Link
https://learn.microsoft.com/powershell/module/az.containerservice/reset-azcontainerservicemanagedclusteraadprofile
#>
function Reset-AzContainerServiceManagedClusterAadProfile {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='ResetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Parameter(ParameterSetName='ResetExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Reset', Mandatory)]
    [Parameter(ParameterSetName='ResetExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the managed cluster resource.
    ${ResourceName},

    [Parameter(ParameterSetName='Reset')]
    [Parameter(ParameterSetName='ResetExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.IContainerServiceIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Reset', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.IManagedClusterAadProfile]
    # For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String[]]
    # The list of AAD group object IDs that will have admin role of the cluster.
    ${AdminGroupObjectID},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # (DEPRECATED) The client AAD application ID.
    # Learn more at https://aka.ms/aks/aad-legacy.
    ${ClientAppId},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable Azure RBAC for Kubernetes authorization.
    ${EnableAzureRbac},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable managed AAD.
    ${Managed},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # (DEPRECATED) The server AAD application ID.
    # Learn more at https://aka.ms/aks/aad-legacy.
    ${ServerAppId},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # (DEPRECATED) The server AAD application secret.
    # Learn more at https://aka.ms/aks/aad-legacy.
    ${ServerAppSecret},

    [Parameter(ParameterSetName='ResetExpanded')]
    [Parameter(ParameterSetName='ResetViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # The AAD tenant ID to use for authentication.
    # If not specified, will use the tenant of the deployment subscription.
    ${TenantId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Reset = 'Az.ContainerService.private\Reset-AzContainerServiceManagedClusterAadProfile_Reset';
            ResetExpanded = 'Az.ContainerService.private\Reset-AzContainerServiceManagedClusterAadProfile_ResetExpanded';
            ResetViaIdentity = 'Az.ContainerService.private\Reset-AzContainerServiceManagedClusterAadProfile_ResetViaIdentity';
            ResetViaIdentityExpanded = 'Az.ContainerService.private\Reset-AzContainerServiceManagedClusterAadProfile_ResetViaIdentityExpanded';
        }
        if (('Reset', 'ResetExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
