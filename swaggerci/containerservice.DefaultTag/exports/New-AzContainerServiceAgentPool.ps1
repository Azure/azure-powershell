
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates an agent pool in the specified managed cluster.
.Description
Creates or updates an agent pool in the specified managed cluster.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.IAgentPool
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

LINUXOSCONFIGSYSCTL <ISysctlConfig>: Sysctl settings for Linux agent nodes.
  [FsAioMaxNr <Int32?>]: Sysctl setting fs.aio-max-nr.
  [FsFileMax <Int32?>]: Sysctl setting fs.file-max.
  [FsInotifyMaxUserWatch <Int32?>]: Sysctl setting fs.inotify.max_user_watches.
  [FsNrOpen <Int32?>]: Sysctl setting fs.nr_open.
  [KernelThreadsMax <Int32?>]: Sysctl setting kernel.threads-max.
  [NetCoreNetdevMaxBacklog <Int32?>]: Sysctl setting net.core.netdev_max_backlog.
  [NetCoreOptmemMax <Int32?>]: Sysctl setting net.core.optmem_max.
  [NetCoreRmemDefault <Int32?>]: Sysctl setting net.core.rmem_default.
  [NetCoreRmemMax <Int32?>]: Sysctl setting net.core.rmem_max.
  [NetCoreSomaxconn <Int32?>]: Sysctl setting net.core.somaxconn.
  [NetCoreWmemDefault <Int32?>]: Sysctl setting net.core.wmem_default.
  [NetCoreWmemMax <Int32?>]: Sysctl setting net.core.wmem_max.
  [NetIpv4IPLocalPortRange <String>]: Sysctl setting net.ipv4.ip_local_port_range.
  [NetIpv4NeighDefaultGcThresh1 <Int32?>]: Sysctl setting net.ipv4.neigh.default.gc_thresh1.
  [NetIpv4NeighDefaultGcThresh2 <Int32?>]: Sysctl setting net.ipv4.neigh.default.gc_thresh2.
  [NetIpv4NeighDefaultGcThresh3 <Int32?>]: Sysctl setting net.ipv4.neigh.default.gc_thresh3.
  [NetIpv4TcpFinTimeout <Int32?>]: Sysctl setting net.ipv4.tcp_fin_timeout.
  [NetIpv4TcpKeepaliveProbe <Int32?>]: Sysctl setting net.ipv4.tcp_keepalive_probes.
  [NetIpv4TcpKeepaliveTime <Int32?>]: Sysctl setting net.ipv4.tcp_keepalive_time.
  [NetIpv4TcpMaxSynBacklog <Int32?>]: Sysctl setting net.ipv4.tcp_max_syn_backlog.
  [NetIpv4TcpMaxTwBucket <Int32?>]: Sysctl setting net.ipv4.tcp_max_tw_buckets.
  [NetIpv4TcpTwReuse <Boolean?>]: Sysctl setting net.ipv4.tcp_tw_reuse.
  [NetIpv4TcpkeepaliveIntvl <Int32?>]: Sysctl setting net.ipv4.tcp_keepalive_intvl.
  [NetNetfilterNfConntrackBucket <Int32?>]: Sysctl setting net.netfilter.nf_conntrack_buckets.
  [NetNetfilterNfConntrackMax <Int32?>]: Sysctl setting net.netfilter.nf_conntrack_max.
  [VMMaxMapCount <Int32?>]: Sysctl setting vm.max_map_count.
  [VMSwappiness <Int32?>]: Sysctl setting vm.swappiness.
  [VMVfsCachePressure <Int32?>]: Sysctl setting vm.vfs_cache_pressure.
.Link
https://learn.microsoft.com/powershell/module/az.containerservice/new-azcontainerserviceagentpool
#>
function New-AzContainerServiceAgentPool {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.IAgentPool])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('AgentPoolName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the agent pool.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the managed cluster resource.
    ${ResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String[]]
    # The list of Availability zones to use for nodes.
    # This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
    ${AvailabilityZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # Number of agents (VMs) to host docker containers.
    # Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools.
    # The default value is 1.
    ${Count},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # This is the ARM ID of the source object to be used to create the target object.
    ${CreationDataSourceResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable auto-scaler
    ${EnableAutoScaling},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # This is only supported on certain VM sizes and in certain Azure regions.
    # For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
    ${EnableEncryptionAtHost},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
    ${EnableFips},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses.
    # A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops.
    # For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
    # The default is false.
    ${EnableNodePublicIP},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable UltraSSD
    ${EnableUltraSsd},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.GpuInstanceProfile])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.GpuInstanceProfile]
    # GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
    ${GpuInstanceProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}.
    # For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
    ${HostGroupId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String[]]
    # Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
    ${KubeletConfigAllowedUnsafeSysctl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The maximum number of container log files that can be present for a container.
    # The number must be â‰¥ 2.
    ${KubeletConfigContainerLogMaxFile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The maximum size (e.g.
    # 10Mi) of container log file before it is rotated.
    ${KubeletConfigContainerLogMaxSizeMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The default is true.
    ${KubeletConfigCpuCfsQuota},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix.
    # For example: '300ms', '2h45m'.
    # Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
    ${KubeletConfigCpuCfsQuotaPeriod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # The default is 'none'.
    # See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information.
    # Allowed values are 'none' and 'static'.
    ${KubeletConfigCpuManagerPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If set to true it will make the Kubelet fail to start if swap is enabled on the node.
    ${KubeletConfigFailSwapOn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # To disable image garbage collection, set to 100.
    # The default is 85%
    ${KubeletConfigImageGcHighThreshold},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # This cannot be set higher than imageGcHighThreshold.
    # The default is 80%
    ${KubeletConfigImageGcLowThreshold},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The maximum number of processes per pod.
    ${KubeletConfigPodMaxPid},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager).
    # The default is 'none'.
    # Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
    ${KubeletConfigTopologyManagerPolicy},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.KubeletDiskType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.KubeletDiskType]
    # Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
    ${KubeletDiskType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The size in MB of a swap file that will be created on each node.
    ${LinuxOSConfigSwapFileSizeMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.ISysctlConfig]
    # Sysctl settings for Linux agent nodes.
    # To construct, see NOTES section for LINUXOSCONFIGSYSCTL properties and create a hash table.
    ${LinuxOSConfigSysctl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'.
    # The default is 'madvise'.
    # For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
    ${LinuxOSConfigTransparentHugePageDefrag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # Valid values are 'always', 'madvise', and 'never'.
    # The default is 'always'.
    # For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
    ${LinuxOSConfigTransparentHugePageEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The maximum number of nodes for auto-scaling
    ${MaxCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The maximum number of pods that can run on a node.
    ${MaxPod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The minimum number of nodes for auto-scaling
    ${MinCount},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AgentPoolMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AgentPoolMode]
    # A cluster must have at least one 'System' Agent Pool at all times.
    # For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
    ${Mode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.IManagedClusterAgentPoolProfilePropertiesNodeLabels]))]
    [System.Collections.Hashtable]
    # The node labels to be persisted across all nodes in agent pool.
    ${NodeLabel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
    ${NodePublicIPPrefixId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String[]]
    # The taints added to new nodes during node pool create and scale.
    # For example, key=value:NoSchedule.
    ${NodeTaint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool.
    # If you specify 0, it will apply the default osDisk size according to the vmSize specified.
    ${OSDiskSizeGb},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.OSDiskType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.OSDiskType]
    # The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB.
    # Otherwise, defaults to 'Managed'.
    # May not be changed after creation.
    # For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
    ${OSDiskType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Ossku])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Ossku]
    # Specifies the OS SKU used by the agent pool.
    # The default is Ubuntu if OSType is Linux.
    # The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
    ${OSSku},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.OSType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.OSType]
    # The operating system type.
    # The default is Linux.
    ${OSType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # Both patch version <major.minor.patch> (e.g.
    # 1.20.13) and <major.minor> (e.g.
    # 1.20) are supported.
    # When <major.minor> is specified, the latest supported GA patch version is chosen automatically.
    # Updating the cluster with the same <major.minor> once it has been created (e.g.
    # 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available.
    # As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version.
    # The node pool version must have the same major version as the control plane.
    # The node pool minor version must be within two minor versions of the control plane version.
    # The node pool version cannot be greater than the control plane version.
    # For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
    ${OrchestratorVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details).
    # This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
    ${PodSubnetId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Code])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Code]
    # Tells whether the cluster is Running or Stopped
    ${PowerStateCode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AgentPoolType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AgentPoolType]
    # The type of Agent Pool.
    ${PropertiesType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # The ID for Proximity Placement Group.
    ${ProximityPlacementGroupId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.ScaleDownMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.ScaleDownMode]
    # This also effects the cluster autoscaler behavior.
    # If not specified, it defaults to Delete.
    ${ScaleDownMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.ScaleSetEvictionPolicy])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.ScaleSetEvictionPolicy]
    # This cannot be specified unless the scaleSetPriority is 'Spot'.
    # If not specified, the default is 'Delete'.
    ${ScaleSetEvictionPolicy},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.ScaleSetPriority])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.ScaleSetPriority]
    # The Virtual Machine Scale Set priority.
    # If not specified, the default is 'Regular'.
    ${ScaleSetPriority},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Single]
    # Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price.
    # For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
    ${SpotMaxPrice},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20230301.IManagedClusterAgentPoolProfilePropertiesTags]))]
    [System.Collections.Hashtable]
    # The tags to be persisted on the agent pool virtual machine scale set.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # This can either be set to an integer (e.g.
    # '5') or a percentage (e.g.
    # '50%').
    # If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade.
    # For percentages, fractional nodes are rounded up.
    # If not specified, the default is 1.
    # For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
    ${UpgradeSettingMaxSurge},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # VM size availability varies by region.
    # If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly.
    # For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
    ${VMSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # If this is not specified, a VNET and subnet will be generated and used.
    # If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes.
    # This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
    ${VnetSubnetId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WorkloadRuntime])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WorkloadRuntime]
    # Determines the type of workload a node can run.
    ${WorkloadRuntime},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ContainerService.private\New-AzContainerServiceAgentPool_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
