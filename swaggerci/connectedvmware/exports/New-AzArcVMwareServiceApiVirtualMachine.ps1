
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create Or Update virtual machine.
.Description
Create Or Update virtual machine.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachine
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

NETWORKPROFILENETWORKINTERFACE <INetworkInterface[]>: Gets or sets the list of network interfaces associated with the virtual machine.
  [DeviceKey <Int32?>]: Gets or sets the device key value.
  [IPSettingAllocationMethod <IPAddressAllocationMethod?>]: Gets or sets the nic allocation method.
  [IPSettingDnsServer <String[]>]: Gets or sets the dns servers.
  [IPSettingGateway <String[]>]: Gets or sets the gateway.
  [IPSettingIpaddress <String>]: Gets or sets the ip address for the nic.
  [IPSettingSubnetMask <String>]: Gets or sets the mask.
  [Name <String>]: Gets or sets the name of the network interface.
  [NetworkId <String>]: Gets or sets the ARM Id of the network resource to connect the virtual machine.
  [NicType <NicType?>]: NIC type
  [PowerOnBoot <PowerOnBootOption?>]: Gets or sets the power on boot.

STORAGEPROFILEDISK <IVirtualDisk[]>: Gets or sets the list of virtual disks associated with the virtual machine.
  [ControllerKey <Int32?>]: Gets or sets the controller id.
  [DeviceKey <Int32?>]: Gets or sets the device key value.
  [DeviceName <String>]: Gets or sets the device name.
  [DiskMode <DiskMode?>]: Gets or sets the disk mode.
  [DiskSizeGb <Int32?>]: Gets or sets the disk total size.
  [DiskType <DiskType?>]: Gets or sets the disk backing type.
  [Name <String>]: Gets or sets the name of the virtual disk.
  [UnitNumber <Int32?>]: Gets or sets the unit number of the disk on the controller.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.arcvmwareserviceapi/new-azarcvmwareserviceapivirtualmachine
#>
function New-AzArcVMwareServiceApiVirtualMachine {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachine])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('VirtualMachineName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Path')]
    [System.String]
    # Name of the virtual machine resource.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Path')]
    [System.String]
    # The Resource Group Name.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The Subscription ID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the location.
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # The extended location name.
    ${ExtendedLocationName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # The extended location type.
    ${ExtendedLocationType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType]
    # Firmware type
    ${FirmwareType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.Int32]
    # Gets or sets memory size in MBs for the vm.
    ${HardwareProfileMemorySizeMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.Int32]
    # Gets or sets the number of cores per socket for the vm.
    # Defaults to 1 if unspecified.
    ${HardwareProfileNumCoresPerSocket},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.Int32]
    # Gets or sets the number of vCPUs for the vm.
    ${HardwareProfileNumCpUs},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.IdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.IdentityType]
    # The type of managed service identity.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the inventory Item ID for the virtual machine.
    ${InventoryItemId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g.
    # ApiApps are a kind of Microsoft.Web/sites type.
    # If supported, the resource provider must validate and persist this value.
    ${Kind},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
    ${MoRefId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkInterface[]]
    # Gets or sets the list of network interfaces associated with the virtual machine.
    # To construct, see NOTES section for NETWORKPROFILENETWORKINTERFACE properties and create a hash table.
    ${NetworkProfileNetworkInterface},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets administrator password.
    ${OSProfileAdminPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets administrator username.
    ${OSProfileAdminUsername},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets computer name.
    ${OSProfileComputerName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType]
    # Gets or sets the type of the os.
    ${OSProfileOstype},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
    ${PlacementProfileClusterId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
    ${PlacementProfileDatastoreId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
    ${PlacementProfileHostId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
    ${PlacementProfileResourcePoolId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the resourcePool resource on which this virtual machine willdeploy.
    ${ResourcePoolId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the SMBIOS UUID of the vm.
    ${SmbiosUuid},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualDisk[]]
    # Gets or sets the list of virtual disks associated with the virtual machine.
    # To construct, see NOTES section for STORAGEPROFILEDISK properties and create a hash table.
    ${StorageProfileDisk},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachineTags]))]
    [System.Collections.Hashtable]
    # Gets or sets the Resource tags.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the template resource to deploy the virtual machine.
    ${TemplateId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Body')]
    [System.String]
    # Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
    ${VCenterId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ArcVMwareServiceApi.private\New-AzArcVMwareServiceApiVirtualMachine_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
