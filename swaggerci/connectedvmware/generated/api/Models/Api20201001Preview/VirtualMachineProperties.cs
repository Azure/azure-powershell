// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Extensions;

    /// <summary>Defines the resource properties.</summary>
    public partial class VirtualMachineProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachineProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal
    {

        /// <summary>Backing field for <see cref="CustomResourceName" /> property.</summary>
        private string _customResourceName;

        /// <summary>Gets the name of the corresponding resource in Kubernetes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string CustomResourceName { get => this._customResourceName; }

        /// <summary>Backing field for <see cref="FirmwareType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? _firmwareType;

        /// <summary>Firmware type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? FirmwareType { get => this._firmwareType; set => this._firmwareType = value; }

        /// <summary>Backing field for <see cref="FolderPath" /> property.</summary>
        private string _folderPath;

        /// <summary>Gets or sets the folder path of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string FolderPath { get => this._folderPath; }

        /// <summary>Backing field for <see cref="GuestAgentProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfile _guestAgentProfile;

        /// <summary>Guest agent status properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfile GuestAgentProfile { get => (this._guestAgentProfile = this._guestAgentProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.GuestAgentProfile()); set => this._guestAgentProfile = value; }

        /// <summary>The hybrid machine agent full version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string GuestAgentProfileAgentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).AgentVersion; }

        /// <summary>Details about the error state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IErrorDetail[] GuestAgentProfileErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).ErrorDetail; }

        /// <summary>The time of the last status change.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public global::System.DateTime? GuestAgentProfileLastStatusChange { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).LastStatusChange; }

        /// <summary>The status of the hybrid machine agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.StatusTypes? GuestAgentProfileStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).Status; }

        /// <summary>Specifies the VM's unique SMBIOS ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string GuestAgentProfileVMUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).VMUuid; }

        /// <summary>Backing field for <see cref="HardwareProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfile _hardwareProfile;

        /// <summary>Hardware properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfile HardwareProfile { get => (this._hardwareProfile = this._hardwareProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.HardwareProfile()); set => this._hardwareProfile = value; }

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? HardwareProfileCpuHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).CpuHotAddEnabled; }

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? HardwareProfileCpuHotRemoveEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).CpuHotRemoveEnabled; }

        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? HardwareProfileMemoryHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).MemoryHotAddEnabled; }

        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? HardwareProfileMemorySizeMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).MemorySizeMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).MemorySizeMb = value ?? default(int); }

        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? HardwareProfileNumCoresPerSocket { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).NumCoresPerSocket; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).NumCoresPerSocket = value ?? default(int); }

        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? HardwareProfileNumCpUs { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).NumCpUs; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).NumCpUs = value ?? default(int); }

        /// <summary>Backing field for <see cref="InstanceUuid" /> property.</summary>
        private string _instanceUuid;

        /// <summary>Gets or sets the instance uuid of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string InstanceUuid { get => this._instanceUuid; }

        /// <summary>Backing field for <see cref="InventoryItemId" /> property.</summary>
        private string _inventoryItemId;

        /// <summary>Gets or sets the inventory Item ID for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string InventoryItemId { get => this._inventoryItemId; set => this._inventoryItemId = value; }

        /// <summary>Internal Acessors for CustomResourceName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.CustomResourceName { get => this._customResourceName; set { {_customResourceName = value;} } }

        /// <summary>Internal Acessors for FolderPath</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.FolderPath { get => this._folderPath; set { {_folderPath = value;} } }

        /// <summary>Internal Acessors for GuestAgentProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.GuestAgentProfile { get => (this._guestAgentProfile = this._guestAgentProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.GuestAgentProfile()); set { {_guestAgentProfile = value;} } }

        /// <summary>Internal Acessors for GuestAgentProfileAgentVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.GuestAgentProfileAgentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).AgentVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).AgentVersion = value; }

        /// <summary>Internal Acessors for GuestAgentProfileErrorDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IErrorDetail[] Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.GuestAgentProfileErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).ErrorDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).ErrorDetail = value; }

        /// <summary>Internal Acessors for GuestAgentProfileLastStatusChange</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.GuestAgentProfileLastStatusChange { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).LastStatusChange; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).LastStatusChange = value; }

        /// <summary>Internal Acessors for GuestAgentProfileStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.StatusTypes? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.GuestAgentProfileStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).Status = value; }

        /// <summary>Internal Acessors for GuestAgentProfileVMUuid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.GuestAgentProfileVMUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).VMUuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfileInternal)GuestAgentProfile).VMUuid = value; }

        /// <summary>Internal Acessors for HardwareProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.HardwareProfile { get => (this._hardwareProfile = this._hardwareProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.HardwareProfile()); set { {_hardwareProfile = value;} } }

        /// <summary>Internal Acessors for HardwareProfileCpuHotAddEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.HardwareProfileCpuHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).CpuHotAddEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).CpuHotAddEnabled = value; }

        /// <summary>Internal Acessors for HardwareProfileCpuHotRemoveEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.HardwareProfileCpuHotRemoveEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).CpuHotRemoveEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).CpuHotRemoveEnabled = value; }

        /// <summary>Internal Acessors for HardwareProfileMemoryHotAddEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.HardwareProfileMemoryHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).MemoryHotAddEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfileInternal)HardwareProfile).MemoryHotAddEnabled = value; }

        /// <summary>Internal Acessors for InstanceUuid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.InstanceUuid { get => this._instanceUuid; set { {_instanceUuid = value;} } }

        /// <summary>Internal Acessors for MoName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.MoName { get => this._moName; set { {_moName = value;} } }

        /// <summary>Internal Acessors for NetworkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.NetworkProfile()); set { {_networkProfile = value;} } }

        /// <summary>Internal Acessors for OSProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.OSProfile { get => (this._oSProfile = this._oSProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.OSProfile()); set { {_oSProfile = value;} } }

        /// <summary>Internal Acessors for OSProfileOsname</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.OSProfileOsname { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).OSName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).OSName = value; }

        /// <summary>Internal Acessors for OSProfileToolsRunningStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.OSProfileToolsRunningStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsRunningStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsRunningStatus = value; }

        /// <summary>Internal Acessors for OSProfileToolsVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.OSProfileToolsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsVersion = value; }

        /// <summary>Internal Acessors for OSProfileToolsVersionStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.OSProfileToolsVersionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsVersionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsVersionStatus = value; }

        /// <summary>Internal Acessors for PlacementProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.PlacementProfile { get => (this._placementProfile = this._placementProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.PlacementProfile()); set { {_placementProfile = value;} } }

        /// <summary>Internal Acessors for PowerState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.PowerState { get => this._powerState; set { {_powerState = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for Statuses</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IResourceStatus[] Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.Statuses { get => this._statuses; set { {_statuses = value;} } }

        /// <summary>Internal Acessors for StorageProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.StorageProfile { get => (this._storageProfile = this._storageProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.StorageProfile()); set { {_storageProfile = value;} } }

        /// <summary>Internal Acessors for StorageProfileScsiController</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualScsiController[] Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.StorageProfileScsiController { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfileInternal)StorageProfile).ScsiController; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfileInternal)StorageProfile).ScsiController = value; }

        /// <summary>Internal Acessors for Uuid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.Uuid { get => this._uuid; set { {_uuid = value;} } }

        /// <summary>Internal Acessors for VMId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualMachinePropertiesInternal.VMId { get => this._vMId; set { {_vMId = value;} } }

        /// <summary>Backing field for <see cref="MoName" /> property.</summary>
        private string _moName;

        /// <summary>Gets or sets the vCenter Managed Object name for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string MoName { get => this._moName; }

        /// <summary>Backing field for <see cref="MoRefId" /> property.</summary>
        private string _moRefId;

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string MoRefId { get => this._moRefId; set => this._moRefId = value; }

        /// <summary>Backing field for <see cref="NetworkProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkProfile _networkProfile;

        /// <summary>Network properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkProfile NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.NetworkProfile()); set => this._networkProfile = value; }

        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkInterface[] NetworkProfileNetworkInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkProfileInternal)NetworkProfile).NetworkInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkProfileInternal)NetworkProfile).NetworkInterface = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="OSProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfile _oSProfile;

        /// <summary>OS properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfile OSProfile { get => (this._oSProfile = this._oSProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.OSProfile()); set => this._oSProfile = value; }

        /// <summary>Gets or sets administrator password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileAdminPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).AdminPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).AdminPassword = value ?? null; }

        /// <summary>Gets or sets administrator username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileAdminUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).AdminUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).AdminUsername = value ?? null; }

        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ComputerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ComputerName = value ?? null; }

        /// <summary>Gets or sets os name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileOsname { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).OSName; }

        /// <summary>Gets or sets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType? OSProfileOstype { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).OSType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType)""); }

        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileToolsRunningStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsRunningStatus; }

        /// <summary>Gets or sets the current version of VMware Tools.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileToolsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsVersion; }

        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileToolsVersionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfileInternal)OSProfile).ToolsVersionStatus; }

        /// <summary>Backing field for <see cref="PlacementProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfile _placementProfile;

        /// <summary>Placement properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfile PlacementProfile { get => (this._placementProfile = this._placementProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.PlacementProfile()); set => this._placementProfile = value; }

        /// <summary>
        /// Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).ClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).ClusterId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileDatastoreId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).DatastoreId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).DatastoreId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileHostId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).HostId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).HostId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileResourcePoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).ResourcePoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfileInternal)PlacementProfile).ResourcePoolId = value ?? null; }

        /// <summary>Backing field for <see cref="PowerState" /> property.</summary>
        private string _powerState;

        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string PowerState { get => this._powerState; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Gets or sets the provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="ResourcePoolId" /> property.</summary>
        private string _resourcePoolId;

        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
        /// deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string ResourcePoolId { get => this._resourcePoolId; set => this._resourcePoolId = value; }

        /// <summary>Backing field for <see cref="SmbiosUuid" /> property.</summary>
        private string _smbiosUuid;

        /// <summary>Gets or sets the SMBIOS UUID of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string SmbiosUuid { get => this._smbiosUuid; set => this._smbiosUuid = value; }

        /// <summary>Backing field for <see cref="Statuses" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IResourceStatus[] _statuses;

        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IResourceStatus[] Statuses { get => this._statuses; }

        /// <summary>Backing field for <see cref="StorageProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfile _storageProfile;

        /// <summary>Storage properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfile StorageProfile { get => (this._storageProfile = this._storageProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.StorageProfile()); set => this._storageProfile = value; }

        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualDisk[] StorageProfileDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfileInternal)StorageProfile).Disk; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfileInternal)StorageProfile).Disk = value ?? null /* arrayOf */; }

        /// <summary>
        /// Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualScsiController[] StorageProfileScsiController { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfileInternal)StorageProfile).ScsiController; }

        /// <summary>Backing field for <see cref="TemplateId" /> property.</summary>
        private string _templateId;

        /// <summary>Gets or sets the ARM Id of the template resource to deploy the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string TemplateId { get => this._templateId; set => this._templateId = value; }

        /// <summary>Backing field for <see cref="Uuid" /> property.</summary>
        private string _uuid;

        /// <summary>Gets or sets a unique identifier for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string Uuid { get => this._uuid; }

        /// <summary>Backing field for <see cref="VCenterId" /> property.</summary>
        private string _vCenterId;

        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string VCenterId { get => this._vCenterId; set => this._vCenterId = value; }

        /// <summary>Backing field for <see cref="VMId" /> property.</summary>
        private string _vMId;

        /// <summary>Gets or sets a unique identifier for the vm resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string VMId { get => this._vMId; }

        /// <summary>Creates an new <see cref="VirtualMachineProperties" /> instance.</summary>
        public VirtualMachineProperties()
        {

        }
    }
    /// Defines the resource properties.
    public partial interface IVirtualMachineProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.IJsonSerializable
    {
        /// <summary>Gets the name of the corresponding resource in Kubernetes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets the name of the corresponding resource in Kubernetes.",
        SerializedName = @"customResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomResourceName { get;  }
        /// <summary>Firmware type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Firmware type",
        SerializedName = @"firmwareType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? FirmwareType { get; set; }
        /// <summary>Gets or sets the folder path of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the folder path of the vm.",
        SerializedName = @"folderPath",
        PossibleTypes = new [] { typeof(string) })]
        string FolderPath { get;  }
        /// <summary>The hybrid machine agent full version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The hybrid machine agent full version.",
        SerializedName = @"agentVersion",
        PossibleTypes = new [] { typeof(string) })]
        string GuestAgentProfileAgentVersion { get;  }
        /// <summary>Details about the error state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Details about the error state.",
        SerializedName = @"errorDetails",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IErrorDetail) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IErrorDetail[] GuestAgentProfileErrorDetail { get;  }
        /// <summary>The time of the last status change.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time of the last status change.",
        SerializedName = @"lastStatusChange",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? GuestAgentProfileLastStatusChange { get;  }
        /// <summary>The status of the hybrid machine agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the hybrid machine agent.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.StatusTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.StatusTypes? GuestAgentProfileStatus { get;  }
        /// <summary>Specifies the VM's unique SMBIOS ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the VM's unique SMBIOS ID.",
        SerializedName = @"vmUuid",
        PossibleTypes = new [] { typeof(string) })]
        string GuestAgentProfileVMUuid { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.",
        SerializedName = @"cpuHotAddEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HardwareProfileCpuHotAddEnabled { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.",
        SerializedName = @"cpuHotRemoveEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HardwareProfileCpuHotRemoveEnabled { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a value indicating whether memory can be added while this virtual machine is running.",
        SerializedName = @"memoryHotAddEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HardwareProfileMemoryHotAddEnabled { get;  }
        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets memory size in MBs for the vm.",
        SerializedName = @"memorySizeMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileMemorySizeMb { get; set; }
        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.",
        SerializedName = @"numCoresPerSocket",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileNumCoresPerSocket { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the number of vCPUs for the vm.",
        SerializedName = @"numCPUs",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileNumCpUs { get; set; }
        /// <summary>Gets or sets the instance uuid of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the instance uuid of the vm.",
        SerializedName = @"instanceUuid",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceUuid { get;  }
        /// <summary>Gets or sets the inventory Item ID for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the inventory Item ID for the virtual machine.",
        SerializedName = @"inventoryItemId",
        PossibleTypes = new [] { typeof(string) })]
        string InventoryItemId { get; set; }
        /// <summary>Gets or sets the vCenter Managed Object name for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the vCenter Managed Object name for the virtual machine.",
        SerializedName = @"moName",
        PossibleTypes = new [] { typeof(string) })]
        string MoName { get;  }
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.",
        SerializedName = @"moRefId",
        PossibleTypes = new [] { typeof(string) })]
        string MoRefId { get; set; }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of network interfaces associated with the virtual machine.",
        SerializedName = @"networkInterfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkInterface) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkInterface[] NetworkProfileNetworkInterface { get; set; }
        /// <summary>Gets or sets administrator password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets administrator password.",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets administrator username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets administrator username.",
        SerializedName = @"adminUsername",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileAdminUsername { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets computer name.",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileComputerName { get; set; }
        /// <summary>Gets or sets os name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets os name.",
        SerializedName = @"osName",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileOsname { get;  }
        /// <summary>Gets or sets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the type of the os.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType? OSProfileOstype { get; set; }
        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the current running status of VMware Tools running in the guest operating system.",
        SerializedName = @"toolsRunningStatus",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileToolsRunningStatus { get;  }
        /// <summary>Gets or sets the current version of VMware Tools.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the current version of VMware Tools.",
        SerializedName = @"toolsVersion",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileToolsVersion { get;  }
        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the current version status of VMware Tools installed in the guest operating system.",
        SerializedName = @"toolsVersionStatus",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileToolsVersionStatus { get;  }
        /// <summary>
        /// Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.",
        SerializedName = @"clusterId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileClusterId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.",
        SerializedName = @"datastoreId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileDatastoreId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.",
        SerializedName = @"hostId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileHostId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.",
        SerializedName = @"resourcePoolId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileResourcePoolId { get; set; }
        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets the power state of the virtual machine.",
        SerializedName = @"powerState",
        PossibleTypes = new [] { typeof(string) })]
        string PowerState { get;  }
        /// <summary>Gets or sets the provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the provisioning state.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
        /// deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
        deploy.",
        SerializedName = @"resourcePoolId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePoolId { get; set; }
        /// <summary>Gets or sets the SMBIOS UUID of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the SMBIOS UUID of the vm.",
        SerializedName = @"smbiosUuid",
        PossibleTypes = new [] { typeof(string) })]
        string SmbiosUuid { get; set; }
        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The resource status information.",
        SerializedName = @"statuses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IResourceStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IResourceStatus[] Statuses { get;  }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of virtual disks associated with the virtual machine.",
        SerializedName = @"disks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualDisk) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualDisk[] StorageProfileDisk { get; set; }
        /// <summary>
        /// Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the list of virtual SCSI controllers associated with the virtual machine.",
        SerializedName = @"scsiControllers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualScsiController) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualScsiController[] StorageProfileScsiController { get;  }
        /// <summary>Gets or sets the ARM Id of the template resource to deploy the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the template resource to deploy the virtual machine.",
        SerializedName = @"templateId",
        PossibleTypes = new [] { typeof(string) })]
        string TemplateId { get; set; }
        /// <summary>Gets or sets a unique identifier for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a unique identifier for this resource.",
        SerializedName = @"uuid",
        PossibleTypes = new [] { typeof(string) })]
        string Uuid { get;  }
        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.",
        SerializedName = @"vCenterId",
        PossibleTypes = new [] { typeof(string) })]
        string VCenterId { get; set; }
        /// <summary>Gets or sets a unique identifier for the vm resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a unique identifier for the vm resource.",
        SerializedName = @"vmId",
        PossibleTypes = new [] { typeof(string) })]
        string VMId { get;  }

    }
    /// Defines the resource properties.
    internal partial interface IVirtualMachinePropertiesInternal

    {
        /// <summary>Gets the name of the corresponding resource in Kubernetes.</summary>
        string CustomResourceName { get; set; }
        /// <summary>Firmware type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? FirmwareType { get; set; }
        /// <summary>Gets or sets the folder path of the vm.</summary>
        string FolderPath { get; set; }
        /// <summary>Guest agent status properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IGuestAgentProfile GuestAgentProfile { get; set; }
        /// <summary>The hybrid machine agent full version.</summary>
        string GuestAgentProfileAgentVersion { get; set; }
        /// <summary>Details about the error state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IErrorDetail[] GuestAgentProfileErrorDetail { get; set; }
        /// <summary>The time of the last status change.</summary>
        global::System.DateTime? GuestAgentProfileLastStatusChange { get; set; }
        /// <summary>The status of the hybrid machine agent.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.StatusTypes? GuestAgentProfileStatus { get; set; }
        /// <summary>Specifies the VM's unique SMBIOS ID.</summary>
        string GuestAgentProfileVMUuid { get; set; }
        /// <summary>Hardware properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IHardwareProfile HardwareProfile { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        bool? HardwareProfileCpuHotAddEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        bool? HardwareProfileCpuHotRemoveEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        bool? HardwareProfileMemoryHotAddEnabled { get; set; }
        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        int? HardwareProfileMemorySizeMb { get; set; }
        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        int? HardwareProfileNumCoresPerSocket { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        int? HardwareProfileNumCpUs { get; set; }
        /// <summary>Gets or sets the instance uuid of the vm.</summary>
        string InstanceUuid { get; set; }
        /// <summary>Gets or sets the inventory Item ID for the virtual machine.</summary>
        string InventoryItemId { get; set; }
        /// <summary>Gets or sets the vCenter Managed Object name for the virtual machine.</summary>
        string MoName { get; set; }
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        string MoRefId { get; set; }
        /// <summary>Network properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkProfile NetworkProfile { get; set; }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.INetworkInterface[] NetworkProfileNetworkInterface { get; set; }
        /// <summary>OS properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IOSProfile OSProfile { get; set; }
        /// <summary>Gets or sets administrator password.</summary>
        string OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets administrator username.</summary>
        string OSProfileAdminUsername { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        string OSProfileComputerName { get; set; }
        /// <summary>Gets or sets os name.</summary>
        string OSProfileOsname { get; set; }
        /// <summary>Gets or sets the type of the os.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType? OSProfileOstype { get; set; }
        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in the guest operating system.
        /// </summary>
        string OSProfileToolsRunningStatus { get; set; }
        /// <summary>Gets or sets the current version of VMware Tools.</summary>
        string OSProfileToolsVersion { get; set; }
        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed in the guest operating system.
        /// </summary>
        string OSProfileToolsVersionStatus { get; set; }
        /// <summary>Placement properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IPlacementProfile PlacementProfile { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        /// </summary>
        string PlacementProfileClusterId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
        /// </summary>
        string PlacementProfileDatastoreId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        /// </summary>
        string PlacementProfileHostId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        /// </summary>
        string PlacementProfileResourcePoolId { get; set; }
        /// <summary>Gets the power state of the virtual machine.</summary>
        string PowerState { get; set; }
        /// <summary>Gets or sets the provisioning state.</summary>
        string ProvisioningState { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
        /// deploy.
        /// </summary>
        string ResourcePoolId { get; set; }
        /// <summary>Gets or sets the SMBIOS UUID of the vm.</summary>
        string SmbiosUuid { get; set; }
        /// <summary>The resource status information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IResourceStatus[] Statuses { get; set; }
        /// <summary>Storage properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IStorageProfile StorageProfile { get; set; }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualDisk[] StorageProfileDisk { get; set; }
        /// <summary>
        /// Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20201001Preview.IVirtualScsiController[] StorageProfileScsiController { get; set; }
        /// <summary>Gets or sets the ARM Id of the template resource to deploy the virtual machine.</summary>
        string TemplateId { get; set; }
        /// <summary>Gets or sets a unique identifier for this resource.</summary>
        string Uuid { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        string VCenterId { get; set; }
        /// <summary>Gets or sets a unique identifier for the vm resource.</summary>
        string VMId { get; set; }

    }
}