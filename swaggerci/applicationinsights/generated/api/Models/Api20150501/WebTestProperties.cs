// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Extensions;

    /// <summary>Metadata describing a web test for an Azure resource.</summary>
    public partial class WebTestProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Configuration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesConfiguration _configuration;

        /// <summary>An XML configuration specification for a WebTest.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesConfiguration Configuration { get => (this._configuration = this._configuration ?? new Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.WebTestPropertiesConfiguration()); set => this._configuration = value; }

        /// <summary>The XML specification of a WebTest to run against an application.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Inlined)]
        public string ConfigurationWebTest { get => ((Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesConfigurationInternal)Configuration).WebTest; set => ((Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesConfigurationInternal)Configuration).WebTest = value ?? null; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>Purpose/user defined descriptive test for this WebTest.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>Is the test actively being monitored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="Frequency" /> property.</summary>
        private int? _frequency;

        /// <summary>Interval in seconds between test runs for this WebTest. Default value is 300.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public int? Frequency { get => this._frequency; set => this._frequency = value; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestGeolocation[] _location;

        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestGeolocation[] Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for Configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesConfiguration Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesInternal.Configuration { get => (this._configuration = this._configuration ?? new Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.WebTestPropertiesConfiguration()); set { {_configuration = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>
        /// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users
        /// cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="RetryEnabled" /> property.</summary>
        private bool? _retryEnabled;

        /// <summary>Allow for retries should this WebTest fail.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public bool? RetryEnabled { get => this._retryEnabled; set => this._retryEnabled = value; }

        /// <summary>Backing field for <see cref="SyntheticMonitorId" /> property.</summary>
        private string _syntheticMonitorId;

        /// <summary>Unique ID of this WebTest. This is typically the same value as the Name field.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public string SyntheticMonitorId { get => this._syntheticMonitorId; set => this._syntheticMonitorId = value; }

        /// <summary>Backing field for <see cref="Timeout" /> property.</summary>
        private int? _timeout;

        /// <summary>Seconds until this WebTest will timeout and fail. Default value is 30.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public int? Timeout { get => this._timeout; set => this._timeout = value; }

        /// <summary>Backing field for <see cref="WebTestKind" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Support.WebTestKind _webTestKind;

        /// <summary>The kind of web test this is, valid choices are ping and multistep.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Support.WebTestKind WebTestKind { get => this._webTestKind; set => this._webTestKind = value; }

        /// <summary>Backing field for <see cref="WebTestName" /> property.</summary>
        private string _webTestName;

        /// <summary>User defined name if this WebTest.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.PropertyOrigin.Owned)]
        public string WebTestName { get => this._webTestName; set => this._webTestName = value; }

        /// <summary>Creates an new <see cref="WebTestProperties" /> instance.</summary>
        public WebTestProperties()
        {

        }
    }
    /// Metadata describing a web test for an Azure resource.
    public partial interface IWebTestProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.IJsonSerializable
    {
        /// <summary>The XML specification of a WebTest to run against an application.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The XML specification of a WebTest to run against an application.",
        SerializedName = @"WebTest",
        PossibleTypes = new [] { typeof(string) })]
        string ConfigurationWebTest { get; set; }
        /// <summary>Purpose/user defined descriptive test for this WebTest.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Purpose/user defined descriptive test for this WebTest.",
        SerializedName = @"Description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>Is the test actively being monitored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is the test actively being monitored.",
        SerializedName = @"Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>Interval in seconds between test runs for this WebTest. Default value is 300.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Interval in seconds between test runs for this WebTest. Default value is 300.",
        SerializedName = @"Frequency",
        PossibleTypes = new [] { typeof(int) })]
        int? Frequency { get; set; }
        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A list of where to physically run the tests from to give global coverage for accessibility of your application.",
        SerializedName = @"Locations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestGeolocation) })]
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestGeolocation[] Location { get; set; }
        /// <summary>
        /// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users
        /// cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>Allow for retries should this WebTest fail.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow for retries should this WebTest fail.",
        SerializedName = @"RetryEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RetryEnabled { get; set; }
        /// <summary>Unique ID of this WebTest. This is typically the same value as the Name field.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Unique ID of this WebTest. This is typically the same value as the Name field.",
        SerializedName = @"SyntheticMonitorId",
        PossibleTypes = new [] { typeof(string) })]
        string SyntheticMonitorId { get; set; }
        /// <summary>Seconds until this WebTest will timeout and fail. Default value is 30.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Seconds until this WebTest will timeout and fail. Default value is 30.",
        SerializedName = @"Timeout",
        PossibleTypes = new [] { typeof(int) })]
        int? Timeout { get; set; }
        /// <summary>The kind of web test this is, valid choices are ping and multistep.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The kind of web test this is, valid choices are ping and multistep.",
        SerializedName = @"Kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Support.WebTestKind) })]
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Support.WebTestKind WebTestKind { get; set; }
        /// <summary>User defined name if this WebTest.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"User defined name if this WebTest.",
        SerializedName = @"Name",
        PossibleTypes = new [] { typeof(string) })]
        string WebTestName { get; set; }

    }
    /// Metadata describing a web test for an Azure resource.
    internal partial interface IWebTestPropertiesInternal

    {
        /// <summary>An XML configuration specification for a WebTest.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestPropertiesConfiguration Configuration { get; set; }
        /// <summary>The XML specification of a WebTest to run against an application.</summary>
        string ConfigurationWebTest { get; set; }
        /// <summary>Purpose/user defined descriptive test for this WebTest.</summary>
        string Description { get; set; }
        /// <summary>Is the test actively being monitored.</summary>
        bool? Enabled { get; set; }
        /// <summary>Interval in seconds between test runs for this WebTest. Default value is 300.</summary>
        int? Frequency { get; set; }
        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Models.Api20150501.IWebTestGeolocation[] Location { get; set; }
        /// <summary>
        /// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users
        /// cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        /// </summary>
        string ProvisioningState { get; set; }
        /// <summary>Allow for retries should this WebTest fail.</summary>
        bool? RetryEnabled { get; set; }
        /// <summary>Unique ID of this WebTest. This is typically the same value as the Name field.</summary>
        string SyntheticMonitorId { get; set; }
        /// <summary>Seconds until this WebTest will timeout and fail. Default value is 30.</summary>
        int? Timeout { get; set; }
        /// <summary>The kind of web test this is, valid choices are ping and multistep.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ApplicationInsights.Support.WebTestKind WebTestKind { get; set; }
        /// <summary>User defined name if this WebTest.</summary>
        string WebTestName { get; set; }

    }
}