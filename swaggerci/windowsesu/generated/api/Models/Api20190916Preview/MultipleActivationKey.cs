// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Extensions;

    /// <summary>MAK key details.</summary>
    public partial class MultipleActivationKey :
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKey,
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.TrackedResource();

        /// <summary>Agreement number under which the key is requested.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public string AgreementNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).AgreementNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).AgreementNumber = value ?? null; }

        /// <summary>End of support of security updates activated by the MAK key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).ExpirationDate; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Id; }

        /// <summary>Number of activations/servers using the MAK key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public int? InstalledServerNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).InstalledServerNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).InstalledServerNumber = value ?? default(int); }

        /// <summary>
        /// <code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key
        /// will only be used in their organization; <code> false </code> otherwise.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public bool? IsEligible { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).IsEligible; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).IsEligible = value ?? default(bool); }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for ExpirationDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyInternal.ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).ExpirationDate = value; }

        /// <summary>Internal Acessors for PropertiesMultipleActivationKey</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyInternal.PropertiesMultipleActivationKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).MultipleActivationKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).MultipleActivationKey = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyProperties Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.MultipleActivationKeyProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Name; }

        /// <summary>Type of OS for which the key is requested.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.OSType? OSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).OSType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.OSType)""); }

        /// <summary>MAK 5x5 key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public string PropertiesMultipleActivationKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).MultipleActivationKey; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyProperties _property;

        /// <summary>MAK key specific properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.MultipleActivationKeyProperties()); set => this._property = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Type of support</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.SupportType? SupportType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).SupportType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyPropertiesInternal)Property).SupportType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.SupportType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Origin(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="MultipleActivationKey" /> instance.</summary>
        public MultipleActivationKey()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// MAK key details.
    public partial interface IMultipleActivationKey :
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResource
    {
        /// <summary>Agreement number under which the key is requested.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Agreement number under which the key is requested.",
        SerializedName = @"agreementNumber",
        PossibleTypes = new [] { typeof(string) })]
        string AgreementNumber { get; set; }
        /// <summary>End of support of security updates activated by the MAK key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End of support of security updates activated by the MAK key.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get;  }
        /// <summary>Number of activations/servers using the MAK key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of activations/servers using the MAK key.",
        SerializedName = @"installedServerNumber",
        PossibleTypes = new [] { typeof(int) })]
        int? InstalledServerNumber { get; set; }
        /// <summary>
        /// <code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key
        /// will only be used in their organization; <code> false </code> otherwise.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key will only be used in their organization; <code> false </code> otherwise.",
        SerializedName = @"isEligible",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsEligible { get; set; }
        /// <summary>Type of OS for which the key is requested.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of OS for which the key is requested.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.OSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.OSType? OSType { get; set; }
        /// <summary>MAK 5x5 key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"MAK 5x5 key.",
        SerializedName = @"multipleActivationKey",
        PossibleTypes = new [] { typeof(string) })]
        string PropertiesMultipleActivationKey { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Type of support</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of support",
        SerializedName = @"supportType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.SupportType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.SupportType? SupportType { get; set; }

    }
    /// MAK key details.
    internal partial interface IMultipleActivationKeyInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api10.ITrackedResourceInternal
    {
        /// <summary>Agreement number under which the key is requested.</summary>
        string AgreementNumber { get; set; }
        /// <summary>End of support of security updates activated by the MAK key.</summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>Number of activations/servers using the MAK key.</summary>
        int? InstalledServerNumber { get; set; }
        /// <summary>
        /// <code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key
        /// will only be used in their organization; <code> false </code> otherwise.
        /// </summary>
        bool? IsEligible { get; set; }
        /// <summary>Type of OS for which the key is requested.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.OSType? OSType { get; set; }
        /// <summary>MAK 5x5 key.</summary>
        string PropertiesMultipleActivationKey { get; set; }
        /// <summary>MAK key specific properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Models.Api20190916Preview.IMultipleActivationKeyProperties Property { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Type of support</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Windowsesu.Support.SupportType? SupportType { get; set; }

    }
}