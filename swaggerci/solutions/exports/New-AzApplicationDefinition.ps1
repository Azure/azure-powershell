
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new managed application definition.
.Description
Creates a new managed application definition.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IApplicationDefinition
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ARTIFACT <IApplicationDefinitionArtifact[]>: The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
  Name <ApplicationDefinitionArtifactName>: The managed application definition artifact name.
  Type <ApplicationArtifactType>: The managed application definition artifact type.
  Uri <String>: The managed application definition artifact blob uri.

AUTHORIZATION <IApplicationAuthorization[]>: The managed application provider authorizations.
  PrincipalId <String>: The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources.
  RoleDefinitionId <String>: The provider's role definition identifier. This role will define all the permissions that the provider must have on the managed application's container resource group. This role definition cannot have permission to delete the resource group.

NOTIFICATIONPOLICYNOTIFICATIONENDPOINT <IApplicationNotificationEndpoint[]>: The managed application notification endpoint.
  Uri <String>: The managed application notification endpoint uri.

POLICY <IApplicationPolicy[]>: The managed application provider policies.
  [Name <String>]: The policy name
  [Parameter <String>]: The policy parameters.
  [PolicyDefinitionId <String>]: The policy definition Id.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.application/new-azapplicationdefinition
#>
function New-AzApplicationDefinition {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IApplicationDefinition])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ApplicationDefinitionName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Path')]
    [System.String]
    # The name of the managed application definition.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Application.Support.ApplicationLockLevel])]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Support.ApplicationLockLevel]
    # The managed application lock level.
    ${LockLevel},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IApplicationDefinitionArtifact[]]
    # The collection of managed application artifacts.
    # The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
    # To construct, see NOTES section for ARTIFACT properties and create a hash table.
    ${Artifact},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IApplicationAuthorization[]]
    # The managed application provider authorizations.
    # To construct, see NOTES section for AUTHORIZATION properties and create a hash table.
    ${Authorization},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Models.IAny]
    # The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource.
    # It can be a JObject or well-formed JSON string.
    ${CreateUiDefinition},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Application.Support.DeploymentMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Support.DeploymentMode]
    # The managed application deployment mode.
    ${DeploymentPolicyDeploymentMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The managed application definition description.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The managed application definition display name.
    ${DisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # A value indicating whether the package is enabled or not.
    ${IsEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # Resource location
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String[]]
    # The deny assignment excluded actions.
    ${LockingPolicyAllowedAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String[]]
    # The deny assignment excluded data actions.
    ${LockingPolicyAllowedDataAction},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Models.IAny]
    # The inline main template json which has resources to be provisioned.
    # It can be a JObject or well-formed JSON string.
    ${MainTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # ID of the resource that manages this resource.
    ${ManagedBy},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Application.Support.ApplicationManagementMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Support.ApplicationManagementMode]
    # The managed application management mode.
    ${ManagementPolicyMode},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IApplicationNotificationEndpoint[]]
    # The managed application notification endpoint.
    # To construct, see NOTES section for NOTIFICATIONPOLICYNOTIFICATIONENDPOINT properties and create a hash table.
    ${NotificationPolicyNotificationEndpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The managed application definition package file Uri.
    # Use this element
    ${PackageFileUri},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IApplicationPolicy[]]
    # The managed application provider policies.
    # To construct, see NOTES section for POLICY properties and create a hash table.
    ${Policy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.Int32]
    # The SKU capacity.
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The SKU family.
    ${SkuFamily},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The SKU model.
    ${SkuModel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The SKU name.
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The SKU size.
    ${SkuSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The SKU tier.
    ${SkuTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [System.String]
    # The storage account id for bring your own storage scenario.
    ${StorageAccountId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Application.Models.Api20210701.IResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Application.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Application.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Application.private\New-AzApplicationDefinition_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Application.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Application.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
