// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The encryption settings on the storage account.</summary>
    public partial class Encryption :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal
    {

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? BlobEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobEnabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? BlobKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobKeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobKeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? BlobLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobLastEnabledTime; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? FileEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileEnabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? FileKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileKeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileKeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? FileLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileLastEnabledTime; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentity _identity;

        /// <summary>The identity to be used with service-side encryption at rest.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionIdentity()); set => this._identity = value; }

        /// <summary>
        /// ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys
        /// server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string IdentityEncryptionFederatedIdentityClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentityInternal)Identity).EncryptionFederatedIdentityClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentityInternal)Identity).EncryptionFederatedIdentityClientId = value ?? null; }

        /// <summary>
        /// Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string IdentityEncryptionUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentityInternal)Identity).EncryptionUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentityInternal)Identity).EncryptionUserAssignedIdentity = value ?? null; }

        /// <summary>Backing field for <see cref="KeySource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource _keySource;

        /// <summary>
        /// The encryption keySource (provider). Possible values (case-insensitive): Microsoft.Storage, Microsoft.Keyvault
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource KeySource { get => this._keySource; set => this._keySource = value; }

        /// <summary>Backing field for <see cref="KeyVaultProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultProperties _keyVaultProperty;

        /// <summary>Properties provided by key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultProperties KeyVaultProperty { get => (this._keyVaultProperty = this._keyVaultProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.KeyVaultProperties()); set => this._keyVaultProperty = value; }

        /// <summary>
        /// This is a read only property that represents the expiration time of the current version of the customer managed key used
        /// for encryption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).CurrentVersionedKeyExpirationTimestamp; }

        /// <summary>The object identifier of the current versioned Key Vault Key in use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyCurrentVersionedKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).CurrentVersionedKeyIdentifier; }

        /// <summary>The name of KeyVault key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).KeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).KeyName = value ?? null; }

        /// <summary>The Uri of KeyVault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVaultUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).KeyVaultUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).KeyVaultUri = value ?? null; }

        /// <summary>The version of KeyVault key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).KeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).KeyVersion = value ?? null; }

        /// <summary>Timestamp of last rotation of the Key Vault Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).LastKeyRotationTimestamp; }

        /// <summary>Internal Acessors for BlobLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.BlobLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobLastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).BlobLastEnabledTime = value; }

        /// <summary>Internal Acessors for FileLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.FileLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileLastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).FileLastEnabledTime = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentity Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for KeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.KeyVaultProperty { get => (this._keyVaultProperty = this._keyVaultProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.KeyVaultProperties()); set { {_keyVaultProperty = value;} } }

        /// <summary>Internal Acessors for KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).CurrentVersionedKeyExpirationTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).CurrentVersionedKeyExpirationTimestamp = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyCurrentVersionedKeyIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.KeyVaultPropertyCurrentVersionedKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).CurrentVersionedKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).CurrentVersionedKeyIdentifier = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyLastKeyRotationTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.KeyVaultPropertyLastKeyRotationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).LastKeyRotationTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultPropertiesInternal)KeyVaultProperty).LastKeyRotationTimestamp = value; }

        /// <summary>Internal Acessors for QueueLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.QueueLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueLastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueLastEnabledTime = value; }

        /// <summary>Internal Acessors for Service</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.Service { get => (this._service = this._service ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServices()); set { {_service = value;} } }

        /// <summary>Internal Acessors for ServiceBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.ServiceBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).Blob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).Blob = value; }

        /// <summary>Internal Acessors for ServiceFile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.ServiceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).File; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).File = value; }

        /// <summary>Internal Acessors for ServiceQueue</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.ServiceQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).Queue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).Queue = value; }

        /// <summary>Internal Acessors for ServiceTable</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.ServiceTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).Table; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).Table = value; }

        /// <summary>Internal Acessors for TableLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal.TableLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableLastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableLastEnabledTime = value; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? QueueEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueEnabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? QueueKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueKeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueKeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? QueueLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).QueueLastEnabledTime; }

        /// <summary>Backing field for <see cref="RequireInfrastructureEncryption" /> property.</summary>
        private bool? _requireInfrastructureEncryption;

        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for
        /// data at rest.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? RequireInfrastructureEncryption { get => this._requireInfrastructureEncryption; set => this._requireInfrastructureEncryption = value; }

        /// <summary>Backing field for <see cref="Service" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices _service;

        /// <summary>List of services which support encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices Service { get => (this._service = this._service ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServices()); set => this._service = value; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? TableEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableEnabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? TableKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableKeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableKeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? TableLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal)Service).TableLastEnabledTime; }

        /// <summary>Creates an new <see cref="Encryption" /> instance.</summary>
        public Encryption()
        {

        }
    }
    /// The encryption settings on the storage account.
    public partial interface IEncryption :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BlobEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? BlobKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BlobLastEnabledTime { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FileEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? FileKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? FileLastEnabledTime { get;  }
        /// <summary>
        /// ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys
        /// server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.",
        SerializedName = @"federatedIdentityClientId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityEncryptionFederatedIdentityClientId { get; set; }
        /// <summary>
        /// Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityEncryptionUserAssignedIdentity { get; set; }
        /// <summary>
        /// The encryption keySource (provider). Possible values (case-insensitive): Microsoft.Storage, Microsoft.Keyvault
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
        SerializedName = @"keySource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource KeySource { get; set; }
        /// <summary>
        /// This is a read only property that represents the expiration time of the current version of the customer managed key used
        /// for encryption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This is a read only property that represents the expiration time of the current version of the customer managed key used for encryption.",
        SerializedName = @"currentVersionedKeyExpirationTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp { get;  }
        /// <summary>The object identifier of the current versioned Key Vault Key in use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The object identifier of the current versioned Key Vault Key in use.",
        SerializedName = @"currentVersionedKeyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyCurrentVersionedKeyIdentifier { get;  }
        /// <summary>The name of KeyVault key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of KeyVault key.",
        SerializedName = @"keyname",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyName { get; set; }
        /// <summary>The Uri of KeyVault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Uri of KeyVault.",
        SerializedName = @"keyvaulturi",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVaultUri { get; set; }
        /// <summary>The version of KeyVault key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of KeyVault key.",
        SerializedName = @"keyversion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVersion { get; set; }
        /// <summary>Timestamp of last rotation of the Key Vault Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp of last rotation of the Key Vault Key.",
        SerializedName = @"lastKeyRotationTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? QueueEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? QueueKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? QueueLastEnabledTime { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for
        /// data at rest.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.",
        SerializedName = @"requireInfrastructureEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RequireInfrastructureEncryption { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TableEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? TableKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TableLastEnabledTime { get;  }

    }
    /// The encryption settings on the storage account.
    internal partial interface IEncryptionInternal

    {
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? BlobEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? BlobKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? BlobLastEnabledTime { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? FileEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? FileKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? FileLastEnabledTime { get; set; }
        /// <summary>The identity to be used with service-side encryption at rest.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentity Identity { get; set; }
        /// <summary>
        /// ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys
        /// server-side encryption on the storage account.
        /// </summary>
        string IdentityEncryptionFederatedIdentityClientId { get; set; }
        /// <summary>
        /// Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
        /// </summary>
        string IdentityEncryptionUserAssignedIdentity { get; set; }
        /// <summary>
        /// The encryption keySource (provider). Possible values (case-insensitive): Microsoft.Storage, Microsoft.Keyvault
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource KeySource { get; set; }
        /// <summary>Properties provided by key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultProperties KeyVaultProperty { get; set; }
        /// <summary>
        /// This is a read only property that represents the expiration time of the current version of the customer managed key used
        /// for encryption.
        /// </summary>
        global::System.DateTime? KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp { get; set; }
        /// <summary>The object identifier of the current versioned Key Vault Key in use.</summary>
        string KeyVaultPropertyCurrentVersionedKeyIdentifier { get; set; }
        /// <summary>The name of KeyVault key.</summary>
        string KeyVaultPropertyKeyName { get; set; }
        /// <summary>The Uri of KeyVault.</summary>
        string KeyVaultPropertyKeyVaultUri { get; set; }
        /// <summary>The version of KeyVault key.</summary>
        string KeyVaultPropertyKeyVersion { get; set; }
        /// <summary>Timestamp of last rotation of the Key Vault Key.</summary>
        global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? QueueEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? QueueKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? QueueLastEnabledTime { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for
        /// data at rest.
        /// </summary>
        bool? RequireInfrastructureEncryption { get; set; }
        /// <summary>List of services which support encryption.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices Service { get; set; }
        /// <summary>The encryption function of the blob storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService ServiceBlob { get; set; }
        /// <summary>The encryption function of the file storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService ServiceFile { get; set; }
        /// <summary>The encryption function of the queue storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService ServiceQueue { get; set; }
        /// <summary>The encryption function of the table storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService ServiceTable { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? TableEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? TableKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? TableLastEnabledTime { get; set; }

    }
}