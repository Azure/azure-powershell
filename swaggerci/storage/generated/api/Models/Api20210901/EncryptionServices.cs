// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>A list of services that support encryption.</summary>
    public partial class EncryptionServices :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal
    {

        /// <summary>Backing field for <see cref="Blob" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService _blob;

        /// <summary>The encryption function of the blob storage service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Blob { get => (this._blob = this._blob ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set => this._blob = value; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? BlobEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).Enabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? BlobKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).KeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).KeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? BlobLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).LastEnabledTime; }

        /// <summary>Backing field for <see cref="File" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService _file;

        /// <summary>The encryption function of the file storage service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService File { get => (this._file = this._file ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set => this._file = value; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? FileEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).Enabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? FileKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).KeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).KeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? FileLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).LastEnabledTime; }

        /// <summary>Internal Acessors for Blob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.Blob { get => (this._blob = this._blob ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set { {_blob = value;} } }

        /// <summary>Internal Acessors for BlobLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.BlobLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).LastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Blob).LastEnabledTime = value; }

        /// <summary>Internal Acessors for File</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.File { get => (this._file = this._file ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set { {_file = value;} } }

        /// <summary>Internal Acessors for FileLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.FileLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).LastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)File).LastEnabledTime = value; }

        /// <summary>Internal Acessors for Queue</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.Queue { get => (this._queue = this._queue ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set { {_queue = value;} } }

        /// <summary>Internal Acessors for QueueLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.QueueLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).LastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).LastEnabledTime = value; }

        /// <summary>Internal Acessors for Table</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.Table { get => (this._table = this._table ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set { {_table = value;} } }

        /// <summary>Internal Acessors for TableLastEnabledTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServicesInternal.TableLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).LastEnabledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).LastEnabledTime = value; }

        /// <summary>Backing field for <see cref="Queue" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService _queue;

        /// <summary>The encryption function of the queue storage service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Queue { get => (this._queue = this._queue ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set => this._queue = value; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? QueueEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).Enabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? QueueKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).KeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).KeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? QueueLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Queue).LastEnabledTime; }

        /// <summary>Backing field for <see cref="Table" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService _table;

        /// <summary>The encryption function of the table storage service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Table { get => (this._table = this._table ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionService()); set => this._table = value; }

        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? TableEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).Enabled = value ?? default(bool); }

        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? TableKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).KeyType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).KeyType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType)""); }

        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? TableLastEnabledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServiceInternal)Table).LastEnabledTime; }

        /// <summary>Creates an new <see cref="EncryptionServices" /> instance.</summary>
        public EncryptionServices()
        {

        }
    }
    /// A list of services that support encryption.
    public partial interface IEncryptionServices :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BlobEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? BlobKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BlobLastEnabledTime { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FileEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? FileKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? FileLastEnabledTime { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? QueueEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? QueueKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? QueueLastEnabledTime { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TableEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? TableKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.",
        SerializedName = @"lastEnabledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TableLastEnabledTime { get;  }

    }
    /// A list of services that support encryption.
    internal partial interface IEncryptionServicesInternal

    {
        /// <summary>The encryption function of the blob storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Blob { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? BlobEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? BlobKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? BlobLastEnabledTime { get; set; }
        /// <summary>The encryption function of the file storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService File { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? FileEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? FileKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? FileLastEnabledTime { get; set; }
        /// <summary>The encryption function of the queue storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Queue { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? QueueEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? QueueKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? QueueLastEnabledTime { get; set; }
        /// <summary>The encryption function of the table storage service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService Table { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default
        /// today and cannot be disabled.
        /// </summary>
        bool? TableEnabled { get; set; }
        /// <summary>
        /// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption
        /// key will be used. 'Service' key type implies that a default service key is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType? TableKeyType { get; set; }
        /// <summary>
        /// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by
        /// default today and cannot be disabled.
        /// </summary>
        global::System.DateTime? TableLastEnabledTime { get; set; }

    }
}