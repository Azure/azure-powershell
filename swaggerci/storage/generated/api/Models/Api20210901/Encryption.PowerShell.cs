// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.PowerShell;

    /// <summary>The encryption settings on the storage account.</summary>
    [System.ComponentModel.TypeConverter(typeof(EncryptionTypeConverter))]
    public partial class Encryption
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.Encryption"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new Encryption(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.Encryption"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new Encryption(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.Encryption"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal Encryption(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Service"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Service = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices) content.GetValueForProperty("Service",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Service, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServicesTypeConverter.ConvertFrom);
            }
            if (content.Contains("KeyVaultProperty"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultProperty = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultProperties) content.GetValueForProperty("KeyVaultProperty",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultProperty, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.KeyVaultPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("Identity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Identity = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentity) content.GetValueForProperty("Identity",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Identity, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("KeySource"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeySource = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource) content.GetValueForProperty("KeySource",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeySource, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource.CreateFrom);
            }
            if (content.Contains("RequireInfrastructureEncryption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).RequireInfrastructureEncryption = (bool?) content.GetValueForProperty("RequireInfrastructureEncryption",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).RequireInfrastructureEncryption, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ServiceBlob"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceBlob = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceBlob",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceBlob, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceFile = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceFile",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceFile, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceTable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceTable = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceTable",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceTable, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceQueue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceQueue = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceQueue",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceQueue, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("BlobKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("BlobKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("FileKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("FileKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("TableKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("TableKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("QueueKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("QueueKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("KeyVaultPropertyKeyName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyName = (string) content.GetValueForProperty("KeyVaultPropertyKeyName",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyName, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyKeyVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVersion = (string) content.GetValueForProperty("KeyVaultPropertyKeyVersion",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVersion, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyKeyVaultUri"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVaultUri = (string) content.GetValueForProperty("KeyVaultPropertyKeyVaultUri",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVaultUri, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyCurrentVersionedKeyIdentifier"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyIdentifier = (string) content.GetValueForProperty("KeyVaultPropertyCurrentVersionedKeyIdentifier",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyIdentifier, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyLastKeyRotationTimestamp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyLastKeyRotationTimestamp = (global::System.DateTime?) content.GetValueForProperty("KeyVaultPropertyLastKeyRotationTimestamp",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyLastKeyRotationTimestamp, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp = (global::System.DateTime?) content.GetValueForProperty("KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("IdentityEncryptionUserAssignedIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionUserAssignedIdentity = (string) content.GetValueForProperty("IdentityEncryptionUserAssignedIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionUserAssignedIdentity, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityEncryptionFederatedIdentityClientId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionFederatedIdentityClientId = (string) content.GetValueForProperty("IdentityEncryptionFederatedIdentityClientId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionFederatedIdentityClientId, global::System.Convert.ToString);
            }
            if (content.Contains("BlobEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobEnabled = (bool?) content.GetValueForProperty("BlobEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BlobLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("BlobLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("FileEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileEnabled = (bool?) content.GetValueForProperty("FileEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FileLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("FileLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("TableEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableEnabled = (bool?) content.GetValueForProperty("TableEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("TableLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("TableLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("QueueEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueEnabled = (bool?) content.GetValueForProperty("QueueEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("QueueLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("QueueLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.Encryption"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal Encryption(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Service"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Service = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionServices) content.GetValueForProperty("Service",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Service, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServicesTypeConverter.ConvertFrom);
            }
            if (content.Contains("KeyVaultProperty"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultProperty = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyVaultProperties) content.GetValueForProperty("KeyVaultProperty",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultProperty, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.KeyVaultPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("Identity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Identity = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionIdentity) content.GetValueForProperty("Identity",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).Identity, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("KeySource"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeySource = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource) content.GetValueForProperty("KeySource",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeySource, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeySource.CreateFrom);
            }
            if (content.Contains("RequireInfrastructureEncryption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).RequireInfrastructureEncryption = (bool?) content.GetValueForProperty("RequireInfrastructureEncryption",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).RequireInfrastructureEncryption, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ServiceBlob"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceBlob = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceBlob",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceBlob, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceFile = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceFile",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceFile, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceTable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceTable = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceTable",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceTable, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceQueue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceQueue = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionService) content.GetValueForProperty("ServiceQueue",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).ServiceQueue, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.EncryptionServiceTypeConverter.ConvertFrom);
            }
            if (content.Contains("BlobKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("BlobKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("FileKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("FileKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("TableKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("TableKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("QueueKeyType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueKeyType = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType?) content.GetValueForProperty("QueueKeyType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueKeyType, Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.KeyType.CreateFrom);
            }
            if (content.Contains("KeyVaultPropertyKeyName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyName = (string) content.GetValueForProperty("KeyVaultPropertyKeyName",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyName, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyKeyVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVersion = (string) content.GetValueForProperty("KeyVaultPropertyKeyVersion",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVersion, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyKeyVaultUri"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVaultUri = (string) content.GetValueForProperty("KeyVaultPropertyKeyVaultUri",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyKeyVaultUri, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyCurrentVersionedKeyIdentifier"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyIdentifier = (string) content.GetValueForProperty("KeyVaultPropertyCurrentVersionedKeyIdentifier",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyIdentifier, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultPropertyLastKeyRotationTimestamp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyLastKeyRotationTimestamp = (global::System.DateTime?) content.GetValueForProperty("KeyVaultPropertyLastKeyRotationTimestamp",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyLastKeyRotationTimestamp, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp = (global::System.DateTime?) content.GetValueForProperty("KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).KeyVaultPropertyCurrentVersionedKeyExpirationTimestamp, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("IdentityEncryptionUserAssignedIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionUserAssignedIdentity = (string) content.GetValueForProperty("IdentityEncryptionUserAssignedIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionUserAssignedIdentity, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityEncryptionFederatedIdentityClientId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionFederatedIdentityClientId = (string) content.GetValueForProperty("IdentityEncryptionFederatedIdentityClientId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).IdentityEncryptionFederatedIdentityClientId, global::System.Convert.ToString);
            }
            if (content.Contains("BlobEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobEnabled = (bool?) content.GetValueForProperty("BlobEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("BlobLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("BlobLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).BlobLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("FileEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileEnabled = (bool?) content.GetValueForProperty("FileEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("FileLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("FileLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).FileLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("TableEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableEnabled = (bool?) content.GetValueForProperty("TableEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("TableLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("TableLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).TableLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("QueueEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueEnabled = (bool?) content.GetValueForProperty("QueueEnabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("QueueLastEnabledTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueLastEnabledTime = (global::System.DateTime?) content.GetValueForProperty("QueueLastEnabledTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryptionInternal)this).QueueLastEnabledTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="Encryption" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="Encryption" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// The encryption settings on the storage account.
    [System.ComponentModel.TypeConverter(typeof(EncryptionTypeConverter))]
    public partial interface IEncryption

    {

    }
}