// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>
    /// The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.
    /// </summary>
    public partial class ImmutabilityPolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicy,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource __azureEntityResource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.AzureEntityResource();

        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing
        /// blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowProtectedAppendWrite { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).AllowProtectedAppendWrite; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).AllowProtectedAppendWrite = value ?? default(bool); }

        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added
        /// and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowProtectedAppendWritesAll { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).AllowProtectedAppendWritesAll; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).AllowProtectedAppendWritesAll = value ?? default(bool); }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Resource Etag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; }

        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? ImmutabilityPeriodSinceCreationInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).ImmutabilityPeriodSinceCreationInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).ImmutabilityPeriodSinceCreationInDay = value ?? default(int); }

        /// <summary>Internal Acessors for Etag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal.Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperty Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ImmutabilityPolicyProperty()); set { {_property = value;} } }

        /// <summary>Internal Acessors for State</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyInternal.State { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).State = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperty _property;

        /// <summary>The properties of an ImmutabilityPolicy of a blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperty Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ImmutabilityPolicyProperty()); set => this._property = value; }

        /// <summary>
        /// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? State { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyPropertyInternal)Property).State; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; }

        /// <summary>Creates an new <see cref="ImmutabilityPolicy" /> instance.</summary>
        public ImmutabilityPolicy()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__azureEntityResource), __azureEntityResource);
            await eventListener.AssertObjectIsValid(nameof(__azureEntityResource), __azureEntityResource);
        }
    }
    /// The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.
    public partial interface IImmutabilityPolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource
    {
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing
        /// blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.",
        SerializedName = @"allowProtectedAppendWrites",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added
        /// and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.",
        SerializedName = @"allowProtectedAppendWritesAll",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowProtectedAppendWritesAll { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The immutability period for the blobs in the container since the policy creation, in days.",
        SerializedName = @"immutabilityPeriodSinceCreationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? ImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? State { get;  }

    }
    /// The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.
    internal partial interface IImmutabilityPolicyInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal
    {
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing
        /// blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        bool? AllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added
        /// and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
        /// </summary>
        bool? AllowProtectedAppendWritesAll { get; set; }

        string ETag { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        int? ImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>The properties of an ImmutabilityPolicy of a blob container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperty Property { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? State { get; set; }

    }
}