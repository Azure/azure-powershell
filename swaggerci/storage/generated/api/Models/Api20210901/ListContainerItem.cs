// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The blob container properties be listed out.</summary>
    public partial class ListContainerItem :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItem,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource __azureEntityResource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.AzureEntityResource();

        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing
        /// blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowProtectedAppendWrite { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).AllowProtectedAppendWrite; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).AllowProtectedAppendWrite = value ?? default(bool); }

        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added
        /// and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowProtectedAppendWritesAll { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).AllowProtectedAppendWritesAll; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).AllowProtectedAppendWritesAll = value ?? default(bool); }

        /// <summary>Default the container to use specified encryption scope for all writes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string DefaultEncryptionScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DefaultEncryptionScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DefaultEncryptionScope = value ?? null; }

        /// <summary>Indicates whether the blob container was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? Deleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Deleted; }

        /// <summary>Blob container deletion time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? DeletedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DeletedTime; }

        /// <summary>Block override of encryption scope from the container default.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? DenyEncryptionScopeOverride { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DenyEncryptionScopeOverride; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DenyEncryptionScopeOverride = value ?? default(bool); }

        /// <summary>Enable NFSv3 all squash on blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? EnableNfsV3AllSquash { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).EnableNfsV3AllSquash; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).EnableNfsV3AllSquash = value ?? default(bool); }

        /// <summary>Enable NFSv3 root squash on blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? EnableNfsV3RootSquash { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).EnableNfsV3RootSquash; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).EnableNfsV3RootSquash = value ?? default(bool); }

        /// <summary>Resource Etag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; }

        /// <summary>
        /// The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container.
        /// The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? HasImmutabilityPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).HasImmutabilityPolicy; }

        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? HasLegalHold { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).HasLegalHold; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; }

        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? ImmutabilityPeriodSinceCreationInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPeriodSinceCreationInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPeriodSinceCreationInDay = value ?? default(int); }

        /// <summary>ImmutabilityPolicy Etag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ImmutabilityPolicyEtag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyEtag; }

        /// <summary>The ImmutabilityPolicy update history of the blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IUpdateHistoryProperty[] ImmutabilityPolicyUpdateHistory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyUpdateHistory; }

        /// <summary>
        /// This is an immutable property, when set to true it enables object level immutability at the container level.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ImmutableStorageWithVersioningEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningEnabled = value ?? default(bool); }

        /// <summary>
        /// This property denotes the container level immutability to object level immutability migration state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MigrationState? ImmutableStorageWithVersioningMigrationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningMigrationState; }

        /// <summary>Returns the date and time the object level immutability was enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImmutableStorageWithVersioningTimeStamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningTimeStamp; }

        /// <summary>Returns the date and time the container was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LastModifiedTime; }

        /// <summary>
        /// Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseDuration; }

        /// <summary>Lease state of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseState; }

        /// <summary>The lease status of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseStatus; }

        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? LegalHoldHasLegalHold { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldHasLegalHold; }

        /// <summary>The list of LegalHold tags of a blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] LegalHoldTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldTag = value ?? null /* arrayOf */; }

        /// <summary>A name-value pair to associate with the container as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesMetadata Metadata { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Metadata; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Metadata = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Etag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal.Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type = value; }

        /// <summary>Internal Acessors for Deleted</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.Deleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Deleted; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Deleted = value; }

        /// <summary>Internal Acessors for DeletedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.DeletedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DeletedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).DeletedTime = value; }

        /// <summary>Internal Acessors for HasImmutabilityPolicy</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.HasImmutabilityPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).HasImmutabilityPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).HasImmutabilityPolicy = value; }

        /// <summary>Internal Acessors for HasLegalHold</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.HasLegalHold { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).HasLegalHold; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).HasLegalHold = value; }

        /// <summary>Internal Acessors for ImmutabilityPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutabilityPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicy = value; }

        /// <summary>Internal Acessors for ImmutabilityPolicyEtag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutabilityPolicyEtag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyEtag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyEtag = value; }

        /// <summary>Internal Acessors for ImmutabilityPolicyProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperty Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutabilityPolicyProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyProperty = value; }

        /// <summary>Internal Acessors for ImmutabilityPolicyUpdateHistory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IUpdateHistoryProperty[] Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutabilityPolicyUpdateHistory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyUpdateHistory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutabilityPolicyUpdateHistory = value; }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageWithVersioning Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutableStorageWithVersioning { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioning; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioning = value; }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioningMigrationState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MigrationState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutableStorageWithVersioningMigrationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningMigrationState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningMigrationState = value; }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioningTimeStamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ImmutableStorageWithVersioningTimeStamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningTimeStamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ImmutableStorageWithVersioningTimeStamp = value; }

        /// <summary>Internal Acessors for LastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LastModifiedTime = value; }

        /// <summary>Internal Acessors for LeaseDuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LeaseDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseDuration = value; }

        /// <summary>Internal Acessors for LeaseState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LeaseState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseState = value; }

        /// <summary>Internal Acessors for LeaseStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LeaseStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LeaseStatus = value; }

        /// <summary>Internal Acessors for LegalHold</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LegalHold { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHold; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHold = value; }

        /// <summary>Internal Acessors for LegalHoldHasLegalHold</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LegalHoldHasLegalHold { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldHasLegalHold; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldHasLegalHold = value; }

        /// <summary>Internal Acessors for LegalHoldProtectedAppendWritesHistory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistory Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.LegalHoldProtectedAppendWritesHistory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldProtectedAppendWritesHistory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).LegalHoldProtectedAppendWritesHistory = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ContainerProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProtectedAppendWriteHistoryTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.ProtectedAppendWriteHistoryTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ProtectedAppendWriteHistoryTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ProtectedAppendWriteHistoryTimestamp = value; }

        /// <summary>Internal Acessors for RemainingRetentionDay</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.RemainingRetentionDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).RemainingRetentionDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).RemainingRetentionDay = value; }

        /// <summary>Internal Acessors for State</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.State { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).State = value; }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IListContainerItemInternal.Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Version = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerProperties _property;

        /// <summary>The blob container properties be listed out.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ContainerProperties()); set => this._property = value; }

        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll = value ?? default(bool); }

        /// <summary>Returns the date and time the tag was added.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProtectedAppendWriteHistoryTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).ProtectedAppendWriteHistoryTimestamp; }

        /// <summary>
        /// Specifies whether data in the container may be accessed publicly and the level of access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicAccess? PublicAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).PublicAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).PublicAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicAccess)""); }

        /// <summary>Remaining retention days for soft deleted blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? RemainingRetentionDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).RemainingRetentionDay; }

        /// <summary>
        /// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? State { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).State; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; }

        /// <summary>The version of the deleted blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesInternal)Property).Version; }

        /// <summary>Creates an new <see cref="ListContainerItem" /> instance.</summary>
        public ListContainerItem()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__azureEntityResource), __azureEntityResource);
            await eventListener.AssertObjectIsValid(nameof(__azureEntityResource), __azureEntityResource);
        }
    }
    /// The blob container properties be listed out.
    public partial interface IListContainerItem :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource
    {
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing
        /// blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.",
        SerializedName = @"allowProtectedAppendWrites",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added
        /// and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.",
        SerializedName = @"allowProtectedAppendWritesAll",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowProtectedAppendWritesAll { get; set; }
        /// <summary>Default the container to use specified encryption scope for all writes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default the container to use specified encryption scope for all writes.",
        SerializedName = @"defaultEncryptionScope",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultEncryptionScope { get; set; }
        /// <summary>Indicates whether the blob container was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether the blob container was deleted.",
        SerializedName = @"deleted",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Deleted { get;  }
        /// <summary>Blob container deletion time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Blob container deletion time.",
        SerializedName = @"deletedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DeletedTime { get;  }
        /// <summary>Block override of encryption scope from the container default.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Block override of encryption scope from the container default.",
        SerializedName = @"denyEncryptionScopeOverride",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DenyEncryptionScopeOverride { get; set; }
        /// <summary>Enable NFSv3 all squash on blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable NFSv3 all squash on blob container.",
        SerializedName = @"enableNfsV3AllSquash",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableNfsV3AllSquash { get; set; }
        /// <summary>Enable NFSv3 root squash on blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable NFSv3 root squash on blob container.",
        SerializedName = @"enableNfsV3RootSquash",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableNfsV3RootSquash { get; set; }
        /// <summary>
        /// The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container.
        /// The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.",
        SerializedName = @"hasImmutabilityPolicy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasImmutabilityPolicy { get;  }
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
        SerializedName = @"hasLegalHold",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasLegalHold { get;  }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The immutability period for the blobs in the container since the policy creation, in days.",
        SerializedName = @"immutabilityPeriodSinceCreationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? ImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>ImmutabilityPolicy Etag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ImmutabilityPolicy Etag.",
        SerializedName = @"etag",
        PossibleTypes = new [] { typeof(string) })]
        string ImmutabilityPolicyEtag { get;  }
        /// <summary>The ImmutabilityPolicy update history of the blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ImmutabilityPolicy update history of the blob container.",
        SerializedName = @"updateHistory",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IUpdateHistoryProperty) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IUpdateHistoryProperty[] ImmutabilityPolicyUpdateHistory { get;  }
        /// <summary>
        /// This is an immutable property, when set to true it enables object level immutability at the container level.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is an immutable property, when set to true it enables object level immutability at the container level.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImmutableStorageWithVersioningEnabled { get; set; }
        /// <summary>
        /// This property denotes the container level immutability to object level immutability migration state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This property denotes the container level immutability to object level immutability migration state.",
        SerializedName = @"migrationState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MigrationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MigrationState? ImmutableStorageWithVersioningMigrationState { get;  }
        /// <summary>Returns the date and time the object level immutability was enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the object level immutability was enabled.",
        SerializedName = @"timeStamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImmutableStorageWithVersioningTimeStamp { get;  }
        /// <summary>Returns the date and time the container was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the container was last modified.",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModifiedTime { get;  }
        /// <summary>
        /// Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.",
        SerializedName = @"leaseDuration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get;  }
        /// <summary>Lease state of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Lease state of the container.",
        SerializedName = @"leaseState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get;  }
        /// <summary>The lease status of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lease status of the container.",
        SerializedName = @"leaseStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get;  }
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
        SerializedName = @"hasLegalHold",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LegalHoldHasLegalHold { get;  }
        /// <summary>The list of LegalHold tags of a blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of LegalHold tags of a blob container.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] LegalHoldTag { get; set; }
        /// <summary>A name-value pair to associate with the container as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A name-value pair to associate with the container as metadata.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesMetadata) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesMetadata Metadata { get; set; }
        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.",
        SerializedName = @"allowProtectedAppendWritesAll",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll { get; set; }
        /// <summary>Returns the date and time the tag was added.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the tag was added.",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProtectedAppendWriteHistoryTimestamp { get;  }
        /// <summary>
        /// Specifies whether data in the container may be accessed publicly and the level of access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether data in the container may be accessed publicly and the level of access.",
        SerializedName = @"publicAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicAccess? PublicAccess { get; set; }
        /// <summary>Remaining retention days for soft deleted blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Remaining retention days for soft deleted blob container.",
        SerializedName = @"remainingRetentionDays",
        PossibleTypes = new [] { typeof(int) })]
        int? RemainingRetentionDay { get;  }
        /// <summary>
        /// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? State { get;  }
        /// <summary>The version of the deleted blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The version of the deleted blob container.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }

    }
    /// The blob container properties be listed out.
    internal partial interface IListContainerItemInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal
    {
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing
        /// blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        bool? AllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written
        /// to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added
        /// and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
        /// </summary>
        bool? AllowProtectedAppendWritesAll { get; set; }
        /// <summary>Default the container to use specified encryption scope for all writes.</summary>
        string DefaultEncryptionScope { get; set; }
        /// <summary>Indicates whether the blob container was deleted.</summary>
        bool? Deleted { get; set; }
        /// <summary>Blob container deletion time.</summary>
        global::System.DateTime? DeletedTime { get; set; }
        /// <summary>Block override of encryption scope from the container default.</summary>
        bool? DenyEncryptionScopeOverride { get; set; }
        /// <summary>Enable NFSv3 all squash on blob container.</summary>
        bool? EnableNfsV3AllSquash { get; set; }
        /// <summary>Enable NFSv3 root squash on blob container.</summary>
        bool? EnableNfsV3RootSquash { get; set; }
        /// <summary>
        /// The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container.
        /// The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
        /// </summary>
        bool? HasImmutabilityPolicy { get; set; }
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        bool? HasLegalHold { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        int? ImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>The ImmutabilityPolicy property of the container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperties ImmutabilityPolicy { get; set; }
        /// <summary>ImmutabilityPolicy Etag.</summary>
        string ImmutabilityPolicyEtag { get; set; }
        /// <summary>The properties of an ImmutabilityPolicy of a blob container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutabilityPolicyProperty ImmutabilityPolicyProperty { get; set; }
        /// <summary>The ImmutabilityPolicy update history of the blob container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IUpdateHistoryProperty[] ImmutabilityPolicyUpdateHistory { get; set; }
        /// <summary>
        /// The object level immutability property of the container. The property is immutable and can only be set to true at the
        /// container creation time. Existing containers must undergo a migration process.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageWithVersioning ImmutableStorageWithVersioning { get; set; }
        /// <summary>
        /// This is an immutable property, when set to true it enables object level immutability at the container level.
        /// </summary>
        bool? ImmutableStorageWithVersioningEnabled { get; set; }
        /// <summary>
        /// This property denotes the container level immutability to object level immutability migration state.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MigrationState? ImmutableStorageWithVersioningMigrationState { get; set; }
        /// <summary>Returns the date and time the object level immutability was enabled.</summary>
        global::System.DateTime? ImmutableStorageWithVersioningTimeStamp { get; set; }
        /// <summary>Returns the date and time the container was last modified.</summary>
        global::System.DateTime? LastModifiedTime { get; set; }
        /// <summary>
        /// Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get; set; }
        /// <summary>Lease state of the container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get; set; }
        /// <summary>The lease status of the container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get; set; }
        /// <summary>The LegalHold property of the container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldProperties LegalHold { get; set; }
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        bool? LegalHoldHasLegalHold { get; set; }
        /// <summary>Protected append blob writes history.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistory LegalHoldProtectedAppendWritesHistory { get; set; }
        /// <summary>The list of LegalHold tags of a blob container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] LegalHoldTag { get; set; }
        /// <summary>A name-value pair to associate with the container as metadata.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerPropertiesMetadata Metadata { get; set; }
        /// <summary>The blob container properties be listed out.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IContainerProperties Property { get; set; }
        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        bool? ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll { get; set; }
        /// <summary>Returns the date and time the tag was added.</summary>
        global::System.DateTime? ProtectedAppendWriteHistoryTimestamp { get; set; }
        /// <summary>
        /// Specifies whether data in the container may be accessed publicly and the level of access.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicAccess? PublicAccess { get; set; }
        /// <summary>Remaining retention days for soft deleted blob container.</summary>
        int? RemainingRetentionDay { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ImmutabilityPolicyState? State { get; set; }
        /// <summary>The version of the deleted blob container.</summary>
        string Version { get; set; }

    }
}