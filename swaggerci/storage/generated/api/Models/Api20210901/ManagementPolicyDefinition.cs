// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>
    /// An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
    /// </summary>
    public partial class ManagementPolicyDefinition :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyDefinition,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyDefinitionInternal
    {

        /// <summary>Backing field for <see cref="Action" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyAction _action;

        /// <summary>An object that defines the action set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyAction Action { get => (this._action = this._action ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ManagementPolicyAction()); set => this._action = value; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilter _filter;

        /// <summary>An object that defines the filter set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilter Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ManagementPolicyFilter()); set => this._filter = value; }

        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagFilter[] FilterBlobIndexMatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilterInternal)Filter).BlobIndexMatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilterInternal)Filter).BlobIndexMatch = value ?? null /* arrayOf */; }

        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string[] FilterBlobType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilterInternal)Filter).BlobType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilterInternal)Filter).BlobType = value ?? null /* arrayOf */; }

        /// <summary>An array of strings for prefixes to be match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string[] FilterPrefixMatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilterInternal)Filter).PrefixMatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilterInternal)Filter).PrefixMatch = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Filter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilter Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyDefinitionInternal.Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ManagementPolicyFilter()); set { {_filter = value;} } }

        /// <summary>Creates an new <see cref="ManagementPolicyDefinition" /> instance.</summary>
        public ManagementPolicyDefinition()
        {

        }
    }
    /// An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
    public partial interface IManagementPolicyDefinition :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>An object that defines the action set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"An object that defines the action set.",
        SerializedName = @"actions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyAction Action { get; set; }
        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of blob index tag based filters, there can be at most 10 tag filters",
        SerializedName = @"blobIndexMatch",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagFilter) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagFilter[] FilterBlobIndexMatch { get; set; }
        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.",
        SerializedName = @"blobTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] FilterBlobType { get; set; }
        /// <summary>An array of strings for prefixes to be match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of strings for prefixes to be match.",
        SerializedName = @"prefixMatch",
        PossibleTypes = new [] { typeof(string) })]
        string[] FilterPrefixMatch { get; set; }

    }
    /// An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
    internal partial interface IManagementPolicyDefinitionInternal

    {
        /// <summary>An object that defines the action set.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyAction Action { get; set; }
        /// <summary>An object that defines the filter set.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IManagementPolicyFilter Filter { get; set; }
        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagFilter[] FilterBlobIndexMatch { get; set; }
        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        string[] FilterBlobType { get; set; }
        /// <summary>An array of strings for prefixes to be match.</summary>
        string[] FilterPrefixMatch { get; set; }

    }
}