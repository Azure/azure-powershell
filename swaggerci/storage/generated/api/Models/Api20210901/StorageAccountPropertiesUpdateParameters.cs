// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The parameters used when updating a storage account.</summary>
    public partial class StorageAccountPropertiesUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal
    {

        /// <summary>Backing field for <see cref="AccessTier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccessTier? _accessTier;

        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier
        /// is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs
        /// storage account type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccessTier? AccessTier { get => this._accessTier; set => this._accessTier = value; }

        /// <summary>Specifies the Active Directory account type for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyAccountType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyAccountType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyAccountType = value ?? null; }

        /// <summary>Specifies the security identifier (SID) for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyAzureStorageSid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyAzureStorageSid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyAzureStorageSid = value ?? null; }

        /// <summary>Specifies the domain GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyDomainGuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyDomainGuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyDomainGuid = value ?? null; }

        /// <summary>Specifies the primary domain that the AD DNS server is authoritative for.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyDomainName = value ?? null; }

        /// <summary>Specifies the security identifier (SID).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyDomainSid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyDomainSid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyDomainSid = value ?? null; }

        /// <summary>Specifies the Active Directory forest to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyForestName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyForestName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyForestName = value ?? null; }

        /// <summary>Specifies the NetBIOS domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyNetBiosDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyNetBiosDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertyNetBiosDomainName = value ?? null; }

        /// <summary>Specifies the Active Directory SAMAccountName for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertySamAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertySamAccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryPropertySamAccountName = value ?? null; }

        /// <summary>Backing field for <see cref="AllowBlobPublicAccess" /> property.</summary>
        private bool? _allowBlobPublicAccess;

        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? AllowBlobPublicAccess { get => this._allowBlobPublicAccess; set => this._allowBlobPublicAccess = value; }

        /// <summary>Backing field for <see cref="AllowCrossTenantReplication" /> property.</summary>
        private bool? _allowCrossTenantReplication;

        /// <summary>
        /// Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? AllowCrossTenantReplication { get => this._allowCrossTenantReplication; set => this._allowCrossTenantReplication = value; }

        /// <summary>Backing field for <see cref="AllowSharedKeyAccess" /> property.</summary>
        private bool? _allowSharedKeyAccess;

        /// <summary>
        /// Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD).
        /// The default value is null, which is equivalent to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? AllowSharedKeyAccess { get => this._allowSharedKeyAccess; set => this._allowSharedKeyAccess = value; }

        /// <summary>Backing field for <see cref="AllowedCopyScope" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AllowedCopyScope? _allowedCopyScope;

        /// <summary>
        /// Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AllowedCopyScope? AllowedCopyScope { get => this._allowedCopyScope; set => this._allowedCopyScope = value; }

        /// <summary>
        /// Default share permission for users using Kerberos authentication if RBAC role is not assigned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultSharePermission? AzureFileIdentityBasedAuthenticationDefaultSharePermission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).DefaultSharePermission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).DefaultSharePermission = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultSharePermission)""); }

        /// <summary>Indicates the directory service used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DirectoryServiceOptions? AzureFileIdentityBasedAuthenticationDirectoryServiceOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).DirectoryServiceOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).DirectoryServiceOption = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DirectoryServiceOptions)""); }

        /// <summary>
        /// Backing field for <see cref="AzureFilesIdentityBasedAuthentication" /> property.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthentication _azureFilesIdentityBasedAuthentication;

        /// <summary>Provides the identity based authentication settings for Azure Files.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get => (this._azureFilesIdentityBasedAuthentication = this._azureFilesIdentityBasedAuthentication ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.AzureFilesIdentityBasedAuthentication()); set => this._azureFilesIdentityBasedAuthentication = value; }

        /// <summary>Backing field for <see cref="CustomDomain" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomain _customDomain;

        /// <summary>
        /// Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is supported
        /// per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomain CustomDomain { get => (this._customDomain = this._customDomain ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.CustomDomain()); set => this._customDomain = value; }

        /// <summary>
        /// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string CustomDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomainInternal)CustomDomain).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomainInternal)CustomDomain).Name = value ?? null; }

        /// <summary>
        /// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? CustomDomainUseSubDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomainInternal)CustomDomain).UseSubDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomainInternal)CustomDomain).UseSubDomainName = value ?? default(bool); }

        /// <summary>Backing field for <see cref="DefaultToOAuthAuthentication" /> property.</summary>
        private bool? _defaultToOAuthAuthentication;

        /// <summary>
        /// A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? DefaultToOAuthAuthentication { get => this._defaultToOAuthAuthentication; set => this._defaultToOAuthAuthentication = value; }

        /// <summary>Backing field for <see cref="DnsEndpointType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DnsEndpointType? _dnsEndpointType;

        /// <summary>
        /// Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DnsEndpointType? DnsEndpointType { get => this._dnsEndpointType; set => this._dnsEndpointType = value; }

        /// <summary>Backing field for <see cref="EnableHttpsTrafficOnly" /> property.</summary>
        private bool? _enableHttpsTrafficOnly;

        /// <summary>Allows https traffic only to storage service if sets to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? EnableHttpsTrafficOnly { get => this._enableHttpsTrafficOnly; set => this._enableHttpsTrafficOnly = value; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption _encryption;

        /// <summary>
        /// Not applicable. Azure Storage encryption at rest is enabled by default for all storage accounts and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.Encryption()); set => this._encryption = value; }

        /// <summary>
        /// This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can
        /// be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and
        /// any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ImmutabilityPolicyAllowProtectedAppendWrite { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicyAllowProtectedAppendWrite; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicyAllowProtectedAppendWrite = value ?? default(bool); }

        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay = value ?? default(int); }

        /// <summary>
        /// The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows
        /// increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked
        /// state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked
        /// state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which
        /// cannot be reverted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccountImmutabilityPolicyState? ImmutabilityPolicyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicyState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicyState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccountImmutabilityPolicyState)""); }

        /// <summary>Backing field for <see cref="ImmutableStorageWithVersioning" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccount _immutableStorageWithVersioning;

        /// <summary>
        /// The property is immutable and can only be set to true at the account creation time. When set to true, it enables object
        /// level immutability for all the containers in the account by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccount ImmutableStorageWithVersioning { get => (this._immutableStorageWithVersioning = this._immutableStorageWithVersioning ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ImmutableStorageAccount()); set => this._immutableStorageWithVersioning = value; }

        /// <summary>
        /// A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability
        /// enabled by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ImmutableStorageWithVersioningEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).Enabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="IsLocalUserEnabled" /> property.</summary>
        private bool? _isLocalUserEnabled;

        /// <summary>Enables local users feature, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? IsLocalUserEnabled { get => this._isLocalUserEnabled; set => this._isLocalUserEnabled = value; }

        /// <summary>Backing field for <see cref="IsSftpEnabled" /> property.</summary>
        private bool? _isSftpEnabled;

        /// <summary>Enables Secure File Transfer Protocol, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? IsSftpEnabled { get => this._isSftpEnabled; set => this._isSftpEnabled = value; }

        /// <summary>Backing field for <see cref="KeyPolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyPolicy _keyPolicy;

        /// <summary>KeyPolicy assigned to the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyPolicy KeyPolicy { get => (this._keyPolicy = this._keyPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.KeyPolicy()); set => this._keyPolicy = value; }

        /// <summary>The key expiration period in days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? KeyPolicyKeyExpirationPeriodInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyPolicyInternal)KeyPolicy).KeyExpirationPeriodInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyPolicyInternal)KeyPolicy).KeyExpirationPeriodInDay = value ?? default(int); }

        /// <summary>Backing field for <see cref="LargeFileSharesState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LargeFileSharesState? _largeFileSharesState;

        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LargeFileSharesState? LargeFileSharesState { get => this._largeFileSharesState; set => this._largeFileSharesState = value; }

        /// <summary>
        /// Internal Acessors for AzureFileIdentityBasedAuthenticationActiveDirectoryProperty
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IActiveDirectoryProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.AzureFileIdentityBasedAuthenticationActiveDirectoryProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthenticationInternal)AzureFilesIdentityBasedAuthentication).ActiveDirectoryProperty = value; }

        /// <summary>Internal Acessors for AzureFilesIdentityBasedAuthentication</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthentication Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.AzureFilesIdentityBasedAuthentication { get => (this._azureFilesIdentityBasedAuthentication = this._azureFilesIdentityBasedAuthentication ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.AzureFilesIdentityBasedAuthentication()); set { {_azureFilesIdentityBasedAuthentication = value;} } }

        /// <summary>Internal Acessors for CustomDomain</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomain Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.CustomDomain { get => (this._customDomain = this._customDomain ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.CustomDomain()); set { {_customDomain = value;} } }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccount Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.ImmutableStorageWithVersioning { get => (this._immutableStorageWithVersioning = this._immutableStorageWithVersioning ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ImmutableStorageAccount()); set { {_immutableStorageWithVersioning = value;} } }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioningImmutabilityPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAccountImmutabilityPolicyProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.ImmutableStorageWithVersioningImmutabilityPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccountInternal)ImmutableStorageWithVersioning).ImmutabilityPolicy = value; }

        /// <summary>Internal Acessors for KeyPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyPolicy Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.KeyPolicy { get => (this._keyPolicy = this._keyPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.KeyPolicy()); set { {_keyPolicy = value;} } }

        /// <summary>Internal Acessors for NetworkRuleSet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSet Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.NetworkRuleSet { get => (this._networkRuleSet = this._networkRuleSet ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.NetworkRuleSet()); set { {_networkRuleSet = value;} } }

        /// <summary>Internal Acessors for RoutingPreference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreference Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.RoutingPreference { get => (this._routingPreference = this._routingPreference ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.RoutingPreference()); set { {_routingPreference = value;} } }

        /// <summary>Internal Acessors for SasPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicy Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.SasPolicy { get => (this._sasPolicy = this._sasPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.SasPolicy()); set { {_sasPolicy = value;} } }

        /// <summary>Internal Acessors for SasPolicyExpirationAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IStorageAccountPropertiesUpdateParametersInternal.SasPolicyExpirationAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicyInternal)SasPolicy).ExpirationAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicyInternal)SasPolicy).ExpirationAction = value; }

        /// <summary>Backing field for <see cref="MinimumTlsVersion" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MinimumTlsVersion? _minimumTlsVersion;

        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MinimumTlsVersion? MinimumTlsVersion { get => this._minimumTlsVersion; set => this._minimumTlsVersion = value; }

        /// <summary>Backing field for <see cref="NetworkRuleSet" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSet _networkRuleSet;

        /// <summary>Network rule set</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSet NetworkRuleSet { get => (this._networkRuleSet = this._networkRuleSet ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.NetworkRuleSet()); set => this._networkRuleSet = value; }

        /// <summary>
        /// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
        /// (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.Bypass? NetworkRuleSetBypass { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).Bypass; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).Bypass = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.Bypass)""); }

        /// <summary>Specifies the default action of allow or deny when no other rules match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultAction? NetworkRuleSetDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).DefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).DefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultAction)""); }

        /// <summary>Sets the IP ACL rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IIPRule[] NetworkRuleSetIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).IPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).IPRule = value ?? null /* arrayOf */; }

        /// <summary>Sets the resource access rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IResourceAccessRule[] NetworkRuleSetResourceAccessRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).ResourceAccessRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).ResourceAccessRule = value ?? null /* arrayOf */; }

        /// <summary>Sets the virtual network rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IVirtualNetworkRule[] NetworkRuleSetVirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).VirtualNetworkRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSetInternal)NetworkRuleSet).VirtualNetworkRule = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="PublicNetworkAccess" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicNetworkAccess? _publicNetworkAccess;

        /// <summary>
        /// Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicNetworkAccess? PublicNetworkAccess { get => this._publicNetworkAccess; set => this._publicNetworkAccess = value; }

        /// <summary>Backing field for <see cref="RoutingPreference" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreference _routingPreference;

        /// <summary>
        /// Maintains information about the network routing choice opted by the user for data transfer
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreference RoutingPreference { get => (this._routingPreference = this._routingPreference ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.RoutingPreference()); set => this._routingPreference = value; }

        /// <summary>
        /// A boolean flag which indicates whether internet routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? RoutingPreferencePublishInternetEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreferenceInternal)RoutingPreference).PublishInternetEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreferenceInternal)RoutingPreference).PublishInternetEndpoint = value ?? default(bool); }

        /// <summary>
        /// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? RoutingPreferencePublishMicrosoftEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreferenceInternal)RoutingPreference).PublishMicrosoftEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreferenceInternal)RoutingPreference).PublishMicrosoftEndpoint = value ?? default(bool); }

        /// <summary>Routing Choice defines the kind of network routing opted by the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RoutingChoice? RoutingPreferenceRoutingChoice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreferenceInternal)RoutingPreference).RoutingChoice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreferenceInternal)RoutingPreference).RoutingChoice = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RoutingChoice)""); }

        /// <summary>Backing field for <see cref="SasPolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicy _sasPolicy;

        /// <summary>SasPolicy assigned to the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicy SasPolicy { get => (this._sasPolicy = this._sasPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.SasPolicy()); set => this._sasPolicy = value; }

        /// <summary>The SAS expiration action. Can only be Log.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SasPolicyExpirationAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicyInternal)SasPolicy).ExpirationAction; }

        /// <summary>The SAS expiration period, DD.HH:MM:SS.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SasPolicySasExpirationPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicyInternal)SasPolicy).SasExpirationPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicyInternal)SasPolicy).SasExpirationPeriod = value ?? null; }

        /// <summary>
        /// Creates an new <see cref="StorageAccountPropertiesUpdateParameters" /> instance.
        /// </summary>
        public StorageAccountPropertiesUpdateParameters()
        {

        }
    }
    /// The parameters used when updating a storage account.
    public partial interface IStorageAccountPropertiesUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier
        /// is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs
        /// storage account type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.",
        SerializedName = @"accessTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccessTier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccessTier? AccessTier { get; set; }
        /// <summary>Specifies the Active Directory account type for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the Active Directory account type for Azure Storage.",
        SerializedName = @"accountType",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyAccountType { get; set; }
        /// <summary>Specifies the security identifier (SID) for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the security identifier (SID) for Azure Storage.",
        SerializedName = @"azureStorageSid",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyAzureStorageSid { get; set; }
        /// <summary>Specifies the domain GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the domain GUID.",
        SerializedName = @"domainGuid",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyDomainGuid { get; set; }
        /// <summary>Specifies the primary domain that the AD DNS server is authoritative for.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the primary domain that the AD DNS server is authoritative for.",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyDomainName { get; set; }
        /// <summary>Specifies the security identifier (SID).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the security identifier (SID).",
        SerializedName = @"domainSid",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyDomainSid { get; set; }
        /// <summary>Specifies the Active Directory forest to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the Active Directory forest to get.",
        SerializedName = @"forestName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyForestName { get; set; }
        /// <summary>Specifies the NetBIOS domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the NetBIOS domain name.",
        SerializedName = @"netBiosDomainName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyNetBiosDomainName { get; set; }
        /// <summary>Specifies the Active Directory SAMAccountName for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the Active Directory SAMAccountName for Azure Storage.",
        SerializedName = @"samAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertySamAccountName { get; set; }
        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property.",
        SerializedName = @"allowBlobPublicAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowBlobPublicAccess { get; set; }
        /// <summary>
        /// Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.",
        SerializedName = @"allowCrossTenantReplication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowCrossTenantReplication { get; set; }
        /// <summary>
        /// Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD).
        /// The default value is null, which is equivalent to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.",
        SerializedName = @"allowSharedKeyAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowSharedKeyAccess { get; set; }
        /// <summary>
        /// Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.",
        SerializedName = @"allowedCopyScope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AllowedCopyScope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AllowedCopyScope? AllowedCopyScope { get; set; }
        /// <summary>
        /// Default share permission for users using Kerberos authentication if RBAC role is not assigned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default share permission for users using Kerberos authentication if RBAC role is not assigned.",
        SerializedName = @"defaultSharePermission",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultSharePermission) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultSharePermission? AzureFileIdentityBasedAuthenticationDefaultSharePermission { get; set; }
        /// <summary>Indicates the directory service used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the directory service used.",
        SerializedName = @"directoryServiceOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DirectoryServiceOptions) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DirectoryServiceOptions? AzureFileIdentityBasedAuthenticationDirectoryServiceOption { get; set; }
        /// <summary>
        /// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainName { get; set; }
        /// <summary>
        /// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
        SerializedName = @"useSubDomainName",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CustomDomainUseSubDomainName { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property.",
        SerializedName = @"defaultToOAuthAuthentication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DefaultToOAuthAuthentication { get; set; }
        /// <summary>
        /// Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.",
        SerializedName = @"dnsEndpointType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DnsEndpointType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DnsEndpointType? DnsEndpointType { get; set; }
        /// <summary>Allows https traffic only to storage service if sets to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allows https traffic only to storage service if sets to true.",
        SerializedName = @"supportsHttpsTrafficOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableHttpsTrafficOnly { get; set; }
        /// <summary>
        /// Not applicable. Azure Storage encryption at rest is enabled by default for all storage accounts and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Not applicable. Azure Storage encryption at rest is enabled by default for all storage accounts and cannot be disabled.",
        SerializedName = @"encryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption Encryption { get; set; }
        /// <summary>
        /// This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can
        /// be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and
        /// any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.",
        SerializedName = @"allowProtectedAppendWrites",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImmutabilityPolicyAllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The immutability period for the blobs in the container since the policy creation, in days.",
        SerializedName = @"immutabilityPeriodSinceCreationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows
        /// increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked
        /// state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked
        /// state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which
        /// cannot be reverted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccountImmutabilityPolicyState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccountImmutabilityPolicyState? ImmutabilityPolicyState { get; set; }
        /// <summary>
        /// A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability
        /// enabled by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability enabled by default.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImmutableStorageWithVersioningEnabled { get; set; }
        /// <summary>Enables local users feature, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables local users feature, if set to true",
        SerializedName = @"isLocalUserEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsLocalUserEnabled { get; set; }
        /// <summary>Enables Secure File Transfer Protocol, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enables Secure File Transfer Protocol, if set to true",
        SerializedName = @"isSftpEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSftpEnabled { get; set; }
        /// <summary>The key expiration period in days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The key expiration period in days.",
        SerializedName = @"keyExpirationPeriodInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? KeyPolicyKeyExpirationPeriodInDay { get; set; }
        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.",
        SerializedName = @"largeFileSharesState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LargeFileSharesState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LargeFileSharesState? LargeFileSharesState { get; set; }
        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MinimumTlsVersion) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MinimumTlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>
        /// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
        /// (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, ""Logging, Metrics""), or None to bypass none of those traffics.",
        SerializedName = @"bypass",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.Bypass) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.Bypass? NetworkRuleSetBypass { get; set; }
        /// <summary>Specifies the default action of allow or deny when no other rules match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the default action of allow or deny when no other rules match.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultAction? NetworkRuleSetDefaultAction { get; set; }
        /// <summary>Sets the IP ACL rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets the IP ACL rules",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IIPRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IIPRule[] NetworkRuleSetIPRule { get; set; }
        /// <summary>Sets the resource access rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets the resource access rules",
        SerializedName = @"resourceAccessRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IResourceAccessRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IResourceAccessRule[] NetworkRuleSetResourceAccessRule { get; set; }
        /// <summary>Sets the virtual network rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets the virtual network rules",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IVirtualNetworkRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IVirtualNetworkRule[] NetworkRuleSetVirtualNetworkRule { get; set; }
        /// <summary>
        /// Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether internet routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean flag which indicates whether internet routing storage endpoints are to be published",
        SerializedName = @"publishInternetEndpoints",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RoutingPreferencePublishInternetEndpoint { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A boolean flag which indicates whether microsoft routing storage endpoints are to be published",
        SerializedName = @"publishMicrosoftEndpoints",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RoutingPreferencePublishMicrosoftEndpoint { get; set; }
        /// <summary>Routing Choice defines the kind of network routing opted by the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Routing Choice defines the kind of network routing opted by the user.",
        SerializedName = @"routingChoice",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RoutingChoice) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RoutingChoice? RoutingPreferenceRoutingChoice { get; set; }
        /// <summary>The SAS expiration action. Can only be Log.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The SAS expiration action. Can only be Log.",
        SerializedName = @"expirationAction",
        PossibleTypes = new [] { typeof(string) })]
        string SasPolicyExpirationAction { get;  }
        /// <summary>The SAS expiration period, DD.HH:MM:SS.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SAS expiration period, DD.HH:MM:SS.",
        SerializedName = @"sasExpirationPeriod",
        PossibleTypes = new [] { typeof(string) })]
        string SasPolicySasExpirationPeriod { get; set; }

    }
    /// The parameters used when updating a storage account.
    internal partial interface IStorageAccountPropertiesUpdateParametersInternal

    {
        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier
        /// is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs
        /// storage account type.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccessTier? AccessTier { get; set; }
        /// <summary>Specifies the Active Directory account type for Azure Storage.</summary>
        string ActiveDirectoryPropertyAccountType { get; set; }
        /// <summary>Specifies the security identifier (SID) for Azure Storage.</summary>
        string ActiveDirectoryPropertyAzureStorageSid { get; set; }
        /// <summary>Specifies the domain GUID.</summary>
        string ActiveDirectoryPropertyDomainGuid { get; set; }
        /// <summary>Specifies the primary domain that the AD DNS server is authoritative for.</summary>
        string ActiveDirectoryPropertyDomainName { get; set; }
        /// <summary>Specifies the security identifier (SID).</summary>
        string ActiveDirectoryPropertyDomainSid { get; set; }
        /// <summary>Specifies the Active Directory forest to get.</summary>
        string ActiveDirectoryPropertyForestName { get; set; }
        /// <summary>Specifies the NetBIOS domain name.</summary>
        string ActiveDirectoryPropertyNetBiosDomainName { get; set; }
        /// <summary>Specifies the Active Directory SAMAccountName for Azure Storage.</summary>
        string ActiveDirectoryPropertySamAccountName { get; set; }
        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true
        /// for this property.
        /// </summary>
        bool? AllowBlobPublicAccess { get; set; }
        /// <summary>
        /// Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.
        /// </summary>
        bool? AllowCrossTenantReplication { get; set; }
        /// <summary>
        /// Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD).
        /// The default value is null, which is equivalent to true.
        /// </summary>
        bool? AllowSharedKeyAccess { get; set; }
        /// <summary>
        /// Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AllowedCopyScope? AllowedCopyScope { get; set; }
        /// <summary>Required if choose AD.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IActiveDirectoryProperties AzureFileIdentityBasedAuthenticationActiveDirectoryProperty { get; set; }
        /// <summary>
        /// Default share permission for users using Kerberos authentication if RBAC role is not assigned.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultSharePermission? AzureFileIdentityBasedAuthenticationDefaultSharePermission { get; set; }
        /// <summary>Indicates the directory service used.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DirectoryServiceOptions? AzureFileIdentityBasedAuthenticationDirectoryServiceOption { get; set; }
        /// <summary>Provides the identity based authentication settings for Azure Files.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get; set; }
        /// <summary>
        /// Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is supported
        /// per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name
        /// property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ICustomDomain CustomDomain { get; set; }
        /// <summary>
        /// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        /// </summary>
        string CustomDomainName { get; set; }
        /// <summary>
        /// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
        /// </summary>
        bool? CustomDomainUseSubDomainName { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        bool? DefaultToOAuthAuthentication { get; set; }
        /// <summary>
        /// Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DnsEndpointType? DnsEndpointType { get; set; }
        /// <summary>Allows https traffic only to storage service if sets to true.</summary>
        bool? EnableHttpsTrafficOnly { get; set; }
        /// <summary>
        /// Not applicable. Azure Storage encryption at rest is enabled by default for all storage accounts and cannot be disabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IEncryption Encryption { get; set; }
        /// <summary>
        /// This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can
        /// be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and
        /// any existing blocks cannot be modified or deleted.
        /// </summary>
        bool? ImmutabilityPolicyAllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        int? ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows
        /// increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked
        /// state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked
        /// state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which
        /// cannot be reverted.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.AccountImmutabilityPolicyState? ImmutabilityPolicyState { get; set; }
        /// <summary>
        /// The property is immutable and can only be set to true at the account creation time. When set to true, it enables object
        /// level immutability for all the containers in the account by default.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IImmutableStorageAccount ImmutableStorageWithVersioning { get; set; }
        /// <summary>
        /// A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability
        /// enabled by default.
        /// </summary>
        bool? ImmutableStorageWithVersioningEnabled { get; set; }
        /// <summary>
        /// Specifies the default account-level immutability policy which is inherited and applied to objects that do not possess
        /// an explicit immutability policy at the object level. The object-level immutability policy has higher precedence than the
        /// container-level immutability policy, which has a higher precedence than the account-level immutability policy.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IAccountImmutabilityPolicyProperties ImmutableStorageWithVersioningImmutabilityPolicy { get; set; }
        /// <summary>Enables local users feature, if set to true</summary>
        bool? IsLocalUserEnabled { get; set; }
        /// <summary>Enables Secure File Transfer Protocol, if set to true</summary>
        bool? IsSftpEnabled { get; set; }
        /// <summary>KeyPolicy assigned to the storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IKeyPolicy KeyPolicy { get; set; }
        /// <summary>The key expiration period in days.</summary>
        int? KeyPolicyKeyExpirationPeriodInDay { get; set; }
        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LargeFileSharesState? LargeFileSharesState { get; set; }
        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.MinimumTlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>Network rule set</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.INetworkRuleSet NetworkRuleSet { get; set; }
        /// <summary>
        /// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
        /// (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.Bypass? NetworkRuleSetBypass { get; set; }
        /// <summary>Specifies the default action of allow or deny when no other rules match.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.DefaultAction? NetworkRuleSetDefaultAction { get; set; }
        /// <summary>Sets the IP ACL rules</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IIPRule[] NetworkRuleSetIPRule { get; set; }
        /// <summary>Sets the resource access rules</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IResourceAccessRule[] NetworkRuleSetResourceAccessRule { get; set; }
        /// <summary>Sets the virtual network rules</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IVirtualNetworkRule[] NetworkRuleSetVirtualNetworkRule { get; set; }
        /// <summary>
        /// Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// Maintains information about the network routing choice opted by the user for data transfer
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IRoutingPreference RoutingPreference { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether internet routing storage endpoints are to be published
        /// </summary>
        bool? RoutingPreferencePublishInternetEndpoint { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
        /// </summary>
        bool? RoutingPreferencePublishMicrosoftEndpoint { get; set; }
        /// <summary>Routing Choice defines the kind of network routing opted by the user.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RoutingChoice? RoutingPreferenceRoutingChoice { get; set; }
        /// <summary>SasPolicy assigned to the storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISasPolicy SasPolicy { get; set; }
        /// <summary>The SAS expiration action. Can only be Log.</summary>
        string SasPolicyExpirationAction { get; set; }
        /// <summary>The SAS expiration period, DD.HH:MM:SS.</summary>
        string SasPolicySasExpirationPeriod { get; set; }

    }
}