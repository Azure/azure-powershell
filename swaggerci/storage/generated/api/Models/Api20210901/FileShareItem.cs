// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The file share properties be listed out.</summary>
    public partial class FileShareItem :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItem,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource __azureEntityResource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.AzureEntityResource();

        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? AccessTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTier = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier)""); }

        /// <summary>Indicates the last modification time for share access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? AccessTierChangeTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierChangeTime; }

        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string AccessTierStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierStatus; }

        /// <summary>Indicates whether the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? Deleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Deleted; }

        /// <summary>The deleted time if the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? DeletedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).DeletedTime; }

        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? EnabledProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).EnabledProtocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).EnabledProtocol = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols)""); }

        /// <summary>Resource Etag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; }

        /// <summary>Returns the date and time the share was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LastModifiedTime; }

        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseDuration; }

        /// <summary>Lease state of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseState; }

        /// <summary>The lease status of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseStatus; }

        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata Metadata { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Metadata; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Metadata = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Etag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal.Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type = value; }

        /// <summary>Internal Acessors for AccessTierChangeTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.AccessTierChangeTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierChangeTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierChangeTime = value; }

        /// <summary>Internal Acessors for AccessTierStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.AccessTierStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierStatus = value; }

        /// <summary>Internal Acessors for Deleted</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.Deleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Deleted; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Deleted = value; }

        /// <summary>Internal Acessors for DeletedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.DeletedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).DeletedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).DeletedTime = value; }

        /// <summary>Internal Acessors for LastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LastModifiedTime = value; }

        /// <summary>Internal Acessors for LeaseDuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.LeaseDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseDuration = value; }

        /// <summary>Internal Acessors for LeaseState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.LeaseState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseState = value; }

        /// <summary>Internal Acessors for LeaseStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.LeaseStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseStatus = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.FileShareProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RemainingRetentionDay</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.RemainingRetentionDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RemainingRetentionDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RemainingRetentionDay = value; }

        /// <summary>Internal Acessors for ShareUsageByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.ShareUsageByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareUsageByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareUsageByte = value; }

        /// <summary>Internal Acessors for SnapshotTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.SnapshotTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SnapshotTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SnapshotTime = value; }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareItemInternal.Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Version = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties _property;

        /// <summary>The file share properties be listed out.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.FileShareProperties()); set => this._property = value; }

        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? RemainingRetentionDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RemainingRetentionDay; }

        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? RootSquash { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RootSquash; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RootSquash = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType)""); }

        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? ShareQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareQuota = value ?? default(int); }

        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public long? ShareUsageByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareUsageByte; }

        /// <summary>List of stored access policies specified on the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] SignedIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SignedIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SignedIdentifier = value ?? null /* arrayOf */; }

        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? SnapshotTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SnapshotTime; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; }

        /// <summary>The version of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Version; }

        /// <summary>Creates an new <see cref="FileShareItem" /> instance.</summary>
        public FileShareItem()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__azureEntityResource), __azureEntityResource);
            await eventListener.AssertObjectIsValid(nameof(__azureEntityResource), __azureEntityResource);
        }
    }
    /// The file share properties be listed out.
    public partial interface IFileShareItem :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource
    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.",
        SerializedName = @"accessTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? AccessTier { get; set; }
        /// <summary>Indicates the last modification time for share access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates the last modification time for share access tier.",
        SerializedName = @"accessTierChangeTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AccessTierChangeTime { get;  }
        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates if there is a pending transition for access tier.",
        SerializedName = @"accessTierStatus",
        PossibleTypes = new [] { typeof(string) })]
        string AccessTierStatus { get;  }
        /// <summary>Indicates whether the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether the share was deleted.",
        SerializedName = @"deleted",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Deleted { get;  }
        /// <summary>The deleted time if the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The deleted time if the share was deleted.",
        SerializedName = @"deletedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DeletedTime { get;  }
        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The authentication protocol that is used for the file share. Can only be specified when creating a share.",
        SerializedName = @"enabledProtocols",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? EnabledProtocol { get; set; }
        /// <summary>Returns the date and time the share was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the share was last modified.",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModifiedTime { get;  }
        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.",
        SerializedName = @"leaseDuration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get;  }
        /// <summary>Lease state of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Lease state of the share.",
        SerializedName = @"leaseState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get;  }
        /// <summary>The lease status of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lease status of the share.",
        SerializedName = @"leaseStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get;  }
        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A name-value pair to associate with the share as metadata.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata Metadata { get; set; }
        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Remaining retention days for share that was soft deleted.",
        SerializedName = @"remainingRetentionDays",
        PossibleTypes = new [] { typeof(int) })]
        int? RemainingRetentionDay { get;  }
        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The property is for NFS share only. The default is NoRootSquash.",
        SerializedName = @"rootSquash",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? RootSquash { get; set; }
        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.",
        SerializedName = @"shareQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? ShareQuota { get; set; }
        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.",
        SerializedName = @"shareUsageBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? ShareUsageByte { get;  }
        /// <summary>List of stored access policies specified on the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of stored access policies specified on the share.",
        SerializedName = @"signedIdentifiers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] SignedIdentifier { get; set; }
        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Creation time of share snapshot returned in the response of list shares with expand param ""snapshots"".",
        SerializedName = @"snapshotTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SnapshotTime { get;  }
        /// <summary>The version of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The version of the share.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }

    }
    /// The file share properties be listed out.
    internal partial interface IFileShareItemInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal
    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? AccessTier { get; set; }
        /// <summary>Indicates the last modification time for share access tier.</summary>
        global::System.DateTime? AccessTierChangeTime { get; set; }
        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        string AccessTierStatus { get; set; }
        /// <summary>Indicates whether the share was deleted.</summary>
        bool? Deleted { get; set; }
        /// <summary>The deleted time if the share was deleted.</summary>
        global::System.DateTime? DeletedTime { get; set; }
        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? EnabledProtocol { get; set; }
        /// <summary>Returns the date and time the share was last modified.</summary>
        global::System.DateTime? LastModifiedTime { get; set; }
        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get; set; }
        /// <summary>Lease state of the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get; set; }
        /// <summary>The lease status of the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get; set; }
        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata Metadata { get; set; }
        /// <summary>The file share properties be listed out.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties Property { get; set; }
        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        int? RemainingRetentionDay { get; set; }
        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? RootSquash { get; set; }
        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        int? ShareQuota { get; set; }
        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        long? ShareUsageByte { get; set; }
        /// <summary>List of stored access policies specified on the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] SignedIdentifier { get; set; }
        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        global::System.DateTime? SnapshotTime { get; set; }
        /// <summary>The version of the share.</summary>
        string Version { get; set; }

    }
}