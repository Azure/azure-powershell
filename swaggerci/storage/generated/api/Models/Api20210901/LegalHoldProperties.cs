// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The LegalHold property of a blob container.</summary>
    public partial class LegalHoldProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldPropertiesInternal
    {

        /// <summary>Backing field for <see cref="HasLegalHold" /> property.</summary>
        private bool? _hasLegalHold;

        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? HasLegalHold { get => this._hasLegalHold; }

        /// <summary>Internal Acessors for HasLegalHold</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldPropertiesInternal.HasLegalHold { get => this._hasLegalHold; set { {_hasLegalHold = value;} } }

        /// <summary>Internal Acessors for ProtectedAppendWriteHistoryTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldPropertiesInternal.ProtectedAppendWriteHistoryTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistoryInternal)ProtectedAppendWritesHistory).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistoryInternal)ProtectedAppendWritesHistory).Timestamp = value; }

        /// <summary>Internal Acessors for ProtectedAppendWritesHistory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistory Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ILegalHoldPropertiesInternal.ProtectedAppendWritesHistory { get => (this._protectedAppendWritesHistory = this._protectedAppendWritesHistory ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ProtectedAppendWritesHistory()); set { {_protectedAppendWritesHistory = value;} } }

        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistoryInternal)ProtectedAppendWritesHistory).AllowProtectedAppendWritesAll; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistoryInternal)ProtectedAppendWritesHistory).AllowProtectedAppendWritesAll = value ?? default(bool); }

        /// <summary>Returns the date and time the tag was added.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProtectedAppendWriteHistoryTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistoryInternal)ProtectedAppendWritesHistory).Timestamp; }

        /// <summary>Backing field for <see cref="ProtectedAppendWritesHistory" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistory _protectedAppendWritesHistory;

        /// <summary>Protected append blob writes history.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistory ProtectedAppendWritesHistory { get => (this._protectedAppendWritesHistory = this._protectedAppendWritesHistory ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ProtectedAppendWritesHistory()); set => this._protectedAppendWritesHistory = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] _tag;

        /// <summary>The list of LegalHold tags of a blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] Tag { get => this._tag; set => this._tag = value; }

        /// <summary>Creates an new <see cref="LegalHoldProperties" /> instance.</summary>
        public LegalHoldProperties()
        {

        }
    }
    /// The LegalHold property of a blob container.
    public partial interface ILegalHoldProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
        SerializedName = @"hasLegalHold",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasLegalHold { get;  }
        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.",
        SerializedName = @"allowProtectedAppendWritesAll",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll { get; set; }
        /// <summary>Returns the date and time the tag was added.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the tag was added.",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProtectedAppendWriteHistoryTimestamp { get;  }
        /// <summary>The list of LegalHold tags of a blob container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of LegalHold tags of a blob container.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] Tag { get; set; }

    }
    /// The LegalHold property of a blob container.
    internal partial interface ILegalHoldPropertiesInternal

    {
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public
        /// property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers
        /// with hasLegalHold=true for a given account.
        /// </summary>
        bool? HasLegalHold { get; set; }
        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        bool? ProtectedAppendWriteHistoryAllowProtectedAppendWritesAll { get; set; }
        /// <summary>Returns the date and time the tag was added.</summary>
        global::System.DateTime? ProtectedAppendWriteHistoryTimestamp { get; set; }
        /// <summary>Protected append blob writes history.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IProtectedAppendWritesHistory ProtectedAppendWritesHistory { get; set; }
        /// <summary>The list of LegalHold tags of a blob container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ITagProperty[] Tag { get; set; }

    }
}