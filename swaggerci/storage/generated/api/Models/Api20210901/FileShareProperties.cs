// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The properties of the file share.</summary>
    public partial class FileShareProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AccessTier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? _accessTier;

        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? AccessTier { get => this._accessTier; set => this._accessTier = value; }

        /// <summary>Backing field for <see cref="AccessTierChangeTime" /> property.</summary>
        private global::System.DateTime? _accessTierChangeTime;

        /// <summary>Indicates the last modification time for share access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public global::System.DateTime? AccessTierChangeTime { get => this._accessTierChangeTime; }

        /// <summary>Backing field for <see cref="AccessTierStatus" /> property.</summary>
        private string _accessTierStatus;

        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string AccessTierStatus { get => this._accessTierStatus; }

        /// <summary>Backing field for <see cref="Deleted" /> property.</summary>
        private bool? _deleted;

        /// <summary>Indicates whether the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? Deleted { get => this._deleted; }

        /// <summary>Backing field for <see cref="DeletedTime" /> property.</summary>
        private global::System.DateTime? _deletedTime;

        /// <summary>The deleted time if the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public global::System.DateTime? DeletedTime { get => this._deletedTime; }

        /// <summary>Backing field for <see cref="EnabledProtocol" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? _enabledProtocol;

        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? EnabledProtocol { get => this._enabledProtocol; set => this._enabledProtocol = value; }

        /// <summary>Backing field for <see cref="LastModifiedTime" /> property.</summary>
        private global::System.DateTime? _lastModifiedTime;

        /// <summary>Returns the date and time the share was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public global::System.DateTime? LastModifiedTime { get => this._lastModifiedTime; }

        /// <summary>Backing field for <see cref="LeaseDuration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? _leaseDuration;

        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get => this._leaseDuration; }

        /// <summary>Backing field for <see cref="LeaseState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? _leaseState;

        /// <summary>Lease state of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get => this._leaseState; }

        /// <summary>Backing field for <see cref="LeaseStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? _leaseStatus;

        /// <summary>The lease status of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get => this._leaseStatus; }

        /// <summary>Backing field for <see cref="Metadata" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata _metadata;

        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata Metadata { get => (this._metadata = this._metadata ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.FileSharePropertiesMetadata()); set => this._metadata = value; }

        /// <summary>Internal Acessors for AccessTierChangeTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.AccessTierChangeTime { get => this._accessTierChangeTime; set { {_accessTierChangeTime = value;} } }

        /// <summary>Internal Acessors for AccessTierStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.AccessTierStatus { get => this._accessTierStatus; set { {_accessTierStatus = value;} } }

        /// <summary>Internal Acessors for Deleted</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.Deleted { get => this._deleted; set { {_deleted = value;} } }

        /// <summary>Internal Acessors for DeletedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.DeletedTime { get => this._deletedTime; set { {_deletedTime = value;} } }

        /// <summary>Internal Acessors for LastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.LastModifiedTime { get => this._lastModifiedTime; set { {_lastModifiedTime = value;} } }

        /// <summary>Internal Acessors for LeaseDuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.LeaseDuration { get => this._leaseDuration; set { {_leaseDuration = value;} } }

        /// <summary>Internal Acessors for LeaseState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.LeaseState { get => this._leaseState; set { {_leaseState = value;} } }

        /// <summary>Internal Acessors for LeaseStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.LeaseStatus { get => this._leaseStatus; set { {_leaseStatus = value;} } }

        /// <summary>Internal Acessors for RemainingRetentionDay</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.RemainingRetentionDay { get => this._remainingRetentionDay; set { {_remainingRetentionDay = value;} } }

        /// <summary>Internal Acessors for ShareUsageByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.ShareUsageByte { get => this._shareUsageByte; set { {_shareUsageByte = value;} } }

        /// <summary>Internal Acessors for SnapshotTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.SnapshotTime { get => this._snapshotTime; set { {_snapshotTime = value;} } }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal.Version { get => this._version; set { {_version = value;} } }

        /// <summary>Backing field for <see cref="RemainingRetentionDay" /> property.</summary>
        private int? _remainingRetentionDay;

        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public int? RemainingRetentionDay { get => this._remainingRetentionDay; }

        /// <summary>Backing field for <see cref="RootSquash" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? _rootSquash;

        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? RootSquash { get => this._rootSquash; set => this._rootSquash = value; }

        /// <summary>Backing field for <see cref="ShareQuota" /> property.</summary>
        private int? _shareQuota;

        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public int? ShareQuota { get => this._shareQuota; set => this._shareQuota = value; }

        /// <summary>Backing field for <see cref="ShareUsageByte" /> property.</summary>
        private long? _shareUsageByte;

        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public long? ShareUsageByte { get => this._shareUsageByte; }

        /// <summary>Backing field for <see cref="SignedIdentifier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] _signedIdentifier;

        /// <summary>List of stored access policies specified on the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] SignedIdentifier { get => this._signedIdentifier; set => this._signedIdentifier = value; }

        /// <summary>Backing field for <see cref="SnapshotTime" /> property.</summary>
        private global::System.DateTime? _snapshotTime;

        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public global::System.DateTime? SnapshotTime { get => this._snapshotTime; }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>The version of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string Version { get => this._version; }

        /// <summary>Creates an new <see cref="FileShareProperties" /> instance.</summary>
        public FileShareProperties()
        {

        }
    }
    /// The properties of the file share.
    public partial interface IFileShareProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.",
        SerializedName = @"accessTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? AccessTier { get; set; }
        /// <summary>Indicates the last modification time for share access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates the last modification time for share access tier.",
        SerializedName = @"accessTierChangeTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AccessTierChangeTime { get;  }
        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates if there is a pending transition for access tier.",
        SerializedName = @"accessTierStatus",
        PossibleTypes = new [] { typeof(string) })]
        string AccessTierStatus { get;  }
        /// <summary>Indicates whether the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether the share was deleted.",
        SerializedName = @"deleted",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Deleted { get;  }
        /// <summary>The deleted time if the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The deleted time if the share was deleted.",
        SerializedName = @"deletedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DeletedTime { get;  }
        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The authentication protocol that is used for the file share. Can only be specified when creating a share.",
        SerializedName = @"enabledProtocols",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? EnabledProtocol { get; set; }
        /// <summary>Returns the date and time the share was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the share was last modified.",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModifiedTime { get;  }
        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.",
        SerializedName = @"leaseDuration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get;  }
        /// <summary>Lease state of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Lease state of the share.",
        SerializedName = @"leaseState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get;  }
        /// <summary>The lease status of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lease status of the share.",
        SerializedName = @"leaseStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get;  }
        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A name-value pair to associate with the share as metadata.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata Metadata { get; set; }
        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Remaining retention days for share that was soft deleted.",
        SerializedName = @"remainingRetentionDays",
        PossibleTypes = new [] { typeof(int) })]
        int? RemainingRetentionDay { get;  }
        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The property is for NFS share only. The default is NoRootSquash.",
        SerializedName = @"rootSquash",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? RootSquash { get; set; }
        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.",
        SerializedName = @"shareQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? ShareQuota { get; set; }
        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.",
        SerializedName = @"shareUsageBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? ShareUsageByte { get;  }
        /// <summary>List of stored access policies specified on the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of stored access policies specified on the share.",
        SerializedName = @"signedIdentifiers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] SignedIdentifier { get; set; }
        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Creation time of share snapshot returned in the response of list shares with expand param ""snapshots"".",
        SerializedName = @"snapshotTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SnapshotTime { get;  }
        /// <summary>The version of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The version of the share.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }

    }
    /// The properties of the file share.
    internal partial interface IFileSharePropertiesInternal

    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? AccessTier { get; set; }
        /// <summary>Indicates the last modification time for share access tier.</summary>
        global::System.DateTime? AccessTierChangeTime { get; set; }
        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        string AccessTierStatus { get; set; }
        /// <summary>Indicates whether the share was deleted.</summary>
        bool? Deleted { get; set; }
        /// <summary>The deleted time if the share was deleted.</summary>
        global::System.DateTime? DeletedTime { get; set; }
        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? EnabledProtocol { get; set; }
        /// <summary>Returns the date and time the share was last modified.</summary>
        global::System.DateTime? LastModifiedTime { get; set; }
        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? LeaseDuration { get; set; }
        /// <summary>Lease state of the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? LeaseState { get; set; }
        /// <summary>The lease status of the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? LeaseStatus { get; set; }
        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata Metadata { get; set; }
        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        int? RemainingRetentionDay { get; set; }
        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? RootSquash { get; set; }
        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        int? ShareQuota { get; set; }
        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        long? ShareUsageByte { get; set; }
        /// <summary>List of stored access policies specified on the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] SignedIdentifier { get; set; }
        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        global::System.DateTime? SnapshotTime { get; set; }
        /// <summary>The version of the share.</summary>
        string Version { get; set; }

    }
}