// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>Properties of the file share, including Id, resource name, resource type, Etag.</summary>
    public partial class FileShare :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShare,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource __azureEntityResource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.AzureEntityResource();

        /// <summary>Resource Etag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; }

        /// <summary>Internal Acessors for Etag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal.Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal)__azureEntityResource).Etag = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.FileShareProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for PropertyAccessTierChangeTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyAccessTierChangeTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierChangeTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierChangeTime = value; }

        /// <summary>Internal Acessors for PropertyAccessTierStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyAccessTierStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierStatus = value; }

        /// <summary>Internal Acessors for PropertyDeleted</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyDeleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Deleted; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Deleted = value; }

        /// <summary>Internal Acessors for PropertyDeletedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyDeletedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).DeletedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).DeletedTime = value; }

        /// <summary>Internal Acessors for PropertyLastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyLastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LastModifiedTime = value; }

        /// <summary>Internal Acessors for PropertyLeaseDuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyLeaseDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseDuration = value; }

        /// <summary>Internal Acessors for PropertyLeaseState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyLeaseState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseState = value; }

        /// <summary>Internal Acessors for PropertyLeaseStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyLeaseStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseStatus = value; }

        /// <summary>Internal Acessors for PropertyRemainingRetentionDay</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyRemainingRetentionDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RemainingRetentionDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RemainingRetentionDay = value; }

        /// <summary>Internal Acessors for PropertyShareUsageByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyShareUsageByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareUsageByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareUsageByte = value; }

        /// <summary>Internal Acessors for PropertySnapshotTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertySnapshotTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SnapshotTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SnapshotTime = value; }

        /// <summary>Internal Acessors for PropertyVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareInternal.PropertyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Version = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties _property;

        /// <summary>Properties of the file share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.FileShareProperties()); set => this._property = value; }

        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? PropertyAccessTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTier = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier)""); }

        /// <summary>Indicates the last modification time for share access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? PropertyAccessTierChangeTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierChangeTime; }

        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PropertyAccessTierStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).AccessTierStatus; }

        /// <summary>Indicates whether the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? PropertyDeleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Deleted; }

        /// <summary>The deleted time if the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? PropertyDeletedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).DeletedTime; }

        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? PropertyEnabledProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).EnabledProtocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).EnabledProtocol = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols)""); }

        /// <summary>Returns the date and time the share was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? PropertyLastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LastModifiedTime; }

        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? PropertyLeaseDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseDuration; }

        /// <summary>Lease state of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? PropertyLeaseState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseState; }

        /// <summary>The lease status of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? PropertyLeaseStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).LeaseStatus; }

        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata PropertyMetadata { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Metadata; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Metadata = value ?? null /* model class */; }

        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? PropertyRemainingRetentionDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RemainingRetentionDay; }

        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? PropertyRootSquash { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RootSquash; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).RootSquash = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType)""); }

        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? PropertyShareQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareQuota = value ?? default(int); }

        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public long? PropertyShareUsageByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).ShareUsageByte; }

        /// <summary>List of stored access policies specified on the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] PropertySignedIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SignedIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SignedIdentifier = value ?? null /* arrayOf */; }

        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? PropertySnapshotTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).SnapshotTime; }

        /// <summary>The version of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PropertyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesInternal)Property).Version; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IResourceInternal)__azureEntityResource).Type; }

        /// <summary>Creates an new <see cref="FileShare" /> instance.</summary>
        public FileShare()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__azureEntityResource), __azureEntityResource);
            await eventListener.AssertObjectIsValid(nameof(__azureEntityResource), __azureEntityResource);
        }
    }
    /// Properties of the file share, including Id, resource name, resource type, Etag.
    public partial interface IFileShare :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResource
    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.",
        SerializedName = @"accessTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? PropertyAccessTier { get; set; }
        /// <summary>Indicates the last modification time for share access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates the last modification time for share access tier.",
        SerializedName = @"accessTierChangeTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PropertyAccessTierChangeTime { get;  }
        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates if there is a pending transition for access tier.",
        SerializedName = @"accessTierStatus",
        PossibleTypes = new [] { typeof(string) })]
        string PropertyAccessTierStatus { get;  }
        /// <summary>Indicates whether the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether the share was deleted.",
        SerializedName = @"deleted",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PropertyDeleted { get;  }
        /// <summary>The deleted time if the share was deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The deleted time if the share was deleted.",
        SerializedName = @"deletedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PropertyDeletedTime { get;  }
        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The authentication protocol that is used for the file share. Can only be specified when creating a share.",
        SerializedName = @"enabledProtocols",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? PropertyEnabledProtocol { get; set; }
        /// <summary>Returns the date and time the share was last modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Returns the date and time the share was last modified.",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PropertyLastModifiedTime { get;  }
        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.",
        SerializedName = @"leaseDuration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? PropertyLeaseDuration { get;  }
        /// <summary>Lease state of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Lease state of the share.",
        SerializedName = @"leaseState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? PropertyLeaseState { get;  }
        /// <summary>The lease status of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lease status of the share.",
        SerializedName = @"leaseStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? PropertyLeaseStatus { get;  }
        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A name-value pair to associate with the share as metadata.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata PropertyMetadata { get; set; }
        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Remaining retention days for share that was soft deleted.",
        SerializedName = @"remainingRetentionDays",
        PossibleTypes = new [] { typeof(int) })]
        int? PropertyRemainingRetentionDay { get;  }
        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The property is for NFS share only. The default is NoRootSquash.",
        SerializedName = @"rootSquash",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? PropertyRootSquash { get; set; }
        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.",
        SerializedName = @"shareQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? PropertyShareQuota { get; set; }
        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.",
        SerializedName = @"shareUsageBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? PropertyShareUsageByte { get;  }
        /// <summary>List of stored access policies specified on the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of stored access policies specified on the share.",
        SerializedName = @"signedIdentifiers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] PropertySignedIdentifier { get; set; }
        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Creation time of share snapshot returned in the response of list shares with expand param ""snapshots"".",
        SerializedName = @"snapshotTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PropertySnapshotTime { get;  }
        /// <summary>The version of the share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The version of the share.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string PropertyVersion { get;  }

    }
    /// Properties of the file share, including Id, resource name, resource type, Etag.
    internal partial interface IFileShareInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api10.IAzureEntityResourceInternal
    {
        /// <summary>Properties of the file share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileShareProperties Property { get; set; }
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage
        /// account can choose Premium.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.ShareAccessTier? PropertyAccessTier { get; set; }
        /// <summary>Indicates the last modification time for share access tier.</summary>
        global::System.DateTime? PropertyAccessTierChangeTime { get; set; }
        /// <summary>Indicates if there is a pending transition for access tier.</summary>
        string PropertyAccessTierStatus { get; set; }
        /// <summary>Indicates whether the share was deleted.</summary>
        bool? PropertyDeleted { get; set; }
        /// <summary>The deleted time if the share was deleted.</summary>
        global::System.DateTime? PropertyDeletedTime { get; set; }
        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.EnabledProtocols? PropertyEnabledProtocol { get; set; }
        /// <summary>Returns the date and time the share was last modified.</summary>
        global::System.DateTime? PropertyLastModifiedTime { get; set; }
        /// <summary>
        /// Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseDuration? PropertyLeaseDuration { get; set; }
        /// <summary>Lease state of the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseState? PropertyLeaseState { get; set; }
        /// <summary>The lease status of the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.LeaseStatus? PropertyLeaseStatus { get; set; }
        /// <summary>A name-value pair to associate with the share as metadata.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.IFileSharePropertiesMetadata PropertyMetadata { get; set; }
        /// <summary>Remaining retention days for share that was soft deleted.</summary>
        int? PropertyRemainingRetentionDay { get; set; }
        /// <summary>The property is for NFS share only. The default is NoRootSquash.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.RootSquashType? PropertyRootSquash { get; set; }
        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File
        /// Shares, the maximum size is 102400.
        /// </summary>
        int? PropertyShareQuota { get; set; }
        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently
        /// resized files.
        /// </summary>
        long? PropertyShareUsageByte { get; set; }
        /// <summary>List of stored access policies specified on the share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api20210901.ISignedIdentifier[] PropertySignedIdentifier { get; set; }
        /// <summary>
        /// Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
        /// </summary>
        global::System.DateTime? PropertySnapshotTime { get; set; }
        /// <summary>The version of the share.</summary>
        string PropertyVersion { get; set; }

    }
}