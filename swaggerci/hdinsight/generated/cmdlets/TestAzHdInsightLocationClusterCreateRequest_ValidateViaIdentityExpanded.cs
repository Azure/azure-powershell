// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Extensions;
    using System;

    /// <summary>Validate the cluster create request spec is valid or not.</summary>
    /// <remarks>
    /// [OpenAPI] ValidateClusterCreateRequest=>POST:"/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsDiagnostic.Test, @"AzHdInsightLocationClusterCreateRequest_ValidateViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Description(@"Validate the cluster create request spec is valid or not.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Generated]
    public partial class TestAzHdInsightLocationClusterCreateRequest_ValidateViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>The cluster create request specification.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateRequestValidationParameters _parametersBody = new Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.ClusterCreateRequestValidationParameters();

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.HdInsightManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Module.Instance.ClientAPI;

        /// <summary>The AAD security group id.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The AAD security group id.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AAD security group id.",
        SerializedName = @"groupId",
        PossibleTypes = new [] { typeof(string) })]
        public string ClientGroupInfoGroupId { get => _parametersBody.ClientGroupInfoGroupId ?? null; set => _parametersBody.ClientGroupInfoGroupId = value; }

        /// <summary>The AAD security group name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The AAD security group name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AAD security group name.",
        SerializedName = @"groupName",
        PossibleTypes = new [] { typeof(string) })]
        public string ClientGroupInfoGroupName { get => _parametersBody.ClientGroupInfoGroupName ?? null; set => _parametersBody.ClientGroupInfoGroupName = value; }

        /// <summary>The link to the blueprint.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The link to the blueprint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The link to the blueprint.",
        SerializedName = @"blueprint",
        PossibleTypes = new [] { typeof(string) })]
        public string ClusterDefinitionBlueprint { get => _parametersBody.ClusterDefinitionBlueprint ?? null; set => _parametersBody.ClusterDefinitionBlueprint = value; }

        /// <summary>The versions of different services in the cluster.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The versions of different services in the cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The versions of different services in the cluster.",
        SerializedName = @"componentVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterDefinitionComponentVersion) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterDefinitionComponentVersion ClusterDefinitionComponentVersion { get => _parametersBody.ClusterDefinitionComponentVersion ?? null /* object */; set => _parametersBody.ClusterDefinitionComponentVersion = value; }

        /// <summary>The cluster configurations.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The cluster configurations.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cluster configurations.",
        SerializedName = @"configurations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.IAny) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.IAny ClusterDefinitionConfiguration { get => _parametersBody.ClusterDefinitionConfiguration ?? null /* object */; set => _parametersBody.ClusterDefinitionConfiguration = value; }

        /// <summary>The type of cluster.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of cluster.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        public string ClusterDefinitionKind { get => _parametersBody.ClusterDefinitionKind ?? null; set => _parametersBody.ClusterDefinitionKind = value; }

        /// <summary>The version of the cluster.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The version of the cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the cluster.",
        SerializedName = @"clusterVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string ClusterVersion { get => _parametersBody.ClusterVersion ?? null; set => _parametersBody.ClusterVersion = value; }

        /// <summary>The flag indicates whether enable compute isolation or not.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The flag indicates whether enable compute isolation or not.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag indicates whether enable compute isolation or not.",
        SerializedName = @"enableComputeIsolation",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter ComputeIsolationPropertyEnableComputeIsolation { get => _parametersBody.ComputeIsolationPropertyEnableComputeIsolation ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.ComputeIsolationPropertyEnableComputeIsolation = value; }

        /// <summary>The host sku.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The host sku.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The host sku.",
        SerializedName = @"hostSku",
        PossibleTypes = new [] { typeof(string) })]
        public string ComputeIsolationPropertyHostSku { get => _parametersBody.ComputeIsolationPropertyHostSku ?? null; set => _parametersBody.ComputeIsolationPropertyHostSku = value; }

        /// <summary>The list of roles in the cluster.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of roles in the cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of roles in the cluster.",
        SerializedName = @"roles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IRole) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IRole[] ComputeProfileRole { get => _parametersBody.ComputeProfileRole ?? null /* arrayOf */; set => _parametersBody.ComputeProfileRole = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Algorithm identifier for encryption, default RSA-OAEP.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Algorithm identifier for encryption, default RSA-OAEP.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Algorithm identifier for encryption, default RSA-OAEP.",
        SerializedName = @"encryptionAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.JsonWebKeyEncryptionAlgorithm) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.JsonWebKeyEncryptionAlgorithm))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.JsonWebKeyEncryptionAlgorithm DiskEncryptionPropertyEncryptionAlgorithm { get => _parametersBody.DiskEncryptionPropertyEncryptionAlgorithm ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.JsonWebKeyEncryptionAlgorithm)""); set => _parametersBody.DiskEncryptionPropertyEncryptionAlgorithm = value; }

        /// <summary>Indicates whether or not resource disk encryption is enabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether or not resource disk encryption is enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not resource disk encryption is enabled.",
        SerializedName = @"encryptionAtHost",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DiskEncryptionPropertyEncryptionAtHost { get => _parametersBody.DiskEncryptionPropertyEncryptionAtHost ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.DiskEncryptionPropertyEncryptionAtHost = value; }

        /// <summary>Key name that is used for enabling disk encryption.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Key name that is used for enabling disk encryption.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key name that is used for enabling disk encryption.",
        SerializedName = @"keyName",
        PossibleTypes = new [] { typeof(string) })]
        public string DiskEncryptionPropertyKeyName { get => _parametersBody.DiskEncryptionPropertyKeyName ?? null; set => _parametersBody.DiskEncryptionPropertyKeyName = value; }

        /// <summary>Specific key version that is used for enabling disk encryption.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specific key version that is used for enabling disk encryption.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specific key version that is used for enabling disk encryption.",
        SerializedName = @"keyVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string DiskEncryptionPropertyKeyVersion { get => _parametersBody.DiskEncryptionPropertyKeyVersion ?? null; set => _parametersBody.DiskEncryptionPropertyKeyVersion = value; }

        /// <summary>Resource ID of Managed Identity that is used to access the key vault.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource ID of Managed Identity that is used to access the key vault.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of Managed Identity that is used to access the key vault.",
        SerializedName = @"msiResourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string DiskEncryptionPropertyMsiResourceId { get => _parametersBody.DiskEncryptionPropertyMsiResourceId ?? null; set => _parametersBody.DiskEncryptionPropertyMsiResourceId = value; }

        /// <summary>
        /// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net",
        SerializedName = @"vaultUri",
        PossibleTypes = new [] { typeof(string) })]
        public string DiskEncryptionPropertyVaultUri { get => _parametersBody.DiskEncryptionPropertyVaultUri ?? null; set => _parametersBody.DiskEncryptionPropertyVaultUri = value; }

        /// <summary>
        /// Indicates whether or not inter cluster node communication is encrypted in transit.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether or not inter cluster node communication is encrypted in transit.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not inter cluster node communication is encrypted in transit.",
        SerializedName = @"isEncryptionInTransitEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EncryptionInTransitPropertyIsEncryptionInTransitEnabled { get => _parametersBody.EncryptionInTransitPropertyIsEncryptionInTransitEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.EncryptionInTransitPropertyIsEncryptionInTransitEnabled = value; }

        /// <summary>This indicates whether fetch Aadds resource or not.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This indicates whether fetch Aadds resource or not.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This indicates whether fetch Aadds resource or not.",
        SerializedName = @"fetchAaddsResource",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter FetchAaddsResource { get => _parametersBody.FetchAaddsResource ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.FetchAaddsResource = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created
        /// identity and a set of user assigned identities.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceIdentityType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceIdentityType))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceIdentityType IdentityType { get => _parametersBody.IdentityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceIdentityType)""); set => _parametersBody.IdentityType = value; }

        /// <summary>
        /// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource
        /// ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterIdentityUserAssignedIdentities) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => _parametersBody.IdentityUserAssignedIdentity ?? null /* object */; set => _parametersBody.IdentityUserAssignedIdentity = value; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.IHdInsightIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.IHdInsightIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The configurations that need to be overriden.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The configurations that need to be overriden.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The configurations that need to be overriden.",
        SerializedName = @"configurationOverride",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IKafkaRestPropertiesConfigurationOverride) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IKafkaRestPropertiesConfigurationOverride KafkaRestPropertyConfigurationOverride { get => _parametersBody.KafkaRestPropertyConfigurationOverride ?? null /* object */; set => _parametersBody.KafkaRestPropertyConfigurationOverride = value; }

        /// <summary>The location of the cluster.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the cluster.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _parametersBody.Location ?? null; set => _parametersBody.Location = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>The minimal supported tls version.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The minimal supported tls version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimal supported tls version.",
        SerializedName = @"minSupportedTlsVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string MinSupportedTlsVersion { get => _parametersBody.MinSupportedTlsVersion ?? null; set => _parametersBody.MinSupportedTlsVersion = value; }

        /// <summary>The cluster name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The cluster name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cluster name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string Name { get => _parametersBody.Name ?? null; set => _parametersBody.Name = value; }

        /// <summary>Indicates whether or not private link is enabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether or not private link is enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not private link is enabled.",
        SerializedName = @"privateLink",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.PrivateLink) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.PrivateLink))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.PrivateLink NetworkPropertyPrivateLink { get => _parametersBody.NetworkPropertyPrivateLink ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.PrivateLink)""); set => _parametersBody.NetworkPropertyPrivateLink = value; }

        /// <summary>The direction for the resource provider connection.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The direction for the resource provider connection.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The direction for the resource provider connection.",
        SerializedName = @"resourceProviderConnection",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceProviderConnection) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceProviderConnection))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceProviderConnection NetworkPropertyResourceProviderConnection { get => _parametersBody.NetworkPropertyResourceProviderConnection ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.ResourceProviderConnection)""); set => _parametersBody.NetworkPropertyResourceProviderConnection = value; }

        /// <summary>The type of operating system.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of operating system.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of operating system.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.OSType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.OSType))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.OSType OSType { get => _parametersBody.OSType ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.OSType)""); set => _parametersBody.OSType = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The private link configurations.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The private link configurations.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The private link configurations.",
        SerializedName = @"privateLinkConfigurations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IPrivateLinkConfiguration) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IPrivateLinkConfiguration[] PrivateLinkConfiguration { get => _parametersBody.PrivateLinkConfiguration ?? null /* arrayOf */; set => _parametersBody.PrivateLinkConfiguration = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The resource ID of the user's Azure Active Directory Domain Service.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the user's Azure Active Directory Domain Service.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the user's Azure Active Directory Domain Service.",
        SerializedName = @"aaddsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string SecurityProfileAaddsResourceId { get => _parametersBody.SecurityProfileAaddsResourceId ?? null; set => _parametersBody.SecurityProfileAaddsResourceId = value; }

        /// <summary>Optional. The Distinguished Names for cluster user groups</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional. The Distinguished Names for cluster user groups")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional. The Distinguished Names for cluster user groups",
        SerializedName = @"clusterUsersGroupDNs",
        PossibleTypes = new [] { typeof(string) })]
        public string[] SecurityProfileClusterUsersGroupDN { get => _parametersBody.SecurityProfileClusterUsersGroupDN ?? null /* arrayOf */; set => _parametersBody.SecurityProfileClusterUsersGroupDN = value; }

        /// <summary>The directory type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The directory type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The directory type.",
        SerializedName = @"directoryType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.DirectoryType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.DirectoryType))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.DirectoryType SecurityProfileDirectoryType { get => _parametersBody.SecurityProfileDirectoryType ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.DirectoryType)""); set => _parametersBody.SecurityProfileDirectoryType = value; }

        /// <summary>The organization's active directory domain.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The organization's active directory domain.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The organization's active directory domain.",
        SerializedName = @"domain",
        PossibleTypes = new [] { typeof(string) })]
        public string SecurityProfileDomain { get => _parametersBody.SecurityProfileDomain ?? null; set => _parametersBody.SecurityProfileDomain = value; }

        /// <summary>The domain admin password.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The domain admin password.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The domain admin password.",
        SerializedName = @"domainUserPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        public System.Security.SecureString SecurityProfileDomainUserPassword { get => _parametersBody.SecurityProfileDomainUserPassword ?? null; set => _parametersBody.SecurityProfileDomainUserPassword = value; }

        /// <summary>The domain user account that will have admin privileges on the cluster.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The domain user account that will have admin privileges on the cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The domain user account that will have admin privileges on the cluster.",
        SerializedName = @"domainUsername",
        PossibleTypes = new [] { typeof(string) })]
        public string SecurityProfileDomainUsername { get => _parametersBody.SecurityProfileDomainUsername ?? null; set => _parametersBody.SecurityProfileDomainUsername = value; }

        /// <summary>The LDAPS protocol URLs to communicate with the Active Directory.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The LDAPS protocol URLs to communicate with the Active Directory.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The LDAPS protocol URLs to communicate with the Active Directory.",
        SerializedName = @"ldapsUrls",
        PossibleTypes = new [] { typeof(string) })]
        public string[] SecurityProfileLdapsUrl { get => _parametersBody.SecurityProfileLdapsUrl ?? null /* arrayOf */; set => _parametersBody.SecurityProfileLdapsUrl = value; }

        /// <summary>
        /// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.",
        SerializedName = @"msiResourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string SecurityProfileMsiResourceId { get => _parametersBody.SecurityProfileMsiResourceId ?? null; set => _parametersBody.SecurityProfileMsiResourceId = value; }

        /// <summary>
        /// The organizational unit within the Active Directory to place the cluster and service accounts.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The organizational unit within the Active Directory to place the cluster and service accounts.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The organizational unit within the Active Directory to place the cluster and service accounts.",
        SerializedName = @"organizationalUnitDN",
        PossibleTypes = new [] { typeof(string) })]
        public string SecurityProfileOrganizationalUnitDn { get => _parametersBody.SecurityProfileOrganizationalUnitDn ?? null; set => _parametersBody.SecurityProfileOrganizationalUnitDn = value; }

        /// <summary>The list of storage accounts in the cluster.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of storage accounts in the cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of storage accounts in the cluster.",
        SerializedName = @"storageaccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IStorageAccount) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IStorageAccount[] StorageProfileStorageaccount { get => _parametersBody.StorageProfileStorageaccount ?? null /* arrayOf */; set => _parametersBody.StorageProfileStorageaccount = value; }

        /// <summary>The resource tags.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource tags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateParametersExtendedTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateParametersExtendedTags Tag { get => _parametersBody.Tag ?? null /* object */; set => _parametersBody.Tag = value; }

        /// <summary>The tenant id.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The tenant id.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tenant id.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string TenantId { get => _parametersBody.TenantId ?? null; set => _parametersBody.TenantId = value; }

        /// <summary>The cluster tier.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The cluster tier.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cluster tier.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.Tier) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.Tier))]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.Tier Tier { get => _parametersBody.Tier ?? ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Support.Tier)""); set => _parametersBody.Tier = value; }

        /// <summary>The resource type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        public string Type { get => _parametersBody.Type ?? null; set => _parametersBody.Type = value; }

        /// <summary>The availability zones.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The availability zones.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category(global::Microsoft.Azure.PowerShell.Cmdlets.HdInsight.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The availability zones.",
        SerializedName = @"zones",
        PossibleTypes = new [] { typeof(string) })]
        public string[] Zone { get => _parametersBody.Zone ?? null /* arrayOf */; set => _parametersBody.Zone = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult">Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'LocationsValidateClusterCreateRequest' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.LocationsValidateClusterCreateRequestViaIdentity(InputObject.Id, _parametersBody, onOk, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.Location)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.Location"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.LocationsValidateClusterCreateRequest(InputObject.SubscriptionId ?? null, InputObject.Location ?? null, _parametersBody, onOk, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=_parametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="TestAzHdInsightLocationClusterCreateRequest_ValidateViaIdentityExpanded" />
        /// cmdlet class.
        /// </summary>
        public TestAzHdInsightLocationClusterCreateRequest_ValidateViaIdentityExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_parametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_parametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult">Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IClusterCreateValidationResult
                WriteObject((await response));
            }
        }
    }
}