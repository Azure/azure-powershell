
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates applications for the HDInsight cluster.
.Description
Creates applications for the HDInsight cluster.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IApplication
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

COMPUTEPROFILEROLE <IRole[]>: The list of roles in the cluster.
  [CapacityMaxInstanceCount <Int32?>]: The maximum instance count of the cluster
  [CapacityMinInstanceCount <Int32?>]: The minimum instance count of the cluster
  [DataDisksGroup <IDataDisksGroups[]>]: The data disks groups for the role.
    [DisksPerNode <Int32?>]: The number of disks per node.
  [EncryptDataDisk <Boolean?>]: Indicates whether encrypt the data disks.
  [HardwareProfileVMSize <String>]: The size of the VM
  [LinuxOperatingSystemProfilePassword <String>]: The password.
  [LinuxOperatingSystemProfileUsername <String>]: The username.
  [MinInstanceCount <Int32?>]: The minimum instance count of the cluster.
  [Name <String>]: The name of the role.
  [RecurrenceSchedule <IAutoscaleSchedule[]>]: Array of schedule-based autoscale rules
    [Day <DaysOfWeek[]>]: Days of the week for a schedule-based autoscale rule
    [TimeAndCapacityMaxInstanceCount <Int32?>]: The maximum instance count of the cluster
    [TimeAndCapacityMinInstanceCount <Int32?>]: The minimum instance count of the cluster
    [TimeAndCapacityTime <String>]: 24-hour time in the form xx:xx
  [RecurrenceTimeZone <String>]: The time zone for the autoscale schedule times
  [ScriptAction <IScriptAction[]>]: The list of script actions on the role.
    Name <String>: The name of the script action.
    Parameter <String>: The parameters for the script provided.
    Uri <String>: The URI to the script.
  [SshProfilePublicKey <ISshPublicKey[]>]: The list of SSH public keys.
    [CertificateData <String>]: The certificate for SSH.
  [TargetInstanceCount <Int32?>]: The instance count of the cluster.
  [VMGroupName <String>]: The name of the virtual machine group.
  [VirtualNetworkProfileId <String>]: The ID of the virtual network.
  [VirtualNetworkProfileSubnet <String>]: The name of the subnet.

ERROR <IErrors[]>: The list of errors.
  [Code <String>]: The error code.
  [Message <String>]: The error message.

HTTPSENDPOINT <IApplicationGetHttpsEndpoint[]>: The list of application HTTPS endpoints.
  [AccessMode <String[]>]: The list of access modes for the application.
  [DestinationPort <Int32?>]: The destination port to connect to.
  [DisableGatewayAuth <Boolean?>]: The value indicates whether to disable GatewayAuth.
  [PrivateIPAddress <String>]: The private ip address of the endpoint.
  [SubDomainSuffix <String>]: The subdomain suffix of the application.

INSTALLSCRIPTACTION <IRuntimeScriptAction[]>: The list of install script actions.
  Name <String>: The name of the script action.
  Role <String[]>: The list of roles where script will be executed.
  Uri <String>: The URI to the script.
  [Parameter <String>]: The parameters for the script

PRIVATELINKCONFIGURATION <IPrivateLinkConfiguration[]>: The private link configurations.
  GroupId <String>: The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.
  IPConfiguration <IIPConfiguration[]>: The IP configurations for the private link service.
    Name <String>: The name of private link IP configuration.
    [Primary <Boolean?>]: Indicates whether this IP configuration is primary for the corresponding NIC.
    [PrivateIPAddress <String>]: The IP address.
    [PrivateIPAllocationMethod <PrivateIPAllocationMethod?>]: The method that private IP address is allocated.
    [SubnetId <String>]: The azure resource id.
  Name <String>: The name of private link configuration.

SSHENDPOINT <IApplicationGetEndpoint[]>: The list of application SSH endpoints.
  [DestinationPort <Int32?>]: The destination port to connect to.
  [Location <String>]: The location of the endpoint.
  [PrivateIPAddress <String>]: The private ip address of the endpoint.
  [PublicPort <Int32?>]: The public port to connect to.

UNINSTALLSCRIPTACTION <IRuntimeScriptAction[]>: The list of uninstall script actions.
  Name <String>: The name of the script action.
  Role <String[]>: The list of roles where script will be executed.
  Uri <String>: The URI to the script.
  [Parameter <String>]: The parameters for the script
.Link
https://docs.microsoft.com/en-us/powershell/module/az.hdinsight/new-azhdinsightapplication
#>
function New-AzHdInsightApplication {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IApplication])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Path')]
    [System.String]
    # The name of the cluster.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Alias('ApplicationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Path')]
    [System.String]
    # The constant value for the application name.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [System.String]
    # The application type.
    ${ApplicationType},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IRole[]]
    # The list of roles in the cluster.
    # To construct, see NOTES section for COMPUTEPROFILEROLE properties and create a hash table.
    ${ComputeProfileRole},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IErrors[]]
    # The list of errors.
    # To construct, see NOTES section for ERROR properties and create a hash table.
    ${Error},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [System.String]
    # The ETag for the application
    ${Etag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IApplicationGetHttpsEndpoint[]]
    # The list of application HTTPS endpoints.
    # To construct, see NOTES section for HTTPSENDPOINT properties and create a hash table.
    ${HttpsEndpoint},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IRuntimeScriptAction[]]
    # The list of install script actions.
    # To construct, see NOTES section for INSTALLSCRIPTACTION properties and create a hash table.
    ${InstallScriptAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IPrivateLinkConfiguration[]]
    # The private link configurations.
    # To construct, see NOTES section for PRIVATELINKCONFIGURATION properties and create a hash table.
    ${PrivateLinkConfiguration},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IApplicationGetEndpoint[]]
    # The list of application SSH endpoints.
    # To construct, see NOTES section for SSHENDPOINT properties and create a hash table.
    ${SshEndpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IApplicationTags]))]
    [System.Collections.Hashtable]
    # The tags for the application.
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Models.Api20210601.IRuntimeScriptAction[]]
    # The list of uninstall script actions.
    # To construct, see NOTES section for UNINSTALLSCRIPTACTION properties and create a hash table.
    ${UninstallScriptAction},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.HdInsight.private\New-AzHdInsightApplication_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.HdInsight.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
