// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>
    /// TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit).
    /// </summary>
    public partial class TlsEndpoint :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsEndpoint,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsEndpointInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase __endpointBase = new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.EndpointBase();

        /// <summary>Credentials to be presented to the endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICredentialsBase Credentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Credentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Credentials = value ; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string CredentialsType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).CredentialsType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).CredentialsType = value ; }

        /// <summary>Internal Acessors for TrustedCertificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICertificateSource Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsEndpointInternal.TrustedCertificate { get => (this._trustedCertificate = this._trustedCertificate ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.CertificateSource()); set { {_trustedCertificate = value;} } }

        /// <summary>Internal Acessors for ValidationOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptions Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsEndpointInternal.ValidationOption { get => (this._validationOption = this._validationOption ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.TlsValidationOptions()); set { {_validationOption = value;} } }

        /// <summary>Backing field for <see cref="TrustedCertificate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICertificateSource _trustedCertificate;

        /// <summary>
        /// List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video
        /// Analyzer's list of trusted authorities should be used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICertificateSource TrustedCertificate { get => (this._trustedCertificate = this._trustedCertificate ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.CertificateSource()); set => this._trustedCertificate = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string TrustedCertificateType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICertificateSourceInternal)TrustedCertificate).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICertificateSourceInternal)TrustedCertificate).Type = value ?? null; }

        /// <summary>
        /// Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically
        /// used when the endpoint is behind a firewall.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITunnelBase Tunnel { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Tunnel; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Tunnel = value ?? null /* model class */; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string TunnelType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).TunnelType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).TunnelType = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Type = value ; }

        /// <summary>The endpoint URL for Video Analyzer to connect to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Url { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)__endpointBase).Url = value ; }

        /// <summary>Backing field for <see cref="ValidationOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptions _validationOption;

        /// <summary>
        /// Validation options to use when authenticating a TLS connection. By default, strict validation is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptions ValidationOption { get => (this._validationOption = this._validationOption ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.TlsValidationOptions()); set => this._validationOption = value; }

        /// <summary>
        /// When set to 'true' causes the certificate subject name validation to be skipped. Default is 'false'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ValidationOptionIgnoreHostname { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptionsInternal)ValidationOption).IgnoreHostname; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptionsInternal)ValidationOption).IgnoreHostname = value ?? null; }

        /// <summary>
        /// When set to 'true' causes the certificate chain trust validation to be skipped. Default is 'false'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ValidationOptionIgnoreSignature { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptionsInternal)ValidationOption).IgnoreSignature; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptionsInternal)ValidationOption).IgnoreSignature = value ?? null; }

        /// <summary>Creates an new <see cref="TlsEndpoint" /> instance.</summary>
        public TlsEndpoint()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__endpointBase), __endpointBase);
            await eventListener.AssertObjectIsValid(nameof(__endpointBase), __endpointBase);
        }
    }
    /// TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit).
    public partial interface ITlsEndpoint :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase
    {
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string TrustedCertificateType { get; set; }
        /// <summary>
        /// When set to 'true' causes the certificate subject name validation to be skipped. Default is 'false'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When set to 'true' causes the certificate subject name validation to be skipped. Default is 'false'.",
        SerializedName = @"ignoreHostname",
        PossibleTypes = new [] { typeof(string) })]
        string ValidationOptionIgnoreHostname { get; set; }
        /// <summary>
        /// When set to 'true' causes the certificate chain trust validation to be skipped. Default is 'false'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When set to 'true' causes the certificate chain trust validation to be skipped. Default is 'false'.",
        SerializedName = @"ignoreSignature",
        PossibleTypes = new [] { typeof(string) })]
        string ValidationOptionIgnoreSignature { get; set; }

    }
    /// TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit).
    internal partial interface ITlsEndpointInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal
    {
        /// <summary>
        /// List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video
        /// Analyzer's list of trusted authorities should be used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICertificateSource TrustedCertificate { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string TrustedCertificateType { get; set; }
        /// <summary>
        /// Validation options to use when authenticating a TLS connection. By default, strict validation is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITlsValidationOptions ValidationOption { get; set; }
        /// <summary>
        /// When set to 'true' causes the certificate subject name validation to be skipped. Default is 'false'.
        /// </summary>
        string ValidationOptionIgnoreHostname { get; set; }
        /// <summary>
        /// When set to 'true' causes the certificate chain trust validation to be skipped. Default is 'false'.
        /// </summary>
        string ValidationOptionIgnoreSignature { get; set; }

    }
}