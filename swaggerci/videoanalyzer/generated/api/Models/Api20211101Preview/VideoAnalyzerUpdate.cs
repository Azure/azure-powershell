// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>The update operation for a Video Analyzer account.</summary>
    public partial class VideoAnalyzerUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal
    {

        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? ConsumptionPublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).ConsumptionPublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).ConsumptionPublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess)""); }

        /// <summary>The current status of the Key Vault mapping.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionStatus; }

        /// <summary>The type of key used to encrypt the Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.AccountEncryptionKeyType? EncryptionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.AccountEncryptionKeyType)""); }

        /// <summary>The endpoints associated with this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpoint[] Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).Endpoint; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentity _identity;

        /// <summary>The identities associated to the Video Analyzer resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoAnalyzerIdentity()); set => this._identity = value; }

        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>The User Assigned Managed Identities.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IUserAssignedManagedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? IngestionPublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IngestionPublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IngestionPublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess)""); }

        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? IntegrationPublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IntegrationPublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IntegrationPublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess)""); }

        /// <summary>The IoT Hubs for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IIotHub[] IotHub { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IotHub; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IotHub = value ?? null /* arrayOf */; }

        /// <summary>
        /// The current key used to encrypt Video Analyzer account, including the key version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyCurrentKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).KeyVaultPropertyCurrentKeyIdentifier; }

        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).KeyVaultPropertyKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).KeyVaultPropertyKeyIdentifier = value ?? null; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAccountEncryption Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.Encryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).Encryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).Encryption = value; }

        /// <summary>Internal Acessors for EncryptionIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IResourceIdentity Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.EncryptionIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionIdentity = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionKeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionKeyVaultProperty = value; }

        /// <summary>Internal Acessors for EncryptionStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).EncryptionStatus = value; }

        /// <summary>Internal Acessors for Endpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpoint[] Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).Endpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).Endpoint = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentity Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoAnalyzerIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for KeyVaultPropertyCurrentKeyIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.KeyVaultPropertyCurrentKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).KeyVaultPropertyCurrentKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).KeyVaultPropertyCurrentKeyIdentifier = value; }

        /// <summary>Internal Acessors for NetworkAccessControl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.INetworkAccessControl Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.NetworkAccessControl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControl = value; }

        /// <summary>Internal Acessors for NetworkAccessControlConsumption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IGroupLevelAccessControl Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.NetworkAccessControlConsumption { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControlConsumption; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControlConsumption = value; }

        /// <summary>Internal Acessors for NetworkAccessControlIngestion</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IGroupLevelAccessControl Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.NetworkAccessControlIngestion { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControlIngestion; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControlIngestion = value; }

        /// <summary>Internal Acessors for NetworkAccessControlIntegration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IGroupLevelAccessControl Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.NetworkAccessControlIntegration { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControlIntegration; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).NetworkAccessControlIntegration = value; }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IPrivateEndpointConnection[] Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).PrivateEndpointConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).PrivateEndpointConnection = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdate Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoAnalyzerPropertiesUpdate()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).ProvisioningState = value; }

        /// <summary>Private Endpoint Connections created under Video Analyzer account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IPrivateEndpointConnection[] PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).PrivateEndpointConnection; }

        /// <summary>
        /// The user assigned managed identity's resource identifier to use when accessing a resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PropertiesEncryptionIdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).IdentityUserAssignedIdentity = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdate _property;

        /// <summary>The resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdate Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoAnalyzerPropertiesUpdate()); set => this._property = value; }

        /// <summary>Provisioning state of the Video Analyzer account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).ProvisioningState; }

        /// <summary>
        /// Whether or not public network access is allowed for resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).PublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess)""); }

        /// <summary>The storage accounts for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IStorageAccount[] StorageAccount { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).StorageAccount; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdateInternal)Property).StorageAccount = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateTags _tag;

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoAnalyzerUpdateTags()); set => this._tag = value; }

        /// <summary>Creates an new <see cref="VideoAnalyzerUpdate" /> instance.</summary>
        public VideoAnalyzerUpdate()
        {

        }
    }
    /// The update operation for a Video Analyzer account.
    public partial interface IVideoAnalyzerUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for specified resources under the Video Analyzer account.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? ConsumptionPublicNetworkAccess { get; set; }
        /// <summary>The current status of the Key Vault mapping.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current status of the Key Vault mapping.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionStatus { get;  }
        /// <summary>The type of key used to encrypt the Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of key used to encrypt the Account Key.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.AccountEncryptionKeyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.AccountEncryptionKeyType? EncryptionType { get; set; }
        /// <summary>The endpoints associated with this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The endpoints associated with this resource.",
        SerializedName = @"endpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpoint) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpoint[] Endpoint { get;  }
        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityType { get; set; }
        /// <summary>The User Assigned Managed Identities.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The User Assigned Managed Identities.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IUserAssignedManagedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IUserAssignedManagedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for specified resources under the Video Analyzer account.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? IngestionPublicNetworkAccess { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for specified resources under the Video Analyzer account.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? IntegrationPublicNetworkAccess { get; set; }
        /// <summary>The IoT Hubs for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IoT Hubs for this resource.",
        SerializedName = @"iotHubs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IIotHub) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IIotHub[] IotHub { get; set; }
        /// <summary>
        /// The current key used to encrypt Video Analyzer account, including the key version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current key used to encrypt Video Analyzer account, including the key version.",
        SerializedName = @"currentKeyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyCurrentKeyIdentifier { get;  }
        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).",
        SerializedName = @"keyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>Private Endpoint Connections created under Video Analyzer account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Private Endpoint Connections created under Video Analyzer account.",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IPrivateEndpointConnection[] PrivateEndpointConnection { get;  }
        /// <summary>
        /// The user assigned managed identity's resource identifier to use when accessing a resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user assigned managed identity's resource identifier to use when accessing a resource.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string PropertiesEncryptionIdentityUserAssignedIdentity { get; set; }
        /// <summary>Provisioning state of the Video Analyzer account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the Video Analyzer account.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// Whether or not public network access is allowed for resources under the Video Analyzer account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public network access is allowed for resources under the Video Analyzer account.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The storage accounts for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage accounts for this resource.",
        SerializedName = @"storageAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IStorageAccount) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IStorageAccount[] StorageAccount { get; set; }
        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateTags Tag { get; set; }

    }
    /// The update operation for a Video Analyzer account.
    internal partial interface IVideoAnalyzerUpdateInternal

    {
        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? ConsumptionPublicNetworkAccess { get; set; }
        /// <summary>The account encryption properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAccountEncryption Encryption { get; set; }
        /// <summary>The Key Vault identity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IResourceIdentity EncryptionIdentity { get; set; }
        /// <summary>The properties of the key used to encrypt the account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>The current status of the Key Vault mapping.</summary>
        string EncryptionStatus { get; set; }
        /// <summary>The type of key used to encrypt the Account Key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.AccountEncryptionKeyType? EncryptionType { get; set; }
        /// <summary>The endpoints associated with this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpoint[] Endpoint { get; set; }
        /// <summary>The identities associated to the Video Analyzer resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerIdentity Identity { get; set; }
        /// <summary>The identity type.</summary>
        string IdentityType { get; set; }
        /// <summary>The User Assigned Managed Identities.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IUserAssignedManagedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? IngestionPublicNetworkAccess { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? IntegrationPublicNetworkAccess { get; set; }
        /// <summary>The IoT Hubs for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IIotHub[] IotHub { get; set; }
        /// <summary>
        /// The current key used to encrypt Video Analyzer account, including the key version.
        /// </summary>
        string KeyVaultPropertyCurrentKeyIdentifier { get; set; }
        /// <summary>
        /// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
        /// or reference a key without a version (for example https://vault/keys/mykey).
        /// </summary>
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>Network access control for Video Analyzer.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.INetworkAccessControl NetworkAccessControl { get; set; }
        /// <summary>Public network access for consumption group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IGroupLevelAccessControl NetworkAccessControlConsumption { get; set; }
        /// <summary>Public network access for ingestion group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IGroupLevelAccessControl NetworkAccessControlIngestion { get; set; }
        /// <summary>Public network access for integration group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IGroupLevelAccessControl NetworkAccessControlIntegration { get; set; }
        /// <summary>Private Endpoint Connections created under Video Analyzer account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>
        /// The user assigned managed identity's resource identifier to use when accessing a resource.
        /// </summary>
        string PropertiesEncryptionIdentityUserAssignedIdentity { get; set; }
        /// <summary>The resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerPropertiesUpdate Property { get; set; }
        /// <summary>Provisioning state of the Video Analyzer account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Whether or not public network access is allowed for resources under the Video Analyzer account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>The storage accounts for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IStorageAccount[] StorageAccount { get; set; }
        /// <summary>Resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoAnalyzerUpdateTags Tag { get; set; }

    }
}