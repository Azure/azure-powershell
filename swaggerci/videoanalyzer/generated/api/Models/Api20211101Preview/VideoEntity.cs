// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>
    /// Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines
    /// or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through
    /// live pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be
    /// downloaded as MP4 files.
    /// </summary>
    public partial class VideoEntity :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntity,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.Resource();

        /// <summary>
        /// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
        /// It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example,
        /// if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at
        /// any time and the new desired retention period will be effective within 24 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ArchivalRetentionPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ArchivalRetentionPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ArchivalRetentionPeriod = value ?? null; }

        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ContentUrlArchiveBaseUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlArchiveBaseUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlArchiveBaseUrl = value ?? null; }

        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ContentUrlDownloadUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlDownloadUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlDownloadUrl = value ?? null; }

        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ContentUrlRtspTunnelUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlRtspTunnelUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlRtspTunnelUrl = value ?? null; }

        /// <summary>
        /// Optional video description provided by the user. Value can be up to 2048 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Description = value ?? null; }

        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public bool? FlagCanStream { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).FlagCanStream; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).FlagCanStream = value ?? default(bool); }

        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public bool? FlagHasData { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).FlagHasData; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).FlagHasData = value ?? default(bool); }

        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public bool? FlagIsInUse { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).FlagIsInUse; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).FlagIsInUse = value ?? default(bool); }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Id; }

        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string MediaInfoSegmentLength { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).MediaInfoSegmentLength; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).MediaInfoSegmentLength = value ?? null; }

        /// <summary>Internal Acessors for Archival</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchival Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.Archival { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Archival; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Archival = value; }

        /// <summary>Internal Acessors for ContentUrl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.ContentUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrl = value; }

        /// <summary>Internal Acessors for ContentUrlPreviewImageUrl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.ContentUrlPreviewImageUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlPreviewImageUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).ContentUrlPreviewImageUrl = value; }

        /// <summary>Internal Acessors for Flag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.Flag { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Flag; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Flag = value; }

        /// <summary>Internal Acessors for MediaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.MediaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).MediaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).MediaInfo = value; }

        /// <summary>Internal Acessors for PropertiesType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.PropertiesType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoProperties Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEntityInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Name; }

        /// <summary>High resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlLarge { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).PreviewImageUrlLarge; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).PreviewImageUrlLarge = value ?? null; }

        /// <summary>Medium resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlMedium { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).PreviewImageUrlMedium; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).PreviewImageUrlMedium = value ?? null; }

        /// <summary>Low resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlSmall { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).PreviewImageUrlSmall; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).PreviewImageUrlSmall = value ?? null; }

        /// <summary>
        /// Video content type. Different content types are suitable for different applications and scenarios.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? PropertiesType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Type; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoProperties _property;

        /// <summary>The resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoProperties()); set => this._property = value; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.CreatedByType)""); }

        /// <summary>
        /// Optional video title provided by the user. Value can be up to 256 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string Title { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Title; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal)Property).Title = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal)__resource).Type; }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }

        /// <summary>Creates an new <see cref="VideoEntity" /> instance.</summary>
        public VideoEntity()
        {

        }
    }
    /// Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines
    /// or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through
    /// live pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be
    /// downloaded as MP4 files.
    public partial interface IVideoEntity :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResource
    {
        /// <summary>
        /// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
        /// It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example,
        /// if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at
        /// any time and the new desired retention period will be effective within 24 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage. It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example, if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at any time and the new desired retention period will be effective within 24 hours.",
        SerializedName = @"retentionPeriod",
        PossibleTypes = new [] { typeof(string) })]
        string ArchivalRetentionPeriod { get; set; }
        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible DASH or HLS players by appending the following to the base URL:

            - HLSv4:     /manifest(format=m3u8-aapl).m3u8
            - HLS CMAF:  /manifest(format=m3u8-cmaf)
            - DASH CMAF: /manifest(format=mpd-time-cmaf)

            Moreover, an ongoing video recording can be played in ""live mode"" with latencies which are approximately double of the chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.",
        SerializedName = @"archiveBaseUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrlArchiveBaseUrl { get; set; }
        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video file download URL. This URL can be used in conjunction with the video content authorization token to download the video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type is 'file' and video file is available for consumption.",
        SerializedName = @"downloadUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrlDownloadUrl { get; set; }
        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.",
        SerializedName = @"rtspTunnelUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrlRtspTunnelUrl { get; set; }
        /// <summary>
        /// Optional video description provided by the user. Value can be up to 2048 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional video description provided by the user. Value can be up to 2048 characters long.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value indicating whether or not the video can be streamed. Only ""archive"" type videos can be streamed.",
        SerializedName = @"canStream",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FlagCanStream { get; set; }
        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false.",
        SerializedName = @"hasData",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FlagHasData { get; set; }
        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time.",
        SerializedName = @"isInUse",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FlagIsInUse { get; set; }
        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration format (i.e. ""PT30S"" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.",
        SerializedName = @"segmentLength",
        PossibleTypes = new [] { typeof(string) })]
        string MediaInfoSegmentLength { get; set; }
        /// <summary>High resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"High resolution preview image URL.",
        SerializedName = @"large",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlLarge { get; set; }
        /// <summary>Medium resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Medium resolution preview image URL.",
        SerializedName = @"medium",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlMedium { get; set; }
        /// <summary>Low resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Low resolution preview image URL.",
        SerializedName = @"small",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlSmall { get; set; }
        /// <summary>
        /// Video content type. Different content types are suitable for different applications and scenarios.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Video content type. Different content types are suitable for different applications and scenarios.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? PropertiesType { get;  }
        /// <summary>
        /// Optional video title provided by the user. Value can be up to 256 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional video title provided by the user. Value can be up to 256 characters long.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        string Title { get; set; }

    }
    /// Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines
    /// or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through
    /// live pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be
    /// downloaded as MP4 files.
    internal partial interface IVideoEntityInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api30.IResourceInternal
    {
        /// <summary>Video archival properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchival Archival { get; set; }
        /// <summary>
        /// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
        /// It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example,
        /// if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at
        /// any time and the new desired retention period will be effective within 24 hours.
        /// </summary>
        string ArchivalRetentionPeriod { get; set; }
        /// <summary>Set of URLs to the video content.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls ContentUrl { get; set; }
        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        string ContentUrlArchiveBaseUrl { get; set; }
        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        string ContentUrlDownloadUrl { get; set; }
        /// <summary>
        /// Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download
        /// the most recent still image from the video archive in different resolutions. They are available when the video type is
        /// 'archive' and preview images are enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls ContentUrlPreviewImageUrl { get; set; }
        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        string ContentUrlRtspTunnelUrl { get; set; }
        /// <summary>
        /// Optional video description provided by the user. Value can be up to 2048 characters long.
        /// </summary>
        string Description { get; set; }
        /// <summary>
        /// Video flags contain information about the available video actions and its dynamic properties based on the current video
        /// state.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags Flag { get; set; }
        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        bool? FlagCanStream { get; set; }
        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        bool? FlagHasData { get; set; }
        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        bool? FlagIsInUse { get; set; }
        /// <summary>Contains information about the video and audio content.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo MediaInfo { get; set; }
        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        string MediaInfoSegmentLength { get; set; }
        /// <summary>High resolution preview image URL.</summary>
        string PreviewImageUrlLarge { get; set; }
        /// <summary>Medium resolution preview image URL.</summary>
        string PreviewImageUrlMedium { get; set; }
        /// <summary>Low resolution preview image URL.</summary>
        string PreviewImageUrlSmall { get; set; }
        /// <summary>
        /// Video content type. Different content types are suitable for different applications and scenarios.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? PropertiesType { get; set; }
        /// <summary>The resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoProperties Property { get; set; }
        /// <summary>
        /// Optional video title provided by the user. Value can be up to 256 characters long.
        /// </summary>
        string Title { get; set; }

    }
}