// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>
    /// RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a pipeline.
    /// </summary>
    public partial class RtspSource :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IRtspSource,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IRtspSourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase __sourceNodeBase = new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.SourceNodeBase();

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string CredentialsType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).CredentialsType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).CredentialsType = value ; }

        /// <summary>Backing field for <see cref="Endpoint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase _endpoint;

        /// <summary>
        /// RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video Analyzer
        /// to connect to RTSP cameras and/or generic RTSP servers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase Endpoint { get => (this._endpoint = this._endpoint ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.EndpointBase()); set => this._endpoint = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string EndpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Type = value ; }

        /// <summary>The endpoint URL for Video Analyzer to connect to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string EndpointUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Url = value ; }

        /// <summary>Internal Acessors for Endpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IRtspSourceInternal.Endpoint { get => (this._endpoint = this._endpoint ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.EndpointBase()); set { {_endpoint = value;} } }

        /// <summary>Internal Acessors for EndpointCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICredentialsBase Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IRtspSourceInternal.EndpointCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Credentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Credentials = value; }

        /// <summary>Internal Acessors for EndpointTunnel</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITunnelBase Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IRtspSourceInternal.EndpointTunnel { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Tunnel; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).Tunnel = value; }

        /// <summary>Node name. Must be unique within the topology.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.INodeBaseInternal)__sourceNodeBase).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.INodeBaseInternal)__sourceNodeBase).Name = value ; }

        /// <summary>Backing field for <see cref="Transport" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.RtspTransport? _transport;

        /// <summary>
        /// Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved
        /// on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and
        /// the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.RtspTransport? Transport { get => this._transport; set => this._transport = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string TunnelType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).TunnelType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBaseInternal)Endpoint).TunnelType = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.INodeBaseInternal)__sourceNodeBase).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.INodeBaseInternal)__sourceNodeBase).Type = value ; }

        /// <summary>Creates an new <see cref="RtspSource" /> instance.</summary>
        public RtspSource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__sourceNodeBase), __sourceNodeBase);
            await eventListener.AssertObjectIsValid(nameof(__sourceNodeBase), __sourceNodeBase);
        }
    }
    /// RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a pipeline.
    public partial interface IRtspSource :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase
    {
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsType { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointType { get; set; }
        /// <summary>The endpoint URL for Video Analyzer to connect to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The endpoint URL for Video Analyzer to connect to.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointUrl { get; set; }
        /// <summary>
        /// Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved
        /// on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and
        /// the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.",
        SerializedName = @"transport",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.RtspTransport) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.RtspTransport? Transport { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string TunnelType { get; set; }

    }
    /// RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a pipeline.
    internal partial interface IRtspSourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBaseInternal
    {
        /// <summary>The discriminator for derived types.</summary>
        string CredentialsType { get; set; }
        /// <summary>
        /// RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video Analyzer
        /// to connect to RTSP cameras and/or generic RTSP servers.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEndpointBase Endpoint { get; set; }
        /// <summary>Credentials to be presented to the endpoint.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ICredentialsBase EndpointCredentials { get; set; }
        /// <summary>
        /// Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically
        /// used when the endpoint is behind a firewall.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITunnelBase EndpointTunnel { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string EndpointType { get; set; }
        /// <summary>The endpoint URL for Video Analyzer to connect to.</summary>
        string EndpointUrl { get; set; }
        /// <summary>
        /// Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved
        /// on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and
        /// the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.RtspTransport? Transport { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string TunnelType { get; set; }

    }
}