// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>
    /// Video flags contain information about the available video actions and its dynamic properties based on the current video
    /// state.
    /// </summary>
    public partial class VideoFlags :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal
    {

        /// <summary>Backing field for <see cref="CanStream" /> property.</summary>
        private bool _canStream;

        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public bool CanStream { get => this._canStream; set => this._canStream = value; }

        /// <summary>Backing field for <see cref="HasData" /> property.</summary>
        private bool _hasData;

        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public bool HasData { get => this._hasData; set => this._hasData = value; }

        /// <summary>Backing field for <see cref="IsInUse" /> property.</summary>
        private bool _isInUse;

        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public bool IsInUse { get => this._isInUse; set => this._isInUse = value; }

        /// <summary>Creates an new <see cref="VideoFlags" /> instance.</summary>
        public VideoFlags()
        {

        }
    }
    /// Video flags contain information about the available video actions and its dynamic properties based on the current video
    /// state.
    public partial interface IVideoFlags :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Value indicating whether or not the video can be streamed. Only ""archive"" type videos can be streamed.",
        SerializedName = @"canStream",
        PossibleTypes = new [] { typeof(bool) })]
        bool CanStream { get; set; }
        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false.",
        SerializedName = @"hasData",
        PossibleTypes = new [] { typeof(bool) })]
        bool HasData { get; set; }
        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time.",
        SerializedName = @"isInUse",
        PossibleTypes = new [] { typeof(bool) })]
        bool IsInUse { get; set; }

    }
    /// Video flags contain information about the available video actions and its dynamic properties based on the current video
    /// state.
    internal partial interface IVideoFlagsInternal

    {
        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        bool CanStream { get; set; }
        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        bool HasData { get; set; }
        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        bool IsInUse { get; set; }

    }
}