// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>Application level properties for the video resource.</summary>
    public partial class VideoProperties :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoProperties,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Archival" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchival _archival;

        /// <summary>Video archival properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchival Archival { get => (this._archival = this._archival ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoArchival()); set => this._archival = value; }

        /// <summary>
        /// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
        /// It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example,
        /// if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at
        /// any time and the new desired retention period will be effective within 24 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ArchivalRetentionPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchivalInternal)Archival).RetentionPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchivalInternal)Archival).RetentionPeriod = value ?? null; }

        /// <summary>Backing field for <see cref="ContentUrl" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls _contentUrl;

        /// <summary>Set of URLs to the video content.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls ContentUrl { get => (this._contentUrl = this._contentUrl ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoContentUrls()); }

        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ContentUrlArchiveBaseUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).ArchiveBaseUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).ArchiveBaseUrl = value ?? null; }

        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ContentUrlDownloadUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).DownloadUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).DownloadUrl = value ?? null; }

        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ContentUrlRtspTunnelUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).RtspTunnelUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).RtspTunnelUrl = value ?? null; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>
        /// Optional video description provided by the user. Value can be up to 2048 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="Flag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags _flag;

        /// <summary>
        /// Video flags contain information about the available video actions and its dynamic properties based on the current video
        /// state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags Flag { get => (this._flag = this._flag ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoFlags()); }

        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public bool? FlagCanStream { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal)Flag).CanStream; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal)Flag).CanStream = value ?? default(bool); }

        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public bool? FlagHasData { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal)Flag).HasData; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal)Flag).HasData = value ?? default(bool); }

        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public bool? FlagIsInUse { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal)Flag).IsInUse; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlagsInternal)Flag).IsInUse = value ?? default(bool); }

        /// <summary>Backing field for <see cref="MediaInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo _mediaInfo;

        /// <summary>Contains information about the video and audio content.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo MediaInfo { get => (this._mediaInfo = this._mediaInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoMediaInfo()); set => this._mediaInfo = value; }

        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string MediaInfoSegmentLength { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfoInternal)MediaInfo).SegmentLength; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfoInternal)MediaInfo).SegmentLength = value ?? null; }

        /// <summary>Internal Acessors for Archival</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchival Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal.Archival { get => (this._archival = this._archival ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoArchival()); set { {_archival = value;} } }

        /// <summary>Internal Acessors for ContentUrl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal.ContentUrl { get => (this._contentUrl = this._contentUrl ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoContentUrls()); set { {_contentUrl = value;} } }

        /// <summary>Internal Acessors for ContentUrlPreviewImageUrl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal.ContentUrlPreviewImageUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrl = value; }

        /// <summary>Internal Acessors for Flag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal.Flag { get => (this._flag = this._flag ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoFlags()); set { {_flag = value;} } }

        /// <summary>Internal Acessors for MediaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal.MediaInfo { get => (this._mediaInfo = this._mediaInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoMediaInfo()); set { {_mediaInfo = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPropertiesInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>High resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlLarge { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrlLarge; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrlLarge = value ?? null; }

        /// <summary>Medium resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlMedium { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrlMedium; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrlMedium = value ?? null; }

        /// <summary>Low resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlSmall { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrlSmall; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal)ContentUrl).PreviewImageUrlSmall = value ?? null; }

        /// <summary>Backing field for <see cref="Title" /> property.</summary>
        private string _title;

        /// <summary>
        /// Optional video title provided by the user. Value can be up to 256 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string Title { get => this._title; set => this._title = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? _type;

        /// <summary>
        /// Video content type. Different content types are suitable for different applications and scenarios.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? Type { get => this._type; }

        /// <summary>Creates an new <see cref="VideoProperties" /> instance.</summary>
        public VideoProperties()
        {

        }
    }
    /// Application level properties for the video resource.
    public partial interface IVideoProperties :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
        /// It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example,
        /// if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at
        /// any time and the new desired retention period will be effective within 24 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage. It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example, if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at any time and the new desired retention period will be effective within 24 hours.",
        SerializedName = @"retentionPeriod",
        PossibleTypes = new [] { typeof(string) })]
        string ArchivalRetentionPeriod { get; set; }
        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible DASH or HLS players by appending the following to the base URL:

            - HLSv4:     /manifest(format=m3u8-aapl).m3u8
            - HLS CMAF:  /manifest(format=m3u8-cmaf)
            - DASH CMAF: /manifest(format=mpd-time-cmaf)

            Moreover, an ongoing video recording can be played in ""live mode"" with latencies which are approximately double of the chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.",
        SerializedName = @"archiveBaseUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrlArchiveBaseUrl { get; set; }
        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video file download URL. This URL can be used in conjunction with the video content authorization token to download the video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type is 'file' and video file is available for consumption.",
        SerializedName = @"downloadUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrlDownloadUrl { get; set; }
        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.",
        SerializedName = @"rtspTunnelUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrlRtspTunnelUrl { get; set; }
        /// <summary>
        /// Optional video description provided by the user. Value can be up to 2048 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional video description provided by the user. Value can be up to 2048 characters long.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value indicating whether or not the video can be streamed. Only ""archive"" type videos can be streamed.",
        SerializedName = @"canStream",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FlagCanStream { get; set; }
        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false.",
        SerializedName = @"hasData",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FlagHasData { get; set; }
        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time.",
        SerializedName = @"isInUse",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FlagIsInUse { get; set; }
        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration format (i.e. ""PT30S"" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.",
        SerializedName = @"segmentLength",
        PossibleTypes = new [] { typeof(string) })]
        string MediaInfoSegmentLength { get; set; }
        /// <summary>High resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"High resolution preview image URL.",
        SerializedName = @"large",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlLarge { get; set; }
        /// <summary>Medium resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Medium resolution preview image URL.",
        SerializedName = @"medium",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlMedium { get; set; }
        /// <summary>Low resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Low resolution preview image URL.",
        SerializedName = @"small",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlSmall { get; set; }
        /// <summary>
        /// Optional video title provided by the user. Value can be up to 256 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional video title provided by the user. Value can be up to 256 characters long.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        string Title { get; set; }
        /// <summary>
        /// Video content type. Different content types are suitable for different applications and scenarios.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Video content type. Different content types are suitable for different applications and scenarios.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? Type { get;  }

    }
    /// Application level properties for the video resource.
    internal partial interface IVideoPropertiesInternal

    {
        /// <summary>Video archival properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoArchival Archival { get; set; }
        /// <summary>
        /// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
        /// It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example,
        /// if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at
        /// any time and the new desired retention period will be effective within 24 hours.
        /// </summary>
        string ArchivalRetentionPeriod { get; set; }
        /// <summary>Set of URLs to the video content.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls ContentUrl { get; set; }
        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        string ContentUrlArchiveBaseUrl { get; set; }
        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        string ContentUrlDownloadUrl { get; set; }
        /// <summary>
        /// Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download
        /// the most recent still image from the video archive in different resolutions. They are available when the video type is
        /// 'archive' and preview images are enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls ContentUrlPreviewImageUrl { get; set; }
        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        string ContentUrlRtspTunnelUrl { get; set; }
        /// <summary>
        /// Optional video description provided by the user. Value can be up to 2048 characters long.
        /// </summary>
        string Description { get; set; }
        /// <summary>
        /// Video flags contain information about the available video actions and its dynamic properties based on the current video
        /// state.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoFlags Flag { get; set; }
        /// <summary>
        /// Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
        /// </summary>
        bool? FlagCanStream { get; set; }
        /// <summary>
        /// Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have
        /// this value set to false.
        /// </summary>
        bool? FlagHasData { get; set; }
        /// <summary>
        /// Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being
        /// referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events
        /// or camera may not be accessible at the time.
        /// </summary>
        bool? FlagIsInUse { get; set; }
        /// <summary>Contains information about the video and audio content.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo MediaInfo { get; set; }
        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        string MediaInfoSegmentLength { get; set; }
        /// <summary>High resolution preview image URL.</summary>
        string PreviewImageUrlLarge { get; set; }
        /// <summary>Medium resolution preview image URL.</summary>
        string PreviewImageUrlMedium { get; set; }
        /// <summary>Low resolution preview image URL.</summary>
        string PreviewImageUrlSmall { get; set; }
        /// <summary>
        /// Optional video title provided by the user. Value can be up to 256 characters long.
        /// </summary>
        string Title { get; set; }
        /// <summary>
        /// Video content type. Different content types are suitable for different applications and scenarios.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType? Type { get; set; }

    }
}