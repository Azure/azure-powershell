// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>
    /// Base type for all video encoding presets, which define the recipe or instructions on how the input video should be processed.
    /// </summary>
    public partial class VideoEncoderBase :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBase,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal
    {

        /// <summary>Backing field for <see cref="BitrateKbps" /> property.</summary>
        private string _bitrateKbps;

        /// <summary>
        /// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
        /// to try and match the quality of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string BitrateKbps { get => this._bitrateKbps; set => this._bitrateKbps = value; }

        /// <summary>Backing field for <see cref="FrameRate" /> property.</summary>
        private string _frameRate;

        /// <summary>
        /// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
        /// to 300. If omitted, the encoder uses the average frame rate of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string FrameRate { get => this._frameRate; set => this._frameRate = value; }

        /// <summary>Internal Acessors for Scale</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScale Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal.Scale { get => (this._scale = this._scale ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoScale()); set { {_scale = value;} } }

        /// <summary>Backing field for <see cref="Scale" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScale _scale;

        /// <summary>
        /// Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScale Scale { get => (this._scale = this._scale ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoScale()); set => this._scale = value; }

        /// <summary>The desired output video height.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ScaleHeight { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScaleInternal)Scale).Height; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScaleInternal)Scale).Height = value ?? null; }

        /// <summary>
        /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
        /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode? ScaleMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScaleInternal)Scale).Mode; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScaleInternal)Scale).Mode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode)""); }

        /// <summary>The desired output video width.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ScaleWidth { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScaleInternal)Scale).Width; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScaleInternal)Scale).Width = value ?? null; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="VideoEncoderBase" /> instance.</summary>
        public VideoEncoderBase()
        {

        }
    }
    /// Base type for all video encoding presets, which define the recipe or instructions on how the input video should be processed.
    public partial interface IVideoEncoderBase :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
        /// to try and match the quality of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.",
        SerializedName = @"bitrateKbps",
        PossibleTypes = new [] { typeof(string) })]
        string BitrateKbps { get; set; }
        /// <summary>
        /// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
        /// to 300. If omitted, the encoder uses the average frame rate of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.",
        SerializedName = @"frameRate",
        PossibleTypes = new [] { typeof(string) })]
        string FrameRate { get; set; }
        /// <summary>The desired output video height.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired output video height.",
        SerializedName = @"height",
        PossibleTypes = new [] { typeof(string) })]
        string ScaleHeight { get; set; }
        /// <summary>
        /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
        /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode? ScaleMode { get; set; }
        /// <summary>The desired output video width.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired output video width.",
        SerializedName = @"width",
        PossibleTypes = new [] { typeof(string) })]
        string ScaleWidth { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get; set; }

    }
    /// Base type for all video encoding presets, which define the recipe or instructions on how the input video should be processed.
    internal partial interface IVideoEncoderBaseInternal

    {
        /// <summary>
        /// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
        /// to try and match the quality of the input video.
        /// </summary>
        string BitrateKbps { get; set; }
        /// <summary>
        /// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
        /// to 300. If omitted, the encoder uses the average frame rate of the input video.
        /// </summary>
        string FrameRate { get; set; }
        /// <summary>
        /// Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScale Scale { get; set; }
        /// <summary>The desired output video height.</summary>
        string ScaleHeight { get; set; }
        /// <summary>
        /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
        /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode? ScaleMode { get; set; }
        /// <summary>The desired output video width.</summary>
        string ScaleWidth { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string Type { get; set; }

    }
}