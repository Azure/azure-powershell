// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>Properties for access validation based on JSON Web Tokens (JWT).</summary>
    public partial class JwtAuthentication :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IJwtAuthentication,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IJwtAuthenticationInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAuthenticationBase"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAuthenticationBase __authenticationBase = new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.AuthenticationBase();

        /// <summary>Backing field for <see cref="Audience" /> property.</summary>
        private string[] _audience;

        /// <summary>
        /// List of expected token audiences. Token audience is valid if it matches at least one of the given values.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string[] Audience { get => this._audience; set => this._audience = value; }

        /// <summary>Backing field for <see cref="Claim" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenClaim[] _claim;

        /// <summary>
        /// List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenClaim[] Claim { get => this._claim; set => this._claim = value; }

        /// <summary>Backing field for <see cref="Issuer" /> property.</summary>
        private string[] _issuer;

        /// <summary>
        /// List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string[] Issuer { get => this._issuer; set => this._issuer = value; }

        /// <summary>Backing field for <see cref="Key" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenKey[] _key;

        /// <summary>
        /// List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the
        /// token signing key. Token signature must match exactly one key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenKey[] Key { get => this._key; set => this._key = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAuthenticationBaseInternal)__authenticationBase).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAuthenticationBaseInternal)__authenticationBase).Type = value ; }

        /// <summary>Creates an new <see cref="JwtAuthentication" /> instance.</summary>
        public JwtAuthentication()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__authenticationBase), __authenticationBase);
            await eventListener.AssertObjectIsValid(nameof(__authenticationBase), __authenticationBase);
        }
    }
    /// Properties for access validation based on JSON Web Tokens (JWT).
    public partial interface IJwtAuthentication :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAuthenticationBase
    {
        /// <summary>
        /// List of expected token audiences. Token audience is valid if it matches at least one of the given values.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of expected token audiences. Token audience is valid if it matches at least one of the given values.",
        SerializedName = @"audiences",
        PossibleTypes = new [] { typeof(string) })]
        string[] Audience { get; set; }
        /// <summary>
        /// List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.",
        SerializedName = @"claims",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenClaim) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenClaim[] Claim { get; set; }
        /// <summary>
        /// List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of expected token issuers. Token issuer is valid if it matches at least one of the given values.",
        SerializedName = @"issuers",
        PossibleTypes = new [] { typeof(string) })]
        string[] Issuer { get; set; }
        /// <summary>
        /// List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the
        /// token signing key. Token signature must match exactly one key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key.",
        SerializedName = @"keys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenKey) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenKey[] Key { get; set; }

    }
    /// Properties for access validation based on JSON Web Tokens (JWT).
    internal partial interface IJwtAuthenticationInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAuthenticationBaseInternal
    {
        /// <summary>
        /// List of expected token audiences. Token audience is valid if it matches at least one of the given values.
        /// </summary>
        string[] Audience { get; set; }
        /// <summary>
        /// List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenClaim[] Claim { get; set; }
        /// <summary>
        /// List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
        /// </summary>
        string[] Issuer { get; set; }
        /// <summary>
        /// List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the
        /// token signing key. Token signature must match exactly one key.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ITokenKey[] Key { get; set; }

    }
}