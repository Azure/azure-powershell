// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>Set of URLs to the video content.</summary>
    public partial class VideoContentUrls :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrls,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal
    {

        /// <summary>Backing field for <see cref="ArchiveBaseUrl" /> property.</summary>
        private string _archiveBaseUrl;

        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string ArchiveBaseUrl { get => this._archiveBaseUrl; set => this._archiveBaseUrl = value; }

        /// <summary>Backing field for <see cref="DownloadUrl" /> property.</summary>
        private string _downloadUrl;

        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string DownloadUrl { get => this._downloadUrl; set => this._downloadUrl = value; }

        /// <summary>Internal Acessors for PreviewImageUrl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoContentUrlsInternal.PreviewImageUrl { get => (this._previewImageUrl = this._previewImageUrl ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoPreviewImageUrls()); set { {_previewImageUrl = value;} } }

        /// <summary>Backing field for <see cref="PreviewImageUrl" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls _previewImageUrl;

        /// <summary>
        /// Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download
        /// the most recent still image from the video archive in different resolutions. They are available when the video type is
        /// 'archive' and preview images are enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls PreviewImageUrl { get => (this._previewImageUrl = this._previewImageUrl ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoPreviewImageUrls()); set => this._previewImageUrl = value; }

        /// <summary>High resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlLarge { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrlsInternal)PreviewImageUrl).Large; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrlsInternal)PreviewImageUrl).Large = value ?? null; }

        /// <summary>Medium resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlMedium { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrlsInternal)PreviewImageUrl).Medium; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrlsInternal)PreviewImageUrl).Medium = value ?? null; }

        /// <summary>Low resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string PreviewImageUrlSmall { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrlsInternal)PreviewImageUrl).Small; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrlsInternal)PreviewImageUrl).Small = value ?? null; }

        /// <summary>Backing field for <see cref="RtspTunnelUrl" /> property.</summary>
        private string _rtspTunnelUrl;

        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string RtspTunnelUrl { get => this._rtspTunnelUrl; set => this._rtspTunnelUrl = value; }

        /// <summary>Creates an new <see cref="VideoContentUrls" /> instance.</summary>
        public VideoContentUrls()
        {

        }
    }
    /// Set of URLs to the video content.
    public partial interface IVideoContentUrls :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible DASH or HLS players by appending the following to the base URL:

            - HLSv4:     /manifest(format=m3u8-aapl).m3u8
            - HLS CMAF:  /manifest(format=m3u8-cmaf)
            - DASH CMAF: /manifest(format=mpd-time-cmaf)

            Moreover, an ongoing video recording can be played in ""live mode"" with latencies which are approximately double of the chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.",
        SerializedName = @"archiveBaseUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ArchiveBaseUrl { get; set; }
        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video file download URL. This URL can be used in conjunction with the video content authorization token to download the video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type is 'file' and video file is available for consumption.",
        SerializedName = @"downloadUrl",
        PossibleTypes = new [] { typeof(string) })]
        string DownloadUrl { get; set; }
        /// <summary>High resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"High resolution preview image URL.",
        SerializedName = @"large",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlLarge { get; set; }
        /// <summary>Medium resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Medium resolution preview image URL.",
        SerializedName = @"medium",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlMedium { get; set; }
        /// <summary>Low resolution preview image URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Low resolution preview image URL.",
        SerializedName = @"small",
        PossibleTypes = new [] { typeof(string) })]
        string PreviewImageUrlSmall { get; set; }
        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.",
        SerializedName = @"rtspTunnelUrl",
        PossibleTypes = new [] { typeof(string) })]
        string RtspTunnelUrl { get; set; }

    }
    /// Set of URLs to the video content.
    internal partial interface IVideoContentUrlsInternal

    {
        /// <summary>
        /// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible
        /// DASH or HLS players by appending the following to the base URL:
        ///
        /// - HLSv4: /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF: /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
        /// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
        /// </summary>
        string ArchiveBaseUrl { get; set; }
        /// <summary>
        /// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
        /// video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.
        /// </summary>
        string DownloadUrl { get; set; }
        /// <summary>
        /// Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download
        /// the most recent still image from the video archive in different resolutions. They are available when the video type is
        /// 'archive' and preview images are enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoPreviewImageUrls PreviewImageUrl { get; set; }
        /// <summary>High resolution preview image URL.</summary>
        string PreviewImageUrlLarge { get; set; }
        /// <summary>Medium resolution preview image URL.</summary>
        string PreviewImageUrlMedium { get; set; }
        /// <summary>Low resolution preview image URL.</summary>
        string PreviewImageUrlSmall { get; set; }
        /// <summary>
        /// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled
        /// RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source.
        /// </summary>
        string RtspTunnelUrl { get; set; }

    }
}