// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>
    /// Describes a custom preset for encoding the input content using the encoder processor.
    /// </summary>
    public partial class EncoderCustomPreset :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderCustomPreset,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderCustomPresetInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderPresetBase"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderPresetBase __encoderPresetBase = new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.EncoderPresetBase();

        /// <summary>Backing field for <see cref="AudioEncoder" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBase _audioEncoder;

        /// <summary>Describes a custom preset for encoding audio.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBase AudioEncoder { get => (this._audioEncoder = this._audioEncoder ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.AudioEncoderBase()); set => this._audioEncoder = value; }

        /// <summary>
        /// Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of
        /// 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted, the bitrate of the input audio is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string AudioEncoderBitrateKbps { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBaseInternal)AudioEncoder).BitrateKbps; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBaseInternal)AudioEncoder).BitrateKbps = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string AudioEncoderType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBaseInternal)AudioEncoder).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBaseInternal)AudioEncoder).Type = value ?? null; }

        /// <summary>Internal Acessors for AudioEncoder</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBase Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderCustomPresetInternal.AudioEncoder { get => (this._audioEncoder = this._audioEncoder ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.AudioEncoderBase()); set { {_audioEncoder = value;} } }

        /// <summary>Internal Acessors for VideoEncoder</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBase Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderCustomPresetInternal.VideoEncoder { get => (this._videoEncoder = this._videoEncoder ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoEncoderBase()); set { {_videoEncoder = value;} } }

        /// <summary>Internal Acessors for VideoEncoderScale</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScale Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderCustomPresetInternal.VideoEncoderScale { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).Scale; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).Scale = value; }

        /// <summary>The desired output video height.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ScaleHeight { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).ScaleHeight; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).ScaleHeight = value ?? null; }

        /// <summary>
        /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
        /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode? ScaleMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).ScaleMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).ScaleMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode)""); }

        /// <summary>The desired output video width.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string ScaleWidth { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).ScaleWidth; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).ScaleWidth = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderPresetBaseInternal)__encoderPresetBase).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderPresetBaseInternal)__encoderPresetBase).Type = value ; }

        /// <summary>Backing field for <see cref="VideoEncoder" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBase _videoEncoder;

        /// <summary>Describes a custom preset for encoding video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBase VideoEncoder { get => (this._videoEncoder = this._videoEncoder ?? new Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.VideoEncoderBase()); set => this._videoEncoder = value; }

        /// <summary>
        /// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
        /// to try and match the quality of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string VideoEncoderBitrateKbps { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).BitrateKbps; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).BitrateKbps = value ?? null; }

        /// <summary>
        /// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
        /// to 300. If omitted, the encoder uses the average frame rate of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string VideoEncoderFrameRate { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).FrameRate; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).FrameRate = value ?? null; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Inlined)]
        public string VideoEncoderType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBaseInternal)VideoEncoder).Type = value ?? null; }

        /// <summary>Creates an new <see cref="EncoderCustomPreset" /> instance.</summary>
        public EncoderCustomPreset()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__encoderPresetBase), __encoderPresetBase);
            await eventListener.AssertObjectIsValid(nameof(__encoderPresetBase), __encoderPresetBase);
        }
    }
    /// Describes a custom preset for encoding the input content using the encoder processor.
    public partial interface IEncoderCustomPreset :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderPresetBase
    {
        /// <summary>
        /// Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of
        /// 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted, the bitrate of the input audio is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted, the bitrate of the input audio is used.",
        SerializedName = @"bitrateKbps",
        PossibleTypes = new [] { typeof(string) })]
        string AudioEncoderBitrateKbps { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string AudioEncoderType { get; set; }
        /// <summary>The desired output video height.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired output video height.",
        SerializedName = @"height",
        PossibleTypes = new [] { typeof(string) })]
        string ScaleHeight { get; set; }
        /// <summary>
        /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
        /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode? ScaleMode { get; set; }
        /// <summary>The desired output video width.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired output video width.",
        SerializedName = @"width",
        PossibleTypes = new [] { typeof(string) })]
        string ScaleWidth { get; set; }
        /// <summary>
        /// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
        /// to try and match the quality of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.",
        SerializedName = @"bitrateKbps",
        PossibleTypes = new [] { typeof(string) })]
        string VideoEncoderBitrateKbps { get; set; }
        /// <summary>
        /// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
        /// to 300. If omitted, the encoder uses the average frame rate of the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.",
        SerializedName = @"frameRate",
        PossibleTypes = new [] { typeof(string) })]
        string VideoEncoderFrameRate { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The discriminator for derived types.",
        SerializedName = @"@type",
        PossibleTypes = new [] { typeof(string) })]
        string VideoEncoderType { get; set; }

    }
    /// Describes a custom preset for encoding the input content using the encoder processor.
    internal partial interface IEncoderCustomPresetInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IEncoderPresetBaseInternal
    {
        /// <summary>Describes a custom preset for encoding audio.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IAudioEncoderBase AudioEncoder { get; set; }
        /// <summary>
        /// Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of
        /// 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted, the bitrate of the input audio is used.
        /// </summary>
        string AudioEncoderBitrateKbps { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string AudioEncoderType { get; set; }
        /// <summary>The desired output video height.</summary>
        string ScaleHeight { get; set; }
        /// <summary>
        /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
        /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode? ScaleMode { get; set; }
        /// <summary>The desired output video width.</summary>
        string ScaleWidth { get; set; }
        /// <summary>Describes a custom preset for encoding video.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoEncoderBase VideoEncoder { get; set; }
        /// <summary>
        /// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
        /// to try and match the quality of the input video.
        /// </summary>
        string VideoEncoderBitrateKbps { get; set; }
        /// <summary>
        /// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
        /// to 300. If omitted, the encoder uses the average frame rate of the input video.
        /// </summary>
        string VideoEncoderFrameRate { get; set; }
        /// <summary>
        /// Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoScale VideoEncoderScale { get; set; }
        /// <summary>The discriminator for derived types.</summary>
        string VideoEncoderType { get; set; }

    }
}