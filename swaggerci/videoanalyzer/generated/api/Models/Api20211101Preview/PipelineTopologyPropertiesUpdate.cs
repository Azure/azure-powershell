// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>Describes the properties of a pipeline topology.</summary>
    public partial class PipelineTopologyPropertiesUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IPipelineTopologyPropertiesUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IPipelineTopologyPropertiesUpdateInternal
    {

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>
        /// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described
        /// here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="Parameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IParameterDeclaration[] _parameter;

        /// <summary>
        /// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes
        /// through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined
        /// in individual instances of the pipeline.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IParameterDeclaration[] Parameter { get => this._parameter; set => this._parameter = value; }

        /// <summary>Backing field for <see cref="Processor" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IProcessorNodeBase[] _processor;

        /// <summary>
        /// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IProcessorNodeBase[] Processor { get => this._processor; set => this._processor = value; }

        /// <summary>Backing field for <see cref="Sink" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISinkNodeBase[] _sink;

        /// <summary>
        /// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISinkNodeBase[] Sink { get => this._sink; set => this._sink = value; }

        /// <summary>Backing field for <see cref="Source" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase[] _source;

        /// <summary>
        /// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase[] Source { get => this._source; set => this._source = value; }

        /// <summary>Creates an new <see cref="PipelineTopologyPropertiesUpdate" /> instance.</summary>
        public PipelineTopologyPropertiesUpdate()
        {

        }
    }
    /// Describes the properties of a pipeline topology.
    public partial interface IPipelineTopologyPropertiesUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described
        /// here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes
        /// through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined
        /// in individual instances of the pipeline.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of ""${PARAMETER_NAME}"" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.",
        SerializedName = @"parameters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IParameterDeclaration) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IParameterDeclaration[] Parameter { get; set; }
        /// <summary>
        /// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.",
        SerializedName = @"processors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IProcessorNodeBase) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IProcessorNodeBase[] Processor { get; set; }
        /// <summary>
        /// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.",
        SerializedName = @"sinks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISinkNodeBase) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISinkNodeBase[] Sink { get; set; }
        /// <summary>
        /// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.",
        SerializedName = @"sources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase) })]
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase[] Source { get; set; }

    }
    /// Describes the properties of a pipeline topology.
    internal partial interface IPipelineTopologyPropertiesUpdateInternal

    {
        /// <summary>
        /// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described
        /// here.
        /// </summary>
        string Description { get; set; }
        /// <summary>
        /// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes
        /// through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined
        /// in individual instances of the pipeline.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IParameterDeclaration[] Parameter { get; set; }
        /// <summary>
        /// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IProcessorNodeBase[] Processor { get; set; }
        /// <summary>
        /// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISinkNodeBase[] Sink { get; set; }
        /// <summary>
        /// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.ISourceNodeBase[] Source { get; set; }

    }
}