// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Extensions;

    /// <summary>Contains information about the video and audio content.</summary>
    public partial class VideoMediaInfo :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfo,
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Models.Api20211101Preview.IVideoMediaInfoInternal
    {

        /// <summary>Backing field for <see cref="SegmentLength" /> property.</summary>
        private string _segmentLength;

        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Origin(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.PropertyOrigin.Owned)]
        public string SegmentLength { get => this._segmentLength; set => this._segmentLength = value; }

        /// <summary>Creates an new <see cref="VideoMediaInfo" /> instance.</summary>
        public VideoMediaInfo()
        {

        }
    }
    /// Contains information about the video and audio content.
    public partial interface IVideoMediaInfo :
        Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration format (i.e. ""PT30S"" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.",
        SerializedName = @"segmentLength",
        PossibleTypes = new [] { typeof(string) })]
        string SegmentLength { get; set; }

    }
    /// Contains information about the video and audio content.
    internal partial interface IVideoMediaInfoInternal

    {
        /// <summary>
        /// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
        /// segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce
        /// the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration
        /// format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
        /// </summary>
        string SegmentLength { get; set; }

    }
}