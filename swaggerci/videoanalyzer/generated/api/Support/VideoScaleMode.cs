// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support
{

    /// <summary>
    /// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
    /// and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
    /// </summary>
    public partial struct VideoScaleMode :
        System.IEquatable<VideoScaleMode>
    {
        /// <summary>
        /// Pads the video with black horizontal stripes (letterbox) or black vertical stripes (pillar-box) so the video is resized
        /// to the specified dimensions while not altering the content aspect ratio.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode Pad = @"Pad";

        /// <summary>
        /// Preserves the same aspect ratio as the input video. If only one video dimension is provided, the second dimension is calculated
        /// based on the input video aspect ratio. When 2 dimensions are provided, the video is resized to fit the most constraining
        /// dimension, considering the input video size and aspect ratio.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode PreserveAspectRatio = @"PreserveAspectRatio";

        /// <summary>Stretches the original video so it resized to the specified dimensions.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode Stretch = @"Stretch";

        /// <summary>the value for an instance of the <see cref="VideoScaleMode" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to VideoScaleMode</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VideoScaleMode" />.</param>
        internal static object CreateFrom(object value)
        {
            return new VideoScaleMode(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type VideoScaleMode</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type VideoScaleMode (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is VideoScaleMode && Equals((VideoScaleMode)obj);
        }

        /// <summary>Returns hashCode for enum VideoScaleMode</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for VideoScaleMode</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Creates an instance of the <see cref="VideoScaleMode"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private VideoScaleMode(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Implicit operator to convert string to VideoScaleMode</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VideoScaleMode" />.</param>

        public static implicit operator VideoScaleMode(string value)
        {
            return new VideoScaleMode(value);
        }

        /// <summary>Implicit operator to convert VideoScaleMode to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="VideoScaleMode" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum VideoScaleMode</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode e1, Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum VideoScaleMode</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode e1, Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoScaleMode e2)
        {
            return e2.Equals(e1);
        }
    }
}