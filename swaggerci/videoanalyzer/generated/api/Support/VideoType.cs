// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support
{

    /// <summary>
    /// Video content type. Different content types are suitable for different applications and scenarios.
    /// </summary>
    public partial struct VideoType :
        System.IEquatable<VideoType>
    {
        /// <summary>
        /// Archive is flexible format that represents a video stream associated with wall-clock time. The video archive can either
        /// be continuous or discontinuous. An archive is discontinuous when there are gaps in the recording due to various reasons,
        /// such as the live pipeline being stopped, camera being disconnected or due to the use of event based recordings through
        /// the use of a signal gate. There is no limit to the archive duration and new video data can be appended to the existing
        /// archive at any time, as long as the same video codec and codec parameters are being used. Videos of this type are suitable
        /// for appending and long term archival.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType Archive = @"Archive";

        /// <summary>
        /// File represents a video which is stored as a single media file, such as MP4. Videos of this type are suitable to be downloaded
        /// for external consumption.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType File = @"File";

        /// <summary>the value for an instance of the <see cref="VideoType" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to VideoType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VideoType" />.</param>
        internal static object CreateFrom(object value)
        {
            return new VideoType(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type VideoType</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type VideoType (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is VideoType && Equals((VideoType)obj);
        }

        /// <summary>Returns hashCode for enum VideoType</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for VideoType</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Creates an instance of the <see cref="VideoType"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private VideoType(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Implicit operator to convert string to VideoType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VideoType" />.</param>

        public static implicit operator VideoType(string value)
        {
            return new VideoType(value);
        }

        /// <summary>Implicit operator to convert VideoType to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="VideoType" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum VideoType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType e1, Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum VideoType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType e1, Microsoft.Azure.PowerShell.Cmdlets.VideoAnalyzer.Support.VideoType e2)
        {
            return e2.Equals(e1);
        }
    }
}