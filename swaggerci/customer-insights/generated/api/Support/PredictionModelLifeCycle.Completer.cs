// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support
{

    /// <summary>
    /// Prediction model life cycle. When prediction is in PendingModelConfirmation status, it is allowed to update the status
    /// to PendingFeaturing or Active through API.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.PredictionModelLifeCycleTypeConverter))]
    public partial struct PredictionModelLifeCycle :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "New".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'New'", "New", global::System.Management.Automation.CompletionResultType.ParameterValue, "New");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Provisioning".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Provisioning'", "Provisioning", global::System.Management.Automation.CompletionResultType.ParameterValue, "Provisioning");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ProvisioningFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ProvisioningFailed'", "ProvisioningFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "ProvisioningFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingDiscovering".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingDiscovering'", "PendingDiscovering", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingDiscovering");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Discovering".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Discovering'", "Discovering", global::System.Management.Automation.CompletionResultType.ParameterValue, "Discovering");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingFeaturing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingFeaturing'", "PendingFeaturing", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingFeaturing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Featuring".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Featuring'", "Featuring", global::System.Management.Automation.CompletionResultType.ParameterValue, "Featuring");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "FeaturingFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'FeaturingFailed'", "FeaturingFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "FeaturingFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingTraining".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingTraining'", "PendingTraining", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingTraining");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Training".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Training'", "Training", global::System.Management.Automation.CompletionResultType.ParameterValue, "Training");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "TrainingFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'TrainingFailed'", "TrainingFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "TrainingFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Evaluating".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Evaluating'", "Evaluating", global::System.Management.Automation.CompletionResultType.ParameterValue, "Evaluating");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EvaluatingFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EvaluatingFailed'", "EvaluatingFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "EvaluatingFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingModelConfirmation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingModelConfirmation'", "PendingModelConfirmation", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingModelConfirmation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Active".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Active'", "Active", global::System.Management.Automation.CompletionResultType.ParameterValue, "Active");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Deleted".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Deleted'", "Deleted", global::System.Management.Automation.CompletionResultType.ParameterValue, "Deleted");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HumanIntervention".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HumanIntervention'", "HumanIntervention", global::System.Management.Automation.CompletionResultType.ParameterValue, "HumanIntervention");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Failed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Failed'", "Failed", global::System.Management.Automation.CompletionResultType.ParameterValue, "Failed");
            }
        }
    }
}