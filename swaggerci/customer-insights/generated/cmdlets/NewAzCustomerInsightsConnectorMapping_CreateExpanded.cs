// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Extensions;
    using System;

    /// <summary>
    /// Creates a connector mapping or updates an existing connector mapping in the connector.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzCustomerInsightsConnectorMapping_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Description(@"Creates a connector mapping or updates an existing connector mapping in the connector.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Generated]
    public partial class NewAzCustomerInsightsConnectorMapping_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>The frequency to update.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The frequency to update.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The frequency to update.",
        SerializedName = @"frequency",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.FrequencyTypes) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.FrequencyTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.FrequencyTypes AvailabilityFrequency { get => ParametersBody.AvailabilityFrequency ?? ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.FrequencyTypes)""); set => ParametersBody.AvailabilityFrequency = value; }

        /// <summary>The interval of the given frequency to use.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The interval of the given frequency to use.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval of the given frequency to use.",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(int) })]
        public int AvailabilityInterval { get => ParametersBody.AvailabilityInterval ?? default(int); set => ParametersBody.AvailabilityInterval = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.CustomerInsightsManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Module.Instance.ClientAPI;

        /// <summary>The type of completion operation.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of completion operation.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of completion operation.",
        SerializedName = @"completionOperationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.CompletionOperationTypes) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.CompletionOperationTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.CompletionOperationTypes CompleteOperationCompletionOperationType { get => ParametersBody.CompleteOperationCompletionOperationType ?? ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.CompletionOperationTypes)""); set => ParametersBody.CompleteOperationCompletionOperationType = value; }

        /// <summary>The destination folder where files will be moved to once the import is done.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The destination folder where files will be moved to once the import is done.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The destination folder where files will be moved to once the import is done.",
        SerializedName = @"destinationFolder",
        PossibleTypes = new [] { typeof(string) })]
        public string CompleteOperationDestinationFolder { get => ParametersBody.CompleteOperationDestinationFolder ?? null; set => ParametersBody.CompleteOperationDestinationFolder = value; }

        /// <summary>Backing field for <see cref="ConnectorName" /> property.</summary>
        private string _connectorName;

        /// <summary>The name of the connector.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the connector.")]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the connector.",
        SerializedName = @"connectorName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Path)]
        public string ConnectorName { get => this._connectorName; set => this._connectorName = value; }

        /// <summary>Type of connector.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Type of connector.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of connector.",
        SerializedName = @"connectorType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ConnectorTypes) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ConnectorTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ConnectorTypes ConnectorType { get => ParametersBody.ConnectorType ?? ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ConnectorTypes)""); set => ParametersBody.ConnectorType = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The description of the connector mapping.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The description of the connector mapping.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the connector mapping.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        public string Description { get => ParametersBody.Description ?? null; set => ParametersBody.Description = value; }

        /// <summary>Display name for the connector mapping.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Display name for the connector mapping.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Display name for the connector mapping.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => ParametersBody.DisplayName ?? null; set => ParametersBody.DisplayName = value; }

        /// <summary>Defines which entity type the file should map to.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Defines which entity type the file should map to.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Defines which entity type the file should map to.",
        SerializedName = @"entityType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes EntityType { get => ParametersBody.EntityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes)""); set => ParametersBody.EntityType = value; }

        /// <summary>The mapping entity name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The mapping entity name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The mapping entity name.",
        SerializedName = @"entityTypeName",
        PossibleTypes = new [] { typeof(string) })]
        public string EntityTypeName { get => ParametersBody.EntityTypeName ?? null; set => ParametersBody.EntityTypeName = value; }

        /// <summary>The error limit allowed while importing data.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The error limit allowed while importing data.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The error limit allowed while importing data.",
        SerializedName = @"errorLimit",
        PossibleTypes = new [] { typeof(int) })]
        public int ErrorManagementErrorLimit { get => ParametersBody.ErrorManagementErrorLimit ?? default(int); set => ParametersBody.ErrorManagementErrorLimit = value; }

        /// <summary>The type of error management to use for the mapping.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of error management to use for the mapping.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of error management to use for the mapping.",
        SerializedName = @"errorManagementType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ErrorManagementTypes) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ErrorManagementTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ErrorManagementTypes ErrorManagementType { get => ParametersBody.ErrorManagementType ?? ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ErrorManagementTypes)""); set => ParametersBody.ErrorManagementType = value; }

        /// <summary>The oData language.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The oData language.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The oData language.",
        SerializedName = @"acceptLanguage",
        PossibleTypes = new [] { typeof(string) })]
        public string FormatAcceptLanguage { get => ParametersBody.FormatAcceptLanguage ?? null; set => ParametersBody.FormatAcceptLanguage = value; }

        /// <summary>Character separating array elements.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Character separating array elements.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Character separating array elements.",
        SerializedName = @"arraySeparator",
        PossibleTypes = new [] { typeof(string) })]
        public string FormatArraySeparator { get => ParametersBody.FormatArraySeparator ?? null; set => ParametersBody.FormatArraySeparator = value; }

        /// <summary>The character that signifies a break between columns.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The character that signifies a break between columns.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The character that signifies a break between columns.",
        SerializedName = @"columnDelimiter",
        PossibleTypes = new [] { typeof(string) })]
        public string FormatColumnDelimiter { get => ParametersBody.FormatColumnDelimiter ?? null; set => ParametersBody.FormatColumnDelimiter = value; }

        /// <summary>Quote character, used to indicate enquoted fields.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Quote character, used to indicate enquoted fields.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Quote character, used to indicate enquoted fields.",
        SerializedName = @"quoteCharacter",
        PossibleTypes = new [] { typeof(string) })]
        public string FormatQuoteCharacter { get => ParametersBody.FormatQuoteCharacter ?? null; set => ParametersBody.FormatQuoteCharacter = value; }

        /// <summary>Escape character for quotes, can be the same as the quoteCharacter.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Escape character for quotes, can be the same as the quoteCharacter.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Escape character for quotes, can be the same as the quoteCharacter.",
        SerializedName = @"quoteEscapeCharacter",
        PossibleTypes = new [] { typeof(string) })]
        public string FormatQuoteEscapeCharacter { get => ParametersBody.FormatQuoteEscapeCharacter ?? null; set => ParametersBody.FormatQuoteEscapeCharacter = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="HubName" /> property.</summary>
        private string _hubName;

        /// <summary>The name of the hub.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the hub.")]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the hub.",
        SerializedName = @"hubName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Path)]
        public string HubName { get => this._hubName; set => this._hubName = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Backing field for <see cref="MappingName" /> property.</summary>
        private string _mappingName;

        /// <summary>The name of the connector mapping.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the connector mapping.")]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the connector mapping.",
        SerializedName = @"mappingName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Path)]
        public string MappingName { get => this._mappingName; set => this._mappingName = value; }

        /// <summary>The file filter for the mapping.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The file filter for the mapping.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The file filter for the mapping.",
        SerializedName = @"fileFilter",
        PossibleTypes = new [] { typeof(string) })]
        public string MappingPropertyFileFilter { get => ParametersBody.MappingPropertyFileFilter ?? null; set => ParametersBody.MappingPropertyFileFilter = value; }

        /// <summary>The folder path for the mapping.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The folder path for the mapping.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder path for the mapping.",
        SerializedName = @"folderPath",
        PossibleTypes = new [] { typeof(string) })]
        public string MappingPropertyFolderPath { get => ParametersBody.MappingPropertyFolderPath ?? null; set => ParametersBody.MappingPropertyFolderPath = value; }

        /// <summary>If the file contains a header or not.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If the file contains a header or not.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If the file contains a header or not.",
        SerializedName = @"hasHeader",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter MappingPropertyHasHeader { get => ParametersBody.MappingPropertyHasHeader ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.MappingPropertyHasHeader = value; }

        /// <summary>Ingestion mapping information at property level.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Ingestion mapping information at property level.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion mapping information at property level.",
        SerializedName = @"structure",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingStructure) })]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingStructure[] MappingPropertyStructure { get => ParametersBody.MappingPropertyStructure ?? null /* arrayOf */; set => ParametersBody.MappingPropertyStructure = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="ParametersBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat _parametersBody= new Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.ConnectorMappingResourceFormat();

        /// <summary>The connector mapping resource format.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat ParametersBody { get => this._parametersBody; set => this._parametersBody = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group.")]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzCustomerInsightsConnectorMapping_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzCustomerInsightsConnectorMapping_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ConnectorMappingsCreateOrUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.ConnectorMappingsCreateOrUpdate(ResourceGroupName, HubName, ConnectorName, MappingName, SubscriptionId, ParametersBody, onOk, onCreated, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  ResourceGroupName=ResourceGroupName,HubName=HubName,ConnectorName=ConnectorName,MappingName=MappingName,SubscriptionId=SubscriptionId,body=ParametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat
                WriteObject((await response));
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat
                WriteObject((await response));
            }
        }
    }
}