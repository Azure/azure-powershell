
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a profile within a Hub, or updates an existing profile.
.Description
Creates a profile within a Hub, or updates an existing profile.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IProfileResourceFormat
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

FIELD <IPropertyDefinition[]>: The properties of the Profile.
  FieldName <String>: Name of the property.
  FieldType <String>: Type of the property.
  [ArrayValueSeparator <String>]: Array value separator for properties with isArray set.
  [EnumValidValue <IProfileEnumValidValuesFormat[]>]: Describes valid values for an enum property.
    [LocalizedValueName <IProfileEnumValidValuesFormatLocalizedValueNames>]: Localized names of the enum member.
      [(Any) <String>]: This indicates any property can be added to this object.
    [Value <Int32?>]: The integer value of the enum member.
  [IsArray <Boolean?>]: Indicates if the property is actually an array of the fieldType above on the data api.
  [IsAvailableInGraph <Boolean?>]: Whether property is available in graph or not.
  [IsEnum <Boolean?>]: Indicates if the property is an enum.
  [IsFlagEnum <Boolean?>]: Indicates if the property is an flag enum.
  [IsImage <Boolean?>]: Whether the property is an Image.
  [IsLocalizedString <Boolean?>]: Whether the property is a localized string.
  [IsName <Boolean?>]: Whether the property is a name or a part of name.
  [IsRequired <Boolean?>]: Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
  [MaxLength <Int32?>]: Max length of string. Used only if type is string.
  [PropertyId <String>]: The ID associated with the property.
  [SchemaItemPropLink <String>]: URL encoded schema.org item prop link for the property.

STRONGID <IStrongId[]>: The strong IDs.
  KeyPropertyName <String[]>: The properties which make up the unique ID.
  Name <String>: The Name identifying the strong ID.
  [Description <IStrongIdDescription>]: Localized descriptions.
    [(Any) <String>]: This indicates any property can be added to this object.
  [DisplayName <IStrongIdDisplayName>]: Localized display name.
    [(Any) <String>]: This indicates any property can be added to this object.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.customerinsights/new-azcustomerinsightsprofile
#>
function New-AzCustomerInsightsProfile {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IProfileResourceFormat])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the hub.
    ${HubName},

    [Parameter(Mandatory)]
    [Alias('ProfileName')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the profile.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The api entity set name.
    # This becomes the odata entity set name for the entity Type being referred in this object.
    ${ApiEntitySetName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IMetadataDefinitionBaseAttributes]))]
    [System.Collections.Hashtable]
    # The attributes for the Type.
    ${Attribute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IMetadataDefinitionBaseDescription]))]
    [System.Collections.Hashtable]
    # Localized descriptions for the property.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IMetadataDefinitionBaseDisplayName]))]
    [System.Collections.Hashtable]
    # Localized display names for the property.
    ${DisplayName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes]
    # Type of entity.
    ${EntityType},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IPropertyDefinition[]]
    # The properties of the Profile.
    # To construct, see NOTES section for FIELD properties and create a hash table.
    ${Field},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.Int32]
    # The instance count.
    ${InstancesCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Large Image associated with the Property or EntityType.
    ${LargeImage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IMetadataDefinitionBaseLocalizedAttributes]))]
    [System.Collections.Hashtable]
    # Any custom localized attributes for the Type.
    ${LocalizedAttribute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Medium Image associated with the Property or EntityType.
    ${MediumImage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The schema org link.
    # This helps ACI identify and suggest semantic models.
    ${SchemaItemTypeLink},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Small Image associated with the Property or EntityType.
    ${SmallImage},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IStrongId[]]
    # The strong IDs.
    # To construct, see NOTES section for STRONGID properties and create a hash table.
    ${StrongId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The timestamp property name.
    # Represents the time when the interaction or profile update happened.
    ${TimestampFieldName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The name of the entity.
    ${TypeName},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.CustomerInsights.private\New-AzCustomerInsightsProfile_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
