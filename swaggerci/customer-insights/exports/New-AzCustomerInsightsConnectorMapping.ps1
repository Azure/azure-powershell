
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a connector mapping or updates an existing connector mapping in the connector.
.Description
Creates a connector mapping or updates an existing connector mapping in the connector.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

MAPPINGPROPERTYSTRUCTURE <IConnectorMappingStructure[]>: Ingestion mapping information at property level.
  ColumnName <String>: The column name of the import file.
  PropertyName <String>: The property name of the mapping entity.
  [CustomFormatSpecifier <String>]: Custom format specifier for input parsing.
  [IsEncrypted <Boolean?>]: Indicates if the column is encrypted.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.customerinsights/new-azcustomerinsightsconnectormapping
#>
function New-AzCustomerInsightsConnectorMapping {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingResourceFormat])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the connector.
    ${ConnectorName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the hub.
    ${HubName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the connector mapping.
    ${MappingName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.FrequencyTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.FrequencyTypes]
    # The frequency to update.
    ${AvailabilityFrequency},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.Int32]
    # The interval of the given frequency to use.
    ${AvailabilityInterval},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.CompletionOperationTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.CompletionOperationTypes]
    # The type of completion operation.
    ${CompleteOperationCompletionOperationType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The destination folder where files will be moved to once the import is done.
    ${CompleteOperationDestinationFolder},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ConnectorTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ConnectorTypes]
    # Type of connector.
    ${ConnectorType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The description of the connector mapping.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Display name for the connector mapping.
    ${DisplayName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.EntityTypes]
    # Defines which entity type the file should map to.
    ${EntityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The mapping entity name.
    ${EntityTypeName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.Int32]
    # The error limit allowed while importing data.
    ${ErrorManagementErrorLimit},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ErrorManagementTypes])]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Support.ErrorManagementTypes]
    # The type of error management to use for the mapping.
    ${ErrorManagementType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The oData language.
    ${FormatAcceptLanguage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Character separating array elements.
    ${FormatArraySeparator},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The character that signifies a break between columns.
    ${FormatColumnDelimiter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Quote character, used to indicate enquoted fields.
    ${FormatQuoteCharacter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Escape character for quotes, can be the same as the quoteCharacter.
    ${FormatQuoteEscapeCharacter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The file filter for the mapping.
    ${MappingPropertyFileFilter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # The folder path for the mapping.
    ${MappingPropertyFolderPath},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If the file contains a header or not.
    ${MappingPropertyHasHeader},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IConnectorMappingStructure[]]
    # Ingestion mapping information at property level.
    # To construct, see NOTES section for MAPPINGPROPERTYSTRUCTURE properties and create a hash table.
    ${MappingPropertyStructure},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.CustomerInsights.private\New-AzCustomerInsightsConnectorMapping_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
