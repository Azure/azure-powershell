
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets entity type (profile or interaction) image upload URL.
.Description
Gets entity type (profile or interaction) image upload URL.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IGetImageUploadUrlInput
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.ICustomerInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IImageDefinition
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ICustomerInsightsIdentity>: Identity Parameter
  [AssignmentName <String>]: The assignment name
  [AuthorizationPolicyName <String>]: The name of the policy.
  [ConnectorName <String>]: The name of the connector.
  [HubName <String>]: The name of the Hub.
  [Id <String>]: Resource identity path
  [InteractionName <String>]: The name of the interaction.
  [KpiName <String>]: The name of the KPI.
  [LinkName <String>]: The name of the link.
  [MappingName <String>]: The name of the connector mapping.
  [PredictionName <String>]: The name of the Prediction.
  [ProfileName <String>]: The name of the profile.
  [RelationshipLinkName <String>]: The name of the relationship link.
  [RelationshipName <String>]: The name of the Relationship.
  [ResourceGroupName <String>]: The name of the resource group.
  [SubscriptionId <String>]: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [ViewName <String>]: The name of the view.
  [WidgetTypeName <String>]: The name of the widget type.

PARAMETER <IGetImageUploadUrlInput>: Input type for getting image upload url.
  [EntityType <String>]: Type of entity. Can be Profile or Interaction.
  [EntityTypeName <String>]: Name of the entity type.
  [RelativePath <String>]: Relative path of the image.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.customerinsights/get-azcustomerinsightsimageuploadurl
#>
function Get-AzCustomerInsightsImageUploadUrl {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IImageDefinition])]
[CmdletBinding(DefaultParameterSetName='GetExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='Get1', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the hub.
    ${HubName},

    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='Get1', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded', Mandatory)]
    [Parameter(ParameterSetName='GetExpanded1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Get')]
    [Parameter(ParameterSetName='Get1')]
    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Gets subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.ICustomerInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Get1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Models.Api20170426.IGetImageUploadUrlInput]
    # Input type for getting image upload url.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetExpanded1')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Type of entity.
    # Can be Profile or Interaction.
    ${EntityType},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetExpanded1')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Name of the entity type.
    ${EntityTypeName},

    [Parameter(ParameterSetName='GetExpanded')]
    [Parameter(ParameterSetName='GetExpanded1')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded')]
    [Parameter(ParameterSetName='GetViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Body')]
    [System.String]
    # Relative path of the image.
    ${RelativePath},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Get = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_Get';
            Get1 = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_Get1';
            GetExpanded = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_GetExpanded';
            GetExpanded1 = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_GetExpanded1';
            GetViaIdentity = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_GetViaIdentity';
            GetViaIdentity1 = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_GetViaIdentity1';
            GetViaIdentityExpanded = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_GetViaIdentityExpanded';
            GetViaIdentityExpanded1 = 'Az.CustomerInsights.private\Get-AzCustomerInsightsImageUploadUrl_GetViaIdentityExpanded1';
        }
        if (('Get', 'Get1', 'GetExpanded', 'GetExpanded1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CustomerInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
