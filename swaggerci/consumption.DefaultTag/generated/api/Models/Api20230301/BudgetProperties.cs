// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Extensions;

    /// <summary>The properties of the budget.</summary>
    public partial class BudgetProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Amount" /> property.</summary>
        private decimal _amount;

        /// <summary>The total amount of cost to track with the budget</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public decimal Amount { get => this._amount; set => this._amount = value; }

        /// <summary>Backing field for <see cref="Category" /> property.</summary>
        private string _category= @"Cost";

        /// <summary>The category of the budget, whether the budget tracks cost or usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public string Category { get => this._category; }

        /// <summary>Backing field for <see cref="CurrentSpend" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpend _currentSpend;

        /// <summary>The current amount of cost which is being tracked for a budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpend CurrentSpend { get => (this._currentSpend = this._currentSpend ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.CurrentSpend()); }

        /// <summary>The total amount of cost which is being tracked by the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public decimal? CurrentSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpendInternal)CurrentSpend).Amount; }

        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string CurrentSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpendInternal)CurrentSpend).Unit; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string DimensionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionName = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionOperator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string[] DimensionValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionValue = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilter _filter;

        /// <summary>May be used to filter budgets by user-specified dimensions and/or tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilter Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.BudgetFilter()); set => this._filter = value; }

        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterProperties[] FilterAnd { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).And; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).And = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="ForecastSpend" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpend _forecastSpend;

        /// <summary>The forecasted cost which is being tracked for a budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpend ForecastSpend { get => (this._forecastSpend = this._forecastSpend ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ForecastSpend()); }

        /// <summary>
        /// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the
        /// budget contains a forecast alert type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public decimal? ForecastSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpendInternal)ForecastSpend).Amount; }

        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string ForecastSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpendInternal)ForecastSpend).Unit; }

        /// <summary>Internal Acessors for Category</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.Category { get => this._category; set { {_category = value;} } }

        /// <summary>Internal Acessors for CurrentSpend</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpend Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.CurrentSpend { get => (this._currentSpend = this._currentSpend ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.CurrentSpend()); set { {_currentSpend = value;} } }

        /// <summary>Internal Acessors for CurrentSpendAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.CurrentSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpendInternal)CurrentSpend).Amount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpendInternal)CurrentSpend).Amount = value; }

        /// <summary>Internal Acessors for CurrentSpendUnit</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.CurrentSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpendInternal)CurrentSpend).Unit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpendInternal)CurrentSpend).Unit = value; }

        /// <summary>Internal Acessors for DimensionOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionOperator; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).DimensionOperator = value; }

        /// <summary>Internal Acessors for Filter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilter Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.BudgetFilter()); set { {_filter = value;} } }

        /// <summary>Internal Acessors for FilterDimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.FilterDimension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).Dimension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).Dimension = value; }

        /// <summary>Internal Acessors for FilterTag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.FilterTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).Tag = value; }

        /// <summary>Internal Acessors for ForecastSpend</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpend Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.ForecastSpend { get => (this._forecastSpend = this._forecastSpend ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ForecastSpend()); set { {_forecastSpend = value;} } }

        /// <summary>Internal Acessors for ForecastSpendAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.ForecastSpendAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpendInternal)ForecastSpend).Amount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpendInternal)ForecastSpend).Amount = value; }

        /// <summary>Internal Acessors for ForecastSpendUnit</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.ForecastSpendUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpendInternal)ForecastSpend).Unit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpendInternal)ForecastSpend).Unit = value; }

        /// <summary>Internal Acessors for TagOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagOperator; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagOperator = value; }

        /// <summary>Internal Acessors for TimePeriod</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriod Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesInternal.TimePeriod { get => (this._timePeriod = this._timePeriod ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.BudgetTimePeriod()); set { {_timePeriod = value;} } }

        /// <summary>Backing field for <see cref="Notification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesNotifications _notification;

        /// <summary>
        /// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesNotifications Notification { get => (this._notification = this._notification ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.BudgetPropertiesNotifications()); set => this._notification = value; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string TagName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagName = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagOperator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public string[] TagValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterInternal)Filter).TagValue = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="TimeGrain" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType _timeGrain;

        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
        /// and BillingAnnual are only supported by WD customers
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType TimeGrain { get => this._timeGrain; set => this._timeGrain = value; }

        /// <summary>Backing field for <see cref="TimePeriod" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriod _timePeriod;

        /// <summary>
        /// Has start and end date of the budget. The start date must be first of the month and should be less than the end date.
        /// Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start
        /// date should be selected within the timegrain period. There are no restrictions on the end date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriod TimePeriod { get => (this._timePeriod = this._timePeriod ?? new Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.BudgetTimePeriod()); set => this._timePeriod = value; }

        /// <summary>
        /// The end date for the budget. If not provided, we default this to 10 years from the start date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public global::System.DateTime? TimePeriodEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriodInternal)TimePeriod).EndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriodInternal)TimePeriod).EndDate = value ?? default(global::System.DateTime); }

        /// <summary>The start date for the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Origin(Microsoft.Azure.PowerShell.Cmdlets.Consumption.PropertyOrigin.Inlined)]
        public global::System.DateTime TimePeriodStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriodInternal)TimePeriod).StartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriodInternal)TimePeriod).StartDate = value ; }

        /// <summary>Creates an new <see cref="BudgetProperties" /> instance.</summary>
        public BudgetProperties()
        {

        }
    }
    /// The properties of the budget.
    public partial interface IBudgetProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.IJsonSerializable
    {
        /// <summary>The total amount of cost to track with the budget</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The total amount of cost to track with the budget",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal Amount { get; set; }
        /// <summary>The category of the budget, whether the budget tracks cost or usage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"The category of the budget, whether the budget tracks cost or usage.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        string Category { get;  }
        /// <summary>The total amount of cost which is being tracked by the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The total amount of cost which is being tracked by the budget.",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CurrentSpendAmount { get;  }
        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unit of measure for the budget amount.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string CurrentSpendUnit { get;  }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        string[] DimensionValue { get; set; }
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The logical ""AND"" expression. Must have at least 2 items.",
        SerializedName = @"and",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterProperties[] FilterAnd { get; set; }
        /// <summary>
        /// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the
        /// budget contains a forecast alert type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? ForecastSpendAmount { get;  }
        /// <summary>The unit of measure for the budget amount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unit of measure for the budget amount.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string ForecastSpendUnit { get;  }
        /// <summary>
        /// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
        SerializedName = @"notifications",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesNotifications) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesNotifications Notification { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string TagOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        string[] TagValue { get; set; }
        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
        /// and BillingAnnual are only supported by WD customers
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers",
        SerializedName = @"timeGrain",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType TimeGrain { get; set; }
        /// <summary>
        /// The end date for the budget. If not provided, we default this to 10 years from the start date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The end date for the budget. If not provided, we default this to 10 years from the start date.",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TimePeriodEndDate { get; set; }
        /// <summary>The start date for the budget.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Consumption.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The start date for the budget.",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime TimePeriodStartDate { get; set; }

    }
    /// The properties of the budget.
    internal partial interface IBudgetPropertiesInternal

    {
        /// <summary>The total amount of cost to track with the budget</summary>
        decimal Amount { get; set; }
        /// <summary>The category of the budget, whether the budget tracks cost or usage.</summary>
        string Category { get; set; }
        /// <summary>The current amount of cost which is being tracked for a budget.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.ICurrentSpend CurrentSpend { get; set; }
        /// <summary>The total amount of cost which is being tracked by the budget.</summary>
        decimal? CurrentSpendAmount { get; set; }
        /// <summary>The unit of measure for the budget amount.</summary>
        string CurrentSpendUnit { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string DimensionOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        string[] DimensionValue { get; set; }
        /// <summary>May be used to filter budgets by user-specified dimensions and/or tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilter Filter { get; set; }
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetFilterProperties[] FilterAnd { get; set; }
        /// <summary>Has comparison expression for a dimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetComparisonExpression FilterDimension { get; set; }
        /// <summary>Has comparison expression for a tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetComparisonExpression FilterTag { get; set; }
        /// <summary>The forecasted cost which is being tracked for a budget.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IForecastSpend ForecastSpend { get; set; }
        /// <summary>
        /// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the
        /// budget contains a forecast alert type.
        /// </summary>
        decimal? ForecastSpendAmount { get; set; }
        /// <summary>The unit of measure for the budget amount.</summary>
        string ForecastSpendUnit { get; set; }
        /// <summary>
        /// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetPropertiesNotifications Notification { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string TagOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        string[] TagValue { get; set; }
        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
        /// and BillingAnnual are only supported by WD customers
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.TimeGrainType TimeGrain { get; set; }
        /// <summary>
        /// Has start and end date of the budget. The start date must be first of the month and should be less than the end date.
        /// Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start
        /// date should be selected within the timegrain period. There are no restrictions on the end date.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Consumption.Models.Api20230301.IBudgetTimePeriod TimePeriod { get; set; }
        /// <summary>
        /// The end date for the budget. If not provided, we default this to 10 years from the start date.
        /// </summary>
        global::System.DateTime? TimePeriodEndDate { get; set; }
        /// <summary>The start date for the budget.</summary>
        global::System.DateTime TimePeriodStartDate { get; set; }

    }
}