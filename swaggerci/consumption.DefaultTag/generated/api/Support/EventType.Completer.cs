// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support
{

    /// <summary>Identifies the type of the event.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Consumption.Support.EventTypeTypeConverter))]
    public partial struct EventType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SettledCharges".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SettledCharges'", "SettledCharges", global::System.Management.Automation.CompletionResultType.ParameterValue, "SettledCharges");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingCharges".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingCharges'", "PendingCharges", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingCharges");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingAdjustments".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingAdjustments'", "PendingAdjustments", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingAdjustments");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingNewCredit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingNewCredit'", "PendingNewCredit", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingNewCredit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PendingExpiredCredit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PendingExpiredCredit'", "PendingExpiredCredit", global::System.Management.Automation.CompletionResultType.ParameterValue, "PendingExpiredCredit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UnKnown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UnKnown'", "UnKnown", global::System.Management.Automation.CompletionResultType.ParameterValue, "UnKnown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NewCredit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NewCredit'", "NewCredit", global::System.Management.Automation.CompletionResultType.ParameterValue, "NewCredit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CreditExpired".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CreditExpired'", "CreditExpired", global::System.Management.Automation.CompletionResultType.ParameterValue, "CreditExpired");
            }
        }
    }
}