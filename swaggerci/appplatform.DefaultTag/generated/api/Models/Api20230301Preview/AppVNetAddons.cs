// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.Extensions;

    /// <summary>Additional App settings in vnet injection instance</summary>
    public partial class AppVNetAddons :
        Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview.IAppVNetAddons,
        Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview.IAppVNetAddonsInternal
    {

        /// <summary>Internal Acessors for PublicEndpointUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview.IAppVNetAddonsInternal.PublicEndpointUrl { get => this._publicEndpointUrl; set { {_publicEndpointUrl = value;} } }

        /// <summary>Backing field for <see cref="PublicEndpoint" /> property.</summary>
        private bool? _publicEndpoint;

        /// <summary>
        /// Indicates whether the App in vnet injection instance exposes endpoint which could be accessed from internet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Origin(Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.PropertyOrigin.Owned)]
        public bool? PublicEndpoint { get => this._publicEndpoint; set => this._publicEndpoint = value; }

        /// <summary>Backing field for <see cref="PublicEndpointUrl" /> property.</summary>
        private string _publicEndpointUrl;

        /// <summary>URL of the App in vnet injection instance which could be accessed from internet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Origin(Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.PropertyOrigin.Owned)]
        public string PublicEndpointUrl { get => this._publicEndpointUrl; }

        /// <summary>Creates an new <see cref="AppVNetAddons" /> instance.</summary>
        public AppVNetAddons()
        {

        }
    }
    /// Additional App settings in vnet injection instance
    public partial interface IAppVNetAddons :
        Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Indicates whether the App in vnet injection instance exposes endpoint which could be accessed from internet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the App in vnet injection instance exposes endpoint which could be accessed from internet.",
        SerializedName = @"publicEndpoint",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PublicEndpoint { get; set; }
        /// <summary>URL of the App in vnet injection instance which could be accessed from internet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"URL of the App in vnet injection instance which could be accessed from internet",
        SerializedName = @"publicEndpointUrl",
        PossibleTypes = new [] { typeof(string) })]
        string PublicEndpointUrl { get;  }

    }
    /// Additional App settings in vnet injection instance
    internal partial interface IAppVNetAddonsInternal

    {
        /// <summary>
        /// Indicates whether the App in vnet injection instance exposes endpoint which could be accessed from internet.
        /// </summary>
        bool? PublicEndpoint { get; set; }
        /// <summary>URL of the App in vnet injection instance which could be accessed from internet</summary>
        string PublicEndpointUrl { get; set; }

    }
}