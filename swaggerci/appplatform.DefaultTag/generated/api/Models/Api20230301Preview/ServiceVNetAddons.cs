// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.Extensions;

    /// <summary>Additional Service settings in vnet injection instance</summary>
    public partial class ServiceVNetAddons :
        Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview.IServiceVNetAddons,
        Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Models.Api20230301Preview.IServiceVNetAddonsInternal
    {

        /// <summary>Backing field for <see cref="DataPlanePublicEndpoint" /> property.</summary>
        private bool? _dataPlanePublicEndpoint;

        /// <summary>
        /// Indicates whether the data plane components(log stream, app connect, remote debugging) in vnet injection instance could
        /// be accessed from internet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Origin(Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.PropertyOrigin.Owned)]
        public bool? DataPlanePublicEndpoint { get => this._dataPlanePublicEndpoint; set => this._dataPlanePublicEndpoint = value; }

        /// <summary>Backing field for <see cref="LogStreamPublicEndpoint" /> property.</summary>
        private bool? _logStreamPublicEndpoint;

        /// <summary>
        /// Indicates whether the log stream in vnet injection instance could be accessed from internet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Origin(Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.PropertyOrigin.Owned)]
        public bool? LogStreamPublicEndpoint { get => this._logStreamPublicEndpoint; set => this._logStreamPublicEndpoint = value; }

        /// <summary>Creates an new <see cref="ServiceVNetAddons" /> instance.</summary>
        public ServiceVNetAddons()
        {

        }
    }
    /// Additional Service settings in vnet injection instance
    public partial interface IServiceVNetAddons :
        Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Indicates whether the data plane components(log stream, app connect, remote debugging) in vnet injection instance could
        /// be accessed from internet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the data plane components(log stream, app connect, remote debugging) in vnet injection instance could be accessed from internet.",
        SerializedName = @"dataPlanePublicEndpoint",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DataPlanePublicEndpoint { get; set; }
        /// <summary>
        /// Indicates whether the log stream in vnet injection instance could be accessed from internet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AppPlatform.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the log stream in vnet injection instance could be accessed from internet.",
        SerializedName = @"logStreamPublicEndpoint",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogStreamPublicEndpoint { get; set; }

    }
    /// Additional Service settings in vnet injection instance
    internal partial interface IServiceVNetAddonsInternal

    {
        /// <summary>
        /// Indicates whether the data plane components(log stream, app connect, remote debugging) in vnet injection instance could
        /// be accessed from internet.
        /// </summary>
        bool? DataPlanePublicEndpoint { get; set; }
        /// <summary>
        /// Indicates whether the log stream in vnet injection instance could be accessed from internet.
        /// </summary>
        bool? LogStreamPublicEndpoint { get; set; }

    }
}