// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>Gateway hostname configuration details.</summary>
    public partial class GatewayHostnameConfigurationContract :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContract,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.Resource();

        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string CertificateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).CertificateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).CertificateId = value ?? null; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Hostname value. Supports valid domain name, partial or full wildcard</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string Hostname { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Hostname; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Hostname = value ?? null; }

        /// <summary>Specifies if HTTP/2.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? Http2Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Http2Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Http2Enabled = value ?? default(bool); }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Id; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractProperties Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.GatewayHostnameConfigurationContractProperties()); set { {_property = value;} } }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Name; }

        /// <summary>Determines whether gateway requests client certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? NegotiateClientCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).NegotiateClientCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).NegotiateClientCertificate = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractProperties _property;

        /// <summary>Gateway hostname configuration details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.GatewayHostnameConfigurationContractProperties()); set => this._property = value; }

        /// <summary>Specifies if TLS 1.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? Tls10Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Tls10Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Tls10Enabled = value ?? default(bool); }

        /// <summary>Specifies if TLS 1.1 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? Tls11Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Tls11Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal)Property).Tls11Enabled = value ?? default(bool); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="GatewayHostnameConfigurationContract" /> instance.</summary>
        public GatewayHostnameConfigurationContract()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Gateway hostname configuration details.
    public partial interface IGatewayHostnameConfigurationContract :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResource
    {
        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Identifier of Certificate entity that will be used for TLS connection establishment",
        SerializedName = @"certificateId",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateId { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>Hostname value. Supports valid domain name, partial or full wildcard</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Hostname value. Supports valid domain name, partial or full wildcard",
        SerializedName = @"hostname",
        PossibleTypes = new [] { typeof(string) })]
        string Hostname { get; set; }
        /// <summary>Specifies if HTTP/2.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if HTTP/2.0 is supported",
        SerializedName = @"http2Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Http2Enabled { get; set; }
        /// <summary>Determines whether gateway requests client certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether gateway requests client certificate",
        SerializedName = @"negotiateClientCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NegotiateClientCertificate { get; set; }
        /// <summary>Specifies if TLS 1.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if TLS 1.0 is supported",
        SerializedName = @"tls10Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Tls10Enabled { get; set; }
        /// <summary>Specifies if TLS 1.1 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if TLS 1.1 is supported",
        SerializedName = @"tls11Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Tls11Enabled { get; set; }

    }
    /// Gateway hostname configuration details.
    internal partial interface IGatewayHostnameConfigurationContractInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20.IResourceInternal
    {
        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        string CertificateId { get; set; }

        string ETag { get; set; }
        /// <summary>Hostname value. Supports valid domain name, partial or full wildcard</summary>
        string Hostname { get; set; }
        /// <summary>Specifies if HTTP/2.0 is supported</summary>
        bool? Http2Enabled { get; set; }
        /// <summary>Determines whether gateway requests client certificate</summary>
        bool? NegotiateClientCertificate { get; set; }
        /// <summary>Gateway hostname configuration details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractProperties Property { get; set; }
        /// <summary>Specifies if TLS 1.0 is supported</summary>
        bool? Tls10Enabled { get; set; }
        /// <summary>Specifies if TLS 1.1 is supported</summary>
        bool? Tls11Enabled { get; set; }

    }
}