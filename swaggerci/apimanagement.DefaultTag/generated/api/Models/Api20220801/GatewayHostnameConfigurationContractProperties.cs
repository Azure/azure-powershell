// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>Gateway hostname configuration details.</summary>
    public partial class GatewayHostnameConfigurationContractProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IGatewayHostnameConfigurationContractPropertiesInternal
    {

        /// <summary>Backing field for <see cref="CertificateId" /> property.</summary>
        private string _certificateId;

        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string CertificateId { get => this._certificateId; set => this._certificateId = value; }

        /// <summary>Backing field for <see cref="Hostname" /> property.</summary>
        private string _hostname;

        /// <summary>Hostname value. Supports valid domain name, partial or full wildcard</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string Hostname { get => this._hostname; set => this._hostname = value; }

        /// <summary>Backing field for <see cref="Http2Enabled" /> property.</summary>
        private bool? _http2Enabled;

        /// <summary>Specifies if HTTP/2.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public bool? Http2Enabled { get => this._http2Enabled; set => this._http2Enabled = value; }

        /// <summary>Backing field for <see cref="NegotiateClientCertificate" /> property.</summary>
        private bool? _negotiateClientCertificate;

        /// <summary>Determines whether gateway requests client certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public bool? NegotiateClientCertificate { get => this._negotiateClientCertificate; set => this._negotiateClientCertificate = value; }

        /// <summary>Backing field for <see cref="Tls10Enabled" /> property.</summary>
        private bool? _tls10Enabled;

        /// <summary>Specifies if TLS 1.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public bool? Tls10Enabled { get => this._tls10Enabled; set => this._tls10Enabled = value; }

        /// <summary>Backing field for <see cref="Tls11Enabled" /> property.</summary>
        private bool? _tls11Enabled;

        /// <summary>Specifies if TLS 1.1 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public bool? Tls11Enabled { get => this._tls11Enabled; set => this._tls11Enabled = value; }

        /// <summary>
        /// Creates an new <see cref="GatewayHostnameConfigurationContractProperties" /> instance.
        /// </summary>
        public GatewayHostnameConfigurationContractProperties()
        {

        }
    }
    /// Gateway hostname configuration details.
    public partial interface IGatewayHostnameConfigurationContractProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Identifier of Certificate entity that will be used for TLS connection establishment",
        SerializedName = @"certificateId",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateId { get; set; }
        /// <summary>Hostname value. Supports valid domain name, partial or full wildcard</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Hostname value. Supports valid domain name, partial or full wildcard",
        SerializedName = @"hostname",
        PossibleTypes = new [] { typeof(string) })]
        string Hostname { get; set; }
        /// <summary>Specifies if HTTP/2.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if HTTP/2.0 is supported",
        SerializedName = @"http2Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Http2Enabled { get; set; }
        /// <summary>Determines whether gateway requests client certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether gateway requests client certificate",
        SerializedName = @"negotiateClientCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NegotiateClientCertificate { get; set; }
        /// <summary>Specifies if TLS 1.0 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if TLS 1.0 is supported",
        SerializedName = @"tls10Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Tls10Enabled { get; set; }
        /// <summary>Specifies if TLS 1.1 is supported</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if TLS 1.1 is supported",
        SerializedName = @"tls11Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Tls11Enabled { get; set; }

    }
    /// Gateway hostname configuration details.
    internal partial interface IGatewayHostnameConfigurationContractPropertiesInternal

    {
        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        string CertificateId { get; set; }
        /// <summary>Hostname value. Supports valid domain name, partial or full wildcard</summary>
        string Hostname { get; set; }
        /// <summary>Specifies if HTTP/2.0 is supported</summary>
        bool? Http2Enabled { get; set; }
        /// <summary>Determines whether gateway requests client certificate</summary>
        bool? NegotiateClientCertificate { get; set; }
        /// <summary>Specifies if TLS 1.0 is supported</summary>
        bool? Tls10Enabled { get; set; }
        /// <summary>Specifies if TLS 1.1 is supported</summary>
        bool? Tls11Enabled { get; set; }

    }
}