// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>Custom hostname configuration.</summary>
    public partial class HostnameConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IHostnameConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IHostnameConfigurationInternal
    {

        /// <summary>Backing field for <see cref="Certificate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformation _certificate;

        /// <summary>Certificate information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformation Certificate { get => (this._certificate = this._certificate ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.CertificateInformation()); set => this._certificate = value; }

        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
        /// the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public global::System.DateTime? CertificateExpiry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformationInternal)Certificate).Expiry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformationInternal)Certificate).Expiry = value ?? default(global::System.DateTime); }

        /// <summary>Backing field for <see cref="CertificatePassword" /> property.</summary>
        private string _certificatePassword;

        /// <summary>Certificate Password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string CertificatePassword { get => this._certificatePassword; set => this._certificatePassword = value; }

        /// <summary>Backing field for <see cref="CertificateSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateSource? _certificateSource;

        /// <summary>Certificate Source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateSource? CertificateSource { get => this._certificateSource; set => this._certificateSource = value; }

        /// <summary>Backing field for <see cref="CertificateStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateStatus? _certificateStatus;

        /// <summary>Certificate Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateStatus? CertificateStatus { get => this._certificateStatus; set => this._certificateStatus = value; }

        /// <summary>Subject of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string CertificateSubject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformationInternal)Certificate).Subject; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformationInternal)Certificate).Subject = value ?? null; }

        /// <summary>Thumbprint of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string CertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformationInternal)Certificate).Thumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformationInternal)Certificate).Thumbprint = value ?? null; }

        /// <summary>Backing field for <see cref="DefaultSslBinding" /> property.</summary>
        private bool? _defaultSslBinding;

        /// <summary>
        /// Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not
        /// send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has
        /// multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to gateway
        /// Hostname Type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public bool? DefaultSslBinding { get => this._defaultSslBinding; set => this._defaultSslBinding = value; }

        /// <summary>Backing field for <see cref="EncodedCertificate" /> property.</summary>
        private string _encodedCertificate;

        /// <summary>Base64 Encoded certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string EncodedCertificate { get => this._encodedCertificate; set => this._encodedCertificate = value; }

        /// <summary>Backing field for <see cref="HostName" /> property.</summary>
        private string _hostName;

        /// <summary>Hostname to configure on the Api Management service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string HostName { get => this._hostName; set => this._hostName = value; }

        /// <summary>Backing field for <see cref="IdentityClientId" /> property.</summary>
        private string _identityClientId;

        /// <summary>
        /// System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing
        /// the SSL certificate.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string IdentityClientId { get => this._identityClientId; set => this._identityClientId = value; }

        /// <summary>Backing field for <see cref="KeyVaultId" /> property.</summary>
        private string _keyVaultId;

        /// <summary>
        /// Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update
        /// of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret
        /// should be of type *application/x-pkcs12*
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string KeyVaultId { get => this._keyVaultId; set => this._keyVaultId = value; }

        /// <summary>Internal Acessors for Certificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformation Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.IHostnameConfigurationInternal.Certificate { get => (this._certificate = this._certificate ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.CertificateInformation()); set { {_certificate = value;} } }

        /// <summary>Backing field for <see cref="NegotiateClientCertificate" /> property.</summary>
        private bool? _negotiateClientCertificate;

        /// <summary>
        /// Specify true to always negotiate client certificate on the hostname. Default Value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public bool? NegotiateClientCertificate { get => this._negotiateClientCertificate; set => this._negotiateClientCertificate = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Support.HostnameType _type;

        /// <summary>Hostname type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Support.HostnameType Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="HostnameConfiguration" /> instance.</summary>
        public HostnameConfiguration()
        {

        }
    }
    /// Custom hostname configuration.
    public partial interface IHostnameConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
        /// the ISO 8601 standard.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.",
        SerializedName = @"expiry",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CertificateExpiry { get; set; }
        /// <summary>Certificate Password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate Password.",
        SerializedName = @"certificatePassword",
        PossibleTypes = new [] { typeof(string) })]
        string CertificatePassword { get; set; }
        /// <summary>Certificate Source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate Source.",
        SerializedName = @"certificateSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateSource? CertificateSource { get; set; }
        /// <summary>Certificate Status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate Status.",
        SerializedName = @"certificateStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateStatus? CertificateStatus { get; set; }
        /// <summary>Subject of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subject of the certificate.",
        SerializedName = @"subject",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSubject { get; set; }
        /// <summary>Thumbprint of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Thumbprint of the certificate.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateThumbprint { get; set; }
        /// <summary>
        /// Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not
        /// send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has
        /// multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to gateway
        /// Hostname Type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to gateway Hostname Type.",
        SerializedName = @"defaultSslBinding",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DefaultSslBinding { get; set; }
        /// <summary>Base64 Encoded certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64 Encoded certificate.",
        SerializedName = @"encodedCertificate",
        PossibleTypes = new [] { typeof(string) })]
        string EncodedCertificate { get; set; }
        /// <summary>Hostname to configure on the Api Management service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Hostname to configure on the Api Management service.",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get; set; }
        /// <summary>
        /// System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing
        /// the SSL certificate.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.",
        SerializedName = @"identityClientId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityClientId { get; set; }
        /// <summary>
        /// Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update
        /// of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret
        /// should be of type *application/x-pkcs12*
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*",
        SerializedName = @"keyVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultId { get; set; }
        /// <summary>
        /// Specify true to always negotiate client certificate on the hostname. Default Value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify true to always negotiate client certificate on the hostname. Default Value is false.",
        SerializedName = @"negotiateClientCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NegotiateClientCertificate { get; set; }
        /// <summary>Hostname type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Hostname type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Support.HostnameType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.HostnameType Type { get; set; }

    }
    /// Custom hostname configuration.
    internal partial interface IHostnameConfigurationInternal

    {
        /// <summary>Certificate information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20220801.ICertificateInformation Certificate { get; set; }
        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
        /// the ISO 8601 standard.
        /// </summary>
        global::System.DateTime? CertificateExpiry { get; set; }
        /// <summary>Certificate Password.</summary>
        string CertificatePassword { get; set; }
        /// <summary>Certificate Source.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateSource? CertificateSource { get; set; }
        /// <summary>Certificate Status.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.CertificateStatus? CertificateStatus { get; set; }
        /// <summary>Subject of the certificate.</summary>
        string CertificateSubject { get; set; }
        /// <summary>Thumbprint of the certificate.</summary>
        string CertificateThumbprint { get; set; }
        /// <summary>
        /// Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not
        /// send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has
        /// multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to gateway
        /// Hostname Type.
        /// </summary>
        bool? DefaultSslBinding { get; set; }
        /// <summary>Base64 Encoded certificate.</summary>
        string EncodedCertificate { get; set; }
        /// <summary>Hostname to configure on the Api Management service.</summary>
        string HostName { get; set; }
        /// <summary>
        /// System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing
        /// the SSL certificate.
        /// </summary>
        string IdentityClientId { get; set; }
        /// <summary>
        /// Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update
        /// of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret
        /// should be of type *application/x-pkcs12*
        /// </summary>
        string KeyVaultId { get; set; }
        /// <summary>
        /// Specify true to always negotiate client certificate on the hostname. Default Value is false.
        /// </summary>
        bool? NegotiateClientCertificate { get; set; }
        /// <summary>Hostname type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Support.HostnameType Type { get; set; }

    }
}