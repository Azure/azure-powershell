// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Extensions;

    /// <summary>Virtual disk controller model</summary>
    public partial class VirtualDiskController :
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController,
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskControllerInternal
    {

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Controller's id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskControllerInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskControllerInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for SubType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskControllerInternal.SubType { get => this._subType; set { {_subType = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskControllerInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The display name of Controller</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>Backing field for <see cref="SubType" /> property.</summary>
        private string _subType;

        /// <summary>
        /// dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string SubType { get => this._subType; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>disk controller type (SCSI)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Creates an new <see cref="VirtualDiskController" /> instance.</summary>
        public VirtualDiskController()
        {

        }
    }
    /// Virtual disk controller model
    public partial interface IVirtualDiskController :
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.IJsonSerializable
    {
        /// <summary>Controller's id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Controller's id",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The display name of Controller</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The display name of Controller",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>
        /// dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)",
        SerializedName = @"subType",
        PossibleTypes = new [] { typeof(string) })]
        string SubType { get;  }
        /// <summary>disk controller type (SCSI)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"disk controller type (SCSI)",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }

    }
    /// Virtual disk controller model
    internal partial interface IVirtualDiskControllerInternal

    {
        /// <summary>Controller's id</summary>
        string Id { get; set; }
        /// <summary>The display name of Controller</summary>
        string Name { get; set; }
        /// <summary>
        /// dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)
        /// </summary>
        string SubType { get; set; }
        /// <summary>disk controller type (SCSI)</summary>
        string Type { get; set; }

    }
}