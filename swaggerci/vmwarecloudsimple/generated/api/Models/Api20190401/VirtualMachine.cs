// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Extensions;

    /// <summary>Virtual machine model</summary>
    public partial class VirtualMachine :
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachine,
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.IHeaderSerializable
    {

        /// <summary>The amount of memory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public int? AmountOfRam { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).AmountOfRam; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).AmountOfRam = value ?? default(int); }

        /// <summary>Backing field for <see cref="AzureAsyncOperation" /> property.</summary>
        private string _azureAsyncOperation;

        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string AzureAsyncOperation { get => this._azureAsyncOperation; set => this._azureAsyncOperation = value; }

        /// <summary>The list of Virtual Disks' Controllers</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Controller { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Controller; }

        /// <summary>List of dns servers to use</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string[] CustomizationDnsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationDnsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationDnsServer = value ?? null /* arrayOf */; }

        /// <summary>Virtual Machine hostname</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string CustomizationHostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationHostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationHostName = value ?? null; }

        /// <summary>Password for login</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string CustomizationPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationPassword = value ?? null; }

        /// <summary>id of customization policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string CustomizationPolicyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationPolicyId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationPolicyId = value ?? null; }

        /// <summary>Username for login</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string CustomizationUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).CustomizationUsername = value ?? null; }

        /// <summary>The list of Virtual Disks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk[] Disk { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Disk; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Disk = value ?? null /* arrayOf */; }

        /// <summary>The DNS name of Virtual Machine in VCenter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Dnsname { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Dnsname; }

        /// <summary>Expose Guest OS or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public bool? ExposeToGuestVM { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ExposeToGuestVM; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ExposeToGuestVM = value ?? default(bool); }

        /// <summary>The path to virtual machine folder in VCenter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Folder { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Folder; }

        /// <summary>Hierarchical resource pool name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string FullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).FullName; }

        /// <summary>The name of Guest OS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string GuestOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).GuestOS; }

        /// <summary>The Guest OS type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.GuestOSType? GuestOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).GuestOSType; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>Azure region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for Controller</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Controller { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Controller; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Controller = value; }

        /// <summary>Internal Acessors for Customization</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IGuestOSCustomization Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Customization { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Customization; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Customization = value; }

        /// <summary>Internal Acessors for Dnsname</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Dnsname { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Dnsname; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Dnsname = value; }

        /// <summary>Internal Acessors for Folder</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Folder { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Folder; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Folder = value; }

        /// <summary>Internal Acessors for FullName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.FullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).FullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).FullName = value; }

        /// <summary>Internal Acessors for GuestOS</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.GuestOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).GuestOS; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).GuestOS = value; }

        /// <summary>Internal Acessors for GuestOSType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.GuestOSType? Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.GuestOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).GuestOSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).GuestOSType = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineProperties Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.VirtualMachineProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for PublicIP</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.PublicIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).PublicIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).PublicIP = value; }

        /// <summary>Internal Acessors for ResourcePool</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IResourcePool Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ResourcePool { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePool; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePool = value; }

        /// <summary>Internal Acessors for ResourcePoolLocation</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ResourcePoolLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolLocation = value; }

        /// <summary>Internal Acessors for ResourcePoolName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ResourcePoolName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolName; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolName = value; }

        /// <summary>Internal Acessors for ResourcePoolPrivateCloudId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ResourcePoolPrivateCloudId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolPrivateCloudId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolPrivateCloudId = value; }

        /// <summary>Internal Acessors for ResourcePoolProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IResourcePoolProperties Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ResourcePoolProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolProperty = value; }

        /// <summary>Internal Acessors for ResourcePoolType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.ResourcePoolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolType = value; }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.VirtualMachineStatus? Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Status = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Internal Acessors for VMId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.VMId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).VMId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).VMId = value; }

        /// <summary>Internal Acessors for Vmwaretool</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal.Vmwaretool { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Vmwaretool; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Vmwaretool = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>{virtualMachineName}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>The list of Virtual NICs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic[] Nic { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Nic; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Nic = value ?? null /* arrayOf */; }

        /// <summary>The number of CPU cores</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public int? NumberOfCore { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).NumberOfCore; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).NumberOfCore = value ?? default(int); }

        /// <summary>Password for login. Deprecated - use customization property</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Password { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Password = value ?? null; }

        /// <summary>Private Cloud Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string PrivateCloudId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).PrivateCloudId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).PrivateCloudId = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineProperties _property;

        /// <summary>Virtual machine properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.VirtualMachineProperties()); set => this._property = value; }

        /// <summary>The provisioning status of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ProvisioningState; }

        /// <summary>The public ip of Virtual Machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string PublicIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).PublicIP; }

        /// <summary>resource pool id (privateCloudId:vsphereId)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string ResourcePoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolId = value ?? null; }

        /// <summary>Azure region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string ResourcePoolLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolLocation; }

        /// <summary>{ResourcePoolName}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string ResourcePoolName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolName; }

        /// <summary>The Private Cloud Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string ResourcePoolPrivateCloudId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolPrivateCloudId; }

        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string ResourcePoolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).ResourcePoolType; }

        /// <summary>The status of Virtual machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.VirtualMachineStatus? Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Status; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.ITags _tag;

        /// <summary>The list of tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.ITags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.Tags()); set => this._tag = value; }

        /// <summary>Virtual Machine Template Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string TemplateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).TemplateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).TemplateId = value ?? null; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Username for login. Deprecated - use customization property</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Username { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Username = value ?? null; }

        /// <summary>The internal id of Virtual Machine in VCenter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string VMId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).VMId; }

        /// <summary>The list of Virtual VSphere Networks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string[] VSphereNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).VSphereNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).VSphereNetwork = value ?? null /* arrayOf */; }

        /// <summary>VMware tools version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Vmwaretool { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachinePropertiesInternal)Property).Vmwaretool; }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("Azure-AsyncOperation", out var __azureAsyncOperationHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineInternal)this).AzureAsyncOperation = System.Linq.Enumerable.FirstOrDefault(__azureAsyncOperationHeader0) is string __headerAzureAsyncOperationHeader0 ? __headerAzureAsyncOperationHeader0 : (string)null;
            }
        }

        /// <summary>Creates an new <see cref="VirtualMachine" /> instance.</summary>
        public VirtualMachine()
        {

        }
    }
    /// Virtual machine model
    public partial interface IVirtualMachine :
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.IJsonSerializable
    {
        /// <summary>The amount of memory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of memory",
        SerializedName = @"amountOfRam",
        PossibleTypes = new [] { typeof(int) })]
        int? AmountOfRam { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Azure-AsyncOperation",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAsyncOperation { get; set; }
        /// <summary>The list of Virtual Disks' Controllers</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of Virtual Disks' Controllers",
        SerializedName = @"controllers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Controller { get;  }
        /// <summary>List of dns servers to use</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of dns servers to use",
        SerializedName = @"dnsServers",
        PossibleTypes = new [] { typeof(string) })]
        string[] CustomizationDnsServer { get; set; }
        /// <summary>Virtual Machine hostname</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual Machine hostname",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomizationHostName { get; set; }
        /// <summary>Password for login</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for login",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string CustomizationPassword { get; set; }
        /// <summary>id of customization policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"id of customization policy",
        SerializedName = @"policyId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomizationPolicyId { get; set; }
        /// <summary>Username for login</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username for login",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string CustomizationUsername { get; set; }
        /// <summary>The list of Virtual Disks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Virtual Disks",
        SerializedName = @"disks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk[] Disk { get; set; }
        /// <summary>The DNS name of Virtual Machine in VCenter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The DNS name of Virtual Machine in VCenter",
        SerializedName = @"dnsname",
        PossibleTypes = new [] { typeof(string) })]
        string Dnsname { get;  }
        /// <summary>Expose Guest OS or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Expose Guest OS or not",
        SerializedName = @"exposeToGuestVM",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExposeToGuestVM { get; set; }
        /// <summary>The path to virtual machine folder in VCenter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The path to virtual machine folder in VCenter",
        SerializedName = @"folder",
        PossibleTypes = new [] { typeof(string) })]
        string Folder { get;  }
        /// <summary>Hierarchical resource pool name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Hierarchical resource pool name",
        SerializedName = @"fullName",
        PossibleTypes = new [] { typeof(string) })]
        string FullName { get;  }
        /// <summary>The name of Guest OS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of Guest OS",
        SerializedName = @"guestOS",
        PossibleTypes = new [] { typeof(string) })]
        string GuestOS { get;  }
        /// <summary>The Guest OS type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Guest OS type",
        SerializedName = @"guestOSType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.GuestOSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.GuestOSType? GuestOSType { get;  }
        /// <summary>
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>Azure region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Azure region",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>{virtualMachineName}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"{virtualMachineName}",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>The list of Virtual NICs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Virtual NICs",
        SerializedName = @"nics",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic[] Nic { get; set; }
        /// <summary>The number of CPU cores</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of CPU cores",
        SerializedName = @"numberOfCores",
        PossibleTypes = new [] { typeof(int) })]
        int? NumberOfCore { get; set; }
        /// <summary>Password for login. Deprecated - use customization property</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for login. Deprecated - use customization property",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string Password { get; set; }
        /// <summary>Private Cloud Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Private Cloud Id",
        SerializedName = @"privateCloudId",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateCloudId { get; set; }
        /// <summary>The provisioning status of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning status of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>The public ip of Virtual Machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The public ip of Virtual Machine",
        SerializedName = @"publicIP",
        PossibleTypes = new [] { typeof(string) })]
        string PublicIP { get;  }
        /// <summary>resource pool id (privateCloudId:vsphereId)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"resource pool id (privateCloudId:vsphereId)",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePoolId { get; set; }
        /// <summary>Azure region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Azure region",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePoolLocation { get;  }
        /// <summary>{ResourcePoolName}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"{ResourcePoolName}",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePoolName { get;  }
        /// <summary>The Private Cloud Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Private Cloud Id",
        SerializedName = @"privateCloudId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePoolPrivateCloudId { get;  }
        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"{resourceProviderNamespace}/{resourceType}",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePoolType { get;  }
        /// <summary>The status of Virtual machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of Virtual machine",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.VirtualMachineStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.VirtualMachineStatus? Status { get;  }
        /// <summary>The list of tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of tags",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.ITags) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.ITags Tag { get; set; }
        /// <summary>Virtual Machine Template Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual Machine Template Id",
        SerializedName = @"templateId",
        PossibleTypes = new [] { typeof(string) })]
        string TemplateId { get; set; }
        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"{resourceProviderNamespace}/{resourceType}",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }
        /// <summary>Username for login. Deprecated - use customization property</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username for login. Deprecated - use customization property",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string Username { get; set; }
        /// <summary>The internal id of Virtual Machine in VCenter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The internal id of Virtual Machine in VCenter",
        SerializedName = @"vmId",
        PossibleTypes = new [] { typeof(string) })]
        string VMId { get;  }
        /// <summary>The list of Virtual VSphere Networks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Virtual VSphere Networks",
        SerializedName = @"vSphereNetworks",
        PossibleTypes = new [] { typeof(string) })]
        string[] VSphereNetwork { get; set; }
        /// <summary>VMware tools version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"VMware tools version",
        SerializedName = @"vmwaretools",
        PossibleTypes = new [] { typeof(string) })]
        string Vmwaretool { get;  }

    }
    /// Virtual machine model
    internal partial interface IVirtualMachineInternal

    {
        /// <summary>The amount of memory</summary>
        int? AmountOfRam { get; set; }

        string AzureAsyncOperation { get; set; }
        /// <summary>The list of Virtual Disks' Controllers</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Controller { get; set; }
        /// <summary>Virtual machine properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IGuestOSCustomization Customization { get; set; }
        /// <summary>List of dns servers to use</summary>
        string[] CustomizationDnsServer { get; set; }
        /// <summary>Virtual Machine hostname</summary>
        string CustomizationHostName { get; set; }
        /// <summary>Password for login</summary>
        string CustomizationPassword { get; set; }
        /// <summary>id of customization policy</summary>
        string CustomizationPolicyId { get; set; }
        /// <summary>Username for login</summary>
        string CustomizationUsername { get; set; }
        /// <summary>The list of Virtual Disks</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk[] Disk { get; set; }
        /// <summary>The DNS name of Virtual Machine in VCenter</summary>
        string Dnsname { get; set; }
        /// <summary>Expose Guest OS or not</summary>
        bool? ExposeToGuestVM { get; set; }
        /// <summary>The path to virtual machine folder in VCenter</summary>
        string Folder { get; set; }
        /// <summary>Hierarchical resource pool name</summary>
        string FullName { get; set; }
        /// <summary>The name of Guest OS</summary>
        string GuestOS { get; set; }
        /// <summary>The Guest OS type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.GuestOSType? GuestOSType { get; set; }
        /// <summary>
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
        /// </summary>
        string Id { get; set; }
        /// <summary>Azure region</summary>
        string Location { get; set; }
        /// <summary>{virtualMachineName}</summary>
        string Name { get; set; }
        /// <summary>The list of Virtual NICs</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic[] Nic { get; set; }
        /// <summary>The number of CPU cores</summary>
        int? NumberOfCore { get; set; }
        /// <summary>Password for login. Deprecated - use customization property</summary>
        string Password { get; set; }
        /// <summary>Private Cloud Id</summary>
        string PrivateCloudId { get; set; }
        /// <summary>Virtual machine properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineProperties Property { get; set; }
        /// <summary>The provisioning status of the resource</summary>
        string ProvisioningState { get; set; }
        /// <summary>The public ip of Virtual Machine</summary>
        string PublicIP { get; set; }
        /// <summary>Virtual Machines Resource Pool</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IResourcePool ResourcePool { get; set; }
        /// <summary>resource pool id (privateCloudId:vsphereId)</summary>
        string ResourcePoolId { get; set; }
        /// <summary>Azure region</summary>
        string ResourcePoolLocation { get; set; }
        /// <summary>{ResourcePoolName}</summary>
        string ResourcePoolName { get; set; }
        /// <summary>The Private Cloud Id</summary>
        string ResourcePoolPrivateCloudId { get; set; }
        /// <summary>Resource pool properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IResourcePoolProperties ResourcePoolProperty { get; set; }
        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        string ResourcePoolType { get; set; }
        /// <summary>The status of Virtual machine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Support.VirtualMachineStatus? Status { get; set; }
        /// <summary>The list of tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.ITags Tag { get; set; }
        /// <summary>Virtual Machine Template Id</summary>
        string TemplateId { get; set; }
        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        string Type { get; set; }
        /// <summary>Username for login. Deprecated - use customization property</summary>
        string Username { get; set; }
        /// <summary>The internal id of Virtual Machine in VCenter</summary>
        string VMId { get; set; }
        /// <summary>The list of Virtual VSphere Networks</summary>
        string[] VSphereNetwork { get; set; }
        /// <summary>VMware tools version</summary>
        string Vmwaretool { get; set; }

    }
}