// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Extensions;

    /// <summary>Virtual machine template model</summary>
    public partial class VirtualMachineTemplate :
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplate,
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal
    {

        /// <summary>The amount of memory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public int? AmountOfRam { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).AmountOfRam; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).AmountOfRam = value ?? default(int); }

        /// <summary>The list of Virtual Disk Controllers</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Controller { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Controller; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Controller = value ?? null /* arrayOf */; }

        /// <summary>The description of Virtual Machine Template</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Description = value ?? null; }

        /// <summary>The list of Virtual Disks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk[] Disk { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Disk; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Disk = value ?? null /* arrayOf */; }

        /// <summary>Expose Guest OS or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public bool? ExposeToGuestVM { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).ExposeToGuestVM; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).ExposeToGuestVM = value ?? default(bool); }

        /// <summary>The Guest OS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string GuestOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).GuestOS; }

        /// <summary>The Guest OS types</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string GuestOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).GuestOSType; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>virtual machine template id (privateCloudId:vsphereId)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>Azure region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for GuestOS</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.GuestOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).GuestOS; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).GuestOS = value; }

        /// <summary>Internal Acessors for GuestOSType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.GuestOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).GuestOSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).GuestOSType = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateProperties Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.VirtualMachineTemplateProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Internal Acessors for Vmwaretool</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateInternal.Vmwaretool { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Vmwaretool; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Vmwaretool = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>{virtualMachineTemplateName}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>The list of Virtual NICs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic[] Nic { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Nic; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Nic = value ?? null /* arrayOf */; }

        /// <summary>The number of CPU cores</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public int? NumberOfCore { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).NumberOfCore; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).NumberOfCore = value ?? default(int); }

        /// <summary>path to folder</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Path { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Path; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Path = value ?? null; }

        /// <summary>The Private Cloud Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string PrivateCloudId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).PrivateCloudId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).PrivateCloudId = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateProperties _property;

        /// <summary>The Virtual Machine Template properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.VirtualMachineTemplateProperties()); set => this._property = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>The list of VSphere networks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string[] VSphereNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).VSphereNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).VSphereNetwork = value ?? null /* arrayOf */; }

        /// <summary>The tags from VSphere</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string[] VSphereTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).VSphereTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).VSphereTag = value ?? null /* arrayOf */; }

        /// <summary>The VMware tools version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.PropertyOrigin.Inlined)]
        public string Vmwaretool { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplatePropertiesInternal)Property).Vmwaretool; }

        /// <summary>Creates an new <see cref="VirtualMachineTemplate" /> instance.</summary>
        public VirtualMachineTemplate()
        {

        }
    }
    /// Virtual machine template model
    public partial interface IVirtualMachineTemplate :
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.IJsonSerializable
    {
        /// <summary>The amount of memory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of memory",
        SerializedName = @"amountOfRam",
        PossibleTypes = new [] { typeof(int) })]
        int? AmountOfRam { get; set; }
        /// <summary>The list of Virtual Disk Controllers</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Virtual Disk Controllers",
        SerializedName = @"controllers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Controller { get; set; }
        /// <summary>The description of Virtual Machine Template</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of Virtual Machine Template",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>The list of Virtual Disks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Virtual Disks",
        SerializedName = @"disks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk[] Disk { get; set; }
        /// <summary>Expose Guest OS or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Expose Guest OS or not",
        SerializedName = @"exposeToGuestVM",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExposeToGuestVM { get; set; }
        /// <summary>The Guest OS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Guest OS",
        SerializedName = @"guestOS",
        PossibleTypes = new [] { typeof(string) })]
        string GuestOS { get;  }
        /// <summary>The Guest OS types</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Guest OS types",
        SerializedName = @"guestOSType",
        PossibleTypes = new [] { typeof(string) })]
        string GuestOSType { get;  }
        /// <summary>virtual machine template id (privateCloudId:vsphereId)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"virtual machine template id (privateCloudId:vsphereId)",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>Azure region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure region",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>{virtualMachineTemplateName}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"{virtualMachineTemplateName}",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>The list of Virtual NICs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Virtual NICs",
        SerializedName = @"nics",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic[] Nic { get; set; }
        /// <summary>The number of CPU cores</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of CPU cores",
        SerializedName = @"numberOfCores",
        PossibleTypes = new [] { typeof(int) })]
        int? NumberOfCore { get; set; }
        /// <summary>path to folder</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"path to folder",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string Path { get; set; }
        /// <summary>The Private Cloud Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Private Cloud Id",
        SerializedName = @"privateCloudId",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateCloudId { get; set; }
        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"{resourceProviderNamespace}/{resourceType}",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }
        /// <summary>The list of VSphere networks</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of VSphere networks",
        SerializedName = @"vSphereNetworks",
        PossibleTypes = new [] { typeof(string) })]
        string[] VSphereNetwork { get; set; }
        /// <summary>The tags from VSphere</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tags from VSphere",
        SerializedName = @"vSphereTags",
        PossibleTypes = new [] { typeof(string) })]
        string[] VSphereTag { get; set; }
        /// <summary>The VMware tools version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The VMware tools version",
        SerializedName = @"vmwaretools",
        PossibleTypes = new [] { typeof(string) })]
        string Vmwaretool { get;  }

    }
    /// Virtual machine template model
    internal partial interface IVirtualMachineTemplateInternal

    {
        /// <summary>The amount of memory</summary>
        int? AmountOfRam { get; set; }
        /// <summary>The list of Virtual Disk Controllers</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDiskController[] Controller { get; set; }
        /// <summary>The description of Virtual Machine Template</summary>
        string Description { get; set; }
        /// <summary>The list of Virtual Disks</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualDisk[] Disk { get; set; }
        /// <summary>Expose Guest OS or not</summary>
        bool? ExposeToGuestVM { get; set; }
        /// <summary>The Guest OS</summary>
        string GuestOS { get; set; }
        /// <summary>The Guest OS types</summary>
        string GuestOSType { get; set; }
        /// <summary>virtual machine template id (privateCloudId:vsphereId)</summary>
        string Id { get; set; }
        /// <summary>Azure region</summary>
        string Location { get; set; }
        /// <summary>{virtualMachineTemplateName}</summary>
        string Name { get; set; }
        /// <summary>The list of Virtual NICs</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualNic[] Nic { get; set; }
        /// <summary>The number of CPU cores</summary>
        int? NumberOfCore { get; set; }
        /// <summary>path to folder</summary>
        string Path { get; set; }
        /// <summary>The Private Cloud Id</summary>
        string PrivateCloudId { get; set; }
        /// <summary>The Virtual Machine Template properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMwareCloudSimple.Models.Api20190401.IVirtualMachineTemplateProperties Property { get; set; }
        /// <summary>{resourceProviderNamespace}/{resourceType}</summary>
        string Type { get; set; }
        /// <summary>The list of VSphere networks</summary>
        string[] VSphereNetwork { get; set; }
        /// <summary>The tags from VSphere</summary>
        string[] VSphereTag { get; set; }
        /// <summary>The VMware tools version</summary>
        string Vmwaretool { get; set; }

    }
}