
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates the specified Data Lake Analytics account.
This supplies the user with computation services for Data Lake Analytics workloads.
.Description
Creates the specified Data Lake Analytics account.
This supplies the user with computation services for Data Lake Analytics workloads.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeAnalyticsAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

COMPUTEPOLICY <ICreateComputePolicyWithAccountParameters[]>: The list of compute policies associated with this account.
  Name <String>: The unique name of the compute policy to create.
  ObjectId <String>: The AAD object identifier for the entity to create a policy for.
  ObjectType <AadObjectType>: The type of AAD object the object identifier refers to.
  [MaxDegreeOfParallelismPerJob <Int32?>]: The maximum degree of parallelism per job this user can use to submit jobs. This property, the min priority per job property, or both must be passed.
  [MinPriorityPerJob <Int32?>]: The minimum priority per job this user can use to submit jobs. This property, the max degree of parallelism per job property, or both must be passed.

DATALAKESTOREACCOUNT <IAddDataLakeStoreWithAccountParameters[]>: The list of Data Lake Store accounts associated with this account.
  Name <String>: The unique name of the Data Lake Store account to add.
  [Suffix <String>]: The optional suffix for the Data Lake Store account.

FIREWALLRULE <ICreateFirewallRuleWithAccountParameters[]>: The list of firewall rules associated with this account.
  EndIPAddress <String>: The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
  Name <String>: The unique name of the firewall rule to create.
  StartIPAddress <String>: The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.

STORAGEACCOUNT <IAddStorageAccountWithAccountParameters[]>: The list of Azure Blob Storage accounts associated with this account.
  AccessKey <String>: The access key associated with this Azure Storage account that will be used to connect to it.
  Name <String>: The unique name of the Azure Storage account to add.
  [Suffix <String>]: The optional suffix for the storage account.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.datalakeanalyticsaccount/new-azdatalakeanalyticsaccount
#>
function New-AzDataLakeAnalyticsAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeAnalyticsAccount])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('AccountName')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Path')]
    [System.String]
    # The name of the Data Lake Analytics account.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Path')]
    [System.String]
    # The name of the Azure resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Get subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IAddDataLakeStoreWithAccountParameters[]]
    # The list of Data Lake Store accounts associated with this account.
    # To construct, see NOTES section for DATALAKESTOREACCOUNT properties and create a hash table.
    ${DataLakeStoreAccount},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.String]
    # The default Data Lake Store account associated with this account.
    ${DefaultDataLakeStoreAccount},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.String]
    # The resource location.
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.ICreateComputePolicyWithAccountParameters[]]
    # The list of compute policies associated with this account.
    # To construct, see NOTES section for COMPUTEPOLICY properties and create a hash table.
    ${ComputePolicy},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Support.FirewallAllowAzureIpsState])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Support.FirewallAllowAzureIpsState]
    # The current state of allowing or disallowing IPs originating within Azure through the firewall.
    # If the firewall is disabled, this is not enforced.
    ${FirewallAllowAzureIP},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.ICreateFirewallRuleWithAccountParameters[]]
    # The list of firewall rules associated with this account.
    # To construct, see NOTES section for FIREWALLRULE properties and create a hash table.
    ${FirewallRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Support.FirewallState])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Support.FirewallState]
    # The current state of the IP address firewall for this account.
    ${FirewallState},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.Int32]
    # The maximum supported degree of parallelism for this account.
    ${MaxDegreeOfParallelism},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.Int32]
    # The maximum supported degree of parallelism per job for this account.
    ${MaxDegreeOfParallelismPerJob},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.Int32]
    # The maximum supported jobs running under the account at the same time.
    ${MaxJobCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.Int32]
    # The minimum supported priority per job for this account.
    ${MinPriorityPerJob},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Support.TierType])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Support.TierType]
    # The commitment tier for the next month.
    ${NewTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [System.Int32]
    # The number of days that job metadata is retained.
    ${QueryStoreRetention},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IAddStorageAccountWithAccountParameters[]]
    # The list of Azure Blob Storage accounts associated with this account.
    # To construct, see NOTES section for STORAGEACCOUNT properties and create a hash table.
    ${StorageAccount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.ICreateDataLakeAnalyticsAccountParametersTags]))]
    [System.Collections.Hashtable]
    # The resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.DataLakeAnalyticsAccount.private\New-AzDataLakeAnalyticsAccount_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
