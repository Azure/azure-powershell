// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Extensions;

    /// <summary>
    /// The account specific properties that are associated with an underlying Data Lake Analytics account. Returned only when
    /// retrieving a specific account.
    /// </summary>
    public partial class DataLakeAnalyticsAccountProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject into a new instance of <see cref="DataLakeAnalyticsAccountProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal DataLakeAnalyticsAccountProperties(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            __dataLakeAnalyticsAccountPropertiesBasic = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.DataLakeAnalyticsAccountPropertiesBasic(json);
            {_defaultDataLakeStoreAccountType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("defaultDataLakeStoreAccountType"), out var __jsonDefaultDataLakeStoreAccountType) ? (string)__jsonDefaultDataLakeStoreAccountType : (string)DefaultDataLakeStoreAccountType;}
            {_defaultDataLakeStoreAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("defaultDataLakeStoreAccount"), out var __jsonDefaultDataLakeStoreAccount) ? (string)__jsonDefaultDataLakeStoreAccount : (string)DefaultDataLakeStoreAccount;}
            {_dataLakeStoreAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("dataLakeStoreAccounts"), out var __jsonDataLakeStoreAccounts) ? If( __jsonDataLakeStoreAccounts as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeStoreAccountInformation[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeStoreAccountInformation) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.DataLakeStoreAccountInformation.FromJson(__u) )) ))() : null : DataLakeStoreAccount;}
            {_publicDataLakeStoreAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("publicDataLakeStoreAccounts"), out var __jsonPublicDataLakeStoreAccounts) ? If( __jsonPublicDataLakeStoreAccounts as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeStoreAccountInformation[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeStoreAccountInformation) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.DataLakeStoreAccountInformation.FromJson(__p) )) ))() : null : PublicDataLakeStoreAccount;}
            {_storageAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("storageAccounts"), out var __jsonStorageAccounts) ? If( __jsonStorageAccounts as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IStorageAccountInformation[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IStorageAccountInformation) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.StorageAccountInformation.FromJson(__k) )) ))() : null : StorageAccount;}
            {_computePolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("computePolicies"), out var __jsonComputePolicies) ? If( __jsonComputePolicies as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IComputePolicy[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IComputePolicy) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.ComputePolicy.FromJson(__f) )) ))() : null : ComputePolicy;}
            {_hiveMetastore = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("hiveMetastores"), out var __jsonHiveMetastores) ? If( __jsonHiveMetastores as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IHiveMetastore[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IHiveMetastore) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.HiveMetastore.FromJson(__a) )) ))() : null : HiveMetastore;}
            {_virtualNetworkRule = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("virtualNetworkRules"), out var __jsonVirtualNetworkRules) ? If( __jsonVirtualNetworkRules as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IVirtualNetworkRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IVirtualNetworkRule) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.VirtualNetworkRule.FromJson(___v) )) ))() : null : VirtualNetworkRule;}
            {_firewallRule = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray>("firewallRules"), out var __jsonFirewallRules) ? If( __jsonFirewallRules as Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonArray, out var ___r) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IFirewallRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___r, (___q)=>(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IFirewallRule) (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.FirewallRule.FromJson(___q) )) ))() : null : FirewallRule;}
            {_firewallState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("firewallState"), out var __jsonFirewallState) ? (string)__jsonFirewallState : (string)FirewallState;}
            {_firewallAllowAzureIP = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("firewallAllowAzureIps"), out var __jsonFirewallAllowAzureIps) ? (string)__jsonFirewallAllowAzureIps : (string)FirewallAllowAzureIP;}
            {_newTier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("newTier"), out var __jsonNewTier) ? (string)__jsonNewTier : (string)NewTier;}
            {_currentTier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("currentTier"), out var __jsonCurrentTier) ? (string)__jsonCurrentTier : (string)CurrentTier;}
            {_maxJobCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("maxJobCount"), out var __jsonMaxJobCount) ? (int?)__jsonMaxJobCount : MaxJobCount;}
            {_maxActiveJobCountPerUser = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("maxActiveJobCountPerUser"), out var __jsonMaxActiveJobCountPerUser) ? (int?)__jsonMaxActiveJobCountPerUser : MaxActiveJobCountPerUser;}
            {_maxQueuedJobCountPerUser = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("maxQueuedJobCountPerUser"), out var __jsonMaxQueuedJobCountPerUser) ? (int?)__jsonMaxQueuedJobCountPerUser : MaxQueuedJobCountPerUser;}
            {_maxJobRunningTimeInMin = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("maxJobRunningTimeInMin"), out var __jsonMaxJobRunningTimeInMin) ? (int?)__jsonMaxJobRunningTimeInMin : MaxJobRunningTimeInMin;}
            {_systemMaxJobCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("systemMaxJobCount"), out var __jsonSystemMaxJobCount) ? (int?)__jsonSystemMaxJobCount : SystemMaxJobCount;}
            {_maxDegreeOfParallelism = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("maxDegreeOfParallelism"), out var __jsonMaxDegreeOfParallelism) ? (int?)__jsonMaxDegreeOfParallelism : MaxDegreeOfParallelism;}
            {_systemMaxDegreeOfParallelism = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("systemMaxDegreeOfParallelism"), out var __jsonSystemMaxDegreeOfParallelism) ? (int?)__jsonSystemMaxDegreeOfParallelism : SystemMaxDegreeOfParallelism;}
            {_maxDegreeOfParallelismPerJob = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("maxDegreeOfParallelismPerJob"), out var __jsonMaxDegreeOfParallelismPerJob) ? (int?)__jsonMaxDegreeOfParallelismPerJob : MaxDegreeOfParallelismPerJob;}
            {_minPriorityPerJob = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("minPriorityPerJob"), out var __jsonMinPriorityPerJob) ? (int?)__jsonMinPriorityPerJob : MinPriorityPerJob;}
            {_queryStoreRetention = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber>("queryStoreRetention"), out var __jsonQueryStoreRetention) ? (int?)__jsonQueryStoreRetention : QueryStoreRetention;}
            {_debugDataAccessLevel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString>("debugDataAccessLevel"), out var __jsonDebugDataAccessLevel) ? (string)__jsonDebugDataAccessLevel : (string)DebugDataAccessLevel;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeAnalyticsAccountProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeAnalyticsAccountProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Models.Api20191101Preview.IDataLakeAnalyticsAccountProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject json ? new DataLakeAnalyticsAccountProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="DataLakeAnalyticsAccountProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode"
        /// />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="DataLakeAnalyticsAccountProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            __dataLakeAnalyticsAccountPropertiesBasic?.ToJson(container, serializationMode);
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._defaultDataLakeStoreAccountType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._defaultDataLakeStoreAccountType.ToString()) : null, "defaultDataLakeStoreAccountType" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._defaultDataLakeStoreAccount)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._defaultDataLakeStoreAccount.ToString()) : null, "defaultDataLakeStoreAccount" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._dataLakeStoreAccount)
                {
                    var __w = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                    foreach( var __x in this._dataLakeStoreAccount )
                    {
                        AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                    }
                    container.Add("dataLakeStoreAccounts",__w);
                }
            }
            if (null != this._publicDataLakeStoreAccount)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                foreach( var __s in this._publicDataLakeStoreAccount )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("publicDataLakeStoreAccounts",__r);
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._storageAccount)
                {
                    var __m = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                    foreach( var __n in this._storageAccount )
                    {
                        AddIf(__n?.ToJson(null, serializationMode) ,__m.Add);
                    }
                    container.Add("storageAccounts",__m);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._computePolicy)
                {
                    var __h = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                    foreach( var __i in this._computePolicy )
                    {
                        AddIf(__i?.ToJson(null, serializationMode) ,__h.Add);
                    }
                    container.Add("computePolicies",__h);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._hiveMetastore)
                {
                    var __c = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                    foreach( var __d in this._hiveMetastore )
                    {
                        AddIf(__d?.ToJson(null, serializationMode) ,__c.Add);
                    }
                    container.Add("hiveMetastores",__c);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._virtualNetworkRule)
                {
                    var ___x = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                    foreach( var ___y in this._virtualNetworkRule )
                    {
                        AddIf(___y?.ToJson(null, serializationMode) ,___x.Add);
                    }
                    container.Add("virtualNetworkRules",___x);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._firewallRule)
                {
                    var ___s = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.XNodeArray();
                    foreach( var ___t in this._firewallRule )
                    {
                        AddIf(___t?.ToJson(null, serializationMode) ,___s.Add);
                    }
                    container.Add("firewallRules",___s);
                }
            }
            AddIf( null != (((object)this._firewallState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._firewallState.ToString()) : null, "firewallState" ,container.Add );
            AddIf( null != (((object)this._firewallAllowAzureIP)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._firewallAllowAzureIP.ToString()) : null, "firewallAllowAzureIps" ,container.Add );
            AddIf( null != (((object)this._newTier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._newTier.ToString()) : null, "newTier" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._currentTier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._currentTier.ToString()) : null, "currentTier" ,container.Add );
            }
            AddIf( null != this._maxJobCount ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._maxJobCount) : null, "maxJobCount" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._maxActiveJobCountPerUser ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._maxActiveJobCountPerUser) : null, "maxActiveJobCountPerUser" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._maxQueuedJobCountPerUser ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._maxQueuedJobCountPerUser) : null, "maxQueuedJobCountPerUser" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._maxJobRunningTimeInMin ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._maxJobRunningTimeInMin) : null, "maxJobRunningTimeInMin" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._systemMaxJobCount ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._systemMaxJobCount) : null, "systemMaxJobCount" ,container.Add );
            }
            AddIf( null != this._maxDegreeOfParallelism ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._maxDegreeOfParallelism) : null, "maxDegreeOfParallelism" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._systemMaxDegreeOfParallelism ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._systemMaxDegreeOfParallelism) : null, "systemMaxDegreeOfParallelism" ,container.Add );
            }
            AddIf( null != this._maxDegreeOfParallelismPerJob ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._maxDegreeOfParallelismPerJob) : null, "maxDegreeOfParallelismPerJob" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._minPriorityPerJob ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._minPriorityPerJob) : null, "minPriorityPerJob" ,container.Add );
            }
            AddIf( null != this._queryStoreRetention ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNumber((int)this._queryStoreRetention) : null, "queryStoreRetention" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._debugDataAccessLevel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.DataLakeAnalyticsAccount.Runtime.Json.JsonString(this._debugDataAccessLevel.ToString()) : null, "debugDataAccessLevel" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}