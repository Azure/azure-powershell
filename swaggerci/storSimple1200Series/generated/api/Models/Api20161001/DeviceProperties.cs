// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Extensions;

    /// <summary>Encases all the properties of the Device</summary>
    public partial class DeviceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal
    {

        /// <summary>Backing field for <see cref="ActivationTime" /> property.</summary>
        private global::System.DateTime? _activationTime;

        /// <summary>The UTC time at which the device was activated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public global::System.DateTime? ActivationTime { get => this._activationTime; set => this._activationTime = value; }

        /// <summary>Backing field for <see cref="AllowedDeviceOperation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] _allowedDeviceOperation;

        /// <summary>Operations that are allowed on the device based on its current state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] AllowedDeviceOperation { get => this._allowedDeviceOperation; set => this._allowedDeviceOperation = value; }

        /// <summary>Backing field for <see cref="Culture" /> property.</summary>
        private string _culture;

        /// <summary>Language culture setting on the device. For eg: "en-US"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string Culture { get => this._culture; set => this._culture = value; }

        /// <summary>Backing field for <see cref="Detail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetails _detail;

        /// <summary>
        /// subclass containing more storage-related information about the device. This field will be populated only if the get call
        /// is made with $expand = details.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetails Detail { get => (this._detail = this._detail ?? new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.DeviceDetails()); set => this._detail = value; }

        /// <summary>Local pending storage available on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailAvailableLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).AvailableLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).AvailableLocalStorageInByte = value ?? default(long); }

        /// <summary>Total pending available storage on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailAvailableStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).AvailableStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).AvailableStorageInByte = value ?? default(long); }

        /// <summary>
        /// Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public int? DetailEndpointCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).EndpointCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).EndpointCount = value ?? default(int); }

        /// <summary>Storage in bytes that has been provisioned locally on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailProvisionedLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).ProvisionedLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).ProvisionedLocalStorageInByte = value ?? default(long); }

        /// <summary>
        /// Storage in bytes that has been provisioned on the device including both local and cloud
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailProvisionedStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).ProvisionedStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).ProvisionedStorageInByte = value ?? default(long); }

        /// <summary>Total size taken up by backups in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailTotalBackupSizeInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).TotalBackupSizeInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).TotalBackupSizeInByte = value ?? default(long); }

        /// <summary>Total local storage capacity in device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailTotalLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).TotalLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).TotalLocalStorageInByte = value ?? default(long); }

        /// <summary>Total storage available on the device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailTotalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).TotalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).TotalStorageInByte = value ?? default(long); }

        /// <summary>Local Storage that is being currently used in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailUsingLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).UsingLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).UsingLocalStorageInByte = value ?? default(long); }

        /// <summary>Storage that is being currently used in bytes including both local and cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailUsingStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).UsingStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetailsInternal)Detail).UsingStorageInByte = value ?? default(long); }

        /// <summary>Backing field for <see cref="DeviceCapability" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] _deviceCapability;

        /// <summary>Device can be configured either as FileServer or IscsiServer</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] DeviceCapability { get => this._deviceCapability; set => this._deviceCapability = value; }

        /// <summary>Backing field for <see cref="DeviceConfigurationStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? _deviceConfigurationStatus;

        /// <summary>
        /// "Complete" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete,
        /// "Pending" if the device is only registered but the creation of share/volume is complete is still pending
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? DeviceConfigurationStatus { get => this._deviceConfigurationStatus; set => this._deviceConfigurationStatus = value; }

        /// <summary>Backing field for <see cref="DeviceDescription" /> property.</summary>
        private string _deviceDescription;

        /// <summary>Short description given for the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string DeviceDescription { get => this._deviceDescription; set => this._deviceDescription = value; }

        /// <summary>Backing field for <see cref="DeviceSoftwareVersion" /> property.</summary>
        private string _deviceSoftwareVersion;

        /// <summary>Version number of the software running on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string DeviceSoftwareVersion { get => this._deviceSoftwareVersion; set => this._deviceSoftwareVersion = value; }

        /// <summary>Backing field for <see cref="DomainName" /> property.</summary>
        private string _domainName;

        /// <summary>Fully qualified name of the domain to which the device is attached</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string DomainName { get => this._domainName; set => this._domainName = value; }

        /// <summary>Backing field for <see cref="FriendlySoftwareName" /> property.</summary>
        private string _friendlySoftwareName;

        /// <summary>Friendly name for the software version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string FriendlySoftwareName { get => this._friendlySoftwareName; set => this._friendlySoftwareName = value; }

        /// <summary>Internal Acessors for Detail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetails Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal.Detail { get => (this._detail = this._detail ?? new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.DeviceDetails()); set { {_detail = value;} } }

        /// <summary>Backing field for <see cref="ModelDescription" /> property.</summary>
        private string _modelDescription;

        /// <summary>Name of the device model</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string ModelDescription { get => this._modelDescription; set => this._modelDescription = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? _status;

        /// <summary>Current status of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? _type;

        /// <summary>Type of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="DeviceProperties" /> instance.</summary>
        public DeviceProperties()
        {

        }
    }
    /// Encases all the properties of the Device
    public partial interface IDeviceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IJsonSerializable
    {
        /// <summary>The UTC time at which the device was activated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The UTC time at which the device was activated",
        SerializedName = @"activationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ActivationTime { get; set; }
        /// <summary>Operations that are allowed on the device based on its current state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operations that are allowed on the device based on its current state",
        SerializedName = @"allowedDeviceOperations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] AllowedDeviceOperation { get; set; }
        /// <summary>Language culture setting on the device. For eg: "en-US"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Language culture setting on the device. For eg: ""en-US""",
        SerializedName = @"culture",
        PossibleTypes = new [] { typeof(string) })]
        string Culture { get; set; }
        /// <summary>Local pending storage available on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Local pending storage available on the device in bytes",
        SerializedName = @"availableLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailAvailableLocalStorageInByte { get; set; }
        /// <summary>Total pending available storage on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total pending available storage on the device in bytes",
        SerializedName = @"availableStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailAvailableStorageInByte { get; set; }
        /// <summary>
        /// Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes on IscsiServer)",
        SerializedName = @"endpointCount",
        PossibleTypes = new [] { typeof(int) })]
        int? DetailEndpointCount { get; set; }
        /// <summary>Storage in bytes that has been provisioned locally on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage in bytes that has been provisioned locally on the device",
        SerializedName = @"provisionedLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailProvisionedLocalStorageInByte { get; set; }
        /// <summary>
        /// Storage in bytes that has been provisioned on the device including both local and cloud
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage in bytes that has been provisioned on the device including both local and cloud",
        SerializedName = @"provisionedStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailProvisionedStorageInByte { get; set; }
        /// <summary>Total size taken up by backups in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total size taken up by backups in bytes",
        SerializedName = @"totalBackupSizeInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailTotalBackupSizeInByte { get; set; }
        /// <summary>Total local storage capacity in device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total local storage capacity in device in bytes.",
        SerializedName = @"totalLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailTotalLocalStorageInByte { get; set; }
        /// <summary>Total storage available on the device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total storage available on the device in bytes.",
        SerializedName = @"totalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailTotalStorageInByte { get; set; }
        /// <summary>Local Storage that is being currently used in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Local Storage that is being currently used in bytes",
        SerializedName = @"usingLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailUsingLocalStorageInByte { get; set; }
        /// <summary>Storage that is being currently used in bytes including both local and cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage that is being currently used in bytes including both local and cloud",
        SerializedName = @"usingStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailUsingStorageInByte { get; set; }
        /// <summary>Device can be configured either as FileServer or IscsiServer</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Device can be configured either as FileServer or IscsiServer",
        SerializedName = @"deviceCapabilities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] DeviceCapability { get; set; }
        /// <summary>
        /// "Complete" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete,
        /// "Pending" if the device is only registered but the creation of share/volume is complete is still pending
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"""Complete"" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, ""Pending"" if the device is only registered but the creation of share/volume is complete is still pending",
        SerializedName = @"deviceConfigurationStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? DeviceConfigurationStatus { get; set; }
        /// <summary>Short description given for the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Short description given for the device",
        SerializedName = @"deviceDescription",
        PossibleTypes = new [] { typeof(string) })]
        string DeviceDescription { get; set; }
        /// <summary>Version number of the software running on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version number of the software running on the device",
        SerializedName = @"deviceSoftwareVersion",
        PossibleTypes = new [] { typeof(string) })]
        string DeviceSoftwareVersion { get; set; }
        /// <summary>Fully qualified name of the domain to which the device is attached</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fully qualified name of the domain to which the device is attached",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string DomainName { get; set; }
        /// <summary>Friendly name for the software version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Friendly name for the software version",
        SerializedName = @"friendlySoftwareName",
        PossibleTypes = new [] { typeof(string) })]
        string FriendlySoftwareName { get; set; }
        /// <summary>Name of the device model</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the device model",
        SerializedName = @"modelDescription",
        PossibleTypes = new [] { typeof(string) })]
        string ModelDescription { get; set; }
        /// <summary>Current status of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Current status of the device",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? Status { get; set; }
        /// <summary>Type of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the device",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? Type { get; set; }

    }
    /// Encases all the properties of the Device
    internal partial interface IDevicePropertiesInternal

    {
        /// <summary>The UTC time at which the device was activated</summary>
        global::System.DateTime? ActivationTime { get; set; }
        /// <summary>Operations that are allowed on the device based on its current state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] AllowedDeviceOperation { get; set; }
        /// <summary>Language culture setting on the device. For eg: "en-US"</summary>
        string Culture { get; set; }
        /// <summary>
        /// subclass containing more storage-related information about the device. This field will be populated only if the get call
        /// is made with $expand = details.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetails Detail { get; set; }
        /// <summary>Local pending storage available on the device in bytes</summary>
        long? DetailAvailableLocalStorageInByte { get; set; }
        /// <summary>Total pending available storage on the device in bytes</summary>
        long? DetailAvailableStorageInByte { get; set; }
        /// <summary>
        /// Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        int? DetailEndpointCount { get; set; }
        /// <summary>Storage in bytes that has been provisioned locally on the device</summary>
        long? DetailProvisionedLocalStorageInByte { get; set; }
        /// <summary>
        /// Storage in bytes that has been provisioned on the device including both local and cloud
        /// </summary>
        long? DetailProvisionedStorageInByte { get; set; }
        /// <summary>Total size taken up by backups in bytes</summary>
        long? DetailTotalBackupSizeInByte { get; set; }
        /// <summary>Total local storage capacity in device in bytes.</summary>
        long? DetailTotalLocalStorageInByte { get; set; }
        /// <summary>Total storage available on the device in bytes.</summary>
        long? DetailTotalStorageInByte { get; set; }
        /// <summary>Local Storage that is being currently used in bytes</summary>
        long? DetailUsingLocalStorageInByte { get; set; }
        /// <summary>Storage that is being currently used in bytes including both local and cloud</summary>
        long? DetailUsingStorageInByte { get; set; }
        /// <summary>Device can be configured either as FileServer or IscsiServer</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] DeviceCapability { get; set; }
        /// <summary>
        /// "Complete" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete,
        /// "Pending" if the device is only registered but the creation of share/volume is complete is still pending
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? DeviceConfigurationStatus { get; set; }
        /// <summary>Short description given for the device</summary>
        string DeviceDescription { get; set; }
        /// <summary>Version number of the software running on the device</summary>
        string DeviceSoftwareVersion { get; set; }
        /// <summary>Fully qualified name of the domain to which the device is attached</summary>
        string DomainName { get; set; }
        /// <summary>Friendly name for the software version</summary>
        string FriendlySoftwareName { get; set; }
        /// <summary>Name of the device model</summary>
        string ModelDescription { get; set; }
        /// <summary>Current status of the device</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? Status { get; set; }
        /// <summary>Type of the device</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? Type { get; set; }

    }
}