// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Extensions;

    /// <summary>Upload Certificate Response from IDM</summary>
    public partial class UploadCertificateResponse :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IUploadCertificateResponse,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IUploadCertificateResponseInternal,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModel"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModel __baseModel = new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.BaseModel();

        /// <summary>AAD tenant authority</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string AadAuthority { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AadAuthority; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AadAuthority = value ; }

        /// <summary>AAD tenant Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string AadTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AadTenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AadTenantId = value ; }

        /// <summary>Specify the Authentication type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.AuthType? AuthType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AuthType; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AuthType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.AuthType)""); }

        /// <summary>Azure Management Endpoint Audience</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string AzureManagementEndpointAudience { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AzureManagementEndpointAudience; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).AzureManagementEndpointAudience = value ; }

        /// <summary>Gets or sets the base64 encoded certificate raw data string</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string Certificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Certificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Certificate = value ; }

        /// <summary>Certificate friendly name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string FriendlyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).FriendlyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).FriendlyName = value ; }

        /// <summary>The identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Id; }

        /// <summary>Certificate issuer</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string Issuer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Issuer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Issuer = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetails Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IUploadCertificateResponseInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.ResourceCertificateAndAadDetails()); set { {_property = value;} } }

        /// <summary>The name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetails _property;

        /// <summary>Resource Certificate And AAD Details from IDM</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetails Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.ResourceCertificateAndAadDetails()); set => this._property = value; }

        /// <summary>Gets or Sets the ResourceId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long ResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ResourceId = value ; }

        /// <summary>AAD service principal clientId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string ServicePrincipalClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ServicePrincipalClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ServicePrincipalClientId = value ; }

        /// <summary>AAD service principal ObjectId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string ServicePrincipalObjectId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ServicePrincipalObjectId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ServicePrincipalObjectId = value ; }

        /// <summary>Certificate Subject Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string Subject { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Subject; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Subject = value ; }

        /// <summary>Certificate thumbprint</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string Thumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Thumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).Thumbprint = value ; }

        /// <summary>The type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Type; }

        /// <summary>Certificate Validity start Date time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public global::System.DateTime ValidFrom { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ValidFrom; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ValidFrom = value ; }

        /// <summary>Certificate Validity End Date time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public global::System.DateTime ValidTo { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ValidTo; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetailsInternal)Property).ValidTo = value ; }

        /// <summary>Creates an new <see cref="UploadCertificateResponse" /> instance.</summary>
        public UploadCertificateResponse()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__baseModel), __baseModel);
            await eventListener.AssertObjectIsValid(nameof(__baseModel), __baseModel);
        }
    }
    /// Upload Certificate Response from IDM
    public partial interface IUploadCertificateResponse :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModel
    {
        /// <summary>AAD tenant authority</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"AAD tenant authority",
        SerializedName = @"aadAuthority",
        PossibleTypes = new [] { typeof(string) })]
        string AadAuthority { get; set; }
        /// <summary>AAD tenant Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"AAD tenant Id",
        SerializedName = @"aadTenantId",
        PossibleTypes = new [] { typeof(string) })]
        string AadTenantId { get; set; }
        /// <summary>Specify the Authentication type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify the Authentication type",
        SerializedName = @"authType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.AuthType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.AuthType? AuthType { get; set; }
        /// <summary>Azure Management Endpoint Audience</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Azure Management Endpoint Audience",
        SerializedName = @"azureManagementEndpointAudience",
        PossibleTypes = new [] { typeof(string) })]
        string AzureManagementEndpointAudience { get; set; }
        /// <summary>Gets or sets the base64 encoded certificate raw data string</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or sets the base64 encoded certificate raw data string",
        SerializedName = @"certificate",
        PossibleTypes = new [] { typeof(string) })]
        string Certificate { get; set; }
        /// <summary>Certificate friendly name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Certificate friendly name",
        SerializedName = @"friendlyName",
        PossibleTypes = new [] { typeof(string) })]
        string FriendlyName { get; set; }
        /// <summary>Certificate issuer</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Certificate issuer",
        SerializedName = @"issuer",
        PossibleTypes = new [] { typeof(string) })]
        string Issuer { get; set; }
        /// <summary>Gets or Sets the ResourceId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or Sets the ResourceId",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(long) })]
        long ResourceId { get; set; }
        /// <summary>AAD service principal clientId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"AAD service principal clientId",
        SerializedName = @"servicePrincipalClientId",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalClientId { get; set; }
        /// <summary>AAD service principal ObjectId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"AAD service principal ObjectId",
        SerializedName = @"servicePrincipalObjectId",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalObjectId { get; set; }
        /// <summary>Certificate Subject Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Certificate Subject Name",
        SerializedName = @"subject",
        PossibleTypes = new [] { typeof(string) })]
        string Subject { get; set; }
        /// <summary>Certificate thumbprint</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Certificate thumbprint",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get; set; }
        /// <summary>Certificate Validity start Date time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Certificate Validity start Date time",
        SerializedName = @"validFrom",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime ValidFrom { get; set; }
        /// <summary>Certificate Validity End Date time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Certificate Validity End Date time",
        SerializedName = @"validTo",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime ValidTo { get; set; }

    }
    /// Upload Certificate Response from IDM
    internal partial interface IUploadCertificateResponseInternal :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal
    {
        /// <summary>AAD tenant authority</summary>
        string AadAuthority { get; set; }
        /// <summary>AAD tenant Id</summary>
        string AadTenantId { get; set; }
        /// <summary>Specify the Authentication type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.AuthType? AuthType { get; set; }
        /// <summary>Azure Management Endpoint Audience</summary>
        string AzureManagementEndpointAudience { get; set; }
        /// <summary>Gets or sets the base64 encoded certificate raw data string</summary>
        string Certificate { get; set; }
        /// <summary>Certificate friendly name</summary>
        string FriendlyName { get; set; }
        /// <summary>Certificate issuer</summary>
        string Issuer { get; set; }
        /// <summary>Resource Certificate And AAD Details from IDM</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IResourceCertificateAndAadDetails Property { get; set; }
        /// <summary>Gets or Sets the ResourceId</summary>
        long ResourceId { get; set; }
        /// <summary>AAD service principal clientId</summary>
        string ServicePrincipalClientId { get; set; }
        /// <summary>AAD service principal ObjectId</summary>
        string ServicePrincipalObjectId { get; set; }
        /// <summary>Certificate Subject Name</summary>
        string Subject { get; set; }
        /// <summary>Certificate thumbprint</summary>
        string Thumbprint { get; set; }
        /// <summary>Certificate Validity start Date time</summary>
        global::System.DateTime ValidFrom { get; set; }
        /// <summary>Certificate Validity End Date time</summary>
        global::System.DateTime ValidTo { get; set; }

    }
}