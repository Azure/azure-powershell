// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Extensions;

    /// <summary>The metric data.</summary>
    public partial class MetricData :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IMetricData,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IMetricDataInternal
    {

        /// <summary>Backing field for <see cref="Average" /> property.</summary>
        private double _average;

        /// <summary>The average of all sample for the given instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public double Average { get => this._average; set => this._average = value; }

        /// <summary>Backing field for <see cref="Count" /> property.</summary>
        private int _count;

        /// <summary>The count of samples of the metric data available for the given instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public int Count { get => this._count; set => this._count = value; }

        /// <summary>Backing field for <see cref="Maximum" /> property.</summary>
        private double _maximum;

        /// <summary>The maximum of all samples available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public double Maximum { get => this._maximum; set => this._maximum = value; }

        /// <summary>Backing field for <see cref="Minimum" /> property.</summary>
        private double _minimum;

        /// <summary>The minimum of all samples available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public double Minimum { get => this._minimum; set => this._minimum = value; }

        /// <summary>Backing field for <see cref="Sum" /> property.</summary>
        private double _sum;

        /// <summary>
        /// The sum of all the samples available in the given instance of time for the specific metric data
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public double Sum { get => this._sum; set => this._sum = value; }

        /// <summary>Backing field for <see cref="TimeStamp" /> property.</summary>
        private global::System.DateTime _timeStamp;

        /// <summary>The time when the metric data is fetched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public global::System.DateTime TimeStamp { get => this._timeStamp; set => this._timeStamp = value; }

        /// <summary>Creates an new <see cref="MetricData" /> instance.</summary>
        public MetricData()
        {

        }
    }
    /// The metric data.
    public partial interface IMetricData :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IJsonSerializable
    {
        /// <summary>The average of all sample for the given instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The average of all sample for the given instance",
        SerializedName = @"average",
        PossibleTypes = new [] { typeof(double) })]
        double Average { get; set; }
        /// <summary>The count of samples of the metric data available for the given instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The count of samples of the metric data available for the given instance",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(int) })]
        int Count { get; set; }
        /// <summary>The maximum of all samples available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The maximum of all samples available",
        SerializedName = @"maximum",
        PossibleTypes = new [] { typeof(double) })]
        double Maximum { get; set; }
        /// <summary>The minimum of all samples available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The minimum of all samples available",
        SerializedName = @"minimum",
        PossibleTypes = new [] { typeof(double) })]
        double Minimum { get; set; }
        /// <summary>
        /// The sum of all the samples available in the given instance of time for the specific metric data
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The sum of all the samples available in the given instance of time for the specific metric data",
        SerializedName = @"sum",
        PossibleTypes = new [] { typeof(double) })]
        double Sum { get; set; }
        /// <summary>The time when the metric data is fetched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The time when the metric data is fetched",
        SerializedName = @"timeStamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime TimeStamp { get; set; }

    }
    /// The metric data.
    internal partial interface IMetricDataInternal

    {
        /// <summary>The average of all sample for the given instance</summary>
        double Average { get; set; }
        /// <summary>The count of samples of the metric data available for the given instance</summary>
        int Count { get; set; }
        /// <summary>The maximum of all samples available</summary>
        double Maximum { get; set; }
        /// <summary>The minimum of all samples available</summary>
        double Minimum { get; set; }
        /// <summary>
        /// The sum of all the samples available in the given instance of time for the specific metric data
        /// </summary>
        double Sum { get; set; }
        /// <summary>The time when the metric data is fetched</summary>
        global::System.DateTime TimeStamp { get; set; }

    }
}