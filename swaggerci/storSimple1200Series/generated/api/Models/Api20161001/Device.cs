// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Extensions;

    /// <summary>Represents a StorSimple device object along with its properties</summary>
    public partial class Device :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevice,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModel"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModel __baseModel = new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.BaseModel();

        /// <summary>The UTC time at which the device was activated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public global::System.DateTime? ActivationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).ActivationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).ActivationTime = value ?? default(global::System.DateTime); }

        /// <summary>Operations that are allowed on the device based on its current state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] AllowedDeviceOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).AllowedDeviceOperation; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).AllowedDeviceOperation = value ?? null /* arrayOf */; }

        /// <summary>Device can be configured either as FileServer or IscsiServer</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] Capability { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceCapability; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceCapability = value ?? null /* arrayOf */; }

        /// <summary>
        /// "Complete" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete,
        /// "Pending" if the device is only registered but the creation of share/volume is complete is still pending
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? ConfigurationStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceConfigurationStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceConfigurationStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus)""); }

        /// <summary>Language culture setting on the device. For eg: "en-US"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string Culture { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Culture; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Culture = value ?? null; }

        /// <summary>Short description given for the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceDescription = value ?? null; }

        /// <summary>Local pending storage available on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailAvailableLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailAvailableLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailAvailableLocalStorageInByte = value ?? default(long); }

        /// <summary>Total pending available storage on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailAvailableStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailAvailableStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailAvailableStorageInByte = value ?? default(long); }

        /// <summary>
        /// Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public int? DetailEndpointCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailEndpointCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailEndpointCount = value ?? default(int); }

        /// <summary>Storage in bytes that has been provisioned locally on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailProvisionedLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailProvisionedLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailProvisionedLocalStorageInByte = value ?? default(long); }

        /// <summary>
        /// Storage in bytes that has been provisioned on the device including both local and cloud
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailProvisionedStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailProvisionedStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailProvisionedStorageInByte = value ?? default(long); }

        /// <summary>Total size taken up by backups in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailTotalBackupSizeInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailTotalBackupSizeInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailTotalBackupSizeInByte = value ?? default(long); }

        /// <summary>Total local storage capacity in device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailTotalLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailTotalLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailTotalLocalStorageInByte = value ?? default(long); }

        /// <summary>Total storage available on the device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailTotalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailTotalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailTotalStorageInByte = value ?? default(long); }

        /// <summary>Local Storage that is being currently used in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailUsingLocalStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailUsingLocalStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailUsingLocalStorageInByte = value ?? default(long); }

        /// <summary>Storage that is being currently used in bytes including both local and cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public long? DetailUsingStorageInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailUsingStorageInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DetailUsingStorageInByte = value ?? default(long); }

        /// <summary>Fully qualified name of the domain to which the device is attached</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string DomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DomainName = value ?? null; }

        /// <summary>Friendly name for the software version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string FriendlySoftwareName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).FriendlySoftwareName; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).FriendlySoftwareName = value ?? null; }

        /// <summary>The identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Id; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Type = value; }

        /// <summary>Internal Acessors for Detail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetails Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceInternal.Detail { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Detail = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceProperties Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.DeviceProperties()); set { {_property = value;} } }

        /// <summary>Name of the device model</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string ModelDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).ModelDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).ModelDescription = value ?? null; }

        /// <summary>The name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Name; }

        /// <summary>Type of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? PropertiesType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType)""); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceProperties _property;

        /// <summary>Collection of properties for the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.DeviceProperties()); set => this._property = value; }

        /// <summary>Version number of the software running on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public string SoftwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceSoftwareVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).DeviceSoftwareVersion = value ?? null; }

        /// <summary>Current status of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDevicePropertiesInternal)Property).Status = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus)""); }

        /// <summary>The type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal)__baseModel).Type; }

        /// <summary>Creates an new <see cref="Device" /> instance.</summary>
        public Device()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__baseModel), __baseModel);
            await eventListener.AssertObjectIsValid(nameof(__baseModel), __baseModel);
        }
    }
    /// Represents a StorSimple device object along with its properties
    public partial interface IDevice :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModel
    {
        /// <summary>The UTC time at which the device was activated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The UTC time at which the device was activated",
        SerializedName = @"activationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ActivationTime { get; set; }
        /// <summary>Operations that are allowed on the device based on its current state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operations that are allowed on the device based on its current state",
        SerializedName = @"allowedDeviceOperations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] AllowedDeviceOperation { get; set; }
        /// <summary>Device can be configured either as FileServer or IscsiServer</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Device can be configured either as FileServer or IscsiServer",
        SerializedName = @"deviceCapabilities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] Capability { get; set; }
        /// <summary>
        /// "Complete" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete,
        /// "Pending" if the device is only registered but the creation of share/volume is complete is still pending
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"""Complete"" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, ""Pending"" if the device is only registered but the creation of share/volume is complete is still pending",
        SerializedName = @"deviceConfigurationStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? ConfigurationStatus { get; set; }
        /// <summary>Language culture setting on the device. For eg: "en-US"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Language culture setting on the device. For eg: ""en-US""",
        SerializedName = @"culture",
        PossibleTypes = new [] { typeof(string) })]
        string Culture { get; set; }
        /// <summary>Short description given for the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Short description given for the device",
        SerializedName = @"deviceDescription",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>Local pending storage available on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Local pending storage available on the device in bytes",
        SerializedName = @"availableLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailAvailableLocalStorageInByte { get; set; }
        /// <summary>Total pending available storage on the device in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total pending available storage on the device in bytes",
        SerializedName = @"availableStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailAvailableStorageInByte { get; set; }
        /// <summary>
        /// Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes on IscsiServer)",
        SerializedName = @"endpointCount",
        PossibleTypes = new [] { typeof(int) })]
        int? DetailEndpointCount { get; set; }
        /// <summary>Storage in bytes that has been provisioned locally on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage in bytes that has been provisioned locally on the device",
        SerializedName = @"provisionedLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailProvisionedLocalStorageInByte { get; set; }
        /// <summary>
        /// Storage in bytes that has been provisioned on the device including both local and cloud
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage in bytes that has been provisioned on the device including both local and cloud",
        SerializedName = @"provisionedStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailProvisionedStorageInByte { get; set; }
        /// <summary>Total size taken up by backups in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total size taken up by backups in bytes",
        SerializedName = @"totalBackupSizeInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailTotalBackupSizeInByte { get; set; }
        /// <summary>Total local storage capacity in device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total local storage capacity in device in bytes.",
        SerializedName = @"totalLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailTotalLocalStorageInByte { get; set; }
        /// <summary>Total storage available on the device in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total storage available on the device in bytes.",
        SerializedName = @"totalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailTotalStorageInByte { get; set; }
        /// <summary>Local Storage that is being currently used in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Local Storage that is being currently used in bytes",
        SerializedName = @"usingLocalStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailUsingLocalStorageInByte { get; set; }
        /// <summary>Storage that is being currently used in bytes including both local and cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage that is being currently used in bytes including both local and cloud",
        SerializedName = @"usingStorageInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? DetailUsingStorageInByte { get; set; }
        /// <summary>Fully qualified name of the domain to which the device is attached</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fully qualified name of the domain to which the device is attached",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string DomainName { get; set; }
        /// <summary>Friendly name for the software version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Friendly name for the software version",
        SerializedName = @"friendlySoftwareName",
        PossibleTypes = new [] { typeof(string) })]
        string FriendlySoftwareName { get; set; }
        /// <summary>Name of the device model</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the device model",
        SerializedName = @"modelDescription",
        PossibleTypes = new [] { typeof(string) })]
        string ModelDescription { get; set; }
        /// <summary>Type of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the device",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? PropertiesType { get; set; }
        /// <summary>Version number of the software running on the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version number of the software running on the device",
        SerializedName = @"deviceSoftwareVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SoftwareVersion { get; set; }
        /// <summary>Current status of the device</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Current status of the device",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? Status { get; set; }

    }
    /// Represents a StorSimple device object along with its properties
    internal partial interface IDeviceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IBaseModelInternal
    {
        /// <summary>The UTC time at which the device was activated</summary>
        global::System.DateTime? ActivationTime { get; set; }
        /// <summary>Operations that are allowed on the device based on its current state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceOperation[] AllowedDeviceOperation { get; set; }
        /// <summary>Device can be configured either as FileServer or IscsiServer</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.SupportedDeviceCapabilities[] Capability { get; set; }
        /// <summary>
        /// "Complete" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete,
        /// "Pending" if the device is only registered but the creation of share/volume is complete is still pending
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceConfigurationStatus? ConfigurationStatus { get; set; }
        /// <summary>Language culture setting on the device. For eg: "en-US"</summary>
        string Culture { get; set; }
        /// <summary>Short description given for the device</summary>
        string Description { get; set; }
        /// <summary>
        /// subclass containing more storage-related information about the device. This field will be populated only if the get call
        /// is made with $expand = details.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceDetails Detail { get; set; }
        /// <summary>Local pending storage available on the device in bytes</summary>
        long? DetailAvailableLocalStorageInByte { get; set; }
        /// <summary>Total pending available storage on the device in bytes</summary>
        long? DetailAvailableStorageInByte { get; set; }
        /// <summary>
        /// Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        int? DetailEndpointCount { get; set; }
        /// <summary>Storage in bytes that has been provisioned locally on the device</summary>
        long? DetailProvisionedLocalStorageInByte { get; set; }
        /// <summary>
        /// Storage in bytes that has been provisioned on the device including both local and cloud
        /// </summary>
        long? DetailProvisionedStorageInByte { get; set; }
        /// <summary>Total size taken up by backups in bytes</summary>
        long? DetailTotalBackupSizeInByte { get; set; }
        /// <summary>Total local storage capacity in device in bytes.</summary>
        long? DetailTotalLocalStorageInByte { get; set; }
        /// <summary>Total storage available on the device in bytes.</summary>
        long? DetailTotalStorageInByte { get; set; }
        /// <summary>Local Storage that is being currently used in bytes</summary>
        long? DetailUsingLocalStorageInByte { get; set; }
        /// <summary>Storage that is being currently used in bytes including both local and cloud</summary>
        long? DetailUsingStorageInByte { get; set; }
        /// <summary>Fully qualified name of the domain to which the device is attached</summary>
        string DomainName { get; set; }
        /// <summary>Friendly name for the software version</summary>
        string FriendlySoftwareName { get; set; }
        /// <summary>Name of the device model</summary>
        string ModelDescription { get; set; }
        /// <summary>Type of the device</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceType? PropertiesType { get; set; }
        /// <summary>Collection of properties for the device</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IDeviceProperties Property { get; set; }
        /// <summary>Version number of the software running on the device</summary>
        string SoftwareVersion { get; set; }
        /// <summary>Current status of the device</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DeviceStatus? Status { get; set; }

    }
}