// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Extensions;

    /// <summary>
    /// This class can be used as the Type for any secret entity represented as Password, CertThumbprint, Algorithm. This class
    /// is intended to be used when the secret is encrypted with an asymmetric key pair. The encryptionAlgorithm field is mainly
    /// for future usage to potentially allow different entities encrypted using different algorithms.
    /// </summary>
    public partial class AsymmetricEncryptedSecret :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IAsymmetricEncryptedSecret,
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.IAsymmetricEncryptedSecretInternal
    {

        /// <summary>Backing field for <see cref="EncryptionAlgorithm" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.EncryptionAlgorithm _encryptionAlgorithm;

        /// <summary>Algorithm used to encrypt "Value"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.EncryptionAlgorithm EncryptionAlgorithm { get => this._encryptionAlgorithm; set => this._encryptionAlgorithm = value; }

        /// <summary>Backing field for <see cref="EncryptionCertificateThumbprint" /> property.</summary>
        private string _encryptionCertificateThumbprint;

        /// <summary>Thumbprint certificate that was used to encrypt "Value"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string EncryptionCertificateThumbprint { get => this._encryptionCertificateThumbprint; set => this._encryptionCertificateThumbprint = value; }

        /// <summary>Backing field for <see cref="Value" /> property.</summary>
        private string _value;

        /// <summary>
        /// The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint
        /// will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.PropertyOrigin.Owned)]
        public string Value { get => this._value; set => this._value = value; }

        /// <summary>Creates an new <see cref="AsymmetricEncryptedSecret" /> instance.</summary>
        public AsymmetricEncryptedSecret()
        {

        }
    }
    /// This class can be used as the Type for any secret entity represented as Password, CertThumbprint, Algorithm. This class
    /// is intended to be used when the secret is encrypted with an asymmetric key pair. The encryptionAlgorithm field is mainly
    /// for future usage to potentially allow different entities encrypted using different algorithms.
    public partial interface IAsymmetricEncryptedSecret :
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.IJsonSerializable
    {
        /// <summary>Algorithm used to encrypt "Value"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Algorithm used to encrypt ""Value""",
        SerializedName = @"encryptionAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.EncryptionAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
        /// <summary>Thumbprint certificate that was used to encrypt "Value"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Thumbprint certificate that was used to encrypt ""Value""",
        SerializedName = @"encryptionCertificateThumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionCertificateThumbprint { get; set; }
        /// <summary>
        /// The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint
        /// will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint will be null.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string Value { get; set; }

    }
    /// This class can be used as the Type for any secret entity represented as Password, CertThumbprint, Algorithm. This class
    /// is intended to be used when the secret is encrypted with an asymmetric key pair. The encryptionAlgorithm field is mainly
    /// for future usage to potentially allow different entities encrypted using different algorithms.
    internal partial interface IAsymmetricEncryptedSecretInternal

    {
        /// <summary>Algorithm used to encrypt "Value"</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
        /// <summary>Thumbprint certificate that was used to encrypt "Value"</summary>
        string EncryptionCertificateThumbprint { get; set; }
        /// <summary>
        /// The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint
        /// will be null.
        /// </summary>
        string Value { get; set; }

    }
}