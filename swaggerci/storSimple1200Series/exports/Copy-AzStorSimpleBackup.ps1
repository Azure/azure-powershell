
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Clones the given backup element to a new disk or share with given details.
.Description
Clones the given backup element to a new disk or share with given details.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.ICloneRequest
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.IStorSimpleIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CLONEREQUEST <ICloneRequest>: Clone Job Request Model.
  NewEndpointName <String>: Name of new endpoint which will created as part of clone job.
  TargetAccessPointId <String>: Access point Id on which clone job will performed.
  TargetDeviceId <String>: DeviceId of the device which will act as the Clone target
  [AccessControlRecord <String[]>]: The access control records.
  [AdminUser <String>]: The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\xyz.
  [DiskPropertiesDataPolicy <DataPolicy?>]: The data policy.
  [DiskPropertiesDescription <String>]: The description.
  [DiskPropertiesMonitoringStatus <MonitoringStatus?>]: The monitoring.
  [DiskPropertiesProvisionedCapacityInByte <Int64?>]: The provisioned capacity in bytes.
  [DiskStatus <DiskStatus?>]: The disk status.
  [SharePropertiesDataPolicy <DataPolicy?>]: The data policy
  [SharePropertiesDescription <String>]: Description for file share
  [SharePropertiesMonitoringStatus <MonitoringStatus?>]: The monitoring status
  [SharePropertiesProvisionedCapacityInByte <Int64?>]: The total provisioned capacity in Bytes
  [ShareStatus <ShareStatus?>]: The Share Status

INPUTOBJECT <IStorSimpleIdentity>: Identity Parameter
  [AccessControlRecordName <String>]: Name of access control record to be fetched.
  [BackupName <String>]: The backup name.
  [CertificateName <String>]: Certificate Name
  [ChapUserName <String>]: The user name of chap to be fetched.
  [CredentialName <String>]: The name of storage account credential to be fetched.
  [DeviceName <String>]: The device name.
  [DiskName <String>]: The disk name.
  [ElementName <String>]: The backup element name.
  [FileServerName <String>]: The file server name.
  [Id <String>]: Resource identity path
  [IscsiServerName <String>]: The iSCSI server name.
  [JobName <String>]: The job name.
  [ManagerName <String>]: The manager name
  [ResourceGroupName <String>]: The resource group name
  [ScheduleGroupName <String>]: The name of the schedule group.
  [ShareName <String>]: The file share name.
  [StorageDomainName <String>]: The storage domain name.
  [SubscriptionId <String>]: The subscription id
.Link
https://docs.microsoft.com/en-us/powershell/module/az.storsimple/copy-azstorsimplebackup
#>
function Copy-AzStorSimpleBackup {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='CloneExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Clone', Mandatory)]
    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [System.String]
    # The device name.
    ${DeviceName},

    [Parameter(ParameterSetName='Clone', Mandatory)]
    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [System.String]
    # The backup element name.
    ${ElementName},

    [Parameter(ParameterSetName='Clone', Mandatory)]
    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [System.String]
    # The manager name
    ${ManagerName},

    [Parameter(ParameterSetName='Clone', Mandatory)]
    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Alias('BackupName')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [System.String]
    # The backup name.
    ${Name},

    [Parameter(ParameterSetName='Clone', Mandatory)]
    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [System.String]
    # The resource group name
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Clone')]
    [Parameter(ParameterSetName='CloneExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription id
    ${SubscriptionId},

    [Parameter(ParameterSetName='CloneViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.IStorSimpleIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Clone', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CloneViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Models.Api20161001.ICloneRequest]
    # Clone Job Request Model.
    # To construct, see NOTES section for CLONEREQUEST properties and create a hash table.
    ${CloneRequest},

    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String]
    # Name of new endpoint which will created as part of clone job.
    ${NewEndpointName},

    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String]
    # Access point Id on which clone job will performed.
    ${TargetAccessPointId},

    [Parameter(ParameterSetName='CloneExpanded', Mandatory)]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String]
    # DeviceId of the device which will act as the Clone target
    ${TargetDeviceId},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String[]]
    # The access control records.
    ${AccessControlRecord},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String]
    # The user/group who will have full permission in this share.
    # Active directory email address.
    # Example: xyz@contoso.com or Contoso\xyz.
    ${AdminUser},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DataPolicy])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DataPolicy]
    # The data policy.
    ${DiskPropertiesDataPolicy},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String]
    # The description.
    ${DiskPropertiesDescription},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.MonitoringStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.MonitoringStatus]
    # The monitoring.
    ${DiskPropertiesMonitoringStatus},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.Int64]
    # The provisioned capacity in bytes.
    ${DiskPropertiesProvisionedCapacityInByte},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DiskStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DiskStatus]
    # The disk status.
    ${DiskStatus},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DataPolicy])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.DataPolicy]
    # The data policy
    ${SharePropertiesDataPolicy},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.String]
    # Description for file share
    ${SharePropertiesDescription},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.MonitoringStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.MonitoringStatus]
    # The monitoring status
    ${SharePropertiesMonitoringStatus},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [System.Int64]
    # The total provisioned capacity in Bytes
    ${SharePropertiesProvisionedCapacityInByte},

    [Parameter(ParameterSetName='CloneExpanded')]
    [Parameter(ParameterSetName='CloneViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.ShareStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Support.ShareStatus]
    # The Share Status
    ${ShareStatus},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Clone = 'Az.StorSimple.private\Copy-AzStorSimpleBackup_Clone';
            CloneExpanded = 'Az.StorSimple.private\Copy-AzStorSimpleBackup_CloneExpanded';
            CloneViaIdentity = 'Az.StorSimple.private\Copy-AzStorSimpleBackup_CloneViaIdentity';
            CloneViaIdentityExpanded = 'Az.StorSimple.private\Copy-AzStorSimpleBackup_CloneViaIdentityExpanded';
        }
        if (('Clone', 'CloneExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.StorSimple.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
