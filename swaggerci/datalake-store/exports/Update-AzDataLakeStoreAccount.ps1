
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates the specified Data Lake Store account information.
.Description
Updates the specified Data Lake Store account information.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.IDataLakeStoreAccountIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

FIREWALLRULE <IUpdateFirewallRuleWithAccountParameters[]>: The list of firewall rules associated with this Data Lake Store account.
  Name <String>: The unique name of the firewall rule to update.
  [EndIPAddress <String>]: The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
  [StartIPAddress <String>]: The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.

INPUTOBJECT <IDataLakeStoreAccountIdentity>: Identity Parameter
  [AccountName <String>]: The name of the Data Lake Store account.
  [FirewallRuleName <String>]: The name of the firewall rule to create or update.
  [Id <String>]: Resource identity path
  [Location <String>]: The resource location without whitespace.
  [ResourceGroupName <String>]: The name of the Azure resource group.
  [SubscriptionId <String>]: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [TrustedIdProviderName <String>]: The name of the trusted identity provider. This is used for differentiation of providers in the account.
  [VirtualNetworkRuleName <String>]: The name of the virtual network rule to create or update.

TRUSTEDIDPROVIDER <IUpdateTrustedIdProviderWithAccountParameters[]>: The list of trusted identity providers associated with this Data Lake Store account.
  Name <String>: The unique name of the trusted identity provider to update.
  [IdProvider <String>]: The URL of this trusted identity provider.

VIRTUALNETWORKRULE <IUpdateVirtualNetworkRuleWithAccountParameters[]>: The list of virtual network rules associated with this Data Lake Store account.
  Name <String>: The unique name of the virtual network rule to update.
  [SubnetId <String>]: The resource identifier for the subnet.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.datalakestoreaccount/update-azdatalakestoreaccount
#>
function Update-AzDataLakeStoreAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccount])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('AccountName')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Path')]
    [System.String]
    # The name of the Data Lake Store account.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Path')]
    [System.String]
    # The name of the Azure resource group.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.IDataLakeStoreAccountIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [System.String]
    # The default owner group for all new folders and files created in the Data Lake Store account.
    ${DefaultGroup},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState]
    # The current state of allowing or disallowing IPs originating within Azure through the firewall.
    # If the firewall is disabled, this is not enforced.
    ${FirewallAllowAzureIP},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateFirewallRuleWithAccountParameters[]]
    # The list of firewall rules associated with this Data Lake Store account.
    # To construct, see NOTES section for FIREWALLRULE properties and create a hash table.
    ${FirewallRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState]
    # The current state of the IP address firewall for this Data Lake Store account.
    # Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
    ${FirewallState},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [System.String]
    # The version of the user managed encryption key to update through a key rotation.
    ${KeyVaultMetaInfoEncryptionKeyVersion},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType]
    # The commitment tier to use for next month.
    ${NewTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateDataLakeStoreAccountParametersTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateTrustedIdProviderWithAccountParameters[]]
    # The list of trusted identity providers associated with this Data Lake Store account.
    # To construct, see NOTES section for TRUSTEDIDPROVIDER properties and create a hash table.
    ${TrustedIdProvider},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState])]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState]
    # The current state of the trusted identity provider feature for this Data Lake Store account.
    # Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
    ${TrustedIdProviderState},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateVirtualNetworkRuleWithAccountParameters[]]
    # The list of virtual network rules associated with this Data Lake Store account.
    # To construct, see NOTES section for VIRTUALNETWORKRULE properties and create a hash table.
    ${VirtualNetworkRule},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.DataLakeStoreAccount.private\Update-AzDataLakeStoreAccount_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.DataLakeStoreAccount.private\Update-AzDataLakeStoreAccount_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
