// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Extensions;

    /// <summary>Data Lake Store account properties information to be updated.</summary>
    public partial class UpdateDataLakeStoreAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateDataLakeStoreAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateDataLakeStoreAccountPropertiesInternal
    {

        /// <summary>Backing field for <see cref="DefaultGroup" /> property.</summary>
        private string _defaultGroup;

        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public string DefaultGroup { get => this._defaultGroup; set => this._defaultGroup = value; }

        /// <summary>Backing field for <see cref="EncryptionConfig" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfig _encryptionConfig;

        /// <summary>
        /// Used for rotation of user managed Key Vault keys. Can only be used to rotate a user managed encryption Key Vault key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfig EncryptionConfig { get => (this._encryptionConfig = this._encryptionConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.UpdateEncryptionConfig()); set => this._encryptionConfig = value; }

        /// <summary>Backing field for <see cref="FirewallAllowAzureIP" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? _firewallAllowAzureIP;

        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get => this._firewallAllowAzureIP; set => this._firewallAllowAzureIP = value; }

        /// <summary>Backing field for <see cref="FirewallRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateFirewallRuleWithAccountParameters[] _firewallRule;

        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateFirewallRuleWithAccountParameters[] FirewallRule { get => this._firewallRule; set => this._firewallRule = value; }

        /// <summary>Backing field for <see cref="FirewallState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? _firewallState;

        /// <summary>
        /// The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove
        /// existing rules, they will just be ignored until the firewall is re-enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get => this._firewallState; set => this._firewallState = value; }

        /// <summary>
        /// The version of the user managed encryption key to update through a key rotation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyVersion = value ?? null; }

        /// <summary>Internal Acessors for EncryptionConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfig Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateDataLakeStoreAccountPropertiesInternal.EncryptionConfig { get => (this._encryptionConfig = this._encryptionConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.UpdateEncryptionConfig()); set { {_encryptionConfig = value;} } }

        /// <summary>Internal Acessors for EncryptionConfigKeyVaultMetaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateKeyVaultMetaInfo Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateDataLakeStoreAccountPropertiesInternal.EncryptionConfigKeyVaultMetaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfo = value; }

        /// <summary>Backing field for <see cref="NewTier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? _newTier;

        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get => this._newTier; set => this._newTier = value; }

        /// <summary>Backing field for <see cref="TrustedIdProvider" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateTrustedIdProviderWithAccountParameters[] _trustedIdProvider;

        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get => this._trustedIdProvider; set => this._trustedIdProvider = value; }

        /// <summary>Backing field for <see cref="TrustedIdProviderState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? _trustedIdProviderState;

        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity
        /// provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get => this._trustedIdProviderState; set => this._trustedIdProviderState = value; }

        /// <summary>Backing field for <see cref="VirtualNetworkRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateVirtualNetworkRuleWithAccountParameters[] _virtualNetworkRule;

        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get => this._virtualNetworkRule; set => this._virtualNetworkRule = value; }

        /// <summary>Creates an new <see cref="UpdateDataLakeStoreAccountProperties" /> instance.</summary>
        public UpdateDataLakeStoreAccountProperties()
        {

        }
    }
    /// Data Lake Store account properties information to be updated.
    public partial interface IUpdateDataLakeStoreAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default owner group for all new folders and files created in the Data Lake Store account.",
        SerializedName = @"defaultGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultGroup { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.",
        SerializedName = @"firewallAllowAzureIps",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of firewall rules associated with this Data Lake Store account.",
        SerializedName = @"firewallRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateFirewallRuleWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateFirewallRuleWithAccountParameters[] FirewallRule { get; set; }
        /// <summary>
        /// The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove
        /// existing rules, they will just be ignored until the firewall is re-enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.",
        SerializedName = @"firewallState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>
        /// The version of the user managed encryption key to update through a key rotation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the user managed encryption key to update through a key rotation.",
        SerializedName = @"encryptionKeyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The commitment tier to use for next month.",
        SerializedName = @"newTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of trusted identity providers associated with this Data Lake Store account.",
        SerializedName = @"trustedIdProviders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateTrustedIdProviderWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity
        /// provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.",
        SerializedName = @"trustedIdProviderState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of virtual network rules associated with this Data Lake Store account.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateVirtualNetworkRuleWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get; set; }

    }
    /// Data Lake Store account properties information to be updated.
    internal partial interface IUpdateDataLakeStoreAccountPropertiesInternal

    {
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        string DefaultGroup { get; set; }
        /// <summary>
        /// Used for rotation of user managed Key Vault keys. Can only be used to rotate a user managed encryption Key Vault key.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateEncryptionConfig EncryptionConfig { get; set; }
        /// <summary>The updated Key Vault key to use in user managed key rotation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateKeyVaultMetaInfo EncryptionConfigKeyVaultMetaInfo { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateFirewallRuleWithAccountParameters[] FirewallRule { get; set; }
        /// <summary>
        /// The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove
        /// existing rules, they will just be ignored until the firewall is re-enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>
        /// The version of the user managed encryption key to update through a key rotation.
        /// </summary>
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity
        /// provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IUpdateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get; set; }

    }
}