// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Extensions;

    /// <summary>Data Lake Store account properties information.</summary>
    public partial class DataLakeStoreAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasic"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasic __dataLakeStoreAccountPropertiesBasic = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.DataLakeStoreAccountPropertiesBasic();

        /// <summary>The unique identifier associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public string AccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).AccountId; }

        /// <summary>The account creation time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public global::System.DateTime? CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).CreationTime; }

        /// <summary>Backing field for <see cref="CurrentTier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? _currentTier;

        /// <summary>The commitment tier in use for the current month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? CurrentTier { get => this._currentTier; }

        /// <summary>Backing field for <see cref="DefaultGroup" /> property.</summary>
        private string _defaultGroup;

        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public string DefaultGroup { get => this._defaultGroup; }

        /// <summary>Backing field for <see cref="EncryptionConfig" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig _encryptionConfig;

        /// <summary>The Key Vault encryption configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig EncryptionConfig { get => (this._encryptionConfig = this._encryptionConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionConfig()); }

        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType)""); }

        /// <summary>Backing field for <see cref="EncryptionProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? _encryptionProvisioningState;

        /// <summary>The current state of encryption provisioning for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? EncryptionProvisioningState { get => this._encryptionProvisioningState; }

        /// <summary>Backing field for <see cref="EncryptionState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? _encryptionState;

        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get => this._encryptionState; }

        /// <summary>The full CName endpoint for this account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public string Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).Endpoint; }

        /// <summary>Backing field for <see cref="FirewallAllowAzureIP" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? _firewallAllowAzureIP;

        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get => this._firewallAllowAzureIP; }

        /// <summary>Backing field for <see cref="FirewallRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] _firewallRule;

        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] FirewallRule { get => this._firewallRule; }

        /// <summary>Backing field for <see cref="FirewallState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? _firewallState;

        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get => this._firewallState; }

        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyName = value ?? null; }

        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyVersion = value ?? null; }

        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoKeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoKeyVaultResourceId = value ?? null; }

        /// <summary>The account last modified time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public global::System.DateTime? LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).LastModifiedTime; }

        /// <summary>Internal Acessors for AccountId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal.AccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).AccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).AccountId = value; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal.CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).CreationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).CreationTime = value; }

        /// <summary>Internal Acessors for Endpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal.Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).Endpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).Endpoint = value; }

        /// <summary>Internal Acessors for LastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal.LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).LastModifiedTime = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).ProvisioningState = value; }

        /// <summary>Internal Acessors for State</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal.State { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).State = value; }

        /// <summary>Internal Acessors for CurrentTier</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.CurrentTier { get => this._currentTier; set { {_currentTier = value;} } }

        /// <summary>Internal Acessors for DefaultGroup</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.DefaultGroup { get => this._defaultGroup; set { {_defaultGroup = value;} } }

        /// <summary>Internal Acessors for EncryptionConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.EncryptionConfig { get => (this._encryptionConfig = this._encryptionConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionConfig()); set { {_encryptionConfig = value;} } }

        /// <summary>Internal Acessors for EncryptionConfigKeyVaultMetaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.EncryptionConfigKeyVaultMetaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfo = value; }

        /// <summary>Internal Acessors for EncryptionProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.EncryptionProvisioningState { get => this._encryptionProvisioningState; set { {_encryptionProvisioningState = value;} } }

        /// <summary>Internal Acessors for EncryptionState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.EncryptionState { get => this._encryptionState; set { {_encryptionState = value;} } }

        /// <summary>Internal Acessors for FirewallAllowAzureIP</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.FirewallAllowAzureIP { get => this._firewallAllowAzureIP; set { {_firewallAllowAzureIP = value;} } }

        /// <summary>Internal Acessors for FirewallRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.FirewallRule { get => this._firewallRule; set { {_firewallRule = value;} } }

        /// <summary>Internal Acessors for FirewallState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.FirewallState { get => this._firewallState; set { {_firewallState = value;} } }

        /// <summary>Internal Acessors for NewTier</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.NewTier { get => this._newTier; set { {_newTier = value;} } }

        /// <summary>Internal Acessors for TrustedIdProvider</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.TrustedIdProvider { get => this._trustedIdProvider; set { {_trustedIdProvider = value;} } }

        /// <summary>Internal Acessors for TrustedIdProviderState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.TrustedIdProviderState { get => this._trustedIdProviderState; set { {_trustedIdProviderState = value;} } }

        /// <summary>Internal Acessors for VirtualNetworkRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal.VirtualNetworkRule { get => this._virtualNetworkRule; set { {_virtualNetworkRule = value;} } }

        /// <summary>Backing field for <see cref="NewTier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? _newTier;

        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get => this._newTier; }

        /// <summary>The provisioning status of the Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).ProvisioningState; }

        /// <summary>The state of the Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState? State { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)__dataLakeStoreAccountPropertiesBasic).State; }

        /// <summary>Backing field for <see cref="TrustedIdProvider" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] _trustedIdProvider;

        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] TrustedIdProvider { get => this._trustedIdProvider; }

        /// <summary>Backing field for <see cref="TrustedIdProviderState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? _trustedIdProviderState;

        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get => this._trustedIdProviderState; }

        /// <summary>Backing field for <see cref="VirtualNetworkRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] _virtualNetworkRule;

        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] VirtualNetworkRule { get => this._virtualNetworkRule; }

        /// <summary>Creates an new <see cref="DataLakeStoreAccountProperties" /> instance.</summary>
        public DataLakeStoreAccountProperties()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__dataLakeStoreAccountPropertiesBasic), __dataLakeStoreAccountPropertiesBasic);
            await eventListener.AssertObjectIsValid(nameof(__dataLakeStoreAccountPropertiesBasic), __dataLakeStoreAccountPropertiesBasic);
        }
    }
    /// Data Lake Store account properties information.
    public partial interface IDataLakeStoreAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasic
    {
        /// <summary>The commitment tier in use for the current month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment tier in use for the current month.",
        SerializedName = @"currentTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? CurrentTier { get;  }
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The default owner group for all new folders and files created in the Data Lake Store account.",
        SerializedName = @"defaultGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultGroup { get;  }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption provisioning for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of encryption provisioning for this Data Lake Store account.",
        SerializedName = @"encryptionProvisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? EncryptionProvisioningState { get;  }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of encryption for this Data Lake Store account.",
        SerializedName = @"encryptionState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get;  }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.",
        SerializedName = @"firewallAllowAzureIps",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get;  }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of firewall rules associated with this Data Lake Store account.",
        SerializedName = @"firewallRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] FirewallRule { get;  }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of the IP address firewall for this Data Lake Store account.",
        SerializedName = @"firewallState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get;  }
        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user managed encryption key.",
        SerializedName = @"encryptionKeyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the user managed encryption key.",
        SerializedName = @"encryptionKeyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource identifier for the user managed Key Vault being used to encrypt.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment tier to use for next month.",
        SerializedName = @"newTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get;  }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of trusted identity providers associated with this Data Lake Store account.",
        SerializedName = @"trustedIdProviders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] TrustedIdProvider { get;  }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of the trusted identity provider feature for this Data Lake Store account.",
        SerializedName = @"trustedIdProviderState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get;  }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of virtual network rules associated with this Data Lake Store account.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] VirtualNetworkRule { get;  }

    }
    /// Data Lake Store account properties information.
    internal partial interface IDataLakeStoreAccountPropertiesInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal
    {
        /// <summary>The commitment tier in use for the current month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? CurrentTier { get; set; }
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        string DefaultGroup { get; set; }
        /// <summary>The Key Vault encryption configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig EncryptionConfig { get; set; }
        /// <summary>The Key Vault information for connecting to user managed encryption keys.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo EncryptionConfigKeyVaultMetaInfo { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption provisioning for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? EncryptionProvisioningState { get; set; }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] FirewallRule { get; set; }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>The name of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] VirtualNetworkRule { get; set; }

    }
}