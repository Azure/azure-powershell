// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Extensions;

    /// <summary>Data Lake Store account information.</summary>
    public partial class DataLakeStoreAccount :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccount,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.Resource();

        /// <summary>The unique identifier associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string AccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).AccountId; }

        /// <summary>The account creation time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).CreationTime; }

        /// <summary>The commitment tier in use for the current month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? CurrentTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).CurrentTier; }

        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string DefaultGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).DefaultGroup; }

        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType)""); }

        /// <summary>The current state of encryption provisioning for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? EncryptionProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionProvisioningState; }

        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionState; }

        /// <summary>The full CName endpoint for this account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).Endpoint; }

        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallAllowAzureIP; }

        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] FirewallRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallRule; }

        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallState; }

        /// <summary>The resource identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity _identity;

        /// <summary>The Key Vault encryption identity, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionIdentity()); }

        /// <summary>The principal identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).PrincipalId; }

        /// <summary>The tenant identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).Type; }

        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyName = value ?? null; }

        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyVersion = value ?? null; }

        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoKeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoKeyVaultResourceId = value ?? null; }

        /// <summary>The account last modified time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).LastModifiedTime; }

        /// <summary>The resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Location; }

        /// <summary>Internal Acessors for AccountId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.AccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).AccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).AccountId = value; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).CreationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).CreationTime = value; }

        /// <summary>Internal Acessors for CurrentTier</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.CurrentTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).CurrentTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).CurrentTier = value; }

        /// <summary>Internal Acessors for DefaultGroup</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.DefaultGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).DefaultGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).DefaultGroup = value; }

        /// <summary>Internal Acessors for EncryptionConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.EncryptionConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfig = value; }

        /// <summary>Internal Acessors for EncryptionConfigKeyVaultMetaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.EncryptionConfigKeyVaultMetaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigKeyVaultMetaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigKeyVaultMetaInfo = value; }

        /// <summary>Internal Acessors for EncryptionProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.EncryptionProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionProvisioningState = value; }

        /// <summary>Internal Acessors for EncryptionState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.EncryptionState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).EncryptionState = value; }

        /// <summary>Internal Acessors for Endpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).Endpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).Endpoint = value; }

        /// <summary>Internal Acessors for FirewallAllowAzureIP</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.FirewallAllowAzureIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallAllowAzureIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallAllowAzureIP = value; }

        /// <summary>Internal Acessors for FirewallRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.FirewallRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallRule = value; }

        /// <summary>Internal Acessors for FirewallState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.FirewallState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).FirewallState = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for IdentityType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).Type = value; }

        /// <summary>Internal Acessors for LastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).LastModifiedTime = value; }

        /// <summary>Internal Acessors for NewTier</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.NewTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).NewTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).NewTier = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountProperties Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.DataLakeStoreAccountProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for State</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.State { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).State = value; }

        /// <summary>Internal Acessors for TrustedIdProvider</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.TrustedIdProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProvider = value; }

        /// <summary>Internal Acessors for TrustedIdProviderState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.TrustedIdProviderState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProviderState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProviderState = value; }

        /// <summary>Internal Acessors for VirtualNetworkRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountInternal.VirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).VirtualNetworkRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).VirtualNetworkRule = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Location</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal.Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Location = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceTags Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal.Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Tag = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Type = value; }

        /// <summary>The resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Name; }

        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).NewTier; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountProperties _property;

        /// <summary>The Data Lake Store account properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.DataLakeStoreAccountProperties()); }

        /// <summary>The provisioning status of the Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).ProvisioningState; }

        /// <summary>The state of the Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState? State { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesBasicInternal)Property).State; }

        /// <summary>The resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Tag; }

        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] TrustedIdProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProvider; }

        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProviderState; }

        /// <summary>The resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal)__resource).Type; }

        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] VirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountPropertiesInternal)Property).VirtualNetworkRule; }

        /// <summary>Creates an new <see cref="DataLakeStoreAccount" /> instance.</summary>
        public DataLakeStoreAccount()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Data Lake Store account information.
    public partial interface IDataLakeStoreAccount :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResource
    {
        /// <summary>The unique identifier associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unique identifier associated with this Data Lake Store account.",
        SerializedName = @"accountId",
        PossibleTypes = new [] { typeof(string) })]
        string AccountId { get;  }
        /// <summary>The account creation time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The account creation time.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTime { get;  }
        /// <summary>The commitment tier in use for the current month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment tier in use for the current month.",
        SerializedName = @"currentTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? CurrentTier { get;  }
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The default owner group for all new folders and files created in the Data Lake Store account.",
        SerializedName = @"defaultGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultGroup { get;  }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption provisioning for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of encryption provisioning for this Data Lake Store account.",
        SerializedName = @"encryptionProvisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? EncryptionProvisioningState { get;  }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of encryption for this Data Lake Store account.",
        SerializedName = @"encryptionState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get;  }
        /// <summary>The full CName endpoint for this account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The full CName endpoint for this account.",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        string Endpoint { get;  }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.",
        SerializedName = @"firewallAllowAzureIps",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get;  }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of firewall rules associated with this Data Lake Store account.",
        SerializedName = @"firewallRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] FirewallRule { get;  }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of the IP address firewall for this Data Lake Store account.",
        SerializedName = @"firewallState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get;  }
        /// <summary>The principal identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal identifier associated with the encryption.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The tenant identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant identifier associated with the encryption.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The type of encryption being used. Currently the only supported type is 'SystemAssigned'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityType { get;  }
        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user managed encryption key.",
        SerializedName = @"encryptionKeyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the user managed encryption key.",
        SerializedName = @"encryptionKeyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource identifier for the user managed Key Vault being used to encrypt.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The account last modified time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The account last modified time.",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModifiedTime { get;  }
        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment tier to use for next month.",
        SerializedName = @"newTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get;  }
        /// <summary>The provisioning status of the Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning status of the Data Lake Store account.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus? ProvisioningState { get;  }
        /// <summary>The state of the Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of the Data Lake Store account.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState? State { get;  }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of trusted identity providers associated with this Data Lake Store account.",
        SerializedName = @"trustedIdProviders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] TrustedIdProvider { get;  }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current state of the trusted identity provider feature for this Data Lake Store account.",
        SerializedName = @"trustedIdProviderState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get;  }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of virtual network rules associated with this Data Lake Store account.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] VirtualNetworkRule { get;  }

    }
    /// Data Lake Store account information.
    internal partial interface IDataLakeStoreAccountInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IResourceInternal
    {
        /// <summary>The unique identifier associated with this Data Lake Store account.</summary>
        string AccountId { get; set; }
        /// <summary>The account creation time.</summary>
        global::System.DateTime? CreationTime { get; set; }
        /// <summary>The commitment tier in use for the current month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? CurrentTier { get; set; }
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        string DefaultGroup { get; set; }
        /// <summary>The Key Vault encryption configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig EncryptionConfig { get; set; }
        /// <summary>The Key Vault information for connecting to user managed encryption keys.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo EncryptionConfigKeyVaultMetaInfo { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption provisioning for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionProvisioningState? EncryptionProvisioningState { get; set; }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get; set; }
        /// <summary>The full CName endpoint for this account.</summary>
        string Endpoint { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IFirewallRule[] FirewallRule { get; set; }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>The Key Vault encryption identity, if any.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity Identity { get; set; }
        /// <summary>The principal identifier associated with the encryption.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The tenant identifier associated with the encryption.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
        /// </summary>
        string IdentityType { get; set; }
        /// <summary>The name of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The account last modified time.</summary>
        global::System.DateTime? LastModifiedTime { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>The Data Lake Store account properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IDataLakeStoreAccountProperties Property { get; set; }
        /// <summary>The provisioning status of the Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountStatus? ProvisioningState { get; set; }
        /// <summary>The state of the Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.DataLakeStoreAccountState? State { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ITrustedIdProvider[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IVirtualNetworkRule[] VirtualNetworkRule { get; set; }

    }
}