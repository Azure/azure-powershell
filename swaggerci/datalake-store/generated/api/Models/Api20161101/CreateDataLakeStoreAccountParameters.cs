// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Extensions;

    public partial class CreateDataLakeStoreAccountParameters :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParameters,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal
    {

        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string DefaultGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).DefaultGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).DefaultGroup = value ?? null; }

        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType)""); }

        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState)""); }

        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).FirewallAllowAzureIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).FirewallAllowAzureIP = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState)""); }

        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] FirewallRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).FirewallRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).FirewallRule = value ?? null /* arrayOf */; }

        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).FirewallState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).FirewallState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState)""); }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity _identity;

        /// <summary>The Key Vault encryption identity, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionIdentity()); set => this._identity = value; }

        /// <summary>The principal identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).PrincipalId; }

        /// <summary>The tenant identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).Type; }

        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyName = value ?? null; }

        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoEncryptionKeyVersion = value ?? null; }

        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoKeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).KeyVaultMetaInfoKeyVaultResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>The resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for EncryptionConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.EncryptionConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfig = value; }

        /// <summary>Internal Acessors for EncryptionConfigKeyVaultMetaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.EncryptionConfigKeyVaultMetaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigKeyVaultMetaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).EncryptionConfigKeyVaultMetaInfo = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for IdentityType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentityInternal)Identity).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountProperties Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.CreateDataLakeStoreAccountProperties()); set { {_property = value;} } }

        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).NewTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).NewTier = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType)""); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountProperties _property;

        /// <summary>The Data Lake Store account properties to use for creating.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.CreateDataLakeStoreAccountProperties()); set => this._property = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersTags _tag;

        /// <summary>The resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.CreateDataLakeStoreAccountParametersTags()); set => this._tag = value; }

        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProvider = value ?? null /* arrayOf */; }

        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProviderState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).TrustedIdProviderState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState)""); }

        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).VirtualNetworkRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal)Property).VirtualNetworkRule = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="CreateDataLakeStoreAccountParameters" /> instance.</summary>
        public CreateDataLakeStoreAccountParameters()
        {

        }
    }
    public partial interface ICreateDataLakeStoreAccountParameters :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default owner group for all new folders and files created in the Data Lake Store account.",
        SerializedName = @"defaultGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultGroup { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of encryption for this Data Lake Store account.",
        SerializedName = @"encryptionState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.",
        SerializedName = @"firewallAllowAzureIps",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of firewall rules associated with this Data Lake Store account.",
        SerializedName = @"firewallRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] FirewallRule { get; set; }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of the IP address firewall for this Data Lake Store account.",
        SerializedName = @"firewallState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>The principal identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal identifier associated with the encryption.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The tenant identifier associated with the encryption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant identifier associated with the encryption.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The type of encryption being used. Currently the only supported type is 'SystemAssigned'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityType { get;  }
        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user managed encryption key.",
        SerializedName = @"encryptionKeyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the user managed encryption key.",
        SerializedName = @"encryptionKeyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource identifier for the user managed Key Vault being used to encrypt.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The resource location.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The commitment tier to use for next month.",
        SerializedName = @"newTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>The resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersTags Tag { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of trusted identity providers associated with this Data Lake Store account.",
        SerializedName = @"trustedIdProviders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of the trusted identity provider feature for this Data Lake Store account.",
        SerializedName = @"trustedIdProviderState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of virtual network rules associated with this Data Lake Store account.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get; set; }

    }
    internal partial interface ICreateDataLakeStoreAccountParametersInternal

    {
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        string DefaultGroup { get; set; }
        /// <summary>The Key Vault encryption configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig EncryptionConfig { get; set; }
        /// <summary>The Key Vault information for connecting to user managed encryption keys.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo EncryptionConfigKeyVaultMetaInfo { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] FirewallRule { get; set; }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>The Key Vault encryption identity, if any.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionIdentity Identity { get; set; }
        /// <summary>The principal identifier associated with the encryption.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The tenant identifier associated with the encryption.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
        /// </summary>
        string IdentityType { get; set; }
        /// <summary>The name of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The resource location.</summary>
        string Location { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>The Data Lake Store account properties to use for creating.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountProperties Property { get; set; }
        /// <summary>The resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountParametersTags Tag { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get; set; }

    }
}