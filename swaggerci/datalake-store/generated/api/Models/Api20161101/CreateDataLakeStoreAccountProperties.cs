// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Extensions;

    public partial class CreateDataLakeStoreAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal
    {

        /// <summary>Backing field for <see cref="DefaultGroup" /> property.</summary>
        private string _defaultGroup;

        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public string DefaultGroup { get => this._defaultGroup; set => this._defaultGroup = value; }

        /// <summary>Backing field for <see cref="EncryptionConfig" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig _encryptionConfig;

        /// <summary>The Key Vault encryption configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig EncryptionConfig { get => (this._encryptionConfig = this._encryptionConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionConfig()); set => this._encryptionConfig = value; }

        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType)""); }

        /// <summary>Backing field for <see cref="EncryptionState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? _encryptionState;

        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get => this._encryptionState; set => this._encryptionState = value; }

        /// <summary>Backing field for <see cref="FirewallAllowAzureIP" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? _firewallAllowAzureIP;

        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get => this._firewallAllowAzureIP; set => this._firewallAllowAzureIP = value; }

        /// <summary>Backing field for <see cref="FirewallRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] _firewallRule;

        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] FirewallRule { get => this._firewallRule; set => this._firewallRule = value; }

        /// <summary>Backing field for <see cref="FirewallState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? _firewallState;

        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get => this._firewallState; set => this._firewallState = value; }

        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyName = value ?? null; }

        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoEncryptionKeyVersion = value ?? null; }

        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoKeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfoKeyVaultResourceId = value ?? null; }

        /// <summary>Internal Acessors for EncryptionConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal.EncryptionConfig { get => (this._encryptionConfig = this._encryptionConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.EncryptionConfig()); set { {_encryptionConfig = value;} } }

        /// <summary>Internal Acessors for EncryptionConfigKeyVaultMetaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateDataLakeStoreAccountPropertiesInternal.EncryptionConfigKeyVaultMetaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal)EncryptionConfig).KeyVaultMetaInfo = value; }

        /// <summary>Backing field for <see cref="NewTier" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? _newTier;

        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get => this._newTier; set => this._newTier = value; }

        /// <summary>Backing field for <see cref="TrustedIdProvider" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] _trustedIdProvider;

        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get => this._trustedIdProvider; set => this._trustedIdProvider = value; }

        /// <summary>Backing field for <see cref="TrustedIdProviderState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? _trustedIdProviderState;

        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get => this._trustedIdProviderState; set => this._trustedIdProviderState = value; }

        /// <summary>Backing field for <see cref="VirtualNetworkRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] _virtualNetworkRule;

        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get => this._virtualNetworkRule; set => this._virtualNetworkRule = value; }

        /// <summary>Creates an new <see cref="CreateDataLakeStoreAccountProperties" /> instance.</summary>
        public CreateDataLakeStoreAccountProperties()
        {

        }
    }
    public partial interface ICreateDataLakeStoreAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default owner group for all new folders and files created in the Data Lake Store account.",
        SerializedName = @"defaultGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultGroup { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of encryption for this Data Lake Store account.",
        SerializedName = @"encryptionState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.",
        SerializedName = @"firewallAllowAzureIps",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of firewall rules associated with this Data Lake Store account.",
        SerializedName = @"firewallRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] FirewallRule { get; set; }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of the IP address firewall for this Data Lake Store account.",
        SerializedName = @"firewallState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user managed encryption key.",
        SerializedName = @"encryptionKeyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the user managed encryption key.",
        SerializedName = @"encryptionKeyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource identifier for the user managed Key Vault being used to encrypt.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The commitment tier to use for next month.",
        SerializedName = @"newTier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of trusted identity providers associated with this Data Lake Store account.",
        SerializedName = @"trustedIdProviders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of the trusted identity provider feature for this Data Lake Store account.",
        SerializedName = @"trustedIdProviderState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of virtual network rules associated with this Data Lake Store account.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get; set; }

    }
    internal partial interface ICreateDataLakeStoreAccountPropertiesInternal

    {
        /// <summary>
        /// The default owner group for all new folders and files created in the Data Lake Store account.
        /// </summary>
        string DefaultGroup { get; set; }
        /// <summary>The Key Vault encryption configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig EncryptionConfig { get; set; }
        /// <summary>The Key Vault information for connecting to user managed encryption keys.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo EncryptionConfigKeyVaultMetaInfo { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType? EncryptionConfigType { get; set; }
        /// <summary>The current state of encryption for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionState? EncryptionState { get; set; }
        /// <summary>
        /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled,
        /// this is not enforced.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallAllowAzureIpsState? FirewallAllowAzureIP { get; set; }
        /// <summary>The list of firewall rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateFirewallRuleWithAccountParameters[] FirewallRule { get; set; }
        /// <summary>The current state of the IP address firewall for this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.FirewallState? FirewallState { get; set; }
        /// <summary>The name of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>The commitment tier to use for next month.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TierType? NewTier { get; set; }
        /// <summary>
        /// The list of trusted identity providers associated with this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateTrustedIdProviderWithAccountParameters[] TrustedIdProvider { get; set; }
        /// <summary>
        /// The current state of the trusted identity provider feature for this Data Lake Store account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.TrustedIdProviderState? TrustedIdProviderState { get; set; }
        /// <summary>The list of virtual network rules associated with this Data Lake Store account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.ICreateVirtualNetworkRuleWithAccountParameters[] VirtualNetworkRule { get; set; }

    }
}