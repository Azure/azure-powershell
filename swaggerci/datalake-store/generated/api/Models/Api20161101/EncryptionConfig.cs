// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Extensions;

    /// <summary>The encryption configuration for the account.</summary>
    public partial class EncryptionConfig :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfig,
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal
    {

        /// <summary>Backing field for <see cref="KeyVaultMetaInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo _keyVaultMetaInfo;

        /// <summary>The Key Vault information for connecting to user managed encryption keys.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo KeyVaultMetaInfo { get => (this._keyVaultMetaInfo = this._keyVaultMetaInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.KeyVaultMetaInfo()); set => this._keyVaultMetaInfo = value; }

        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfoInternal)KeyVaultMetaInfo).EncryptionKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfoInternal)KeyVaultMetaInfo).EncryptionKeyName = value ?? null; }

        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoEncryptionKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfoInternal)KeyVaultMetaInfo).EncryptionKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfoInternal)KeyVaultMetaInfo).EncryptionKeyVersion = value ?? null; }

        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Inlined)]
        public string KeyVaultMetaInfoKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfoInternal)KeyVaultMetaInfo).KeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfoInternal)KeyVaultMetaInfo).KeyVaultResourceId = value ?? null; }

        /// <summary>Internal Acessors for KeyVaultMetaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IEncryptionConfigInternal.KeyVaultMetaInfo { get => (this._keyVaultMetaInfo = this._keyVaultMetaInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.KeyVaultMetaInfo()); set { {_keyVaultMetaInfo = value;} } }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType _type;

        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="EncryptionConfig" /> instance.</summary>
        public EncryptionConfig()
        {

        }
    }
    /// The encryption configuration for the account.
    public partial interface IEncryptionConfig :
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.IJsonSerializable
    {
        /// <summary>The name of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user managed encryption key.",
        SerializedName = @"encryptionKeyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the user managed encryption key.",
        SerializedName = @"encryptionKeyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource identifier for the user managed Key Vault being used to encrypt.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType Type { get; set; }

    }
    /// The encryption configuration for the account.
    internal partial interface IEncryptionConfigInternal

    {
        /// <summary>The Key Vault information for connecting to user managed encryption keys.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Models.Api20161101.IKeyVaultMetaInfo KeyVaultMetaInfo { get; set; }
        /// <summary>The name of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyName { get; set; }
        /// <summary>The version of the user managed encryption key.</summary>
        string KeyVaultMetaInfoEncryptionKeyVersion { get; set; }
        /// <summary>The resource identifier for the user managed Key Vault being used to encrypt.</summary>
        string KeyVaultMetaInfoKeyVaultResourceId { get; set; }
        /// <summary>
        /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataLakeStoreAccount.Support.EncryptionConfigType Type { get; set; }

    }
}