// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support
{

    /// <summary>
    /// FeatureFlags is the supported features of Azure SignalR service.
    /// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless":
    /// your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless
    /// mode but not recommended; "PredefinedOnly": for future use.
    /// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
    /// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
    /// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live
    /// traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting
    /// some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false",
    /// to enable/disable live trace feature.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlagsTypeConverter))]
    public partial struct FeatureFlags :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ServiceMode".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ServiceMode'", "ServiceMode", global::System.Management.Automation.CompletionResultType.ParameterValue, "ServiceMode");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EnableConnectivityLogs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EnableConnectivityLogs'", "EnableConnectivityLogs", global::System.Management.Automation.CompletionResultType.ParameterValue, "EnableConnectivityLogs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EnableMessagingLogs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EnableMessagingLogs'", "EnableMessagingLogs", global::System.Management.Automation.CompletionResultType.ParameterValue, "EnableMessagingLogs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EnableLiveTrace".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EnableLiveTrace'", "EnableLiveTrace", global::System.Management.Automation.CompletionResultType.ParameterValue, "EnableLiveTrace");
            }
        }
    }
}