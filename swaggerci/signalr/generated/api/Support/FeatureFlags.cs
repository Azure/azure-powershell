// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support
{

    /// <summary>
    /// FeatureFlags is the supported features of Azure SignalR service.
    /// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless":
    /// your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless
    /// mode but not recommended; "PredefinedOnly": for future use.
    /// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
    /// - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
    /// - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live
    /// traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting
    /// some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false",
    /// to enable/disable live trace feature.
    /// </summary>
    public partial struct FeatureFlags :
        System.IEquatable<FeatureFlags>
    {
        public static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags EnableConnectivityLogs = @"EnableConnectivityLogs";

        public static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags EnableLiveTrace = @"EnableLiveTrace";

        public static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags EnableMessagingLogs = @"EnableMessagingLogs";

        public static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags ServiceMode = @"ServiceMode";

        /// <summary>the value for an instance of the <see cref="FeatureFlags" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to FeatureFlags</summary>
        /// <param name="value">the value to convert to an instance of <see cref="FeatureFlags" />.</param>
        internal static object CreateFrom(object value)
        {
            return new FeatureFlags(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type FeatureFlags</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type FeatureFlags (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is FeatureFlags && Equals((FeatureFlags)obj);
        }

        /// <summary>Creates an instance of the <see cref="FeatureFlags"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private FeatureFlags(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns hashCode for enum FeatureFlags</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for FeatureFlags</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to FeatureFlags</summary>
        /// <param name="value">the value to convert to an instance of <see cref="FeatureFlags" />.</param>

        public static implicit operator FeatureFlags(string value)
        {
            return new FeatureFlags(value);
        }

        /// <summary>Implicit operator to convert FeatureFlags to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="FeatureFlags" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum FeatureFlags</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags e1, Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum FeatureFlags</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags e1, Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.FeatureFlags e2)
        {
            return e2.Equals(e1);
        }
    }
}