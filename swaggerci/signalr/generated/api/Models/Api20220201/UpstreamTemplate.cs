// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Extensions;

    /// <summary>
    /// Upstream template item settings. It defines the Upstream URL of the incoming requests.
    /// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL
    /// template.
    /// </summary>
    public partial class UpstreamTemplate :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamTemplate,
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamTemplateInternal
    {

        /// <summary>Backing field for <see cref="Auth" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettings _auth;

        /// <summary>Upstream auth settings. If not set, no auth is used for upstream messages.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettings Auth { get => (this._auth = this._auth ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.UpstreamAuthSettings()); set => this._auth = value; }

        /// <summary>Upstream auth type enum.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.UpstreamAuthType? AuthType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettingsInternal)Auth).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettingsInternal)Auth).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.UpstreamAuthType)""); }

        /// <summary>Backing field for <see cref="CategoryPattern" /> property.</summary>
        private string _categoryPattern;

        /// <summary>
        /// Gets or sets the matching pattern for category names. If not set, it matches any category.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any category name.
        /// 2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
        /// 3. The single category name, for example, "connections", it matches the category "connections".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string CategoryPattern { get => this._categoryPattern; set => this._categoryPattern = value; }

        /// <summary>Backing field for <see cref="EventPattern" /> property.</summary>
        private string _eventPattern;

        /// <summary>
        /// Gets or sets the matching pattern for event names. If not set, it matches any event.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name.
        /// 2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
        /// 3. The single event name, for example, "connect", it matches "connect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string EventPattern { get => this._eventPattern; set => this._eventPattern = value; }

        /// <summary>Backing field for <see cref="HubPattern" /> property.</summary>
        private string _hubPattern;

        /// <summary>
        /// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any hub name.
        /// 2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
        /// 3. The single hub name, for example, "hub1", it matches "hub1".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string HubPattern { get => this._hubPattern; set => this._hubPattern = value; }

        /// <summary>
        /// The Resource indicating the App ID URI of the target resource.
        /// It also appears in the aud (audience) claim of the issued token.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string ManagedIdentityResource { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettingsInternal)Auth).ManagedIdentityResource; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettingsInternal)Auth).ManagedIdentityResource = value ?? null; }

        /// <summary>Internal Acessors for Auth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamTemplateInternal.Auth { get => (this._auth = this._auth ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.UpstreamAuthSettings()); set { {_auth = value;} } }

        /// <summary>Internal Acessors for AuthManagedIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IManagedIdentitySettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamTemplateInternal.AuthManagedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettingsInternal)Auth).ManagedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettingsInternal)Auth).ManagedIdentity = value; }

        /// <summary>Backing field for <see cref="UrlTemplate" /> property.</summary>
        private string _urlTemplate;

        /// <summary>
        /// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template,
        /// the value of the Upstream URL is dynamically calculated when the client request comes in.
        /// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects,
        /// it will first POST to this URL: `http://example.com/chat/api/connect`.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string UrlTemplate { get => this._urlTemplate; set => this._urlTemplate = value; }

        /// <summary>Creates an new <see cref="UpstreamTemplate" /> instance.</summary>
        public UpstreamTemplate()
        {

        }
    }
    /// Upstream template item settings. It defines the Upstream URL of the incoming requests.
    /// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL
    /// template.
    public partial interface IUpstreamTemplate :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IJsonSerializable
    {
        /// <summary>Upstream auth type enum.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Upstream auth type enum.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.UpstreamAuthType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.UpstreamAuthType? AuthType { get; set; }
        /// <summary>
        /// Gets or sets the matching pattern for category names. If not set, it matches any category.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any category name.
        /// 2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
        /// 3. The single category name, for example, "connections", it matches the category "connections".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the matching pattern for category names. If not set, it matches any category.
        There are 3 kind of patterns supported:
            1. ""*"", it to matches any category name.
            2. Combine multiple categories with "","", for example ""connections,messages"", it matches category ""connections"" and ""messages"".
            3. The single category name, for example, ""connections"", it matches the category ""connections"".",
        SerializedName = @"categoryPattern",
        PossibleTypes = new [] { typeof(string) })]
        string CategoryPattern { get; set; }
        /// <summary>
        /// Gets or sets the matching pattern for event names. If not set, it matches any event.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name.
        /// 2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
        /// 3. The single event name, for example, "connect", it matches "connect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the matching pattern for event names. If not set, it matches any event.
        There are 3 kind of patterns supported:
            1. ""*"", it to matches any event name.
            2. Combine multiple events with "","", for example ""connect,disconnect"", it matches event ""connect"" and ""disconnect"".
            3. The single event name, for example, ""connect"", it matches ""connect"".",
        SerializedName = @"eventPattern",
        PossibleTypes = new [] { typeof(string) })]
        string EventPattern { get; set; }
        /// <summary>
        /// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any hub name.
        /// 2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
        /// 3. The single hub name, for example, "hub1", it matches "hub1".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the matching pattern for hub names. If not set, it matches any hub.
        There are 3 kind of patterns supported:
            1. ""*"", it to matches any hub name.
            2. Combine multiple hubs with "","", for example ""hub1,hub2"", it matches ""hub1"" and ""hub2"".
            3. The single hub name, for example, ""hub1"", it matches ""hub1"".",
        SerializedName = @"hubPattern",
        PossibleTypes = new [] { typeof(string) })]
        string HubPattern { get; set; }
        /// <summary>
        /// The Resource indicating the App ID URI of the target resource.
        /// It also appears in the aud (audience) claim of the issued token.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Resource indicating the App ID URI of the target resource.
        It also appears in the aud (audience) claim of the issued token.",
        SerializedName = @"resource",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedIdentityResource { get; set; }
        /// <summary>
        /// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template,
        /// the value of the Upstream URL is dynamically calculated when the client request comes in.
        /// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects,
        /// it will first POST to this URL: `http://example.com/chat/api/connect`.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
        For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.",
        SerializedName = @"urlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        string UrlTemplate { get; set; }

    }
    /// Upstream template item settings. It defines the Upstream URL of the incoming requests.
    /// The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL
    /// template.
    internal partial interface IUpstreamTemplateInternal

    {
        /// <summary>Upstream auth settings. If not set, no auth is used for upstream messages.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamAuthSettings Auth { get; set; }
        /// <summary>Managed identity settings for upstream.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IManagedIdentitySettings AuthManagedIdentity { get; set; }
        /// <summary>Upstream auth type enum.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.UpstreamAuthType? AuthType { get; set; }
        /// <summary>
        /// Gets or sets the matching pattern for category names. If not set, it matches any category.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any category name.
        /// 2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
        /// 3. The single category name, for example, "connections", it matches the category "connections".
        /// </summary>
        string CategoryPattern { get; set; }
        /// <summary>
        /// Gets or sets the matching pattern for event names. If not set, it matches any event.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name.
        /// 2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
        /// 3. The single event name, for example, "connect", it matches "connect".
        /// </summary>
        string EventPattern { get; set; }
        /// <summary>
        /// Gets or sets the matching pattern for hub names. If not set, it matches any hub.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any hub name.
        /// 2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
        /// 3. The single hub name, for example, "hub1", it matches "hub1".
        /// </summary>
        string HubPattern { get; set; }
        /// <summary>
        /// The Resource indicating the App ID URI of the target resource.
        /// It also appears in the aud (audience) claim of the issued token.
        /// </summary>
        string ManagedIdentityResource { get; set; }
        /// <summary>
        /// Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template,
        /// the value of the Upstream URL is dynamically calculated when the client request comes in.
        /// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects,
        /// it will first POST to this URL: `http://example.com/chat/api/connect`.
        /// </summary>
        string UrlTemplate { get; set; }

    }
}