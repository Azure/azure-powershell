// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SignalR.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Extensions;
    using System;

    /// <summary>Operation to update an exiting resource.</summary>
    /// <remarks>
    /// [OpenAPI] Update=>PATCH:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzSignalR_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Description(@"Operation to update an exiting resource.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Generated]
    public partial class UpdateAzSignalR_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A class represent a resource.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource _parametersBody = new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.SignalRResource();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.SignalRManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.SignalR.Module.Instance.ClientAPI;

        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all. If omitted, allow all by default.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use ""*"" to allow all. If omitted, allow all by default.",
        SerializedName = @"allowedOrigins",
        PossibleTypes = new [] { typeof(string) })]
        public string[] CorAllowedOrigin { get => _parametersBody.CorAllowedOrigin ?? null /* arrayOf */; set => _parametersBody.CorAllowedOrigin = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// DisableLocalAuthEnable or disable aad authWhen set as true, connection with AuthType=aad won't work.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "DisableLocalAuthEnable or disable aad authWhen set as true, connection with AuthType=aad won't work.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisableLocalAuthEnable or disable aad authWhen set as true, connection with AuthType=aad won't work.",
        SerializedName = @"disableAadAuth",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DisableAadAuth { get => _parametersBody.DisableAadAuth ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.DisableAadAuth = value; }

        /// <summary>
        /// DisableLocalAuthEnable or disable local auth with AccessKeyWhen set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "DisableLocalAuthEnable or disable local auth with AccessKeyWhen set as true, connection with AccessKey=xxx won't work.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisableLocalAuthEnable or disable local auth with AccessKeyWhen set as true, connection with AccessKey=xxx won't work.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DisableLocalAuth { get => _parametersBody.DisableLocalAuth ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.DisableLocalAuth = value; }

        /// <summary>
        /// List of the featureFlags.FeatureFlags that are not included in the parameters for the update operation will not be modified.And
        /// the response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set, its globally
        /// default value will be usedBut keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of the featureFlags.FeatureFlags that are not included in the parameters for the update operation will not be modified.And the response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set, its globally default value will be usedBut keep in mind, the default value doesn't mean \"false\". It varies in terms of different FeatureFlags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the featureFlags.FeatureFlags that are not included in the parameters for the update operation will not be modified.And the response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set, its globally default value will be usedBut keep in mind, the default value doesn't mean ""false"". It varies in terms of different FeatureFlags.",
        SerializedName = @"features",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRFeature) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRFeature[] Feature { get => _parametersBody.Feature ?? null /* arrayOf */; set => _parametersBody.Feature = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Represents the identity type: systemAssigned, userAssigned, None</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Represents the identity type: systemAssigned, userAssigned, None")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents the identity type: systemAssigned, userAssigned, None",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType))]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType IdentityType { get => _parametersBody.IdentityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType)""); set => _parametersBody.IdentityType = value; }

        /// <summary>Get or set the user assigned identities</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Get or set the user assigned identities")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Get or set the user assigned identities",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IManagedIdentityUserAssignedIdentities) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IManagedIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => _parametersBody.IdentityUserAssignedIdentity ?? null /* object */; set => _parametersBody.IdentityUserAssignedIdentity = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The kind of the service, it can be SignalR or RawWebSockets</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The kind of the service, it can be SignalR or RawWebSockets")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The kind of the service, it can be SignalR or RawWebSockets",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind))]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind Kind { get => _parametersBody.Kind ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind)""); set => _parametersBody.Kind = value; }

        /// <summary>Gets or sets the list of category configurations.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the list of category configurations.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of category configurations.",
        SerializedName = @"categories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ILiveTraceCategory) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ILiveTraceCategory[] LiveTraceConfigurationCategory { get => _parametersBody.LiveTraceConfigurationCategory ?? null /* arrayOf */; set => _parametersBody.LiveTraceConfigurationCategory = value; }

        /// <summary>
        /// Indicates whether or not enable live trace.When it's set to true, live trace client can connect to the service.Otherwise,
        /// live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure
        /// in "categories".Available values: true, false.Case insensitive.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether or not enable live trace.When it's set to true, live trace client can connect to the service.Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in \"categories\".Available values: true, false.Case insensitive.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not enable live trace.When it's set to true, live trace client can connect to the service.Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in ""categories"".Available values: true, false.Case insensitive.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(string) })]
        public string LiveTraceConfigurationEnabled { get => _parametersBody.LiveTraceConfigurationEnabled ?? null; set => _parametersBody.LiveTraceConfigurationEnabled = value; }

        /// <summary>
        /// The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _parametersBody.Location ?? null; set => _parametersBody.Location = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Azure Networking ACL Action.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure Networking ACL Action.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Networking ACL Action.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction))]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction NetworkAcLDefaultAction { get => _parametersBody.NetworkAcLDefaultAction ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction)""); set => _parametersBody.NetworkAcLDefaultAction = value; }

        /// <summary>ACLs for requests from private endpoints</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ACLs for requests from private endpoints")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ACLs for requests from private endpoints",
        SerializedName = @"privateEndpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IPrivateEndpointAcl) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get => _parametersBody.NetworkAcLPrivateEndpoint ?? null /* arrayOf */; set => _parametersBody.NetworkAcLPrivateEndpoint = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".When it's Enabled, network ACLs still apply.When it's Disabled,
        /// public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable or disable public network access. Default to \"Enabled\".When it's Enabled, network ACLs still apply.When it's Disabled, public network access is always disabled no matter what you set in network ACLs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable public network access. Default to ""Enabled"".When it's Enabled, network ACLs still apply.When it's Disabled, public network access is always disabled no matter what you set in network ACLs.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(string) })]
        public string PublicNetworkAccess { get => _parametersBody.PublicNetworkAccess ?? null; set => _parametersBody.PublicNetworkAccess = value; }

        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.",
        SerializedName = @"allow",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType))]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get => _parametersBody.PublicNetworkAllow ?? null /* arrayOf */; set => _parametersBody.PublicNetworkAllow = value; }

        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.",
        SerializedName = @"deny",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType))]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get => _parametersBody.PublicNetworkDeny ?? null /* arrayOf */; set => _parametersBody.PublicNetworkDeny = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API
        /// or the portal.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Gets or sets the list of category configurations.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the list of category configurations.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of category configurations.",
        SerializedName = @"categories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IResourceLogCategory) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IResourceLogCategory[] ResourceLogConfigurationCategory { get => _parametersBody.ResourceLogConfigurationCategory ?? null /* arrayOf */; set => _parametersBody.ResourceLogConfigurationCategory = value; }

        /// <summary>Backing field for <see cref="ResourceName" /> property.</summary>
        private string _resourceName;

        /// <summary>The name of the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource.",
        SerializedName = @"resourceName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Path)]
        public string ResourceName { get => this._resourceName; set => this._resourceName = value; }

        /// <summary>
        /// Optional, integer. The unit count of the resource. 1 by default.If present, following values are allowed: Free: 1 Standard:
        /// 1,2,5,10,20,50,100
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional, integer. The unit count of the resource. 1 by default.If present, following values are allowed: Free: 1 Standard: 1,2,5,10,20,50,100")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional, integer. The unit count of the resource. 1 by default.If present, following values are allowed: Free: 1 Standard: 1,2,5,10,20,50,100",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        public int SkuCapacity { get => _parametersBody.SkuCapacity ?? default(int); set => _parametersBody.SkuCapacity = value; }

        /// <summary>The name of the SKU. Required.Allowed values: Standard_S1, Free_F1</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the SKU. Required.Allowed values: Standard_S1, Free_F1")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the SKU. Required.Allowed values: Standard_S1, Free_F1",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuName { get => _parametersBody.SkuName ?? null; set => _parametersBody.SkuName = value; }

        /// <summary>
        /// Optional tier of this particular SKU. 'Standard' or 'Free'. `Basic` is deprecated, use `Standard` instead.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional tier of this particular SKU. 'Standard' or 'Free'. `Basic` is deprecated, use `Standard` instead.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional tier of this particular SKU. 'Standard' or 'Free'. `Basic` is deprecated, use `Standard` instead.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier))]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier SkuTier { get => _parametersBody.SkuTier ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier)""); set => _parametersBody.SkuTier = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>
        /// Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI
        /// for every service call.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tags of the service which is a list of key value pairs that describe the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tags of the service which is a list of key value pairs that describe the resource.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ITrackedResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ITrackedResourceTags Tag { get => _parametersBody.Tag ?? null /* object */; set => _parametersBody.Tag = value; }

        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Request client certificate during TLS handshake if enabled")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Request client certificate during TLS handshake if enabled",
        SerializedName = @"clientCertEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter TlClientCertEnabled { get => _parametersBody.TlClientCertEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _parametersBody.TlClientCertEnabled = value; }

        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.Category(global::Microsoft.Azure.PowerShell.Cmdlets.SignalR.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.",
        SerializedName = @"templates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamTemplate) })]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.IUpstreamTemplate[] UpstreamTemplate { get => _parametersBody.UpstreamTemplate ?? null /* arrayOf */; set => _parametersBody.UpstreamTemplate = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource">Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.SignalR.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of UpdateAzSignalR_UpdateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Cmdlets.UpdateAzSignalR_UpdateExpanded Clone()
        {
            var clone = new UpdateAzSignalR_UpdateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._parametersBody = this._parametersBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.ResourceName = this.ResourceName;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.SignalR.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'SignalRUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.SignalR.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.SignalRUpdate(SubscriptionId, ResourceGroupName, ResourceName, _parametersBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,ResourceName=ResourceName,body=_parametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzSignalR_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzSignalR_UpdateExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, ResourceName=ResourceName, body=_parametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, ResourceName=ResourceName, body=_parametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource">Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220201.ISignalRResource
                WriteObject((await response));
            }
        }
    }
}