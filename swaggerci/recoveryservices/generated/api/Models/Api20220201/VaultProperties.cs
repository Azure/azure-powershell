// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Extensions;

    /// <summary>Properties of the vault.</summary>
    public partial class VaultProperties :
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultProperties,
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal
    {

        /// <summary>Backing field for <see cref="BackupStorageVersion" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupStorageVersion? _backupStorageVersion;

        /// <summary>Backup storage version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupStorageVersion? BackupStorageVersion { get => this._backupStorageVersion; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryption _encryption;

        /// <summary>Customer Managed Key details of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.VaultPropertiesEncryption()); set => this._encryption = value; }

        /// <summary>Enabling/Disabling the Double Encryption state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.InfrastructureEncryptionState? EncryptionInfrastructureEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).InfrastructureEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).InfrastructureEncryption = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.InfrastructureEncryptionState)""); }

        /// <summary>
        /// Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public bool? KekIdentityUseSystemAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KekIdentityUseSystemAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KekIdentityUseSystemAssignedIdentity = value ?? default(bool); }

        /// <summary>
        /// The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string KekIdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KekIdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KekIdentityUserAssignedIdentity = value ?? null; }

        /// <summary>The key uri of the Customer Managed Key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KeyVaultPropertyKeyUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KeyVaultPropertyKeyUri = value ?? null; }

        /// <summary>Internal Acessors for BackupStorageVersion</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupStorageVersion? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.BackupStorageVersion { get => this._backupStorageVersion; set { {_backupStorageVersion = value;} } }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryption Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.VaultPropertiesEncryption()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for EncryptionKekIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.ICmkKekIdentity Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.EncryptionKekIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KekIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KekIdentity = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.ICmkKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryptionInternal)Encryption).KeyVaultProperty = value; }

        /// <summary>Internal Acessors for MoveDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetails Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveDetail { get => (this._moveDetail = this._moveDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.VaultPropertiesMoveDetails()); set { {_moveDetail = value;} } }

        /// <summary>Internal Acessors for MoveDetailCompletionTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveDetailCompletionTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).CompletionTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).CompletionTimeUtc = value; }

        /// <summary>Internal Acessors for MoveDetailOperationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveDetailOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).OperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).OperationId = value; }

        /// <summary>Internal Acessors for MoveDetailSourceResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveDetailSourceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).SourceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).SourceResourceId = value; }

        /// <summary>Internal Acessors for MoveDetailStartTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveDetailStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).StartTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).StartTimeUtc = value; }

        /// <summary>Internal Acessors for MoveDetailTargetResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveDetailTargetResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).TargetResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).TargetResourceId = value; }

        /// <summary>Internal Acessors for MoveState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ResourceMoveState? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.MoveState { get => this._moveState; set { {_moveState = value;} } }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IPrivateEndpointConnectionVaultProperties[] Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.PrivateEndpointConnection { get => this._privateEndpointConnection; set { {_privateEndpointConnection = value;} } }

        /// <summary>Internal Acessors for PrivateEndpointStateForBackup</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.PrivateEndpointStateForBackup { get => this._privateEndpointStateForBackup; set { {_privateEndpointStateForBackup = value;} } }

        /// <summary>Internal Acessors for PrivateEndpointStateForSiteRecovery</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.PrivateEndpointStateForSiteRecovery { get => this._privateEndpointStateForSiteRecovery; set { {_privateEndpointStateForSiteRecovery = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for UpgradeDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetails Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetail { get => (this._upgradeDetail = this._upgradeDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.UpgradeDetails()); set { {_upgradeDetail = value;} } }

        /// <summary>Internal Acessors for UpgradeDetailEndTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailEndTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).EndTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).EndTimeUtc = value; }

        /// <summary>Internal Acessors for UpgradeDetailLastUpdatedTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailLastUpdatedTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).LastUpdatedTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).LastUpdatedTimeUtc = value; }

        /// <summary>Internal Acessors for UpgradeDetailMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).Message = value; }

        /// <summary>Internal Acessors for UpgradeDetailOperationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).OperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).OperationId = value; }

        /// <summary>Internal Acessors for UpgradeDetailPreviousResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailPreviousResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).PreviousResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).PreviousResourceId = value; }

        /// <summary>Internal Acessors for UpgradeDetailStartTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).StartTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).StartTimeUtc = value; }

        /// <summary>Internal Acessors for UpgradeDetailStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultUpgradeState? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).Status = value; }

        /// <summary>Internal Acessors for UpgradeDetailTriggerType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.TriggerType? Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailTriggerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).TriggerType; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).TriggerType = value; }

        /// <summary>Internal Acessors for UpgradeDetailUpgradedResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesInternal.UpgradeDetailUpgradedResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).UpgradedResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).UpgradedResourceId = value; }

        /// <summary>Backing field for <see cref="MoveDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetails _moveDetail;

        /// <summary>The details of the latest move operation performed on the Azure Resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetails MoveDetail { get => (this._moveDetail = this._moveDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.VaultPropertiesMoveDetails()); set => this._moveDetail = value; }

        /// <summary>End Time of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? MoveDetailCompletionTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).CompletionTimeUtc; }

        /// <summary>OperationId of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string MoveDetailOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).OperationId; }

        /// <summary>Source Resource of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string MoveDetailSourceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).SourceResourceId; }

        /// <summary>Start Time of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? MoveDetailStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).StartTimeUtc; }

        /// <summary>Target Resource of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string MoveDetailTargetResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetailsInternal)MoveDetail).TargetResourceId; }

        /// <summary>Backing field for <see cref="MoveState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ResourceMoveState? _moveState;

        /// <summary>The State of the Resource after the move operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ResourceMoveState? MoveState { get => this._moveState; }

        /// <summary>Backing field for <see cref="PrivateEndpointConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IPrivateEndpointConnectionVaultProperties[] _privateEndpointConnection;

        /// <summary>List of private endpoint connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IPrivateEndpointConnectionVaultProperties[] PrivateEndpointConnection { get => this._privateEndpointConnection; }

        /// <summary>Backing field for <see cref="PrivateEndpointStateForBackup" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? _privateEndpointStateForBackup;

        /// <summary>Private endpoint state for backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? PrivateEndpointStateForBackup { get => this._privateEndpointStateForBackup; }

        /// <summary>Backing field for <see cref="PrivateEndpointStateForSiteRecovery" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? _privateEndpointStateForSiteRecovery;

        /// <summary>Private endpoint state for site recovery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? PrivateEndpointStateForSiteRecovery { get => this._privateEndpointStateForSiteRecovery; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning State.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="UpgradeDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetails _upgradeDetail;

        /// <summary>Details for upgrading vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetails UpgradeDetail { get => (this._upgradeDetail = this._upgradeDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.UpgradeDetails()); set => this._upgradeDetail = value; }

        /// <summary>UTC time at which the upgrade operation has ended.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeDetailEndTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).EndTimeUtc; }

        /// <summary>UTC time at which the upgrade operation status was last updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeDetailLastUpdatedTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).LastUpdatedTimeUtc; }

        /// <summary>Message to the user containing information about the upgrade operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string UpgradeDetailMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).Message; }

        /// <summary>ID of the vault upgrade operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string UpgradeDetailOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).OperationId; }

        /// <summary>Resource ID of the vault before the upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string UpgradeDetailPreviousResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).PreviousResourceId; }

        /// <summary>UTC time at which the upgrade operation has started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeDetailStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).StartTimeUtc; }

        /// <summary>Status of the vault upgrade operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultUpgradeState? UpgradeDetailStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).Status; }

        /// <summary>The way the vault upgrade was triggered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.TriggerType? UpgradeDetailTriggerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).TriggerType; }

        /// <summary>Resource ID of the upgraded vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string UpgradeDetailUpgradedResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetailsInternal)UpgradeDetail).UpgradedResourceId; }

        /// <summary>Creates an new <see cref="VaultProperties" /> instance.</summary>
        public VaultProperties()
        {

        }
    }
    /// Properties of the vault.
    public partial interface IVaultProperties :
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.IJsonSerializable
    {
        /// <summary>Backup storage version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Backup storage version",
        SerializedName = @"backupStorageVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupStorageVersion) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupStorageVersion? BackupStorageVersion { get;  }
        /// <summary>Enabling/Disabling the Double Encryption state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enabling/Disabling the Double Encryption state",
        SerializedName = @"infrastructureEncryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.InfrastructureEncryptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.InfrastructureEncryptionState? EncryptionInfrastructureEncryption { get; set; }
        /// <summary>
        /// Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field",
        SerializedName = @"useSystemAssignedIdentity",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KekIdentityUseSystemAssignedIdentity { get; set; }
        /// <summary>
        /// The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string KekIdentityUserAssignedIdentity { get; set; }
        /// <summary>The key uri of the Customer Managed Key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The key uri of the Customer Managed Key",
        SerializedName = @"keyUri",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyUri { get; set; }
        /// <summary>End Time of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End Time of the Resource Move Operation",
        SerializedName = @"completionTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? MoveDetailCompletionTimeUtc { get;  }
        /// <summary>OperationId of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"OperationId of the Resource Move Operation",
        SerializedName = @"operationId",
        PossibleTypes = new [] { typeof(string) })]
        string MoveDetailOperationId { get;  }
        /// <summary>Source Resource of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Source Resource of the Resource Move Operation",
        SerializedName = @"sourceResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string MoveDetailSourceResourceId { get;  }
        /// <summary>Start Time of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Start Time of the Resource Move Operation",
        SerializedName = @"startTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? MoveDetailStartTimeUtc { get;  }
        /// <summary>Target Resource of the Resource Move Operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Target Resource of the Resource Move Operation",
        SerializedName = @"targetResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string MoveDetailTargetResourceId { get;  }
        /// <summary>The State of the Resource after the move operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The State of the Resource after the move operation",
        SerializedName = @"moveState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ResourceMoveState) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ResourceMoveState? MoveState { get;  }
        /// <summary>List of private endpoint connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of private endpoint connection.",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IPrivateEndpointConnectionVaultProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IPrivateEndpointConnectionVaultProperties[] PrivateEndpointConnection { get;  }
        /// <summary>Private endpoint state for backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Private endpoint state for backup.",
        SerializedName = @"privateEndpointStateForBackup",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? PrivateEndpointStateForBackup { get;  }
        /// <summary>Private endpoint state for site recovery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Private endpoint state for site recovery.",
        SerializedName = @"privateEndpointStateForSiteRecovery",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? PrivateEndpointStateForSiteRecovery { get;  }
        /// <summary>Provisioning State.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning State.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>UTC time at which the upgrade operation has ended.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"UTC time at which the upgrade operation has ended.",
        SerializedName = @"endTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeDetailEndTimeUtc { get;  }
        /// <summary>UTC time at which the upgrade operation status was last updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"UTC time at which the upgrade operation status was last updated.",
        SerializedName = @"lastUpdatedTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeDetailLastUpdatedTimeUtc { get;  }
        /// <summary>Message to the user containing information about the upgrade operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Message to the user containing information about the upgrade operation.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeDetailMessage { get;  }
        /// <summary>ID of the vault upgrade operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ID of the vault upgrade operation.",
        SerializedName = @"operationId",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeDetailOperationId { get;  }
        /// <summary>Resource ID of the vault before the upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource ID of the vault before the upgrade.",
        SerializedName = @"previousResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeDetailPreviousResourceId { get;  }
        /// <summary>UTC time at which the upgrade operation has started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"UTC time at which the upgrade operation has started.",
        SerializedName = @"startTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeDetailStartTimeUtc { get;  }
        /// <summary>Status of the vault upgrade operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Status of the vault upgrade operation.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultUpgradeState) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultUpgradeState? UpgradeDetailStatus { get;  }
        /// <summary>The way the vault upgrade was triggered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The way the vault upgrade was triggered.",
        SerializedName = @"triggerType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.TriggerType) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.TriggerType? UpgradeDetailTriggerType { get;  }
        /// <summary>Resource ID of the upgraded vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource ID of the upgraded vault.",
        SerializedName = @"upgradedResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeDetailUpgradedResourceId { get;  }

    }
    /// Properties of the vault.
    internal partial interface IVaultPropertiesInternal

    {
        /// <summary>Backup storage version</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupStorageVersion? BackupStorageVersion { get; set; }
        /// <summary>Customer Managed Key details of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesEncryption Encryption { get; set; }
        /// <summary>Enabling/Disabling the Double Encryption state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.InfrastructureEncryptionState? EncryptionInfrastructureEncryption { get; set; }
        /// <summary>The details of the identity used for CMK</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.ICmkKekIdentity EncryptionKekIdentity { get; set; }
        /// <summary>The properties of the Key Vault which hosts CMK</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.ICmkKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>
        /// Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field
        /// </summary>
        bool? KekIdentityUseSystemAssignedIdentity { get; set; }
        /// <summary>
        /// The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned
        /// </summary>
        string KekIdentityUserAssignedIdentity { get; set; }
        /// <summary>The key uri of the Customer Managed Key</summary>
        string KeyVaultPropertyKeyUri { get; set; }
        /// <summary>The details of the latest move operation performed on the Azure Resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IVaultPropertiesMoveDetails MoveDetail { get; set; }
        /// <summary>End Time of the Resource Move Operation</summary>
        global::System.DateTime? MoveDetailCompletionTimeUtc { get; set; }
        /// <summary>OperationId of the Resource Move Operation</summary>
        string MoveDetailOperationId { get; set; }
        /// <summary>Source Resource of the Resource Move Operation</summary>
        string MoveDetailSourceResourceId { get; set; }
        /// <summary>Start Time of the Resource Move Operation</summary>
        global::System.DateTime? MoveDetailStartTimeUtc { get; set; }
        /// <summary>Target Resource of the Resource Move Operation</summary>
        string MoveDetailTargetResourceId { get; set; }
        /// <summary>The State of the Resource after the move operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ResourceMoveState? MoveState { get; set; }
        /// <summary>List of private endpoint connection.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IPrivateEndpointConnectionVaultProperties[] PrivateEndpointConnection { get; set; }
        /// <summary>Private endpoint state for backup.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? PrivateEndpointStateForBackup { get; set; }
        /// <summary>Private endpoint state for site recovery.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultPrivateEndpointState? PrivateEndpointStateForSiteRecovery { get; set; }
        /// <summary>Provisioning State.</summary>
        string ProvisioningState { get; set; }
        /// <summary>Details for upgrading vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20220201.IUpgradeDetails UpgradeDetail { get; set; }
        /// <summary>UTC time at which the upgrade operation has ended.</summary>
        global::System.DateTime? UpgradeDetailEndTimeUtc { get; set; }
        /// <summary>UTC time at which the upgrade operation status was last updated.</summary>
        global::System.DateTime? UpgradeDetailLastUpdatedTimeUtc { get; set; }
        /// <summary>Message to the user containing information about the upgrade operation.</summary>
        string UpgradeDetailMessage { get; set; }
        /// <summary>ID of the vault upgrade operation.</summary>
        string UpgradeDetailOperationId { get; set; }
        /// <summary>Resource ID of the vault before the upgrade.</summary>
        string UpgradeDetailPreviousResourceId { get; set; }
        /// <summary>UTC time at which the upgrade operation has started.</summary>
        global::System.DateTime? UpgradeDetailStartTimeUtc { get; set; }
        /// <summary>Status of the vault upgrade operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.VaultUpgradeState? UpgradeDetailStatus { get; set; }
        /// <summary>The way the vault upgrade was triggered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.TriggerType? UpgradeDetailTriggerType { get; set; }
        /// <summary>Resource ID of the upgraded vault.</summary>
        string UpgradeDetailUpgradedResourceId { get; set; }

    }
}