
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a record set within a Private DNS zone.
.Description
Creates or updates a record set within a Private DNS zone.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AAAARECORD <IAaaaRecord[]>: The list of AAAA records in the record set.
  [Ipv6Address <String>]: The IPv6 address of this AAAA record.

ARECORD <IARecord[]>: The list of A records in the record set.
  [Ipv4Address <String>]: The IPv4 address of this A record.

MXRECORD <IMxRecord[]>: The list of MX records in the record set.
  [Exchange <String>]: The domain name of the mail host for this MX record.
  [Preference <Int32?>]: The preference value for this MX record.

PTRRECORD <IPtrRecord[]>: The list of PTR records in the record set.
  [Ptrdname <String>]: The PTR target domain name for this PTR record.

SRVRECORD <ISrvRecord[]>: The list of SRV records in the record set.
  [Port <Int32?>]: The port value for this SRV record.
  [Priority <Int32?>]: The priority value for this SRV record.
  [Target <String>]: The target domain name for this SRV record.
  [Weight <Int32?>]: The weight value for this SRV record.

TXTRECORD <ITxtRecord[]>: The list of TXT records in the record set.
  [Value <String[]>]: The text value of this TXT record.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.privatedns/new-azprivatednsrecordset
#>
function New-AzPrivateDnsRecordSet {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Path')]
    [System.String]
    # The name of the Private DNS zone (without a terminating dot).
    ${PrivateZoneName},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Support.RecordType])]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Support.RecordType]
    # The type of DNS record in this record set.
    # Record sets of type SOA can be updated but not created (they are created when the Private DNS zone is created).
    ${RecordType},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Path')]
    [System.String]
    # The name of the record set, relative to the name of the zone.
    ${RelativeRecordSetName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Path')]
    [System.String]
    # The name of the resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription credentials which uniquely identify Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Header')]
    [System.String]
    # The ETag of the record set.
    # Omit this value to always overwrite the current record set.
    # Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes.
    ${IfMatch},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Header')]
    [System.String]
    # Set to '*' to allow a new record set to be created, but to prevent updating an existing record set.
    # Other values will be ignored.
    ${IfNoneMatch},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IARecord[]]
    # The list of A records in the record set.
    # To construct, see NOTES section for ARECORD properties and create a hash table.
    ${ARecord},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IAaaaRecord[]]
    # The list of AAAA records in the record set.
    # To construct, see NOTES section for AAAARECORD properties and create a hash table.
    ${AaaaRecord},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.String]
    # The canonical name for this CNAME record.
    ${CnameRecordCname},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.String]
    # The ETag of the record set.
    ${Etag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSetPropertiesMetadata]))]
    [System.Collections.Hashtable]
    # The metadata attached to the record set.
    ${Metadata},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IMxRecord[]]
    # The list of MX records in the record set.
    # To construct, see NOTES section for MXRECORD properties and create a hash table.
    ${MxRecord},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IPtrRecord[]]
    # The list of PTR records in the record set.
    # To construct, see NOTES section for PTRRECORD properties and create a hash table.
    ${PtrRecord},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.String]
    # The email contact for this SOA record.
    ${SoaRecordEmail},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.Int64]
    # The expire time for this SOA record.
    ${SoaRecordExpireTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.String]
    # The domain name of the authoritative name server for this SOA record.
    ${SoaRecordHost},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.Int64]
    # The minimum value for this SOA record.
    # By convention this is used to determine the negative caching duration.
    ${SoaRecordMinimumTtl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.Int64]
    # The refresh value for this SOA record.
    ${SoaRecordRefreshTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.Int64]
    # The retry time for this SOA record.
    ${SoaRecordRetryTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.Int64]
    # The serial number for this SOA record.
    ${SoaRecordSerialNumber},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ISrvRecord[]]
    # The list of SRV records in the record set.
    # To construct, see NOTES section for SRVRECORD properties and create a hash table.
    ${SrvRecord},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [System.Int64]
    # The TTL (time-to-live) of the records in the record set.
    ${Ttl},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ITxtRecord[]]
    # The list of TXT records in the record set.
    # To construct, see NOTES section for TXTRECORD properties and create a hash table.
    ${TxtRecord},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.PrivateDns.private\New-AzPrivateDnsRecordSet_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
