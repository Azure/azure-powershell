// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Extensions;
    using System;

    /// <summary>Creates or updates a record set within a Private DNS zone.</summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzPrivateDnsRecordSet_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Description(@"Creates or updates a record set within a Private DNS zone.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Generated]
    public partial class NewAzPrivateDnsRecordSet_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>
        /// Describes a DNS record set (a collection of DNS records with the same name and type) in a Private DNS zone.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet _parametersBody = new Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.RecordSet();

        /// <summary>The list of A records in the record set.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of A records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of A records in the record set.",
        SerializedName = @"aRecords",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IARecord) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IARecord[] ARecord { get => _parametersBody.ARecord ?? null /* arrayOf */; set => _parametersBody.ARecord = value; }

        /// <summary>The list of AAAA records in the record set.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of AAAA records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of AAAA records in the record set.",
        SerializedName = @"aaaaRecords",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IAaaaRecord) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IAaaaRecord[] AaaaRecord { get => _parametersBody.AaaaRecord ?? null /* arrayOf */; set => _parametersBody.AaaaRecord = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.PrivateDnsManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Module.Instance.ClientAPI;

        /// <summary>The canonical name for this CNAME record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The canonical name for this CNAME record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The canonical name for this CNAME record.",
        SerializedName = @"cname",
        PossibleTypes = new [] { typeof(string) })]
        public string CnameRecordCname { get => _parametersBody.CnameRecordCname ?? null; set => _parametersBody.CnameRecordCname = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The ETag of the record set.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ETag of the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ETag of the record set.",
        SerializedName = @"etag",
        PossibleTypes = new [] { typeof(string) })]
        public string Etag { get => _parametersBody.Etag ?? null; set => _parametersBody.Etag = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="IfMatch" /> property.</summary>
        private string _ifMatch;

        /// <summary>
        /// The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value
        /// to prevent accidentally overwriting any concurrent changes.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes.",
        SerializedName = @"If-Match",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Header)]
        public string IfMatch { get => this._ifMatch; set => this._ifMatch = value; }

        /// <summary>Backing field for <see cref="IfNoneMatch" /> property.</summary>
        private string _ifNoneMatch;

        /// <summary>
        /// Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will
        /// be ignored.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.",
        SerializedName = @"If-None-Match",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Header)]
        public string IfNoneMatch { get => this._ifNoneMatch; set => this._ifNoneMatch = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The metadata attached to the record set.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The metadata attached to the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The metadata attached to the record set.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSetPropertiesMetadata) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSetPropertiesMetadata Metadata { get => _parametersBody.Metadata ?? null /* object */; set => _parametersBody.Metadata = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>The list of MX records in the record set.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of MX records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of MX records in the record set.",
        SerializedName = @"mxRecords",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IMxRecord) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IMxRecord[] MxRecord { get => _parametersBody.MxRecord ?? null /* arrayOf */; set => _parametersBody.MxRecord = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Backing field for <see cref="PrivateZoneName" /> property.</summary>
        private string _privateZoneName;

        /// <summary>The name of the Private DNS zone (without a terminating dot).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the Private DNS zone (without a terminating dot).")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the Private DNS zone (without a terminating dot).",
        SerializedName = @"privateZoneName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Path)]
        public string PrivateZoneName { get => this._privateZoneName; set => this._privateZoneName = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The list of PTR records in the record set.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of PTR records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of PTR records in the record set.",
        SerializedName = @"ptrRecords",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IPtrRecord) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IPtrRecord[] PtrRecord { get => _parametersBody.PtrRecord ?? null /* arrayOf */; set => _parametersBody.PtrRecord = value; }

        /// <summary>Backing field for <see cref="RecordType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Support.RecordType _recordType;

        /// <summary>
        /// The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when
        /// the Private DNS zone is created).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the Private DNS zone is created).")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the Private DNS zone is created).",
        SerializedName = @"recordType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Support.RecordType) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Path)]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Support.RecordType))]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Support.RecordType RecordType { get => this._recordType; set => this._recordType = value; }

        /// <summary>Backing field for <see cref="RelativeRecordSetName" /> property.</summary>
        private string _relativeRecordSetName;

        /// <summary>The name of the record set, relative to the name of the zone.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the record set, relative to the name of the zone.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the record set, relative to the name of the zone.",
        SerializedName = @"relativeRecordSetName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Path)]
        public string RelativeRecordSetName { get => this._relativeRecordSetName; set => this._relativeRecordSetName = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>The email contact for this SOA record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The email contact for this SOA record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The email contact for this SOA record.",
        SerializedName = @"email",
        PossibleTypes = new [] { typeof(string) })]
        public string SoaRecordEmail { get => _parametersBody.SoaRecordEmail ?? null; set => _parametersBody.SoaRecordEmail = value; }

        /// <summary>The expire time for this SOA record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The expire time for this SOA record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The expire time for this SOA record.",
        SerializedName = @"expireTime",
        PossibleTypes = new [] { typeof(long) })]
        public long SoaRecordExpireTime { get => _parametersBody.SoaRecordExpireTime ?? default(long); set => _parametersBody.SoaRecordExpireTime = value; }

        /// <summary>The domain name of the authoritative name server for this SOA record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The domain name of the authoritative name server for this SOA record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The domain name of the authoritative name server for this SOA record.",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        public string SoaRecordHost { get => _parametersBody.SoaRecordHost ?? null; set => _parametersBody.SoaRecordHost = value; }

        /// <summary>
        /// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The minimum value for this SOA record. By convention this is used to determine the negative caching duration.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum value for this SOA record. By convention this is used to determine the negative caching duration.",
        SerializedName = @"minimumTtl",
        PossibleTypes = new [] { typeof(long) })]
        public long SoaRecordMinimumTtl { get => _parametersBody.SoaRecordMinimumTtl ?? default(long); set => _parametersBody.SoaRecordMinimumTtl = value; }

        /// <summary>The refresh value for this SOA record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The refresh value for this SOA record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The refresh value for this SOA record.",
        SerializedName = @"refreshTime",
        PossibleTypes = new [] { typeof(long) })]
        public long SoaRecordRefreshTime { get => _parametersBody.SoaRecordRefreshTime ?? default(long); set => _parametersBody.SoaRecordRefreshTime = value; }

        /// <summary>The retry time for this SOA record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The retry time for this SOA record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The retry time for this SOA record.",
        SerializedName = @"retryTime",
        PossibleTypes = new [] { typeof(long) })]
        public long SoaRecordRetryTime { get => _parametersBody.SoaRecordRetryTime ?? default(long); set => _parametersBody.SoaRecordRetryTime = value; }

        /// <summary>The serial number for this SOA record.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The serial number for this SOA record.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The serial number for this SOA record.",
        SerializedName = @"serialNumber",
        PossibleTypes = new [] { typeof(long) })]
        public long SoaRecordSerialNumber { get => _parametersBody.SoaRecordSerialNumber ?? default(long); set => _parametersBody.SoaRecordSerialNumber = value; }

        /// <summary>The list of SRV records in the record set.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of SRV records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of SRV records in the record set.",
        SerializedName = @"srvRecords",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ISrvRecord) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ISrvRecord[] SrvRecord { get => _parametersBody.SrvRecord ?? null /* arrayOf */; set => _parametersBody.SrvRecord = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>The TTL (time-to-live) of the records in the record set.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The TTL (time-to-live) of the records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The TTL (time-to-live) of the records in the record set.",
        SerializedName = @"ttl",
        PossibleTypes = new [] { typeof(long) })]
        public long Ttl { get => _parametersBody.Ttl ?? default(long); set => _parametersBody.Ttl = value; }

        /// <summary>The list of TXT records in the record set.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of TXT records in the record set.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of TXT records in the record set.",
        SerializedName = @"txtRecords",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ITxtRecord) })]
        public Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ITxtRecord[] TxtRecord { get => _parametersBody.TxtRecord ?? null /* arrayOf */; set => _parametersBody.TxtRecord = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ICloudError"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ICloudError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzPrivateDnsRecordSet_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzPrivateDnsRecordSet_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'RecordSetsCreateOrUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.RecordSetsCreateOrUpdate(ResourceGroupName, PrivateZoneName, RecordType, RelativeRecordSetName, this.InvocationInformation.BoundParameters.ContainsKey("IfMatch") ? IfMatch : null, this.InvocationInformation.BoundParameters.ContainsKey("IfNoneMatch") ? IfNoneMatch : null, SubscriptionId, _parametersBody, onOk, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  ResourceGroupName=ResourceGroupName,PrivateZoneName=PrivateZoneName,RecordType=RecordType,RelativeRecordSetName=RelativeRecordSetName,IfMatch=this.InvocationInformation.BoundParameters.ContainsKey("IfMatch") ? IfMatch : null,IfNoneMatch=this.InvocationInformation.BoundParameters.ContainsKey("IfNoneMatch") ? IfNoneMatch : null,SubscriptionId=SubscriptionId,body=_parametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet
                WriteObject((await response));
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ICloudError"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ICloudError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.ICloudError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceGroupName=ResourceGroupName, PrivateZoneName=PrivateZoneName, RecordType=RecordType, RelativeRecordSetName=RelativeRecordSetName, IfMatch=this.InvocationInformation.BoundParameters.ContainsKey("IfMatch") ? IfMatch : null, IfNoneMatch=this.InvocationInformation.BoundParameters.ContainsKey("IfNoneMatch") ? IfNoneMatch : null, SubscriptionId=SubscriptionId, body=_parametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceGroupName=ResourceGroupName, PrivateZoneName=PrivateZoneName, RecordType=RecordType, RelativeRecordSetName=RelativeRecordSetName, IfMatch=this.InvocationInformation.BoundParameters.ContainsKey("IfMatch") ? IfMatch : null, IfNoneMatch=this.InvocationInformation.BoundParameters.ContainsKey("IfNoneMatch") ? IfNoneMatch : null, SubscriptionId=SubscriptionId, body=_parametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.PrivateDns.Models.Api20200601.IRecordSet
                WriteObject((await response));
            }
        }
    }
}