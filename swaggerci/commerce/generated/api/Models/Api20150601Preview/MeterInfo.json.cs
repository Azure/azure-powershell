// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Usage.Models.Api20150601Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Extensions;

    /// <summary>Detailed information about the meter.</summary>
    public partial class MeterInfo
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Usage.Models.Api20150601Preview.IMeterInfo.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Usage.Models.Api20150601Preview.IMeterInfo.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Usage.Models.Api20150601Preview.IMeterInfo FromJson(Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject json ? new MeterInfo(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject into a new instance of <see cref="MeterInfo" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal MeterInfo(Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_meterId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("MeterId"), out var __jsonMeterId) ? (string)__jsonMeterId : (string)MeterId;}
            {_meterName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("MeterName"), out var __jsonMeterName) ? (string)__jsonMeterName : (string)MeterName;}
            {_meterCategory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("MeterCategory"), out var __jsonMeterCategory) ? (string)__jsonMeterCategory : (string)MeterCategory;}
            {_meterSubCategory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("MeterSubCategory"), out var __jsonMeterSubCategory) ? (string)__jsonMeterSubCategory : (string)MeterSubCategory;}
            {_unit = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("Unit"), out var __jsonUnit) ? (string)__jsonUnit : (string)Unit;}
            {_meterTag = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonArray>("MeterTags"), out var __jsonMeterTags) ? If( __jsonMeterTags as Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : MeterTag;}
            {_meterRegion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("MeterRegion"), out var __jsonMeterRegion) ? (string)__jsonMeterRegion : (string)MeterRegion;}
            {_meterRate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject>("MeterRates"), out var __jsonMeterRates) ? Microsoft.Azure.PowerShell.Cmdlets.Usage.Models.Api20150601Preview.MeterInfoMeterRates.FromJson(__jsonMeterRates) : MeterRate;}
            {_effectiveDate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString>("EffectiveDate"), out var __jsonEffectiveDate) ? global::System.DateTime.TryParse((string)__jsonEffectiveDate, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonEffectiveDateValue) ? __jsonEffectiveDateValue : EffectiveDate : EffectiveDate;}
            {_includedQuantity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNumber>("IncludedQuantity"), out var __jsonIncludedQuantity) ? (float?)__jsonIncludedQuantity : IncludedQuantity;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="MeterInfo" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="MeterInfo" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._meterId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._meterId.ToString()) : null, "MeterId" ,container.Add );
            AddIf( null != (((object)this._meterName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._meterName.ToString()) : null, "MeterName" ,container.Add );
            AddIf( null != (((object)this._meterCategory)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._meterCategory.ToString()) : null, "MeterCategory" ,container.Add );
            AddIf( null != (((object)this._meterSubCategory)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._meterSubCategory.ToString()) : null, "MeterSubCategory" ,container.Add );
            AddIf( null != (((object)this._unit)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._unit.ToString()) : null, "Unit" ,container.Add );
            if (null != this._meterTag)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.XNodeArray();
                foreach( var __x in this._meterTag )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("MeterTags",__w);
            }
            AddIf( null != (((object)this._meterRegion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._meterRegion.ToString()) : null, "MeterRegion" ,container.Add );
            AddIf( null != this._meterRate ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) this._meterRate.ToJson(null,serializationMode) : null, "MeterRates" ,container.Add );
            AddIf( null != this._effectiveDate ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonString(this._effectiveDate?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "EffectiveDate" ,container.Add );
            AddIf( null != this._includedQuantity ? (Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Usage.Runtime.Json.JsonNumber((float)this._includedQuantity) : null, "IncludedQuantity" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}