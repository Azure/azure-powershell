// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Extensions;

    /// <summary>Subscription information.</summary>
    public partial class Subscription :
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscription,
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal
    {

        /// <summary>Backing field for <see cref="AuthorizationSource" /> property.</summary>
        private string _authorizationSource;

        /// <summary>
        /// The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct
        /// and Management. For example, 'Legacy, RoleBased'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public string AuthorizationSource { get => this._authorizationSource; set => this._authorizationSource = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>The subscription display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.DisplayName { get => this._displayName; set { {_displayName = value;} } }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Policy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPolicies Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.Policy { get => (this._policy = this._policy ?? new Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.SubscriptionPolicies()); set { {_policy = value;} } }

        /// <summary>Internal Acessors for PolicyLocationPlacementId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.PolicyLocationPlacementId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).LocationPlacementId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).LocationPlacementId = value; }

        /// <summary>Internal Acessors for PolicyQuotaId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.PolicyQuotaId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).QuotaId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).QuotaId = value; }

        /// <summary>Internal Acessors for PolicySpendingLimit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SpendingLimit? Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.PolicySpendingLimit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).SpendingLimit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).SpendingLimit = value; }

        /// <summary>Internal Acessors for State</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SubscriptionState? Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for SubscriptionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionInternal.SubscriptionId { get => this._subscriptionId; set { {_subscriptionId = value;} } }

        /// <summary>Backing field for <see cref="Policy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPolicies _policy;

        /// <summary>The subscription policies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPolicies Policy { get => (this._policy = this._policy ?? new Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.SubscriptionPolicies()); set => this._policy = value; }

        /// <summary>
        /// The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a
        /// subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Inlined)]
        public string PolicyLocationPlacementId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).LocationPlacementId; }

        /// <summary>The subscription quota ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Inlined)]
        public string PolicyQuotaId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).QuotaId; }

        /// <summary>The subscription spending limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SpendingLimit? PolicySpendingLimit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPoliciesInternal)Policy).SpendingLimit; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SubscriptionState? _state;

        /// <summary>
        /// The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SubscriptionState? State { get => this._state; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The subscription ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; }

        /// <summary>Creates an new <see cref="Subscription" /> instance.</summary>
        public Subscription()
        {

        }
    }
    /// Subscription information.
    public partial interface ISubscription :
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct
        /// and Management. For example, 'Legacy, RoleBased'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.",
        SerializedName = @"authorizationSource",
        PossibleTypes = new [] { typeof(string) })]
        string AuthorizationSource { get; set; }
        /// <summary>The subscription display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subscription display name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>
        /// The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>
        /// The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a
        /// subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.",
        SerializedName = @"locationPlacementId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyLocationPlacementId { get;  }
        /// <summary>The subscription quota ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subscription quota ID.",
        SerializedName = @"quotaId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyQuotaId { get;  }
        /// <summary>The subscription spending limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subscription spending limit.",
        SerializedName = @"spendingLimit",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SpendingLimit) })]
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SpendingLimit? PolicySpendingLimit { get;  }
        /// <summary>
        /// The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SubscriptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SubscriptionState? State { get;  }
        /// <summary>The subscription ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The subscription ID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get;  }

    }
    /// Subscription information.
    internal partial interface ISubscriptionInternal

    {
        /// <summary>
        /// The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct
        /// and Management. For example, 'Legacy, RoleBased'.
        /// </summary>
        string AuthorizationSource { get; set; }
        /// <summary>The subscription display name.</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
        /// </summary>
        string Id { get; set; }
        /// <summary>The subscription policies.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.Api20160601.ISubscriptionPolicies Policy { get; set; }
        /// <summary>
        /// The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a
        /// subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
        /// </summary>
        string PolicyLocationPlacementId { get; set; }
        /// <summary>The subscription quota ID.</summary>
        string PolicyQuotaId { get; set; }
        /// <summary>The subscription spending limit.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SpendingLimit? PolicySpendingLimit { get; set; }
        /// <summary>
        /// The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Support.SubscriptionState? State { get; set; }
        /// <summary>The subscription ID.</summary>
        string SubscriptionId { get; set; }

    }
}