[
    {
        "name": "generate-autorest",
        "type": "tool",
        "text": "Generate and build successfully completed under {0}. Learn the generated folder structure. './custom': customized code and model cmdlets are under this directory. './docs': markdown helps for each cmdlet are under this directory. './examples': examples for each cmdlet are under this directory. './generated': generated csharp code are under this directory. './test': test stubs are under this directory. '../': module root and parent module."
    },
    {
        "name": "no-inline",
        "type": "tool",
        "text": "Add no-inline directives for models: {0}. Please update README.md with the no-inline directive for each model. Use this description as value of this parameter."
    },
    {
        "name": "model-cmdlet",
        "type": "tool",
        "text": "Add model-cmdlet directives for models: {0}. Please update README.md with the model-cmdlet directive for each model. Use this description as value of this parameter."
    },
    {
        "name": "polymorphism",
        "type": "tool",
        "text": "1. Call MCP tool 'no-inline' for each parent: {0}. 2. Call MCP tool 'model-cmdlet' for each child: {1}, create cmdlet to create each child. 3. Call tool 'insert_edit_into_file' to add these directives to README.md under {2}, make sure directives are inside the yaml block. 4. regenerate code using autorest."
    },
    {
        "name": "create-example",
        "type": "tool",
        "text": "Read examples from specs under {0}. Fulfill examples under {1}. Also leverage high-quality reference examples located in directories: {2} (semicolon-separated). When generating, mirror parameter naming, structure, and advanced option usage patterns seen in those reference examples when applicable. Produce minimal yet complete runnable examples; omit unknown or deprecated params. Leave example empty only if no relevant mapping exists."
    },
    {
        "name": "create-test",
        "type": "tool",
        "text": "Read examples from specs under {0}. Implement test stubs under {1}. Reference high-quality existing tests from directories: {2} (semicolon-separated) to replicate assertion style, variable patterns, and setup/teardown conventions. Test stubs are named '.Test.ps1'. Populate 'setupEnv' in 'utils.ps1' with variables derived from {0} examples; reuse them across tests. For each CRUD operation: (1) Create/Update then Get and assert key properties, (2) List and validate presence, (3) Clean up if destructive. Add one negative test if feasible (invalid parameter) asserting specific error type/message. Leave a stub empty only if absolutely no relevant example data exists."
    },
    {
        "name": "setup-module-structure",
        "type": "tool",
        "text": "Created the module structure under the folder: {0}."
    },
    {
        "name": "create-greeting",
        "type": "prompt",
        "text": "Please generate a greeting in {1} style to {0}."
    },
    {
        "name": "partner-module-workflow",
        "type": "prompt",
        "text": "@file:prompts/partner-module-workflow.md"
    },
    {
        "name": "autorest-readme-template",
        "type": "resource",
        "text": "@file:autorest-readme-template.md"
    }
]