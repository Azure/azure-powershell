[
    {
        "name": "generate-autorest",
        "type": "tool",
        "text": "Generate and build successfully completed under {0}. Learn the generated folder structure. './custom': customized code and model cmdlets are under this directory. './docs': markdown helps for each cmdlet are under this directory. './examples': examples for each cmdlet are under this directory. './generated': generated csharp code are under this directory. './test': test stubs are under this directory. '../': module root and parent module."
    },
    {
        "name": "no-inline",
        "type": "tool",
        "text": "Add no-inline directives for models: {0}. Please update README.md with the no-inline directive for each model. Use this description as value of this parameter."
    },
    {
        "name": "model-cmdlet",
        "type": "tool",
        "text": "Add model-cmdlet directives for models: {0}. Please update README.md with the model-cmdlet directive for each model. Use this description as value of this parameter."
    },
    {
        "name": "polymorphism",
        "type": "tool",
        "text": "1. Call MCP tool 'no-inline' for each parent: {0}. 2. Call MCP tool 'model-cmdlet' for each child: {1}, create cmdlet to create each child. 3. Call tool 'insert_edit_into_file' to add these directives to README.md under {2}, make sure directives are inside the yaml block. 4. regenerate code using autorest."
    },
    {
        "name": "create-example",
        "type": "tool",
        "text": "Read examples from specs under {0}. Fulfill examples under {1}. You are expert in Azure-PowerShell and Autorest.PowerShell. Leave example as empty if you don't find any matches. You know how to map data from {0} to {1}"
    },
    {
        "name": "create-test",
        "type": "tool",
        "text": "Read examples from specs are under {0}. Implement empty test stubs under {1}. Test stubs are named as '.Test.ps1'. Define variables in function 'setupEnv' in 'utils.ps1' under {1}, and use these variables for test cases. Value of these variables are from {0}. Leave test cases as empty if you don't find any matches. You are expert in Azure-PowerShell and Autorest.PowerShell, You know how to map data from {0} to {1}. "
    },
    {
        "name": "create-greeting",
        "type": "prompt",
        "text": "Please generate a greeting in {1} style to {0}."
    },
    {
        "name": "partner-module-workflow",
        "type": "prompt",
        "text": "@file:prompts/partner-module-workflow.md"
    },
    {
        "name": "autorest-readme-template",
        "type": "resource",
        "text": "@file:autorest-readme-template.md"
    }
]