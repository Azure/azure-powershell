{
    "tools": [
        {
            "name": "generate-autorest",
            "description": "Generate code using autorest",
            "parameters": [
                {
                    "name": "workingDirectory",
                    "description": "absolute path of the README.md where the code will be generated",
                    "type": "string"
                }
            ],
            "callbackName": "generateByAutorest"
        },
        {
            "name": "no-inline",
            "description": "Response of this tool instruct LLM to convert flattened models to no-inline models in parameter. Autorest flatten nested models by default as parameters, no-inline indicates that the model should not be flattened and should be used as a parameter. Group new no-inline directives under existing no-inline directives if they exist, otherwise create a new no-inline directive group. Example directive: '  - no-inline:\n      - Account'",
            "parameters": [
                {
                    "name": "modelNames",
                    "description": "model names need to be no-inline",
                    "type": "array"
                },
                {
                    "name": "response",
                    "description": "Add no-inline directives for models: ${0}. Please update README.md with the no-inline directive for each model.",
                    "type": "string"
                }
            ],
            "callbackName": "handleNoInline"
        },
        {
            "name": "model-cmdlet",
            "description": "Create a 'New-' cmdlet to create given models by adding model-cmdlet directives, use 'New-Az(subject-prefix)(ModelName)Object as cmdlet-name'. Group new model-cmdlet directives under existing model-cmdlet directives if they exist, otherwise create a new model-cmdlet directive group. Example directive: '  - model-cmdlet:\n      - model-name: Account\n        cmdlet-name: New-AzStorageAccount'",
            "parameters": [
                {
                    "name": "modelNames",
                    "description": "model names need to be created cmdlet",
                    "type": "array"
                }
            ],
            "callbackName": "handleModelCmdlet"
        },
        {
            "name": "polymophism",
            "description": "this tool can handle polymorphism: when a parent type has multiple children types, and the children types can be inferred by an enum value discriminator, this tool can make parameter of parent type polymorphic which take one of the children types",
            "parameters": [
                {
                    "name": "workingDirectory",
                    "description": "absolute path of the README.md where the code will be generated",
                    "type": "string"
                }
            ],
            "callbackName": "handlePolymorphism"
        }
    ]
}