# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost If the code
# is regenerated.
# ----------------------------------------------------------------------------------

# Usage: 1. This script can be called by build.proj used in CI pipeline
#        2. Can be used to do static analysis in local env. Such as: .\tools\ExecuteCIStep.ps1 -StaticAnalysisSignature -ModuleList "Accounts;Compute"
Param(
    [Switch]
    $Build,

    [String]
    $BuildAction='build',

    [Switch]
    $GenerateDocumentationFile,

    [Switch]
    $Test,

    [Switch]
    $StaticAnalysisBreakingChange,

    [Switch]
    $StaticAnalysisDependency,
    
    [Switch]
    $StaticAnalysisSignature,
    
    [Switch]
    $StaticAnalysisHelp,

    [String]
    $RepoArtifacts='artifacts',

    [String]
    $Configuration='Debug',

    [String]
    $TestFramework='netcoreapp2.2',

    [String]
    $TestOutputDirectory='artifacts/TestResults',

    [String]
    $StaticAnalysisOutputDirectory='artifacts/StaticAnalysisResults',

    [String]
    $ModuleList
)
$ErrorActionPreference = 'Stop'

If ($Build)
{
    $LogFile = "$RepoArtifacts/Build.Log"
    If ($GenerateDocumentationFile)
    {
        dotnet $BuildAction $RepoArtifacts/Azure.PowerShell.sln -c $Configuration -fl "/flp1:logFile=$LogFile;verbosity=quiet"
    }
    Else
    {
        dotnet $BuildAction $RepoArtifacts/Azure.PowerShell.sln -c $Configuration -p:GenerateDocumentationFile=false -fl "/flp1:logFile=$LogFile;verbosity=quiet"
    }
    $LogContent = Get-Content $LogFile
    $BuildResultArray = @()
    ForEach ($Line In $LogContent)
    {
        $Position, $ErrorOrWarningType, $Detail = $Line.Split(": ")
        $Detail = Join-String -Separator ": " -InputObject $Detail
        If ($Position.Contains("src"))
        {
            $ModuleName = $Position.Replace("\", "/").Split("src/")[1].Split('/')[0]
        }
        Else
        {
            $ModuleName = "dotnet"
        }
        $Type, $Code = $ErrorOrWarningType.Split(" ")
        $BuildResultArray += @{
            "Position" = $Position;
            "Module" = $ModuleName;
            "Type" = $Type;
            "Code" = $Code;
            "Detail" = $Detail
        }
    }
    ConvertTo-Json -Depth 10 -InputObject $BuildResultArray | Out-File -FilePath "$RepoArtifacts/PipelineResult/Build.json"
}

If (-Not $PSBoundParameters.ContainsKey("ModuleList"))
{
    $CIPlan = Get-Content $RepoArtifacts/PipelineResult/CIPlan.json | ConvertFrom-Json
}

If ($Test -And $CIPlan.test.Length -Ne 0)
{
    dotnet test $RepoArtifacts/Azure.PowerShell.sln --filter "AcceptanceType=CheckIn&RunType!=DesktopOnly" --configuration $Configuration --framework $TestFramework --logger trx --results-directory $TestOutputDirectory
}

If ($StaticAnalysisBreakingChange)
{
    If ($PSBoundParameters.ContainsKey("ModuleList"))
    {
        $BreakingChangeCheckModuleList = $ModuleList
    }
    Else
    {
        $BreakingChangeCheckModuleList = Join-String -Separator ';' -InputObject $CIPlan.'breaking-change'
    }
    dotnet $RepoArtifacts/StaticAnalysis/StaticAnalysis.Netcore.dll -p $RepoArtifacts/$Configuration -r $StaticAnalysisOutputDirectory --analyzers breaking-change -u -m $BreakingChangeCheckModuleList
}

If ($StaticAnalysisDependency)
{
    If ($PSBoundParameters.ContainsKey("ModuleList"))
    {
        $DependencyCheckModuleList = $ModuleList
    }
    Else
    {
        $DependencyCheckModuleList = Join-String -Separator ';' -InputObject $CIPlan.dependency
    }
    dotnet $RepoArtifacts/StaticAnalysis/StaticAnalysis.Netcore.dll -p $RepoArtifacts/$Configuration -r $StaticAnalysisOutputDirectory --analyzers dependency -u -m $DependencyCheckModuleList
}

If ($StaticAnalysisSignature)
{
    If ($PSBoundParameters.ContainsKey("ModuleList"))
    {
        $SignatureCheckModuleList = $ModuleList
    }
    Else
    {
        $SignatureCheckModuleList = Join-String -Separator ';' -InputObject $CIPlan.signature
    }
    dotnet $RepoArtifacts/StaticAnalysis/StaticAnalysis.Netcore.dll -p $RepoArtifacts/$Configuration -r $StaticAnalysisOutputDirectory --analyzers signature -u -m $SignatureCheckModuleList
}

If ($StaticAnalysisHelp)
{
    If ($PSBoundParameters.ContainsKey("ModuleList"))
    {
        $HelpCheckModuleList = $ModuleList
    }
    Else
    {
        $HelpCheckModuleList = Join-String -Separator ';' -InputObject $CIPlan.help
    }
    dotnet $RepoArtifacts/StaticAnalysis/StaticAnalysis.Netcore.dll -p $RepoArtifacts/$Configuration -r $StaticAnalysisOutputDirectory --analyzers help -u -m $HelpCheckModuleList
}