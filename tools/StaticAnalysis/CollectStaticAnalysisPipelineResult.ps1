# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost If the code
# is regenerated.
# ----------------------------------------------------------------------------------

Param(
    [String]
    $StaticAnalysisOutputDirectory = 'artifacts/StaticAnalysisResults'
)

$ArtifactPipelineInfoFolder = (Get-Content "$PSScriptRoot/../../.ci-config.json" | ConvertFrom-Json).artifactPipelineInfoFolder
$ArtifactPipelineInfoFolder = "$PSScriptRoot/../../$ArtifactPipelineInfoFolder"

If ($IsWindows) {
    $OS = "Windows"
}
ElseIf ($IsLinux) {
    $OS = "Linux"
}
ElseIf ($IsMacOS) {
    $OS = "MacOS"
}
Else {
    $OS = "Others"
}
$Platform = "$($Env:PowerShellPlatform) - $OS"
$Template = Get-Content "$ArtifactPipelineInfoFolder/PipelineResult.json" | ConvertFrom-Json

$DependencyStepList = $Template | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name | Where-Object { $_ -Ne "build" -And $_ -Ne "test" }
ForEach ($Step In $DependencyStepList) {
    If ($Template.$Step.Details.Length -Ne 0) {
        $Template.$Step.Details[0] | Add-Member -NotePropertyName Platform -NotePropertyValue $Platform -Force
    }
}

$Steps = @(
    @{
        PhaseName = "breaking-change"
        IssuePath = "$StaticAnalysisOutputDirectory/BreakingChangeIssues.csv"
    },
    @{
        PhaseName = "help"
        IssuePath = "$StaticAnalysisOutputDirectory/HelpIssues.csv"
    },
    @{
        PhaseName = "help-example"
        IssuePath = "$StaticAnalysisOutputDirectory/ExampleIssues.csv"
    },
    @{
        PhaseName = "signature"
        IssuePath = "$StaticAnalysisOutputDirectory/SignatureIssues.csv"
    },
    @{
        PhaseName = "file-change"
        IssuePath = "$StaticAnalysisOutputDirectory/FileChangeIssue.csv"
    }
    @{
        PhaseName = "cmdlet-diff"
        IssuePath = "$StaticAnalysisOutputDirectory/CmdletChangeResult.md"
    }
)

ForEach ($Step In $Steps) {
    $PhaseName = $Step.PhaseName
    $IssuePath = $Step.IssuePath
    $Details = $Template.$PhaseName.Details
    If ($Details.Length -Ne 0) {
        $Details = $Details[0]
        If ($PhaseName -eq "cmdlet-diff") {
            $content = Get-Content -Path $IssuePath
            $markdownContent = @{}
            foreach ($line in $content) {
                # Check if the line starts with an asterisk followed by a space
                if ($line -match '^\*\s') {
                    $title = $line -replace '^\*\s'
                    $contentArray = @()
                    for ($i = $content.IndexOf($line) + 1; $i -lt $content.Count; $i++) {
                        if ($content[$i] -match '^\*\s') {
                            break
                        }
                        else {
                            $contentArray += $content[$i]
                        }
                    }
                    $markdownContent.Add($title, $contentArray)
                }
            }
            foreach ($moduleInfo in $Details.Modules) {
                $moduleInfo.Status = "Succeeded"
                if ($markdownContent.ContainsKey($moduleInfo.Module)) {
                    $moduleInfo.Content = $markdownContent[$moduleInfo.Module] -join "<br>"
                }
            }
            continue;
        }
        If (Test-Path -Path $IssuePath) {
            $Issues = Get-Content -Path $IssuePath | ConvertFrom-Csv
        }
        Else {
            $Issues = @()
        }
        ForEach ($ModuleInfo In $Details.Modules) {
            $ModuleName = $ModuleInfo.Module

            $ErrorIssues = $Issues | Where-Object { $_.Module -Eq $ModuleName -And $_.Severity -Lt 2 }
            $WaringIssues = $Issues | Where-Object { $_.Module -Eq $ModuleName -And $_.Severity -Ge 2 }
            If ($ErrorIssues.Length -Eq 0) {
                If ($WaringIssues.Length -Eq 0) {
                    $ModuleInfo.Status = "Succeeded"
                }
                Else {
                    $ModuleInfo.Status = "Warning"
                }
            }
            Else {
                $ModuleInfo.Status = "Failed"
            }

            $MatchedIssues = $Issues | Where-Object { $_.Module -Eq $ModuleName }
            If ($MatchedIssues.Length -Ne 0) {
                #Region generate table head of each step
                $NormalSteps = [System.Collections.Generic.HashSet[String]]@("breaking-change", "help", "signature", "file-change")
                If ($NormalSteps.Contains($PhaseName)) {
                    $Content = "|Type|Cmdlet|Description|Remediation|`n|---|---|---|---|`n"
                }
                ElseIf ($PhaseName -Eq "help-example") {
                    $Content = "|Type|Cmdlet|Example|Line|RuleName|Description|Extent|Remediation|`n|---|---|---|---|---|---|---|---|`n"
                }
                #EndRegion

                ForEach ($Issue In $MatchedIssues) {
                    If ($Issue.Severity -Lt 2) {
                        $ErrorTypeEmoji = "❌"
                    }
                    Else {
                        $ErrorTypeEmoji = "⚠️"
                    }
                    #Region generate table content of each step
                    If ($NormalSteps.Contains($PhaseName)) {
                        $Content += "|$ErrorTypeEmoji|$($Issue.Target)|$($Issue.Description)|$($Issue.Remediation)|`n"
                    }
                    ElseIf ($PhaseName -Eq "help-example") {
                        $Content += "|$ErrorTypeEmoji|$($Issue.Target)|$($Issue.Example)|$($Issue.Line)|$($Issue.RuleName)|$($Issue.Description)|$($Issue.Extent)|$($Issue.Remediation)|`n"
                    }
                    #EndRegion
                }
                $ModuleInfo.Content = $Content
            }
        }
    }
}

ConvertTo-Json -Depth 10 -InputObject $Template | Out-File -FilePath "$ArtifactPipelineInfoFolder/PipelineResult.json"