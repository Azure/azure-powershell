# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost If the code
# is regenerated.
# ----------------------------------------------------------------------------------

$ArtifactsFolder = "$PSScriptRoot/../../../artifacts"
$FilesChangedPaths = "$ArtifactsFolder/FilesChanged.txt"
$ExceptionFilePath = "$ArtifactsFolder/StaticAnalysisResults/GeneratedSdkIssues.csv"

Class GeneratedSdkIssue {
    [String]$Module
    [String]$Sdk
    [Int]$Severity
    [Int]$ProblemId
    [String]$Description
    [String]$Remediation
}

$ExceptionList = @()
$SavePath = $PWD

$MissReadMe = 9000
$AutorestCSharpDetected = 9080
$GenSdkChanged = 9090

function EnsureModuleName {
    param([string]$moduleName)
    if (-not [System.String]::IsNullOrEmpty($moduleName) -and -not $moduleName.StartsWith("Az."))
    {
        return "Az.$moduleName"
    }
    return $moduleName
}

function Get-NonExceptionSdkRecord{
    param(
        [GeneratedSdkIssue[]]$records
    )
    $exceptionPaths = "$PSScriptRoot\..\..\..\tools\StaticAnalysis\Exceptions"
    $errors = @()
    foreach($record in $records){    
        $needAdd = $true    
        $exceptionPath = Join-Path -Path $exceptionPaths -ChildPath (EnsureModuleName($record.Module)) -AdditionalChildPath "GeneratedSdkIssues.csv"
        if(Test-Path -Path $exceptionPath){
            $exceptionContents = Import-Csv -Path $exceptionPath
            foreach($exceptionContent in $exceptionContents) {
                if($exceptionContent.Module -eq $record.Module -and $exceptionContent.Sdk -eq $record.Sdk -and $exceptionContent.Severity -eq $record.Severity -and $exceptionContent.ProblemId -eq $record.ProblemId -and $exceptionContent.Description -eq $record.Description){
                    $needAdd = $false
                    break
                }
            }
        }
        if($needAdd){
            $errors += $record
        }
    }
    return $errors
}

try {
    if ((Test-Path $FilesChangedPaths -PathType Leaf) -and $FilesChangedPaths.EndsWith(".txt")) {
        # Read Changedfiles and check if generted sdk code is updated.
        $FilesChanged = Get-Content $FilesChangedPaths | Where-Object { ($_ -match "^src\/.*\.Sdk\/.*Generated.*")}
        # Collect Sdk paths whose files under Generated folder change.
        $ChangedSdks = New-Object System.Collections.Generic.List[System.Object]
        foreach ($_ in $FilesChanged) {
            $ChangedSdks.Add($_.Substring(0,$_.IndexOf('.Sdk', [System.StringComparison]::OrdinalIgnoreCase))+'.Sdk')
        }
        # Remove duplicated Sdks.
        $ChangedSdks = $ChangedSdks | select -unique
    }
    else {
        Write-Warning "Only accept .txt files as input."
        return
    }
    Write-Host "Preparing Autorest..."
    npx autorest --reset
    foreach ($_ in $ChangedSdks) {
        # If it is Resources.Management.Sdk, flag and will use tag for sdk generation
        $IsResources = $false;
        if ($_ -match "Resources.Management.Sdk")
        {
            $IsResources = $true;
        }

        # Extract Module Name
        $ModuleName = "Az." + ($_ -split "\/|\\")[1]

        # Skip check for modules without README.md and .Sdk folder.
        if (-not(Test-Path -Path "$PSScriptRoot/../../../$_/README.md" -PathType Leaf) -and -not(Test-Path -Path $PSScriptRoot/../../../$_))
        {
            Write-Host "$PSScriptRoot/../../../$_" "Does not exist, and no README file detected. The module is no longer SDK based. Skip it."
            continue
        }

        # Direct to the Sdk directory
        Write-Host "Directing to " "$PSScriptRoot/../../../$_"
        cd "$PSScriptRoot/../../../$_"

        # Regenerate the Sdk under Generated folder
        if( Test-Path -Path "README.md" -PathType Leaf){
            # Decide to use autorest powershell v4/ autorest csharp v3.
            $readMeContent = Get-Content README.md
            if ([regex]::Matches($readMeContent, '\s*powershell\s*:\s*true\s*') -and [regex]::Matches($readMeContent, '\s*isSdkGenerator\s*:\s*true\s*'))
            {
                Write-Host "Using autorest powershell v4:`nRe-generating SDK under Generated folder for $ModuleName..."
                if ($IsResources)
                {
                    Write-Host "Specific generation for Resources.Management.Sdk"
                    rm -r Generated/*
                    npx autorest --use:@autorest/powershell@4.x --tag=package-privatelinks-2020-05
                    npx autorest --use:@autorest/powershell@4.x --tag=package-subscriptions-2021-01
                    npx autorest --use:@autorest/powershell@4.x --tag=package-features-2021-07
                    npx autorest --use:@autorest/powershell@4.x --tag=package-deploymentscripts-2020-10
                    npx autorest --use:@autorest/powershell@4.x --tag=package-resources-2021-04
                    npx autorest --use:@autorest/powershell@4.x --tag=package-deploymentstacks-2022-08-preview
                    npx autorest --use:@autorest/powershell@4.x --tag=package-templatespecs-2021-05
                }
                else
                {
                    npx autorest
                }
            }
            elseif ([regex]::Matches($readMeContent, '\s*csharp\s*:\s*true\s*'))
            {
                $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Sdk = $_;
                    Severity = 1;
                    ProblemId = $AutorestCSharpDetected
                    Description = "Do not support updating SDK using autorest csharp v3."
                    Remediation = "Please update the Readme.md to generate code by autorest powershell v4."
                }
            }
            else
            {
                $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Sdk = $_;
                    Severity = 1;
                    ProblemId = $GenSdkChanged
                    Description = "Do not find correct autorest version, please check Readme.md"
                    Remediation = "Please determine autorest v4 in Readme file."
                }
            }
            
            If (($LASTEXITCODE -ne 0) -and ($LASTEXITCODE -ne $null))
            {
                $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Sdk = $_;
                    Severity = 1;
                    ProblemId = $GenSdkChanged
                    Description = "Failed to set autorest.csharp@2.3.90 for $ModuleName."
                    Remediation = ""
                }
            }

            If (($LASTEXITCODE -ne 0) -and ($LASTEXITCODE -ne $null))
            {
                $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Sdk = $_;
                    Severity = 1;
                    ProblemId = $GenSdkChanged
                    Description = "Failed to generate Sdk for $ModuleName."
                    Remediation = ""
                }
            }
        }
        else {
            $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Sdk = $_;
                    Severity = 1;
                    ProblemId = $MissReadMe;
                    Description = "No README file detected under $_."
                    Remediation = "Make sure that the ReadMe file of Sdk is loaded."
            }
        }


        # See if the code is completely the same as we generated
        $changes = git status ".\Generated" --porcelain
        if ($changes -ne $null){
            # Prevent EOL changes detected
            git config --global core.safecrlf false
            git config --global core.autocrlf true
            $diff = git diff ".\Generated"
            if($diff -ne $null){
                $changes = $changes.replace("  ", "`n")
                $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Sdk = $_;
                    Severity = 1;
                    ProblemId = $GenSdkChanged
                    Description = "Generated code for $ModuleName is not up to date or you have updated generated Sdk."
                    Remediation = "You may need to rebase on the latest main, regenerate code accroding to README.md file under $_, and make sure no more updates based on generated files."
                }
            }

        }
        Set-Location $SavePath
    }
    $ExceptionList = Get-NonExceptionSdkRecord $ExceptionList
}
catch {
    Write-Host "An error occurred: $_"
}
finally {
    Write-Host ""
    Write-Host "Summary:"
    Write-Host ""
    Write-Host "  $($ExceptionList.Length) error(s) detected while verifying generated sdk:"
    Write-Host ""

    # foreach ($err in $ExceptionList) {
    #     Write-Host "error : " $err.Description "`n " $err.Remediation
    # }

    if ($ExceptionList.Length -ne 0) {
        $ExceptionList | Sort-Object -Unique -Property Module,Sdk,Description | Export-Csv $ExceptionFilePath -NoTypeInformation
    }
}
