# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost If the code
# is regenerated.
# ----------------------------------------------------------------------------------

$ArtifactsFolder = "$PSScriptRoot/../../../artifacts"
$FilesChangedPaths = "$ArtifactsFolder/FilesChanged.txt"
$ExceptionFilePath = "$ArtifactsFolder/StaticAnalysisResults/FileChangeIssue.csv"

Class GeneratedSdkIssue {
    [String]$Module
    [Int]$Severity
    [String]$Description
    [String]$Remediation
}

$ExceptionList = @()
# $errors = New-Object System.Collections.Generic.List[System.Object]
# # All errors should be logged using this function, as it tracks the errors in
# # the $errors array, which is used in the finally block of the script to determine
# # the return code.
# function LogError([string]$message) {
#     Write-Host -f Red "error: $message"
#     $errors.Add($message)
# }

try{
    if ((Test-Path $FilesChangedPaths -PathType Leaf) -and $FilesChangedPaths.EndsWith(".txt")) {
        Write-Host (Get-Content $FilesChangedPaths)
        # Read Changedfiles and check if generted sdk code is updated.
        $FilesChanged = Get-Content $FilesChangedPaths | Where-Object { ($_ -match "^src\/.*\.Sdk\/.*Generated.*")}
        # Collect Sdk paths whose files under Generated folder change.
        $ChangedSdks = New-Object System.Collections.Generic.List[System.Object]
        foreach ($_ in $FilesChanged) {
            $ChangedSdks.Add($_.Substring(0,$_.IndexOf('.Sdk'))+'.Sdk')
        }
        # Remove duplicated Sdks.
        $ChangedSdks = $ChangedSdks | select -unique
    }
    else {
        Write-Error "Only accept .txt files as input."
    }
    Write-Host "Preparing Autorest..."
    npm install -g autorest@latest
    autorest --reset
    autorest --use:@microsoft.azure/autorest.csharp@2.3.90
    foreach ($_ in $ChangedSdks) {
        # Direct to the Sdk directory
        $ModuleName = ($_ -split "\/|\\")[1]
        Write-Host "Directing to " "$PSScriptRoot/../../../$_"
        cd "$PSScriptRoot/../../../$_"

        # Regenerate the Sdk under Generated folder
        Write-Host (Test-Path -Path "README.md" -PathType Leaf)
        if( Test-Path -Path "README.md" -PathType Leaf){
            Write-Host "Re-generating SDK under Generated folder for $ModuleName..."
            autorest.cmd README.md --version=v2
        }
        else {
            # LogError "No README file detected under $_."
            $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Severity = 2;
                    Description = "No README file detected under $_."
                    Remediation = "Make sure that the ReadMe file of Sdk is loaded."
            }
        }
        # See if the code is completely the same as we generated
        $changes = git status ".\Generated" --porcelain
        if ($changes -ne $null){
            $changes = $changes.replace("  ", "`n")
            # LogError "Generated code for $ModuleName is not up to date.`n       You may need to rebase on the latest main, regenerate code accroding to README.md file under $_`n"
            $ExceptionList += [GeneratedSdkIssue]@{
                    Module = $ModuleName;
                    Severity = 1;
                    Description = "Generated code for $ModuleName is not up to date or you have updated generated Sdk."
                    Remediation = "You may need to rebase on the latest main, regenerate code accroding to README.md file under $_, and make sure no more updates based on generated files."
            }
        }
    }
}
finally {
    Write-Host ""
    Write-Host "Summary:" 
    Write-Host ""
    Write-Host "  $($ExceptionList.Length) error(s):"
    Write-Host ""

    foreach ($err in $ExceptionList) {
        Write-Host -f Red "error : " $err.Description " " $err.Remediation
    }

    if ($ExceptionList.Length -ne 0) {
        $ExceptionList | Sort-Object -Unique -Property Module,Description | Export-Csv $ExceptionFilePath -NoTypeInformation
    }
}
