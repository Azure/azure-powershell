// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SynchronizationSettingsOperations
    /// </summary>
    public static partial class SynchronizationSettingsOperationsExtensions
    {
        /// <summary>
        /// Get a synchronizationSetting in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting.
        /// </param>
        public static SynchronizationSetting Get(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName)
        {
                return ((ISynchronizationSettingsOperations)operations).GetAsync(resourceGroupName, accountName, shareName, synchronizationSettingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a synchronizationSetting in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SynchronizationSetting> GetAsync(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, shareName, synchronizationSettingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a synchronizationSetting
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share to add the synchronization setting to.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting.
        /// </param>
        public static SynchronizationSetting Create(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, SynchronizationSetting synchronizationSetting)
        {
                return ((ISynchronizationSettingsOperations)operations).CreateAsync(resourceGroupName, accountName, shareName, synchronizationSettingName, synchronizationSetting).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a synchronizationSetting
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share to add the synchronization setting to.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SynchronizationSetting> CreateAsync(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, SynchronizationSetting synchronizationSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, shareName, synchronizationSettingName, synchronizationSetting, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a synchronizationSetting in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting .
        /// </param>
        public static OperationResponse Delete(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName)
        {
                return ((ISynchronizationSettingsOperations)operations).DeleteAsync(resourceGroupName, accountName, shareName, synchronizationSettingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a synchronizationSetting in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting .
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<OperationResponse> DeleteAsync(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, synchronizationSettingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List synchronizationSettings in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// continuation token
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SynchronizationSetting> ListByShare(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string))
        {
                return ((ISynchronizationSettingsOperations)operations).ListByShareAsync(resourceGroupName, accountName, shareName, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List synchronizationSettings in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// continuation token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SynchronizationSetting>> ListByShareAsync(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a synchronizationSetting in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting .
        /// </param>
        public static OperationResponse BeginDelete(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName)
        {
                return ((ISynchronizationSettingsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, shareName, synchronizationSettingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a synchronizationSetting in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='synchronizationSettingName'>
        /// The name of the synchronizationSetting .
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<OperationResponse> BeginDeleteAsync(this ISynchronizationSettingsOperations operations, string resourceGroupName, string accountName, string shareName, string synchronizationSettingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, synchronizationSettingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List synchronizationSettings in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SynchronizationSetting> ListByShareNext(this ISynchronizationSettingsOperations operations, string nextPageLink)
        {
                return ((ISynchronizationSettingsOperations)operations).ListByShareNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List synchronizationSettings in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SynchronizationSetting>> ListByShareNextAsync(this ISynchronizationSettingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
