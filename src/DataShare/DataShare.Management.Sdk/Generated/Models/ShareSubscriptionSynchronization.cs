// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataShare.Models
{
    using System.Linq;

    /// <summary>
    /// A ShareSubscriptionSynchronization data transfer object.
    /// </summary>
    public partial class ShareSubscriptionSynchronization
    {
        /// <summary>
        /// Initializes a new instance of the ShareSubscriptionSynchronization class.
        /// </summary>
        public ShareSubscriptionSynchronization()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShareSubscriptionSynchronization class.
        /// </summary>

        /// <param name="durationMS">Synchronization duration
        /// </param>

        /// <param name="endTime">End time of synchronization
        /// </param>

        /// <param name="message">message of Synchronization
        /// </param>

        /// <param name="startTime">start time of synchronization
        /// </param>

        /// <param name="status">Raw Status
        /// </param>

        /// <param name="synchronizationId">Synchronization id
        /// </param>

        /// <param name="synchronizationMode">Synchronization Mode
        /// Possible values include: &#39;Incremental&#39;, &#39;FullSync&#39;</param>
        public ShareSubscriptionSynchronization(string synchronizationId, int? durationMS = default(int?), System.DateTime? endTime = default(System.DateTime?), string message = default(string), System.DateTime? startTime = default(System.DateTime?), string status = default(string), string synchronizationMode = default(string))

        {
            this.DurationMS = durationMS;
            this.EndTime = endTime;
            this.Message = message;
            this.StartTime = startTime;
            this.Status = status;
            this.SynchronizationId = synchronizationId;
            this.SynchronizationMode = synchronizationMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets synchronization duration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "durationMs")]
        public int? DurationMS {get; private set; }

        /// <summary>
        /// Gets end time of synchronization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; private set; }

        /// <summary>
        /// Gets message of Synchronization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message {get; private set; }

        /// <summary>
        /// Gets start time of synchronization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets raw Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets or sets synchronization id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "synchronizationId")]
        public string SynchronizationId {get; set; }

        /// <summary>
        /// Gets synchronization Mode Possible values include: &#39;Incremental&#39;, &#39;FullSync&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "synchronizationMode")]
        public string SynchronizationMode {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SynchronizationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SynchronizationId");
            }




        }
    }
}