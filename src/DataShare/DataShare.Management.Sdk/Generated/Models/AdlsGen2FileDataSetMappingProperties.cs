// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataShare.Models
{
    using System.Linq;

    /// <summary>
    /// ADLS Gen 2 file data set mapping property bag.
    /// </summary>
    public partial class AdlsGen2FileDataSetMappingProperties
    {
        /// <summary>
        /// Initializes a new instance of the AdlsGen2FileDataSetMappingProperties class.
        /// </summary>
        public AdlsGen2FileDataSetMappingProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdlsGen2FileDataSetMappingProperties class.
        /// </summary>

        /// <param name="dataSetId">The id of the source data set.
        /// </param>

        /// <param name="dataSetMappingStatus">Gets the status of the data set mapping.
        /// Possible values include: &#39;Ok&#39;, &#39;Broken&#39;</param>

        /// <param name="filePath">File path within the file system.
        /// </param>

        /// <param name="fileSystem">File system to which the file belongs.
        /// </param>

        /// <param name="outputType">Type of output file
        /// Possible values include: &#39;Csv&#39;, &#39;Parquet&#39;</param>

        /// <param name="provisioningState">Provisioning state of the data set mapping.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;,
        /// &#39;Failed&#39;</param>

        /// <param name="resourceGroup">Resource group of storage account.
        /// </param>

        /// <param name="storageAccountName">Storage account name of the source data set.
        /// </param>

        /// <param name="subscriptionId">Subscription id of storage account.
        /// </param>
        public AdlsGen2FileDataSetMappingProperties(string dataSetId, string filePath, string fileSystem, string resourceGroup, string storageAccountName, string subscriptionId, string dataSetMappingStatus = default(string), string outputType = default(string), string provisioningState = default(string))

        {
            this.DataSetId = dataSetId;
            this.DataSetMappingStatus = dataSetMappingStatus;
            this.FilePath = filePath;
            this.FileSystem = fileSystem;
            this.OutputType = outputType;
            this.ProvisioningState = provisioningState;
            this.ResourceGroup = resourceGroup;
            this.StorageAccountName = storageAccountName;
            this.SubscriptionId = subscriptionId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the id of the source data set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataSetId")]
        public string DataSetId {get; set; }

        /// <summary>
        /// Gets gets the status of the data set mapping. Possible values include: &#39;Ok&#39;, &#39;Broken&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataSetMappingStatus")]
        public string DataSetMappingStatus {get; private set; }

        /// <summary>
        /// Gets or sets file path within the file system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filePath")]
        public string FilePath {get; set; }

        /// <summary>
        /// Gets or sets file system to which the file belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileSystem")]
        public string FileSystem {get; set; }

        /// <summary>
        /// Gets or sets type of output file Possible values include: &#39;Csv&#39;, &#39;Parquet&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputType")]
        public string OutputType {get; set; }

        /// <summary>
        /// Gets provisioning state of the data set mapping. Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets resource group of storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup {get; set; }

        /// <summary>
        /// Gets or sets storage account name of the source data set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountName")]
        public string StorageAccountName {get; set; }

        /// <summary>
        /// Gets or sets subscription id of storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DataSetId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataSetId");
            }
            if (this.FilePath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FilePath");
            }
            if (this.FileSystem == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FileSystem");
            }
            if (this.ResourceGroup == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ResourceGroup");
            }
            if (this.StorageAccountName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageAccountName");
            }
            if (this.SubscriptionId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SubscriptionId");
            }









        }
    }
}