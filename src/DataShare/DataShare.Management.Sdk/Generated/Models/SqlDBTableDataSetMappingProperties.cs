// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataShare.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the SQL DB table data set mapping.
    /// </summary>
    public partial class SqlDBTableDataSetMappingProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlDBTableDataSetMappingProperties class.
        /// </summary>
        public SqlDBTableDataSetMappingProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlDBTableDataSetMappingProperties class.
        /// </summary>

        /// <param name="databaseName">DatabaseName name of the sink data set
        /// </param>

        /// <param name="dataSetId">The id of the source data set.
        /// </param>

        /// <param name="dataSetMappingStatus">Gets the status of the data set mapping.
        /// Possible values include: &#39;Ok&#39;, &#39;Broken&#39;</param>

        /// <param name="provisioningState">Provisioning state of the data set mapping.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;,
        /// &#39;Failed&#39;</param>

        /// <param name="schemaName">Schema of the table. Default value is dbo.
        /// </param>

        /// <param name="sqlServerResourceId">Resource id of SQL server
        /// </param>

        /// <param name="tableName">SQL DB table name.
        /// </param>
        public SqlDBTableDataSetMappingProperties(string databaseName, string dataSetId, string schemaName, string sqlServerResourceId, string tableName, string dataSetMappingStatus = default(string), string provisioningState = default(string))

        {
            this.DatabaseName = databaseName;
            this.DataSetId = dataSetId;
            this.DataSetMappingStatus = dataSetMappingStatus;
            this.ProvisioningState = provisioningState;
            this.SchemaName = schemaName;
            this.SqlServerResourceId = sqlServerResourceId;
            this.TableName = tableName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets databaseName name of the sink data set
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets the id of the source data set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataSetId")]
        public string DataSetId {get; set; }

        /// <summary>
        /// Gets gets the status of the data set mapping. Possible values include: &#39;Ok&#39;, &#39;Broken&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataSetMappingStatus")]
        public string DataSetMappingStatus {get; private set; }

        /// <summary>
        /// Gets provisioning state of the data set mapping. Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets schema of the table. Default value is dbo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaName")]
        public string SchemaName {get; set; }

        /// <summary>
        /// Gets or sets resource id of SQL server
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerResourceId")]
        public string SqlServerResourceId {get; set; }

        /// <summary>
        /// Gets or sets sQL DB table name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tableName")]
        public string TableName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DatabaseName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (this.DataSetId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataSetId");
            }
            if (this.SchemaName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SchemaName");
            }
            if (this.SqlServerResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SqlServerResourceId");
            }
            if (this.TableName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TableName");
            }







        }
    }
}