// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataShare.Models
{
    using System.Linq;

    /// <summary>
    /// An Azure storage blob data set.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Blob")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BlobDataSet : DataSet
    {
        /// <summary>
        /// Initializes a new instance of the BlobDataSet class.
        /// </summary>
        public BlobDataSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlobDataSet class.
        /// </summary>

        /// <param name="id">The resource id of the azure resource
        /// </param>

        /// <param name="name">Name of the azure resource
        /// </param>

        /// <param name="type">Type of the azure resource
        /// </param>

        /// <param name="containerName">Container that has the file path.
        /// </param>

        /// <param name="dataSetId">Unique id for identifying a data set resource
        /// </param>

        /// <param name="filePath">File path within the source data set
        /// </param>

        /// <param name="resourceGroup">Resource group of storage account
        /// </param>

        /// <param name="storageAccountName">Storage account name of the source data set
        /// </param>

        /// <param name="subscriptionId">Subscription id of storage account
        /// </param>
        public BlobDataSet(string containerName, string filePath, string resourceGroup, string storageAccountName, string subscriptionId, string id = default(string), string name = default(string), string type = default(string), string dataSetId = default(string))

        : base(id, name, type)
        {
            this.ContainerName = containerName;
            this.DataSetId = dataSetId;
            this.FilePath = filePath;
            this.ResourceGroup = resourceGroup;
            this.StorageAccountName = storageAccountName;
            this.SubscriptionId = subscriptionId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets container that has the file path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerName")]
        public string ContainerName {get; set; }

        /// <summary>
        /// Gets unique id for identifying a data set resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataSetId")]
        public string DataSetId {get; private set; }

        /// <summary>
        /// Gets or sets file path within the source data set
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.filePath")]
        public string FilePath {get; set; }

        /// <summary>
        /// Gets or sets resource group of storage account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGroup")]
        public string ResourceGroup {get; set; }

        /// <summary>
        /// Gets or sets storage account name of the source data set
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccountName")]
        public string StorageAccountName {get; set; }

        /// <summary>
        /// Gets or sets subscription id of storage account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subscriptionId")]
        public string SubscriptionId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ContainerName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ContainerName");
            }
            if (this.FilePath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FilePath");
            }
            if (this.ResourceGroup == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ResourceGroup");
            }
            if (this.StorageAccountName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageAccountName");
            }
            if (this.SubscriptionId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SubscriptionId");
            }






        }
    }
}