// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataShare.Models
{
    using System.Linq;

    /// <summary>
    /// A share subscription data transfer object.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ShareSubscription : ProxyDto
    {
        /// <summary>
        /// Initializes a new instance of the ShareSubscription class.
        /// </summary>
        public ShareSubscription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShareSubscription class.
        /// </summary>

        /// <param name="id">The resource id of the azure resource
        /// </param>

        /// <param name="name">Name of the azure resource
        /// </param>

        /// <param name="type">Type of the azure resource
        /// </param>

        /// <param name="provisioningState">Provisioning state of the share subscription
        /// Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;,
        /// &#39;Failed&#39;</param>

        /// <param name="shareKind">Kind of share
        /// Possible values include: &#39;CopyBased&#39;, &#39;InPlace&#39;</param>

        /// <param name="createdAt">Time at which the share subscription was created.
        /// </param>

        /// <param name="invitationId">The invitation id.
        /// </param>

        /// <param name="providerEmail">Email of the provider who created the resource
        /// </param>

        /// <param name="providerName">Name of the provider who created the resource
        /// </param>

        /// <param name="providerTenantName">Tenant name of the provider who created the resource
        /// </param>

        /// <param name="shareDescription">Description of share
        /// </param>

        /// <param name="shareName">Name of the share
        /// </param>

        /// <param name="shareSubscriptionStatus">Gets the current status of share subscription.
        /// Possible values include: &#39;Active&#39;, &#39;Revoked&#39;, &#39;SourceDeleted&#39;, &#39;Revoking&#39;</param>

        /// <param name="shareTerms">Terms of a share
        /// </param>

        /// <param name="sourceShareLocation">Source share location.
        /// </param>

        /// <param name="userEmail">Email of the user who created the resource
        /// </param>

        /// <param name="userName">Name of the user who created the resource
        /// </param>
        public ShareSubscription(string invitationId, string sourceShareLocation, string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string shareKind = default(string), System.DateTime? createdAt = default(System.DateTime?), string providerEmail = default(string), string providerName = default(string), string providerTenantName = default(string), string shareDescription = default(string), string shareName = default(string), string shareSubscriptionStatus = default(string), string shareTerms = default(string), string userEmail = default(string), string userName = default(string))

        : base(id, name, type)
        {
            this.ProvisioningState = provisioningState;
            this.ShareKind = shareKind;
            this.CreatedAt = createdAt;
            this.InvitationId = invitationId;
            this.ProviderEmail = providerEmail;
            this.ProviderName = providerName;
            this.ProviderTenantName = providerTenantName;
            this.ShareDescription = shareDescription;
            this.ShareName = shareName;
            this.ShareSubscriptionStatus = shareSubscriptionStatus;
            this.ShareTerms = shareTerms;
            this.SourceShareLocation = sourceShareLocation;
            this.UserEmail = userEmail;
            this.UserName = userName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of the share subscription Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets kind of share Possible values include: &#39;CopyBased&#39;, &#39;InPlace&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareKind")]
        public string ShareKind {get; private set; }

        /// <summary>
        /// Gets time at which the share subscription was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt {get; private set; }

        /// <summary>
        /// Gets or sets the invitation id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.invitationId")]
        public string InvitationId {get; set; }

        /// <summary>
        /// Gets email of the provider who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.providerEmail")]
        public string ProviderEmail {get; private set; }

        /// <summary>
        /// Gets name of the provider who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.providerName")]
        public string ProviderName {get; private set; }

        /// <summary>
        /// Gets tenant name of the provider who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.providerTenantName")]
        public string ProviderTenantName {get; private set; }

        /// <summary>
        /// Gets description of share
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareDescription")]
        public string ShareDescription {get; private set; }

        /// <summary>
        /// Gets name of the share
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareName")]
        public string ShareName {get; private set; }

        /// <summary>
        /// Gets gets the current status of share subscription. Possible values include: &#39;Active&#39;, &#39;Revoked&#39;, &#39;SourceDeleted&#39;, &#39;Revoking&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareSubscriptionStatus")]
        public string ShareSubscriptionStatus {get; private set; }

        /// <summary>
        /// Gets terms of a share
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareTerms")]
        public string ShareTerms {get; private set; }

        /// <summary>
        /// Gets or sets source share location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceShareLocation")]
        public string SourceShareLocation {get; set; }

        /// <summary>
        /// Gets email of the user who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userEmail")]
        public string UserEmail {get; private set; }

        /// <summary>
        /// Gets name of the user who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userName")]
        public string UserName {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.InvitationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "InvitationId");
            }
            if (this.SourceShareLocation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceShareLocation");
            }













        }
    }
}