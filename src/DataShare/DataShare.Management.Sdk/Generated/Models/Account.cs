// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataShare.Models
{
    using System.Linq;

    /// <summary>
    /// An account data transfer object.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Account : DefaultDto
    {
        /// <summary>
        /// Initializes a new instance of the Account class.
        /// </summary>
        public Account()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Account class.
        /// </summary>

        /// <param name="id">The resource id of the azure resource
        /// </param>

        /// <param name="location">Location of the azure resource.
        /// </param>

        /// <param name="name">Name of the azure resource
        /// </param>

        /// <param name="tags">Tags on the azure resource.
        /// </param>

        /// <param name="type">Type of the azure resource
        /// </param>

        /// <param name="identity">Identity Info on the Account
        /// </param>

        /// <param name="provisioningState">Provisioning state of the Account
        /// Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;,
        /// &#39;Failed&#39;</param>

        /// <param name="createdAt">Time at which the account was created.
        /// </param>

        /// <param name="userEmail">Email of the user who created the resource
        /// </param>

        /// <param name="userName">Name of the user who created the resource
        /// </param>
        public Account(Identity identity, string id = default(string), string location = default(string), string name = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string type = default(string), string provisioningState = default(string), System.DateTime? createdAt = default(System.DateTime?), string userEmail = default(string), string userName = default(string))

        : base(id, location, name, tags, type)
        {
            this.Identity = identity;
            this.ProvisioningState = provisioningState;
            this.CreatedAt = createdAt;
            this.UserEmail = userEmail;
            this.UserName = userName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets identity Info on the Account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public Identity Identity {get; set; }

        /// <summary>
        /// Gets provisioning state of the Account Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets time at which the account was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt {get; private set; }

        /// <summary>
        /// Gets email of the user who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userEmail")]
        public string UserEmail {get; private set; }

        /// <summary>
        /// Gets name of the user who created the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userName")]
        public string UserName {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Identity == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Identity");
            }




        }
    }
}