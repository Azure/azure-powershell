// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DataSetMappingsOperations
    /// </summary>
    public static partial class DataSetMappingsOperationsExtensions
    {
        /// <summary>
        /// Get a DataSetMapping in a shareSubscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the shareSubscription.
        /// </param>
        /// <param name='dataSetMappingName'>
        /// The name of the dataSetMapping.
        /// </param>
        public static DataSetMapping Get(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName)
        {
                return ((IDataSetMappingsOperations)operations).GetAsync(resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a DataSetMapping in a shareSubscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the shareSubscription.
        /// </param>
        /// <param name='dataSetMappingName'>
        /// The name of the dataSetMapping.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataSetMapping> GetAsync(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create a DataSetMapping
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the share subscription which will hold the data set sink.
        /// </param>
        /// <param name='dataSetMappingName'>
        /// The name of the data set mapping to be created.
        /// </param>
        public static DataSetMapping Create(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, DataSetMapping dataSetMapping)
        {
                return ((IDataSetMappingsOperations)operations).CreateAsync(resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, dataSetMapping).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a DataSetMapping
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the share subscription which will hold the data set sink.
        /// </param>
        /// <param name='dataSetMappingName'>
        /// The name of the data set mapping to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataSetMapping> CreateAsync(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, DataSetMapping dataSetMapping, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, dataSetMapping, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a DataSetMapping in a shareSubscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the shareSubscription.
        /// </param>
        /// <param name='dataSetMappingName'>
        /// The name of the dataSetMapping.
        /// </param>
        public static void Delete(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName)
        {
                ((IDataSetMappingsOperations)operations).DeleteAsync(resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a DataSetMapping in a shareSubscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the shareSubscription.
        /// </param>
        /// <param name='dataSetMappingName'>
        /// The name of the dataSetMapping.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string dataSetMappingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List DataSetMappings in a share subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the share subscription.
        /// </param>
        /// <param name='skipToken'>
        /// Continuation token
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataSetMapping> ListByShareSubscription(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string skipToken = default(string))
        {
                return ((IDataSetMappingsOperations)operations).ListByShareSubscriptionAsync(resourceGroupName, accountName, shareSubscriptionName, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List DataSetMappings in a share subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareSubscriptionName'>
        /// The name of the share subscription.
        /// </param>
        /// <param name='skipToken'>
        /// Continuation token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataSetMapping>> ListByShareSubscriptionAsync(this IDataSetMappingsOperations operations, string resourceGroupName, string accountName, string shareSubscriptionName, string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareSubscriptionWithHttpMessagesAsync(resourceGroupName, accountName, shareSubscriptionName, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List DataSetMappings in a share subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataSetMapping> ListByShareSubscriptionNext(this IDataSetMappingsOperations operations, string nextPageLink)
        {
                return ((IDataSetMappingsOperations)operations).ListByShareSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List DataSetMappings in a share subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataSetMapping>> ListByShareSubscriptionNextAsync(this IDataSetMappingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
