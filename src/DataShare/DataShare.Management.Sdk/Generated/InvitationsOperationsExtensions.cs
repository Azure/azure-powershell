// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for InvitationsOperations
    /// </summary>
    public static partial class InvitationsOperationsExtensions
    {
        /// <summary>
        /// Get an invitation in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='invitationName'>
        /// The name of the invitation.
        /// </param>
        public static Invitation Get(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string invitationName)
        {
                return ((IInvitationsOperations)operations).GetAsync(resourceGroupName, accountName, shareName, invitationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an invitation in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='invitationName'>
        /// The name of the invitation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Invitation> GetAsync(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string invitationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, shareName, invitationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create an invitation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share to send the invitation for.
        /// </param>
        /// <param name='invitationName'>
        /// The name of the invitation.
        /// </param>
        public static Invitation Create(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string invitationName, Invitation invitation)
        {
                return ((IInvitationsOperations)operations).CreateAsync(resourceGroupName, accountName, shareName, invitationName, invitation).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create an invitation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share to send the invitation for.
        /// </param>
        /// <param name='invitationName'>
        /// The name of the invitation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Invitation> CreateAsync(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string invitationName, Invitation invitation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, shareName, invitationName, invitation, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete an invitation in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='invitationName'>
        /// The name of the invitation.
        /// </param>
        public static void Delete(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string invitationName)
        {
                ((IInvitationsOperations)operations).DeleteAsync(resourceGroupName, accountName, shareName, invitationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an invitation in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='invitationName'>
        /// The name of the invitation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string invitationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, invitationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List invitations in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// The continuation token
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invitation> ListByShare(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string))
        {
                return ((IInvitationsOperations)operations).ListByShareAsync(resourceGroupName, accountName, shareName, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List invitations in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// The continuation token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invitation>> ListByShareAsync(this IInvitationsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List invitations in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invitation> ListByShareNext(this IInvitationsOperations operations, string nextPageLink)
        {
                return ((IInvitationsOperations)operations).ListByShareNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List invitations in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invitation>> ListByShareNextAsync(this IInvitationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
