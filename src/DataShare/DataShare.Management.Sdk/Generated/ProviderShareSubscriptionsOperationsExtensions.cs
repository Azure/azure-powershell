// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ProviderShareSubscriptionsOperations
    /// </summary>
    public static partial class ProviderShareSubscriptionsOperationsExtensions
    {
        /// <summary>
        /// Get share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        public static ProviderShareSubscription GetByShare(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
        {
                return ((IProviderShareSubscriptionsOperations)operations).GetByShareAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProviderShareSubscription> GetByShareAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List share subscriptions in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// Continuation Token
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProviderShareSubscription> ListByShare(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string))
        {
                return ((IProviderShareSubscriptionsOperations)operations).ListByShareAsync(resourceGroupName, accountName, shareName, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List share subscriptions in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// Continuation Token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProviderShareSubscription>> ListByShareAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Revoke share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        public static ProviderShareSubscription Revoke(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
        {
                return ((IProviderShareSubscriptionsOperations)operations).RevokeAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revoke share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProviderShareSubscription> RevokeAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RevokeWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Reinstate share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        public static ProviderShareSubscription Reinstate(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
        {
                return ((IProviderShareSubscriptionsOperations)operations).ReinstateAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reinstate share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProviderShareSubscription> ReinstateAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ReinstateWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Revoke share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        public static ProviderShareSubscription BeginRevoke(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
        {
                return ((IProviderShareSubscriptionsOperations)operations).BeginRevokeAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revoke share subscription in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='providerShareSubscriptionId'>
        /// To locate shareSubscription
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProviderShareSubscription> BeginRevokeAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRevokeWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List share subscriptions in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProviderShareSubscription> ListByShareNext(this IProviderShareSubscriptionsOperations operations, string nextPageLink)
        {
                return ((IProviderShareSubscriptionsOperations)operations).ListByShareNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List share subscriptions in a provider share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProviderShareSubscription>> ListByShareNextAsync(this IProviderShareSubscriptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
