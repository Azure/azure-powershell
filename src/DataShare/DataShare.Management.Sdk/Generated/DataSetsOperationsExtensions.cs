// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DataSetsOperations
    /// </summary>
    public static partial class DataSetsOperationsExtensions
    {
        /// <summary>
        /// Get a DataSet in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        public static DataSet Get(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName)
        {
                return ((IDataSetsOperations)operations).GetAsync(resourceGroupName, accountName, shareName, dataSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a DataSet in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataSet> GetAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create a DataSet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share to add the data set to.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        public static DataSet Create(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, DataSet dataSet)
        {
                return ((IDataSetsOperations)operations).CreateAsync(resourceGroupName, accountName, shareName, dataSetName, dataSet).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a DataSet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share to add the data set to.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataSet> CreateAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, DataSet dataSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, dataSet, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a DataSet in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        public static void Delete(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName)
        {
                ((IDataSetsOperations)operations).DeleteAsync(resourceGroupName, accountName, shareName, dataSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a DataSet in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List DataSets in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// continuation token
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataSet> ListByShare(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string))
        {
                return ((IDataSetsOperations)operations).ListByShareAsync(resourceGroupName, accountName, shareName, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List DataSets in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='skipToken'>
        /// continuation token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataSet>> ListByShareAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a DataSet in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        public static void BeginDelete(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName)
        {
                ((IDataSetsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, shareName, dataSetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a DataSet in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='accountName'>
        /// The name of the share account.
        /// </param>
        /// <param name='shareName'>
        /// The name of the share.
        /// </param>
        /// <param name='dataSetName'>
        /// The name of the dataSet.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List DataSets in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataSet> ListByShareNext(this IDataSetsOperations operations, string nextPageLink)
        {
                return ((IDataSetsOperations)operations).ListByShareNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List DataSets in a share
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataSet>> ListByShareNextAsync(this IDataSetsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByShareNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
