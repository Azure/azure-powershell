// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Reservations.Models.Api20220301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Reservations.Runtime.Extensions;

    public partial class ScopeProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Reservations.Models.Api20220301.IScopeProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Reservations.Models.Api20220301.IScopePropertiesInternal
    {

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        [Microsoft.Azure.PowerShell.Cmdlets.Reservations.Origin(Microsoft.Azure.PowerShell.Cmdlets.Reservations.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="Valid" /> property.</summary>
        private bool? _valid;

        [Microsoft.Azure.PowerShell.Cmdlets.Reservations.Origin(Microsoft.Azure.PowerShell.Cmdlets.Reservations.PropertyOrigin.Owned)]
        public bool? Valid { get => this._valid; set => this._valid = value; }

        /// <summary>Creates an new <see cref="ScopeProperties" /> instance.</summary>
        public ScopeProperties()
        {

        }
    }
    public partial interface IScopeProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Reservations.Runtime.IJsonSerializable
    {
        [Microsoft.Azure.PowerShell.Cmdlets.Reservations.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Reservations.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"valid",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Valid { get; set; }

    }
    internal partial interface IScopePropertiesInternal

    {
        string Scope { get; set; }

        bool? Valid { get; set; }

    }
}