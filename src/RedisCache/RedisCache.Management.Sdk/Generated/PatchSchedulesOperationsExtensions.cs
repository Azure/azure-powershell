// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RedisCache
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PatchSchedulesOperations
    /// </summary>
    public static partial class PatchSchedulesOperationsExtensions
    {
        /// <summary>
        /// Gets all patch schedules in the specified redis cache (there is only one).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisPatchSchedule> ListByRedisResource(this IPatchSchedulesOperations operations, string resourceGroupName, string cacheName)
        {
                return ((IPatchSchedulesOperations)operations).ListByRedisResourceAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all patch schedules in the specified redis cache (there is only one).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisPatchSchedule>> ListByRedisResourceAsync(this IPatchSchedulesOperations operations, string resourceGroupName, string cacheName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByRedisResourceWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace the patching schedule for Redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the Redis cache.
        /// </param>
        public static RedisPatchSchedule CreateOrUpdate(this IPatchSchedulesOperations operations, string resourceGroupName, string name, System.Collections.Generic.IList<ScheduleEntry> scheduleEntries)
        {
                return ((IPatchSchedulesOperations)operations).CreateOrUpdateAsync(resourceGroupName, name, scheduleEntries).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace the patching schedule for Redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisPatchSchedule> CreateOrUpdateAsync(this IPatchSchedulesOperations operations, string resourceGroupName, string name, System.Collections.Generic.IList<ScheduleEntry> scheduleEntries, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, scheduleEntries, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the patching schedule of a redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        public static void Delete(this IPatchSchedulesOperations operations, string resourceGroupName, string name)
        {
                ((IPatchSchedulesOperations)operations).DeleteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the patching schedule of a redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPatchSchedulesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the patching schedule of a redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        public static RedisPatchSchedule Get(this IPatchSchedulesOperations operations, string resourceGroupName, string name)
        {
                return ((IPatchSchedulesOperations)operations).GetAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the patching schedule of a redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisPatchSchedule> GetAsync(this IPatchSchedulesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all patch schedules in the specified redis cache (there is only one).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisPatchSchedule> ListByRedisResourceNext(this IPatchSchedulesOperations operations, string nextPageLink)
        {
                return ((IPatchSchedulesOperations)operations).ListByRedisResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all patch schedules in the specified redis cache (there is only one).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisPatchSchedule>> ListByRedisResourceNextAsync(this IPatchSchedulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByRedisResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
