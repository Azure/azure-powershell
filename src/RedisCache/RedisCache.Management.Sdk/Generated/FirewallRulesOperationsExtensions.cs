// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RedisCache
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FirewallRulesOperations
    /// </summary>
    public static partial class FirewallRulesOperationsExtensions
    {
        /// <summary>
        /// Gets all firewall rules in the specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisFirewallRule> List(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName)
        {
                return ((IFirewallRulesOperations)operations).ListAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all firewall rules in the specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisFirewallRule>> ListAsync(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a redis cache firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule.
        /// </param>
        public static RedisFirewallRule CreateOrUpdate(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, string ruleName, string startIP, string endIP)
        {
                return ((IFirewallRulesOperations)operations).CreateOrUpdateAsync(resourceGroupName, cacheName, ruleName, startIP, endIP).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a redis cache firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisFirewallRule> CreateOrUpdateAsync(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, string ruleName, string startIP, string endIP, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, ruleName, startIP, endIP, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a single firewall rule in a specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule.
        /// </param>
        public static RedisFirewallRule Get(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, string ruleName)
        {
                return ((IFirewallRulesOperations)operations).GetAsync(resourceGroupName, cacheName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a single firewall rule in a specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisFirewallRule> GetAsync(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cacheName, ruleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a single firewall rule in a specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule.
        /// </param>
        public static void Delete(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, string ruleName)
        {
                ((IFirewallRulesOperations)operations).DeleteAsync(resourceGroupName, cacheName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a single firewall rule in a specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IFirewallRulesOperations operations, string resourceGroupName, string cacheName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cacheName, ruleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets all firewall rules in the specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisFirewallRule> ListNext(this IFirewallRulesOperations operations, string nextPageLink)
        {
                return ((IFirewallRulesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all firewall rules in the specified redis cache.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisFirewallRule>> ListNextAsync(this IFirewallRulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
