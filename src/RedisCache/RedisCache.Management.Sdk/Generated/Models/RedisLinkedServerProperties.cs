// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a linked server to be returned in get/put response
    /// </summary>
    public partial class RedisLinkedServerProperties : RedisLinkedServerCreateProperties
    {
        /// <summary>
        /// Initializes a new instance of the RedisLinkedServerProperties class.
        /// </summary>
        public RedisLinkedServerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisLinkedServerProperties class.
        /// </summary>

        /// <param name="linkedRedisCacheId">Fully qualified resourceId of the linked redis cache.
        /// </param>

        /// <param name="linkedRedisCacheLocation">Location of the linked redis cache.
        /// </param>

        /// <param name="serverRole">Role of the linked server.
        /// Possible values include: 'Primary', 'Secondary'</param>

        /// <param name="geoReplicatedPrimaryHostName">The unchanging DNS name which will always point to current geo-primary
        /// cache among the linked redis caches for seamless Geo Failover experience.
        /// </param>

        /// <param name="primaryHostName">The changing DNS name that resolves to the current geo-primary cache among
        /// the linked redis caches before or after the Geo Failover.
        /// </param>

        /// <param name="provisioningState">Terminal state of the link between primary and secondary redis cache.
        /// </param>
        public RedisLinkedServerProperties(string linkedRedisCacheId, string linkedRedisCacheLocation, ReplicationRole serverRole, string geoReplicatedPrimaryHostName = default(string), string primaryHostName = default(string), string provisioningState = default(string))

        : base(linkedRedisCacheId, linkedRedisCacheLocation, serverRole, geoReplicatedPrimaryHostName, primaryHostName)
        {
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets terminal state of the link between primary and secondary redis cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();

        }
    }
}