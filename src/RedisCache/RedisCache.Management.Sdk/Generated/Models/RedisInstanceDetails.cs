// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Details of single instance of redis.
    /// </summary>
    public partial class RedisInstanceDetails
    {
        /// <summary>
        /// Initializes a new instance of the RedisInstanceDetails class.
        /// </summary>
        public RedisInstanceDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisInstanceDetails class.
        /// </summary>

        /// <param name="sslPort">Redis instance SSL port.
        /// </param>

        /// <param name="nonSslPort">If enableNonSslPort is true, provides Redis instance Non-SSL port.
        /// </param>

        /// <param name="zone">If the Cache uses availability zones, specifies availability zone where
        /// this instance is located.
        /// </param>

        /// <param name="shardId">If clustering is enabled, the Shard ID of Redis Instance
        /// </param>

        /// <param name="isMaster">Specifies whether the instance is a primary node.
        /// </param>

        /// <param name="isPrimary">Specifies whether the instance is a primary node.
        /// </param>
        public RedisInstanceDetails(int? sslPort = default(int?), int? nonSslPort = default(int?), string zone = default(string), int? shardId = default(int?), bool? isMaster = default(bool?), bool? isPrimary = default(bool?))

        {
            this.SslPort = sslPort;
            this.NonSslPort = nonSslPort;
            this.Zone = zone;
            this.ShardId = shardId;
            this.IsMaster = isMaster;
            this.IsPrimary = isPrimary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets redis instance SSL port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslPort")]
        public int? SslPort {get; private set; }

        /// <summary>
        /// Gets if enableNonSslPort is true, provides Redis instance Non-SSL port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nonSslPort")]
        public int? NonSslPort {get; private set; }

        /// <summary>
        /// Gets if the Cache uses availability zones, specifies availability zone
        /// where this instance is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zone")]
        public string Zone {get; private set; }

        /// <summary>
        /// Gets if clustering is enabled, the Shard ID of Redis Instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shardId")]
        public int? ShardId {get; private set; }

        /// <summary>
        /// Gets specifies whether the instance is a primary node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isMaster")]
        public bool? IsMaster {get; private set; }

        /// <summary>
        /// Gets specifies whether the instance is a primary node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPrimary")]
        public bool? IsPrimary {get; private set; }
    }
}