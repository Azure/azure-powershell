// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Create Redis operation.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RedisCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the RedisCreateParameters class.
        /// </summary>
        public RedisCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisCreateParameters class.
        /// </summary>

        /// <param name="zones">A list of availability zones denoting where the resource needs to come
        /// from.
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="identity">The identity of the resource.
        /// </param>

        /// <param name="sku">The SKU of the Redis cache to deploy.
        /// </param>

        /// <param name="redisConfiguration">All Redis Settings. Few possible keys:
        /// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </param>

        /// <param name="redisVersion">Redis version. This should be in the form &#39;major[.minor]&#39; (only &#39;major&#39; is
        /// required) or the value &#39;latest&#39; which refers to the latest stable Redis
        /// version that is available. Supported versions: 4.0, 6.0 (latest). Default
        /// value is &#39;latest&#39;.
        /// </param>

        /// <param name="enableNonSslPort">Specifies whether the non-ssl Redis server port (6379) is enabled.
        /// </param>

        /// <param name="replicasPerMaster">The number of replicas to be created per primary.
        /// </param>

        /// <param name="replicasPerPrimary">The number of replicas to be created per primary.
        /// </param>

        /// <param name="tenantSettings">A dictionary of tenant settings
        /// </param>

        /// <param name="shardCount">The number of shards to be created on a Premium Cluster Cache.
        /// </param>

        /// <param name="minimumTlsVersion">Optional: requires clients to use a specified TLS version (or higher) to
        /// connect (e,g, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;)
        /// Possible values include: '1.0', '1.1', '1.2'</param>

        /// <param name="publicNetworkAccess">Whether or not public endpoint access is allowed for this cache.  Value is
        /// optional, but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;. If &#39;Disabled&#39;,
        /// private endpoints are the exclusive access method. Default value is
        /// &#39;Enabled&#39;. Note: This setting is important for caches with private
        /// endpoints. It has *no effect* on caches that are joined to, or injected
        /// into, a virtual network subnet.
        /// Possible values include: 'Enabled', 'Disabled'</param>

        /// <param name="subnetId">The full resource ID of a subnet in a virtual network to deploy the Redis
        /// cache in. Example format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </param>

        /// <param name="staticIP">Static IP address. Optionally, may be specified when deploying a Redis
        /// cache inside an existing Azure Virtual Network; auto assigned by default.
        /// </param>
        public RedisCreateParameters(string location, Sku sku, System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ManagedServiceIdentity identity = default(ManagedServiceIdentity), RedisCommonPropertiesRedisConfiguration redisConfiguration = default(RedisCommonPropertiesRedisConfiguration), string redisVersion = default(string), bool? enableNonSslPort = default(bool?), int? replicasPerMaster = default(int?), int? replicasPerPrimary = default(int?), System.Collections.Generic.IDictionary<string, string> tenantSettings = default(System.Collections.Generic.IDictionary<string, string>), int? shardCount = default(int?), string minimumTlsVersion = default(string), string publicNetworkAccess = default(string), string subnetId = default(string), string staticIP = default(string))

        {
            this.Zones = zones;
            this.Location = location;
            this.Tags = tags;
            this.Identity = identity;
            this.Sku = sku;
            this.RedisConfiguration = redisConfiguration;
            this.RedisVersion = redisVersion;
            this.EnableNonSslPort = enableNonSslPort;
            this.ReplicasPerMaster = replicasPerMaster;
            this.ReplicasPerPrimary = replicasPerPrimary;
            this.TenantSettings = tenantSettings;
            this.ShardCount = shardCount;
            this.MinimumTlsVersion = minimumTlsVersion;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.SubnetId = subnetId;
            this.StaticIP = staticIP;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a list of availability zones denoting where the resource needs
        /// to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets or sets the geo-location where the resource lives
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets the SKU of the Redis cache to deploy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets all Redis Settings. Few possible keys:
        /// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.redisConfiguration")]
        public RedisCommonPropertiesRedisConfiguration RedisConfiguration {get; set; }

        /// <summary>
        /// Gets or sets redis version. This should be in the form &#39;major[.minor]&#39;
        /// (only &#39;major&#39; is required) or the value &#39;latest&#39; which refers to the latest
        /// stable Redis version that is available. Supported versions: 4.0, 6.0
        /// (latest). Default value is &#39;latest&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.redisVersion")]
        public string RedisVersion {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the non-ssl Redis server port (6379) is
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableNonSslPort")]
        public bool? EnableNonSslPort {get; set; }

        /// <summary>
        /// Gets or sets the number of replicas to be created per primary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicasPerMaster")]
        public int? ReplicasPerMaster {get; set; }

        /// <summary>
        /// Gets or sets the number of replicas to be created per primary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicasPerPrimary")]
        public int? ReplicasPerPrimary {get; set; }

        /// <summary>
        /// Gets or sets a dictionary of tenant settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tenantSettings")]
        public System.Collections.Generic.IDictionary<string, string> TenantSettings {get; set; }

        /// <summary>
        /// Gets or sets the number of shards to be created on a Premium Cluster Cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shardCount")]
        public int? ShardCount {get; set; }

        /// <summary>
        /// Gets or sets optional: requires clients to use a specified TLS version (or
        /// higher) to connect (e,g, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;) Possible values include: &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minimumTlsVersion")]
        public string MinimumTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets whether or not public endpoint access is allowed for this
        /// cache.  Value is optional, but if passed in, must be &#39;Enabled&#39; or
        /// &#39;Disabled&#39;. If &#39;Disabled&#39;, private endpoints are the exclusive access
        /// method. Default value is &#39;Enabled&#39;. Note: This setting is important for
        /// caches with private endpoints. It has *no effect* on caches that are joined
        /// to, or injected into, a virtual network subnet. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets the full resource ID of a subnet in a virtual network to
        /// deploy the Redis cache in. Example format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnetId")]
        public string SubnetId {get; set; }

        /// <summary>
        /// Gets or sets static IP address. Optionally, may be specified when deploying
        /// a Redis cache inside an existing Azure Virtual Network; auto assigned by
        /// default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.staticIP")]
        public string StaticIP {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }
            if (this.Sku == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sku");
            }



            if (this.Identity != null)
            {
                this.Identity.Validate();
            }
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }






            if (this.StaticIP != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.StaticIP, "^\\d+\\.\\d+\\.\\d+\\.\\d+$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "StaticIP", "^\\d+\\.\\d+\\.\\d+\\.\\d+$");
                }
            }
        }
    }
}