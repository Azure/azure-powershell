// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Response to put/get patch schedules for Redis cache.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RedisPatchSchedule : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RedisPatchSchedule class.
        /// </summary>
        public RedisPatchSchedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisPatchSchedule class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="scheduleEntries">List of patch schedules for a Redis cache.
        /// </param>
        public RedisPatchSchedule(System.Collections.Generic.IList<ScheduleEntry> scheduleEntries, string id = default(string), string name = default(string), string type = default(string), string location = default(string))

        : base(id, name, type)
        {
            this.Location = location;
            this.ScheduleEntries = scheduleEntries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the geo-location where the resource lives
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; private set; }

        /// <summary>
        /// Gets or sets list of patch schedules for a Redis cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scheduleEntries")]
        public System.Collections.Generic.IList<ScheduleEntry> ScheduleEntries {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ScheduleEntries == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ScheduleEntries");
            }

            if (this.ScheduleEntries != null)
            {
                foreach (var element in this.ScheduleEntries)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}