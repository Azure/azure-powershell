// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Response to put/get linked server (with properties) for Redis cache.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RedisLinkedServerWithProperties : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RedisLinkedServerWithProperties class.
        /// </summary>
        public RedisLinkedServerWithProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisLinkedServerWithProperties class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="linkedRedisCacheId">Fully qualified resourceId of the linked redis cache.
        /// </param>

        /// <param name="linkedRedisCacheLocation">Location of the linked redis cache.
        /// </param>

        /// <param name="serverRole">Role of the linked server.
        /// Possible values include: 'Primary', 'Secondary'</param>

        /// <param name="geoReplicatedPrimaryHostName">The unchanging DNS name which will always point to current geo-primary
        /// cache among the linked redis caches for seamless Geo Failover experience.
        /// </param>

        /// <param name="primaryHostName">The changing DNS name that resolves to the current geo-primary cache among
        /// the linked redis caches before or after the Geo Failover.
        /// </param>

        /// <param name="provisioningState">Terminal state of the link between primary and secondary redis cache.
        /// </param>
        public RedisLinkedServerWithProperties(string id = default(string), string name = default(string), string type = default(string), string linkedRedisCacheId = default(string), string linkedRedisCacheLocation = default(string), ReplicationRole? serverRole = default(ReplicationRole?), string geoReplicatedPrimaryHostName = default(string), string primaryHostName = default(string), string provisioningState = default(string))

        : base(id, name, type)
        {
            this.LinkedRedisCacheId = linkedRedisCacheId;
            this.LinkedRedisCacheLocation = linkedRedisCacheLocation;
            this.ServerRole = serverRole;
            this.GeoReplicatedPrimaryHostName = geoReplicatedPrimaryHostName;
            this.PrimaryHostName = primaryHostName;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets fully qualified resourceId of the linked redis cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linkedRedisCacheId")]
        public string LinkedRedisCacheId {get; set; }

        /// <summary>
        /// Gets or sets location of the linked redis cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linkedRedisCacheLocation")]
        public string LinkedRedisCacheLocation {get; set; }

        /// <summary>
        /// Gets or sets role of the linked server. Possible values include: &#39;Primary&#39;, &#39;Secondary&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverRole")]
        public ReplicationRole? ServerRole {get; set; }

        /// <summary>
        /// Gets the unchanging DNS name which will always point to current geo-primary
        /// cache among the linked redis caches for seamless Geo Failover experience.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.geoReplicatedPrimaryHostName")]
        public string GeoReplicatedPrimaryHostName {get; private set; }

        /// <summary>
        /// Gets the changing DNS name that resolves to the current geo-primary cache
        /// among the linked redis caches before or after the Geo Failover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.primaryHostName")]
        public string PrimaryHostName {get; private set; }

        /// <summary>
        /// Gets terminal state of the link between primary and secondary redis cache.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}