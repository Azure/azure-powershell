// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Properties for an access policy assignment
    /// </summary>
    public partial class RedisCacheAccessPolicyAssignmentProperties
    {
        /// <summary>
        /// Initializes a new instance of the RedisCacheAccessPolicyAssignmentProperties class.
        /// </summary>
        public RedisCacheAccessPolicyAssignmentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisCacheAccessPolicyAssignmentProperties class.
        /// </summary>

        /// <param name="provisioningState">Provisioning state of an access policy assignment set
        /// Possible values include: &#39;Updating&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;,
        /// &#39;Canceled&#39;, &#39;Failed&#39;</param>

        /// <param name="objectId">Object Id to assign access policy to
        /// </param>

        /// <param name="objectIdAlias">User friendly name for object id. Also represents username for token based
        /// authentication
        /// </param>

        /// <param name="accessPolicyName">The name of the access policy that is being assigned
        /// </param>
        public RedisCacheAccessPolicyAssignmentProperties(string objectId, string objectIdAlias, string accessPolicyName, string provisioningState = default(string))

        {
            this.ProvisioningState = provisioningState;
            this.ObjectId = objectId;
            this.ObjectIdAlias = objectIdAlias;
            this.AccessPolicyName = accessPolicyName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of an access policy assignment set Possible values include: &#39;Updating&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;, &#39;Canceled&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets object Id to assign access policy to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectId")]
        public string ObjectId {get; set; }

        /// <summary>
        /// Gets or sets user friendly name for object id. Also represents username for
        /// token based authentication
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectIdAlias")]
        public string ObjectIdAlias {get; set; }

        /// <summary>
        /// Gets or sets the name of the access policy that is being assigned
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessPolicyName")]
        public string AccessPolicyName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ObjectId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ObjectId");
            }
            if (this.ObjectIdAlias == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ObjectIdAlias");
            }
            if (this.AccessPolicyName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccessPolicyName");
            }



            if (this.AccessPolicyName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.AccessPolicyName, "^([a-zA-Z0-9][a-zA-Z0-9- ]*[a-zA-Z0-9]|[a-zA-Z0-9])$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "AccessPolicyName", "^([a-zA-Z0-9][a-zA-Z0-9- ]*[a-zA-Z0-9]|[a-zA-Z0-9])$");
                }
            }
        }
    }
}