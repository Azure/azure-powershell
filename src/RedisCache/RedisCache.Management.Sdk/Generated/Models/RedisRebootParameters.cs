// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies which Redis node(s) to reboot.
    /// </summary>
    public partial class RedisRebootParameters
    {
        /// <summary>
        /// Initializes a new instance of the RedisRebootParameters class.
        /// </summary>
        public RedisRebootParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisRebootParameters class.
        /// </summary>

        /// <param name="rebootType">Which Redis node(s) to reboot. Depending on this value data loss is
        /// possible.
        /// Possible values include: &#39;PrimaryNode&#39;, &#39;SecondaryNode&#39;, &#39;AllNodes&#39;</param>

        /// <param name="shardId">If clustering is enabled, the ID of the shard to be rebooted.
        /// </param>

        /// <param name="ports">A list of redis instances to reboot, specified by per-instance SSL ports or
        /// non-SSL ports.
        /// </param>
        public RedisRebootParameters(string rebootType = default(string), int? shardId = default(int?), System.Collections.Generic.IList<int?> ports = default(System.Collections.Generic.IList<int?>))

        {
            this.RebootType = rebootType;
            this.ShardId = shardId;
            this.Ports = ports;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets which Redis node(s) to reboot. Depending on this value data
        /// loss is possible. Possible values include: &#39;PrimaryNode&#39;, &#39;SecondaryNode&#39;, &#39;AllNodes&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootType")]
        public string RebootType {get; set; }

        /// <summary>
        /// Gets or sets if clustering is enabled, the ID of the shard to be rebooted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shardId")]
        public int? ShardId {get; set; }

        /// <summary>
        /// Gets or sets a list of redis instances to reboot, specified by per-instance
        /// SSL ports or non-SSL ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ports")]
        public System.Collections.Generic.IList<int?> Ports {get; set; }
    }
}