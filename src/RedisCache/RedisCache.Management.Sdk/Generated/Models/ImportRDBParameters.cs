// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters for Redis import operation.
    /// </summary>
    public partial class ImportRDBParameters
    {
        /// <summary>
        /// Initializes a new instance of the ImportRDBParameters class.
        /// </summary>
        public ImportRDBParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImportRDBParameters class.
        /// </summary>

        /// <param name="format">File format.
        /// </param>

        /// <param name="files">files to import.
        /// </param>

        /// <param name="preferredDataArchiveAuthMethod">Preferred auth method to communicate to storage account used for data
        /// archive, specify SAS or ManagedIdentity, default value is SAS
        /// </param>

        /// <param name="storageSubscriptionId">Subscription id of the storage container containing files to import using
        /// Managed Identity.
        /// </param>
        public ImportRDBParameters(System.Collections.Generic.IList<string> files, string format = default(string), string preferredDataArchiveAuthMethod = default(string), string storageSubscriptionId = default(string))

        {
            this.Format = format;
            this.Files = files;
            this.PreferredDataArchiveAuthMethod = preferredDataArchiveAuthMethod;
            this.StorageSubscriptionId = storageSubscriptionId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets file format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "format")]
        public string Format {get; set; }

        /// <summary>
        /// Gets or sets files to import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "files")]
        public System.Collections.Generic.IList<string> Files {get; set; }

        /// <summary>
        /// Gets or sets preferred auth method to communicate to storage account used
        /// for data archive, specify SAS or ManagedIdentity, default value is SAS
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferred-data-archive-auth-method")]
        public string PreferredDataArchiveAuthMethod {get; set; }

        /// <summary>
        /// Gets or sets subscription id of the storage container containing files to
        /// import using Managed Identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storage-subscription-id")]
        public string StorageSubscriptionId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Files == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Files");
            }




        }
    }
}