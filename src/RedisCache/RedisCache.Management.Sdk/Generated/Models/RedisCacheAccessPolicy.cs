// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RedisCache.Models
{
    using System.Linq;

    /// <summary>
    /// Response to get/put access policy.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RedisCacheAccessPolicy : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RedisCacheAccessPolicy class.
        /// </summary>
        public RedisCacheAccessPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisCacheAccessPolicy class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="provisioningState">Provisioning state of access policy
        /// Possible values include: &#39;Updating&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;,
        /// &#39;Canceled&#39;, &#39;Failed&#39;</param>

        /// <param name="propertiesType">Built-In or Custom access policy
        /// Possible values include: &#39;Custom&#39;, &#39;BuiltIn&#39;</param>

        /// <param name="permissions">Permissions for the access policy. Learn how to configure permissions at
        /// https://aka.ms/redis/AADPreRequisites
        /// </param>
        public RedisCacheAccessPolicy(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string propertiesType = default(string), string permissions = default(string))

        : base(id, name, type)
        {
            this.ProvisioningState = provisioningState;
            this.PropertiesType = propertiesType;
            this.Permissions = permissions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of access policy Possible values include: &#39;Updating&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;, &#39;Canceled&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets built-In or Custom access policy Possible values include: &#39;Custom&#39;, &#39;BuiltIn&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.type")]
        public string PropertiesType {get; private set; }

        /// <summary>
        /// Gets or sets permissions for the access policy. Learn how to configure
        /// permissions at https://aka.ms/redis/AADPreRequisites
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.permissions")]
        public string Permissions {get; set; }
    }
}