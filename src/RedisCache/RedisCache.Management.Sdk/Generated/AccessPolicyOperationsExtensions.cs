// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RedisCache
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AccessPolicyOperations
    /// </summary>
    public static partial class AccessPolicyOperationsExtensions
    {
        /// <summary>
        /// Adds an access policy to the redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        public static RedisCacheAccessPolicy CreateUpdate(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, string permissions = default(string))
        {
                return ((IAccessPolicyOperations)operations).CreateUpdateAsync(resourceGroupName, cacheName, accessPolicyName, permissions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds an access policy to the redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisCacheAccessPolicy> CreateUpdateAsync(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, string permissions = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyName, permissions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the access policy from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        public static AccessPolicyDeleteHeaders Delete(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName)
        {
                return ((IAccessPolicyOperations)operations).DeleteAsync(resourceGroupName, cacheName, accessPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the access policy from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessPolicyDeleteHeaders> DeleteAsync(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the detailed information about an access policy of a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        public static RedisCacheAccessPolicy Get(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName)
        {
                return ((IAccessPolicyOperations)operations).GetAsync(resourceGroupName, cacheName, accessPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the detailed information about an access policy of a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisCacheAccessPolicy> GetAsync(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of access policies associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicy> List(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName)
        {
                return ((IAccessPolicyOperations)operations).ListAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of access policies associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicy>> ListAsync(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Adds an access policy to the redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        public static RedisCacheAccessPolicy BeginCreateUpdate(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, string permissions = default(string))
        {
                return ((IAccessPolicyOperations)operations).BeginCreateUpdateAsync(resourceGroupName, cacheName, accessPolicyName, permissions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds an access policy to the redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisCacheAccessPolicy> BeginCreateUpdateAsync(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, string permissions = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyName, permissions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the access policy from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        public static AccessPolicyDeleteHeaders BeginDelete(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName)
        {
                return ((IAccessPolicyOperations)operations).BeginDeleteAsync(resourceGroupName, cacheName, accessPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the access policy from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyName'>
        /// The name of the access policy that is being added to the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessPolicyDeleteHeaders> BeginDeleteAsync(this IAccessPolicyOperations operations, string resourceGroupName, string cacheName, string accessPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the list of access policies associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicy> ListNext(this IAccessPolicyOperations operations, string nextPageLink)
        {
                return ((IAccessPolicyOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of access policies associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicy>> ListNextAsync(this IAccessPolicyOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
