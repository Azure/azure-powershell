// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RedisCache
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AccessPolicyAssignmentOperations
    /// </summary>
    public static partial class AccessPolicyAssignmentOperationsExtensions
    {
        /// <summary>
        /// Adds the access policy assignment to the specified users
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        public static RedisCacheAccessPolicyAssignment CreateUpdate(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignment parameters)
        {
                return ((IAccessPolicyAssignmentOperations)operations).CreateUpdateAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds the access policy assignment to the specified users
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisCacheAccessPolicyAssignment> CreateUpdateAsync(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the access policy assignment from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        public static AccessPolicyAssignmentDeleteHeaders Delete(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName)
        {
                return ((IAccessPolicyAssignmentOperations)operations).DeleteAsync(resourceGroupName, cacheName, accessPolicyAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the access policy assignment from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessPolicyAssignmentDeleteHeaders> DeleteAsync(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the list of assignments for an access policy of a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        public static RedisCacheAccessPolicyAssignment Get(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName)
        {
                return ((IAccessPolicyAssignmentOperations)operations).GetAsync(resourceGroupName, cacheName, accessPolicyAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of assignments for an access policy of a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisCacheAccessPolicyAssignment> GetAsync(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of access policy assignments associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicyAssignment> List(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName)
        {
                return ((IAccessPolicyAssignmentOperations)operations).ListAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of access policy assignments associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicyAssignment>> ListAsync(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Adds the access policy assignment to the specified users
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        public static RedisCacheAccessPolicyAssignment BeginCreateUpdate(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignment parameters)
        {
                return ((IAccessPolicyAssignmentOperations)operations).BeginCreateUpdateAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds the access policy assignment to the specified users
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RedisCacheAccessPolicyAssignment> BeginCreateUpdateAsync(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the access policy assignment from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        public static AccessPolicyAssignmentDeleteHeaders BeginDelete(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName)
        {
                return ((IAccessPolicyAssignmentOperations)operations).BeginDeleteAsync(resourceGroupName, cacheName, accessPolicyAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the access policy assignment from a redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cacheName'>
        /// The name of the Redis cache.
        /// </param>
        /// <param name='accessPolicyAssignmentName'>
        /// The name of the access policy assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessPolicyAssignmentDeleteHeaders> BeginDeleteAsync(this IAccessPolicyAssignmentOperations operations, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, cacheName, accessPolicyAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the list of access policy assignments associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicyAssignment> ListNext(this IAccessPolicyAssignmentOperations operations, string nextPageLink)
        {
                return ((IAccessPolicyAssignmentOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of access policy assignments associated with this redis cache
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RedisCacheAccessPolicyAssignment>> ListNextAsync(this IAccessPolicyAssignmentOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
