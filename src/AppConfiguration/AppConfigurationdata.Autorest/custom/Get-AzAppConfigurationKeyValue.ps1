
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

Function Test-WildcardExpression {
    param(
        [string]$str
    )

    if ($str -match "[\*\?\[\]]") {
        return $true
    } else {
        return $false
    }
}

<#
.Synopsis
Gets a list of key-values.
.Description
Gets a list of key-values.
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Models.IKeyValue
.Link
https://learn.microsoft.com/powershell/module/az.appconfiguration/get-azappconfigurationkeyvalue
#>
function Get-AzAppConfigurationKeyValue {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Models.IKeyValue])]
    [CmdletBinding(DefaultParameterSetName='Get', PositionalBinding=$false)]
    param(
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Uri')]
        [System.String]
        # The endpoint of the App Configuration instance to send requests to.
        ${Endpoint},
    
        [Parameter(ParameterSetName='Get')]
        [Parameter(ParameterSetName='List')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Path')]
        [System.String]
        # The key to retrieve. If is a wildcard expression, then the returned list will contain all keys that match the expression.
        ${Key},
    
        [Parameter(ParameterSetName='List')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Query')]
        [System.String]
        # Instructs the server to return elements that appear after the element referred to by the specified token.
        ${After},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Query')]
        [System.String]
        # A filter used to match labels
        ${Label},
    
        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Query')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Runtime.Info(PossibleTypes=([System.String]))]
        [System.Collections.Generic.List[System.String]]
        # Used to select what fields are present in the returned resource(s).
        ${Select},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Header')]
        [System.String]
        # Requests the server to respond with the state of the resource at the specified time.
        ${AcceptDatetime},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Header')]
        [System.String]
        # Used to guarantee real-time consistency between requests.
        ${SyncToken},
    
        [Parameter(ParameterSetName='Get')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Header')]
        [System.String]
        # Used to perform an operation only if the targeted resource's etag matches the value provided.
        ${IfMatch},
    
        [Parameter(ParameterSetName='Get')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Header')]
        [System.String]
        # Used to perform an operation only if the targeted resource's etag does not match the value provided.
        ${IfNoneMatch},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    begin {
        try {
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $parameterSet = $PSCmdlet.ParameterSetName
            if ((-not $PSBoundParameters.ContainsKey("Key")) -or (Test-WildcardExpression -str $Key)) {
                $parameterSet = 'List'
            }
    
            if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
                [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
            }         
            $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
            if ($preTelemetryId -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
                [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
            } else {
                $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
                if ($internalCalledCmdlets -eq '') {
                    [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
                } else {
                    [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
                }
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
            }
    
            $mapping = @{
                List = 'Az.AppConfigurationdata.private\Get-AzAppConfigurationKeyValue_Get';
                Get = 'Az.AppConfigurationdata.private\Get-AzAppConfigurationKeyValue_Get1';
            }
            $cmdInfo = Get-Command -Name $mapping[$parameterSet]
            [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
            $scriptCmd = {& $wrappedCmd @PSBoundParameters}
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            throw
        }
    }
    
    process {
        try {
            $steppablePipeline.Process($_)
        } catch {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            throw
        }
    
        finally {
            $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
            $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
    
    }
    end {
        try {
            $steppablePipeline.End()
    
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
            if ($preTelemetryId -eq '') {
                [Microsoft.Azure.PowerShell.Cmdlets.AppConfigurationdata.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId
    
        } catch {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            throw
        }
    }
}