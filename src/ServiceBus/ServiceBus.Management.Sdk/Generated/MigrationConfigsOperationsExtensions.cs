// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ServiceBus
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MigrationConfigsOperations
    /// </summary>
    public static partial class MigrationConfigsOperationsExtensions
    {
        /// <summary>
        /// Gets all migrationConfigurations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static Microsoft.Rest.Azure.IPage<MigrationConfigProperties> List(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName)
        {
                return ((IMigrationConfigsOperations)operations).ListAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all migrationConfigurations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<MigrationConfigProperties>> ListAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates Migration configuration and starts migration of entities from
        /// Standard to Premium namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static MigrationConfigProperties CreateAndStartMigration(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, MigrationConfigProperties parameters)
        {
                return ((IMigrationConfigsOperations)operations).CreateAndStartMigrationAsync(resourceGroupName, namespaceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates Migration configuration and starts migration of entities from
        /// Standard to Premium namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MigrationConfigProperties> CreateAndStartMigrationAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, MigrationConfigProperties parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateAndStartMigrationWithHttpMessagesAsync(resourceGroupName, namespaceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a MigrationConfiguration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static void Delete(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName)
        {
                ((IMigrationConfigsOperations)operations).DeleteAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a MigrationConfiguration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves Migration Config
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static MigrationConfigProperties Get(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName)
        {
                return ((IMigrationConfigsOperations)operations).GetAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves Migration Config
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MigrationConfigProperties> GetAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation Completes Migration of entities by pointing the connection
        /// strings to Premium namespace and any entities created after the operation
        /// will be under Premium Namespace. CompleteMigration operation will fail when
        /// entity migration is in-progress.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static void CompleteMigration(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName)
        {
                ((IMigrationConfigsOperations)operations).CompleteMigrationAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation Completes Migration of entities by pointing the connection
        /// strings to Premium namespace and any entities created after the operation
        /// will be under Premium Namespace. CompleteMigration operation will fail when
        /// entity migration is in-progress.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CompleteMigrationAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CompleteMigrationWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation reverts Migration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static void Revert(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName)
        {
                ((IMigrationConfigsOperations)operations).RevertAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation reverts Migration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RevertAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RevertWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates Migration configuration and starts migration of entities from
        /// Standard to Premium namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        public static MigrationConfigProperties BeginCreateAndStartMigration(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, MigrationConfigProperties parameters)
        {
                return ((IMigrationConfigsOperations)operations).BeginCreateAndStartMigrationAsync(resourceGroupName, namespaceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates Migration configuration and starts migration of entities from
        /// Standard to Premium namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MigrationConfigProperties> BeginCreateAndStartMigrationAsync(this IMigrationConfigsOperations operations, string resourceGroupName, string namespaceName, MigrationConfigProperties parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateAndStartMigrationWithHttpMessagesAsync(resourceGroupName, namespaceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all migrationConfigurations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<MigrationConfigProperties> ListNext(this IMigrationConfigsOperations operations, string nextPageLink)
        {
                return ((IMigrationConfigsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all migrationConfigurations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<MigrationConfigProperties>> ListNextAsync(this IMigrationConfigsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
