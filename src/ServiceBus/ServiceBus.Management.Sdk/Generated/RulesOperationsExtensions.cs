// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ServiceBus
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RulesOperations
    /// </summary>
    public static partial class RulesOperationsExtensions
    {
        /// <summary>
        /// List all the rules within given topic-subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='skip'>
        /// Skip is only used if a previous operation returned a partial result. If a
        /// previous response contains a nextLink element, the value of the nextLink
        /// element will include a skip parameter that specifies a starting point to
        /// use for subsequent calls.
        /// </param>
        /// <param name='top'>
        /// May be used to limit the number of results to the most recent N
        /// usageDetails.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Rule> ListBySubscriptions(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, int? skip = default(int?), int? top = default(int?))
        {
                return ((IRulesOperations)operations).ListBySubscriptionsAsync(resourceGroupName, namespaceName, topicName, subscriptionName, skip, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all the rules within given topic-subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='skip'>
        /// Skip is only used if a previous operation returned a partial result. If a
        /// previous response contains a nextLink element, the value of the nextLink
        /// element will include a skip parameter that specifies a starting point to
        /// use for subsequent calls.
        /// </param>
        /// <param name='top'>
        /// May be used to limit the number of results to the most recent N
        /// usageDetails.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Rule>> ListBySubscriptionsAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionsWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, skip, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a new rule and updates an existing rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='ruleName'>
        /// The rule name.
        /// </param>
        public static Rule CreateOrUpdate(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, Rule parameters)
        {
                return ((IRulesOperations)operations).CreateOrUpdateAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new rule and updates an existing rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='ruleName'>
        /// The rule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Rule> CreateOrUpdateAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, Rule parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='ruleName'>
        /// The rule name.
        /// </param>
        public static void Delete(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName)
        {
                ((IRulesOperations)operations).DeleteAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='ruleName'>
        /// The rule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves the description for the specified rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='ruleName'>
        /// The rule name.
        /// </param>
        public static Rule Get(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName)
        {
                return ((IRulesOperations)operations).GetAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the description for the specified rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name
        /// </param>
        /// <param name='topicName'>
        /// The topic name.
        /// </param>
        /// <param name='subscriptionName'>
        /// The subscription name.
        /// </param>
        /// <param name='ruleName'>
        /// The rule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Rule> GetAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all the rules within given topic-subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Rule> ListBySubscriptionsNext(this IRulesOperations operations, string nextPageLink)
        {
                return ((IRulesOperations)operations).ListBySubscriptionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all the rules within given topic-subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Rule>> ListBySubscriptionsNextAsync(this IRulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
