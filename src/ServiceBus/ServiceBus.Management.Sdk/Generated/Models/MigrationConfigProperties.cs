// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using System.Linq;

    /// <summary>
    /// Single item in List or Get Migration Config operation
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class MigrationConfigProperties : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the MigrationConfigProperties class.
        /// </summary>
        public MigrationConfigProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrationConfigProperties class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.EventHub/Namespaces&#34; or
        /// &#34;Microsoft.EventHub/Namespaces/EventHubs&#34;
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="systemData">The system meta data relating to this resource.
        /// </param>

        /// <param name="provisioningState">Provisioning state of Migration Configuration
        /// </param>

        /// <param name="pendingReplicationOperationsCount">Number of entities pending to be replicated.
        /// </param>

        /// <param name="targetNamespace">Existing premium Namespace ARM Id name which has no entities, will be used
        /// for migration
        /// </param>

        /// <param name="postMigrationName">Name to access Standard Namespace after migration
        /// </param>

        /// <param name="migrationState">State in which Standard to Premium Migration is, possible values : Unknown,
        /// Reverting, Completing, Initiating, Syncing, Active
        /// </param>
        public MigrationConfigProperties(string id = default(string), string name = default(string), string type = default(string), string location = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), long? pendingReplicationOperationsCount = default(long?), string targetNamespace = default(string), string postMigrationName = default(string), string migrationState = default(string))

        : base(id, name, type, location)
        {
            this.SystemData = systemData;
            this.ProvisioningState = provisioningState;
            this.PendingReplicationOperationsCount = pendingReplicationOperationsCount;
            this.TargetNamespace = targetNamespace;
            this.PostMigrationName = postMigrationName;
            this.MigrationState = migrationState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the system meta data relating to this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets provisioning state of Migration Configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets number of entities pending to be replicated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.pendingReplicationOperationsCount")]
        public long? PendingReplicationOperationsCount {get; private set; }

        /// <summary>
        /// Gets or sets existing premium Namespace ARM Id name which has no entities,
        /// will be used for migration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetNamespace")]
        public string TargetNamespace {get; set; }

        /// <summary>
        /// Gets or sets name to access Standard Namespace after migration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.postMigrationName")]
        public string PostMigrationName {get; set; }

        /// <summary>
        /// Gets state in which Standard to Premium Migration is, possible values :
        /// Unknown, Reverting, Completing, Initiating, Syncing, Active
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.migrationState")]
        public string MigrationState {get; private set; }
    }
}