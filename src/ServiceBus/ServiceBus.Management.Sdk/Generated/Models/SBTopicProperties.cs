// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using System.Linq;

    /// <summary>
    /// The Topic Properties definition.
    /// </summary>
    public partial class SBTopicProperties
    {
        /// <summary>
        /// Initializes a new instance of the SBTopicProperties class.
        /// </summary>
        public SBTopicProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SBTopicProperties class.
        /// </summary>

        /// <param name="sizeInBytes">Size of the topic, in bytes.
        /// </param>

        /// <param name="createdAt">Exact time the message was created.
        /// </param>

        /// <param name="updatedAt">The exact time the message was updated.
        /// </param>

        /// <param name="accessedAt">Last time the message was sent, or a request was received, for this topic.
        /// </param>

        /// <param name="subscriptionCount">Number of subscriptions.
        /// </param>

        /// <param name="countDetails">Message count details
        /// </param>

        /// <param name="defaultMessageTimeToLive">ISO 8601 Default message timespan to live value. This is the duration after
        /// which the message expires, starting from when the message is sent to
        /// Service Bus. This is the default value used when TimeToLive is not set on a
        /// message itself.
        /// </param>

        /// <param name="maxSizeInMegabytes">Maximum size of the topic in megabytes, which is the size of the memory
        /// allocated for the topic. Default is 1024.
        /// </param>

        /// <param name="maxMessageSizeInKilobytes">Maximum size (in KB) of the message payload that can be accepted by the
        /// topic. This property is only used in Premium today and default is 1024.
        /// </param>

        /// <param name="requiresDuplicateDetection">Value indicating if this topic requires duplicate detection.
        /// </param>

        /// <param name="duplicateDetectionHistoryTimeWindow">ISO8601 timespan structure that defines the duration of the duplicate
        /// detection history. The default value is 10 minutes.
        /// </param>

        /// <param name="enableBatchedOperations">Value that indicates whether server-side batched operations are enabled.
        /// </param>

        /// <param name="status">Enumerates the possible values for the status of a messaging entity.
        /// Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Restoring&#39;, &#39;SendDisabled&#39;,
        /// &#39;ReceiveDisabled&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Renaming&#39;, &#39;Unknown&#39;</param>

        /// <param name="supportOrdering">Value that indicates whether the topic supports ordering.
        /// </param>

        /// <param name="autoDeleteOnIdle">ISO 8601 timespan idle interval after which the topic is automatically
        /// deleted. The minimum duration is 5 minutes.
        /// </param>

        /// <param name="enablePartitioning">Value that indicates whether the topic to be partitioned across multiple
        /// message brokers is enabled.
        /// </param>

        /// <param name="enableExpress">Value that indicates whether Express Entities are enabled. An express topic
        /// holds a message in memory temporarily before writing it to persistent
        /// storage.
        /// </param>
        public SBTopicProperties(long? sizeInBytes = default(long?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), System.DateTime? accessedAt = default(System.DateTime?), int? subscriptionCount = default(int?), MessageCountDetails countDetails = default(MessageCountDetails), System.TimeSpan? defaultMessageTimeToLive = default(System.TimeSpan?), int? maxSizeInMegabytes = default(int?), long? maxMessageSizeInKilobytes = default(long?), bool? requiresDuplicateDetection = default(bool?), System.TimeSpan? duplicateDetectionHistoryTimeWindow = default(System.TimeSpan?), bool? enableBatchedOperations = default(bool?), EntityStatus? status = default(EntityStatus?), bool? supportOrdering = default(bool?), System.TimeSpan? autoDeleteOnIdle = default(System.TimeSpan?), bool? enablePartitioning = default(bool?), bool? enableExpress = default(bool?))

        {
            this.SizeInBytes = sizeInBytes;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.AccessedAt = accessedAt;
            this.SubscriptionCount = subscriptionCount;
            this.CountDetails = countDetails;
            this.DefaultMessageTimeToLive = defaultMessageTimeToLive;
            this.MaxSizeInMegabytes = maxSizeInMegabytes;
            this.MaxMessageSizeInKilobytes = maxMessageSizeInKilobytes;
            this.RequiresDuplicateDetection = requiresDuplicateDetection;
            this.DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            this.EnableBatchedOperations = enableBatchedOperations;
            this.Status = status;
            this.SupportOrdering = supportOrdering;
            this.AutoDeleteOnIdle = autoDeleteOnIdle;
            this.EnablePartitioning = enablePartitioning;
            this.EnableExpress = enableExpress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets size of the topic, in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sizeInBytes")]
        public long? SizeInBytes {get; private set; }

        /// <summary>
        /// Gets exact time the message was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt {get; private set; }

        /// <summary>
        /// Gets the exact time the message was updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt {get; private set; }

        /// <summary>
        /// Gets last time the message was sent, or a request was received, for this
        /// topic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessedAt")]
        public System.DateTime? AccessedAt {get; private set; }

        /// <summary>
        /// Gets number of subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionCount")]
        public int? SubscriptionCount {get; private set; }

        /// <summary>
        /// Gets message count details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "countDetails")]
        public MessageCountDetails CountDetails {get; private set; }

        /// <summary>
        /// Gets or sets iSO 8601 Default message timespan to live value. This is the
        /// duration after which the message expires, starting from when the message is
        /// sent to Service Bus. This is the default value used when TimeToLive is not
        /// set on a message itself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultMessageTimeToLive")]
        public System.TimeSpan? DefaultMessageTimeToLive {get; set; }

        /// <summary>
        /// Gets or sets maximum size of the topic in megabytes, which is the size of
        /// the memory allocated for the topic. Default is 1024.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxSizeInMegabytes")]
        public int? MaxSizeInMegabytes {get; set; }

        /// <summary>
        /// Gets or sets maximum size (in KB) of the message payload that can be
        /// accepted by the topic. This property is only used in Premium today and
        /// default is 1024.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxMessageSizeInKilobytes")]
        public long? MaxMessageSizeInKilobytes {get; set; }

        /// <summary>
        /// Gets or sets value indicating if this topic requires duplicate detection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requiresDuplicateDetection")]
        public bool? RequiresDuplicateDetection {get; set; }

        /// <summary>
        /// Gets or sets iSO8601 timespan structure that defines the duration of the
        /// duplicate detection history. The default value is 10 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "duplicateDetectionHistoryTimeWindow")]
        public System.TimeSpan? DuplicateDetectionHistoryTimeWindow {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether server-side batched operations
        /// are enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBatchedOperations")]
        public bool? EnableBatchedOperations {get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the status of a messaging
        /// entity. Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Restoring&#39;, &#39;SendDisabled&#39;, &#39;ReceiveDisabled&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Renaming&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public EntityStatus? Status {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the topic supports ordering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportOrdering")]
        public bool? SupportOrdering {get; set; }

        /// <summary>
        /// Gets or sets iSO 8601 timespan idle interval after which the topic is
        /// automatically deleted. The minimum duration is 5 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoDeleteOnIdle")]
        public System.TimeSpan? AutoDeleteOnIdle {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the topic to be partitioned
        /// across multiple message brokers is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enablePartitioning")]
        public bool? EnablePartitioning {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether Express Entities are enabled. An
        /// express topic holds a message in memory temporarily before writing it to
        /// persistent storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableExpress")]
        public bool? EnableExpress {get; set; }
    }
}