// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using System.Linq;

    /// <summary>
    /// Description of Subscription Resource.
    /// </summary>
    public partial class SBSubscriptionProperties
    {
        /// <summary>
        /// Initializes a new instance of the SBSubscriptionProperties class.
        /// </summary>
        public SBSubscriptionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SBSubscriptionProperties class.
        /// </summary>

        /// <param name="messageCount">Number of messages.
        /// </param>

        /// <param name="createdAt">Exact time the message was created.
        /// </param>

        /// <param name="accessedAt">Last time there was a receive request to this subscription.
        /// </param>

        /// <param name="updatedAt">The exact time the message was updated.
        /// </param>

        /// <param name="countDetails">Message count details
        /// </param>

        /// <param name="lockDuration">ISO 8061 lock duration timespan for the subscription. The default value is
        /// 1 minute.
        /// </param>

        /// <param name="requiresSession">Value indicating if a subscription supports the concept of sessions.
        /// </param>

        /// <param name="defaultMessageTimeToLive">ISO 8061 Default message timespan to live value. This is the duration after
        /// which the message expires, starting from when the message is sent to
        /// Service Bus. This is the default value used when TimeToLive is not set on a
        /// message itself.
        /// </param>

        /// <param name="deadLetteringOnFilterEvaluationExceptions">Value that indicates whether a subscription has dead letter support on
        /// filter evaluation exceptions.
        /// </param>

        /// <param name="deadLetteringOnMessageExpiration">Value that indicates whether a subscription has dead letter support when a
        /// message expires.
        /// </param>

        /// <param name="duplicateDetectionHistoryTimeWindow">ISO 8601 timeSpan structure that defines the duration of the duplicate
        /// detection history. The default value is 10 minutes.
        /// </param>

        /// <param name="maxDeliveryCount">Number of maximum deliveries.
        /// </param>

        /// <param name="status">Enumerates the possible values for the status of a messaging entity.
        /// Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Restoring&#39;, &#39;SendDisabled&#39;,
        /// &#39;ReceiveDisabled&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Renaming&#39;, &#39;Unknown&#39;</param>

        /// <param name="enableBatchedOperations">Value that indicates whether server-side batched operations are enabled.
        /// </param>

        /// <param name="autoDeleteOnIdle">ISO 8061 timeSpan idle interval after which the topic is automatically
        /// deleted. The minimum duration is 5 minutes.
        /// </param>

        /// <param name="forwardTo">Queue/Topic name to forward the messages
        /// </param>

        /// <param name="forwardDeadLetteredMessagesTo">Queue/Topic name to forward the Dead Letter message
        /// </param>

        /// <param name="isClientAffine">Value that indicates whether the subscription has an affinity to the client
        /// id.
        /// </param>

        /// <param name="clientAffineProperties">Properties specific to client affine subscriptions.
        /// </param>
        public SBSubscriptionProperties(long? messageCount = default(long?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? accessedAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), MessageCountDetails countDetails = default(MessageCountDetails), System.TimeSpan? lockDuration = default(System.TimeSpan?), bool? requiresSession = default(bool?), System.TimeSpan? defaultMessageTimeToLive = default(System.TimeSpan?), bool? deadLetteringOnFilterEvaluationExceptions = default(bool?), bool? deadLetteringOnMessageExpiration = default(bool?), System.TimeSpan? duplicateDetectionHistoryTimeWindow = default(System.TimeSpan?), int? maxDeliveryCount = default(int?), EntityStatus? status = default(EntityStatus?), bool? enableBatchedOperations = default(bool?), System.TimeSpan? autoDeleteOnIdle = default(System.TimeSpan?), string forwardTo = default(string), string forwardDeadLetteredMessagesTo = default(string), bool? isClientAffine = default(bool?), SBClientAffineProperties clientAffineProperties = default(SBClientAffineProperties))

        {
            this.MessageCount = messageCount;
            this.CreatedAt = createdAt;
            this.AccessedAt = accessedAt;
            this.UpdatedAt = updatedAt;
            this.CountDetails = countDetails;
            this.LockDuration = lockDuration;
            this.RequiresSession = requiresSession;
            this.DefaultMessageTimeToLive = defaultMessageTimeToLive;
            this.DeadLetteringOnFilterEvaluationExceptions = deadLetteringOnFilterEvaluationExceptions;
            this.DeadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            this.DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            this.MaxDeliveryCount = maxDeliveryCount;
            this.Status = status;
            this.EnableBatchedOperations = enableBatchedOperations;
            this.AutoDeleteOnIdle = autoDeleteOnIdle;
            this.ForwardTo = forwardTo;
            this.ForwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            this.IsClientAffine = isClientAffine;
            this.ClientAffineProperties = clientAffineProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets number of messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageCount")]
        public long? MessageCount {get; private set; }

        /// <summary>
        /// Gets exact time the message was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt {get; private set; }

        /// <summary>
        /// Gets last time there was a receive request to this subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessedAt")]
        public System.DateTime? AccessedAt {get; private set; }

        /// <summary>
        /// Gets the exact time the message was updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt {get; private set; }

        /// <summary>
        /// Gets message count details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "countDetails")]
        public MessageCountDetails CountDetails {get; private set; }

        /// <summary>
        /// Gets or sets iSO 8061 lock duration timespan for the subscription. The
        /// default value is 1 minute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lockDuration")]
        public System.TimeSpan? LockDuration {get; set; }

        /// <summary>
        /// Gets or sets value indicating if a subscription supports the concept of
        /// sessions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requiresSession")]
        public bool? RequiresSession {get; set; }

        /// <summary>
        /// Gets or sets iSO 8061 Default message timespan to live value. This is the
        /// duration after which the message expires, starting from when the message is
        /// sent to Service Bus. This is the default value used when TimeToLive is not
        /// set on a message itself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultMessageTimeToLive")]
        public System.TimeSpan? DefaultMessageTimeToLive {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether a subscription has dead letter
        /// support on filter evaluation exceptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deadLetteringOnFilterEvaluationExceptions")]
        public bool? DeadLetteringOnFilterEvaluationExceptions {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether a subscription has dead letter
        /// support when a message expires.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deadLetteringOnMessageExpiration")]
        public bool? DeadLetteringOnMessageExpiration {get; set; }

        /// <summary>
        /// Gets or sets iSO 8601 timeSpan structure that defines the duration of the
        /// duplicate detection history. The default value is 10 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "duplicateDetectionHistoryTimeWindow")]
        public System.TimeSpan? DuplicateDetectionHistoryTimeWindow {get; set; }

        /// <summary>
        /// Gets or sets number of maximum deliveries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxDeliveryCount")]
        public int? MaxDeliveryCount {get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the status of a messaging
        /// entity. Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Restoring&#39;, &#39;SendDisabled&#39;, &#39;ReceiveDisabled&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Renaming&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public EntityStatus? Status {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether server-side batched operations
        /// are enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBatchedOperations")]
        public bool? EnableBatchedOperations {get; set; }

        /// <summary>
        /// Gets or sets iSO 8061 timeSpan idle interval after which the topic is
        /// automatically deleted. The minimum duration is 5 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoDeleteOnIdle")]
        public System.TimeSpan? AutoDeleteOnIdle {get; set; }

        /// <summary>
        /// Gets or sets queue/Topic name to forward the messages
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "forwardTo")]
        public string ForwardTo {get; set; }

        /// <summary>
        /// Gets or sets queue/Topic name to forward the Dead Letter message
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "forwardDeadLetteredMessagesTo")]
        public string ForwardDeadLetteredMessagesTo {get; set; }

        /// <summary>
        /// Gets or sets value that indicates whether the subscription has an affinity
        /// to the client id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isClientAffine")]
        public bool? IsClientAffine {get; set; }

        /// <summary>
        /// Gets or sets properties specific to client affine subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientAffineProperties")]
        public SBClientAffineProperties ClientAffineProperties {get; set; }
    }
}