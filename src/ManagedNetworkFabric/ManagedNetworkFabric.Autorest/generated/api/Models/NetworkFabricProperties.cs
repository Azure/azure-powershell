// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Extensions;

    /// <summary>Network Fabric Properties defines the properties of the resource.</summary>
    public partial class NetworkFabricProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResource __annotationResource = new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.AnnotationResource();

        /// <summary>Backing field for <see cref="AdministrativeState" /> property.</summary>
        private string _administrativeState;

        /// <summary>Administrative state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string AdministrativeState { get => this._administrativeState; }

        /// <summary>Switch configuration description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public string Annotation { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResourceInternal)__annotationResource).Annotation; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResourceInternal)__annotationResource).Annotation = value ?? null; }

        /// <summary>Backing field for <see cref="ConfigurationState" /> property.</summary>
        private string _configurationState;

        /// <summary>Configuration state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string ConfigurationState { get => this._configurationState; }

        /// <summary>Backing field for <see cref="FabricAsn" /> property.</summary>
        private long _fabricAsn;

        /// <summary>ASN of CE devices for CE/PE connectivity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public long FabricAsn { get => this._fabricAsn; set => this._fabricAsn = value; }

        /// <summary>Backing field for <see cref="FabricVersion" /> property.</summary>
        private string _fabricVersion;

        /// <summary>The version of Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string FabricVersion { get => this._fabricVersion; }

        /// <summary>Backing field for <see cref="Ipv4Prefix" /> property.</summary>
        private string _ipv4Prefix;

        /// <summary>IPv4Prefix for Management Network. Example: 10.1.0.0/19.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string Ipv4Prefix { get => this._ipv4Prefix; set => this._ipv4Prefix = value; }

        /// <summary>Backing field for <see cref="Ipv6Prefix" /> property.</summary>
        private string _ipv6Prefix;

        /// <summary>IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string Ipv6Prefix { get => this._ipv6Prefix; set => this._ipv6Prefix = value; }

        /// <summary>Backing field for <see cref="L2IsolationDomain" /> property.</summary>
        private System.Collections.Generic.List<string> _l2IsolationDomain;

        /// <summary>List of L2 Isolation Domain resource IDs under the Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> L2IsolationDomain { get => this._l2IsolationDomain; }

        /// <summary>Backing field for <see cref="L3IsolationDomain" /> property.</summary>
        private System.Collections.Generic.List<string> _l3IsolationDomain;

        /// <summary>List of L3 Isolation Domain resource IDs under the Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> L3IsolationDomain { get => this._l3IsolationDomain; }

        /// <summary>Backing field for <see cref="ManagementNetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationProperties _managementNetworkConfiguration;

        /// <summary>Configuration to be used to setup the management network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationProperties ManagementNetworkConfiguration { get => (this._managementNetworkConfiguration = this._managementNetworkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ManagementNetworkConfigurationProperties()); set => this._managementNetworkConfiguration = value; }

        /// <summary>Internal Acessors for AdministrativeState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.AdministrativeState { get => this._administrativeState; set { {_administrativeState = value;} } }

        /// <summary>Internal Acessors for ConfigurationState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.ConfigurationState { get => this._configurationState; set { {_configurationState = value;} } }

        /// <summary>Internal Acessors for FabricVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.FabricVersion { get => this._fabricVersion; set { {_fabricVersion = value;} } }

        /// <summary>Internal Acessors for L2IsolationDomain</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.L2IsolationDomain { get => this._l2IsolationDomain; set { {_l2IsolationDomain = value;} } }

        /// <summary>Internal Acessors for L3IsolationDomain</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.L3IsolationDomain { get => this._l3IsolationDomain; set { {_l3IsolationDomain = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for Rack</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.Rack { get => this._rack; set { {_rack = value;} } }

        /// <summary>Internal Acessors for RouterId</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPropertiesInternal.RouterId { get => this._routerId; set { {_routerId = value;} } }

        /// <summary>Backing field for <see cref="NetworkFabricControllerId" /> property.</summary>
        private string _networkFabricControllerId;

        /// <summary>Azure resource ID for the NetworkFabricController the NetworkFabric belongs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string NetworkFabricControllerId { get => this._networkFabricControllerId; set => this._networkFabricControllerId = value; }

        /// <summary>Backing field for <see cref="NetworkFabricSku" /> property.</summary>
        private string _networkFabricSku;

        /// <summary>
        /// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported
        /// racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string NetworkFabricSku { get => this._networkFabricSku; set => this._networkFabricSku = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>
        /// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this
        /// process, the states keep changing based on the status of NFC provisioning.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="Rack" /> property.</summary>
        private System.Collections.Generic.List<string> _rack;

        /// <summary>
        /// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Rack { get => this._rack; }

        /// <summary>Backing field for <see cref="RackCount" /> property.</summary>
        private int? _rackCount;

        /// <summary>Number of compute racks associated to Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public int? RackCount { get => this._rackCount; set => this._rackCount = value; }

        /// <summary>Backing field for <see cref="RouterId" /> property.</summary>
        private System.Collections.Generic.List<string> _routerId;

        /// <summary>Array of router IDs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> RouterId { get => this._routerId; }

        /// <summary>Backing field for <see cref="ServerCountPerRack" /> property.</summary>
        private int _serverCountPerRack;

        /// <summary>Number of servers.Possible values are from 1-16.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public int ServerCountPerRack { get => this._serverCountPerRack; set => this._serverCountPerRack = value; }

        /// <summary>Backing field for <see cref="TerminalServerConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITerminalServerConfiguration _terminalServerConfiguration;

        /// <summary>Network and credentials configuration currently applied to terminal server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITerminalServerConfiguration TerminalServerConfiguration { get => (this._terminalServerConfiguration = this._terminalServerConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.TerminalServerConfiguration()); set => this._terminalServerConfiguration = value; }

        /// <summary>Creates an new <see cref="NetworkFabricProperties" /> instance.</summary>
        public NetworkFabricProperties()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__annotationResource), __annotationResource);
            await eventListener.AssertObjectIsValid(nameof(__annotationResource), __annotationResource);
        }
    }
    /// Network Fabric Properties defines the properties of the resource.
    public partial interface INetworkFabricProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResource
    {
        /// <summary>Administrative state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Administrative state of the resource.",
        SerializedName = @"administrativeState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Enabled", "Disabled", "MAT", "RMA")]
        string AdministrativeState { get;  }
        /// <summary>Configuration state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Configuration state of the resource.",
        SerializedName = @"configurationState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Succeeded", "Failed", "Rejected", "Accepted", "Provisioned", "ErrorProvisioning", "Deprovisioning", "Deprovisioned", "ErrorDeprovisioning", "DeferredControl")]
        string ConfigurationState { get;  }
        /// <summary>ASN of CE devices for CE/PE connectivity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ASN of CE devices for CE/PE connectivity.",
        SerializedName = @"fabricASN",
        PossibleTypes = new [] { typeof(long) })]
        long FabricAsn { get; set; }
        /// <summary>The version of Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The version of Network Fabric.",
        SerializedName = @"fabricVersion",
        PossibleTypes = new [] { typeof(string) })]
        string FabricVersion { get;  }
        /// <summary>IPv4Prefix for Management Network. Example: 10.1.0.0/19.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv4Prefix for Management Network. Example: 10.1.0.0/19.",
        SerializedName = @"ipv4Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv4Prefix { get; set; }
        /// <summary>IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59",
        SerializedName = @"ipv6Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv6Prefix { get; set; }
        /// <summary>List of L2 Isolation Domain resource IDs under the Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of L2 Isolation Domain resource IDs under the Network Fabric.",
        SerializedName = @"l2IsolationDomains",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> L2IsolationDomain { get;  }
        /// <summary>List of L3 Isolation Domain resource IDs under the Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of L3 Isolation Domain resource IDs under the Network Fabric.",
        SerializedName = @"l3IsolationDomains",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> L3IsolationDomain { get;  }
        /// <summary>Configuration to be used to setup the management network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Configuration to be used to setup the management network.",
        SerializedName = @"managementNetworkConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationProperties ManagementNetworkConfiguration { get; set; }
        /// <summary>Azure resource ID for the NetworkFabricController the NetworkFabric belongs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Azure resource ID for the NetworkFabricController the NetworkFabric belongs.",
        SerializedName = @"networkFabricControllerId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkFabricControllerId { get; set; }
        /// <summary>
        /// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported
        /// racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.",
        SerializedName = @"networkFabricSku",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkFabricSku { get; set; }
        /// <summary>
        /// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this
        /// process, the states keep changing based on the status of NFC provisioning.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Accepted", "Succeeded", "Updating", "Deleting", "Failed", "Canceled")]
        string ProvisioningState { get;  }
        /// <summary>
        /// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.",
        SerializedName = @"racks",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Rack { get;  }
        /// <summary>Number of compute racks associated to Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of compute racks associated to Network Fabric.",
        SerializedName = @"rackCount",
        PossibleTypes = new [] { typeof(int) })]
        int? RackCount { get; set; }
        /// <summary>Array of router IDs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Array of router IDs.",
        SerializedName = @"routerIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RouterId { get;  }
        /// <summary>Number of servers.Possible values are from 1-16.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of servers.Possible values are from 1-16.",
        SerializedName = @"serverCountPerRack",
        PossibleTypes = new [] { typeof(int) })]
        int ServerCountPerRack { get; set; }
        /// <summary>Network and credentials configuration currently applied to terminal server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Network and credentials configuration currently applied to terminal server.",
        SerializedName = @"terminalServerConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITerminalServerConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITerminalServerConfiguration TerminalServerConfiguration { get; set; }

    }
    /// Network Fabric Properties defines the properties of the resource.
    internal partial interface INetworkFabricPropertiesInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResourceInternal
    {
        /// <summary>Administrative state of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Enabled", "Disabled", "MAT", "RMA")]
        string AdministrativeState { get; set; }
        /// <summary>Configuration state of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Succeeded", "Failed", "Rejected", "Accepted", "Provisioned", "ErrorProvisioning", "Deprovisioning", "Deprovisioned", "ErrorDeprovisioning", "DeferredControl")]
        string ConfigurationState { get; set; }
        /// <summary>ASN of CE devices for CE/PE connectivity.</summary>
        long FabricAsn { get; set; }
        /// <summary>The version of Network Fabric.</summary>
        string FabricVersion { get; set; }
        /// <summary>IPv4Prefix for Management Network. Example: 10.1.0.0/19.</summary>
        string Ipv4Prefix { get; set; }
        /// <summary>IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59</summary>
        string Ipv6Prefix { get; set; }
        /// <summary>List of L2 Isolation Domain resource IDs under the Network Fabric.</summary>
        System.Collections.Generic.List<string> L2IsolationDomain { get; set; }
        /// <summary>List of L3 Isolation Domain resource IDs under the Network Fabric.</summary>
        System.Collections.Generic.List<string> L3IsolationDomain { get; set; }
        /// <summary>Configuration to be used to setup the management network.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationProperties ManagementNetworkConfiguration { get; set; }
        /// <summary>Azure resource ID for the NetworkFabricController the NetworkFabric belongs.</summary>
        string NetworkFabricControllerId { get; set; }
        /// <summary>
        /// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported
        /// racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
        /// </summary>
        string NetworkFabricSku { get; set; }
        /// <summary>
        /// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this
        /// process, the states keep changing based on the status of NFC provisioning.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Accepted", "Succeeded", "Updating", "Deleting", "Failed", "Canceled")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
        /// </summary>
        System.Collections.Generic.List<string> Rack { get; set; }
        /// <summary>Number of compute racks associated to Network Fabric.</summary>
        int? RackCount { get; set; }
        /// <summary>Array of router IDs.</summary>
        System.Collections.Generic.List<string> RouterId { get; set; }
        /// <summary>Number of servers.Possible values are from 1-16.</summary>
        int ServerCountPerRack { get; set; }
        /// <summary>Network and credentials configuration currently applied to terminal server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITerminalServerConfiguration TerminalServerConfiguration { get; set; }

    }
}