
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create InternalNetwork PUT method.
.Description
Create InternalNetwork PUT method.
.Example
$bgpConfiguration = @{
    AllowAs = 2
    AllowAsOverride = "Enable"
    BfdConfiguration = @{
        IntervalInMilliSecond = 300
        Multiplier = 3
    }
    DefaultRouteOriginate = "True"
    Ipv4ListenRangePrefix = @("20.10.10.2/28")
    Ipv4NeighborAddress = @(@{
        Address = "20.10.10.2"
    })
    PeerAsn = 65047
}
$connectedIPv4Subnet = @(@{
    Prefix = "20.10.10.2/28"
})
$exportRoutePolicy = @{
    ExportIpv4RoutePolicyId = "/subscriptions/subscriptionId/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/RoutePolicyName"
    ExportIpv6RoutePolicyId = "/subscriptions/subscriptionId/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/RoutePolicyName"
}
$importRoutePolicy = @{
    ImportIpv4RoutePolicyId = "/subscriptions/subscriptionId/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/RoutePolicyName"
    ImportIpv6RoutePolicyId = "/subscriptions/subscriptionId/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/RoutePolicyName"
}
$staticRouteConfigurationBfdConfiguration = @{
    IntervalInMilliSecond = 300
    Multiplier = 3
}
$staticRouteConfigurationIpv4Route = @(@{
    NextHop = @("10.0.0.1")
    Prefix = "10.1.0.0/24"
})

New-AzNetworkFabricInternalNetwork -Name $name -L3IsolationDomainName $l3domainName -ResourceGroupName $resourceGroupName -VlanId "701" -BgpConfiguration $bgpConfiguration -ConnectedIPv4Subnet $connectedIPv4Subnet -EgressAclId "/subscriptions/subscriptionId/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/aclName" -ExportRoutePolicy $exportRoutePolicy -Extension "NoExtension" -ImportRoutePolicy $importRoutePolicy -IngressAclId "/subscriptions/subscriptionId/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/aclName" -IsMonitoringEnabled "True" -Mtu 1500 -StaticRouteConfigurationBfdConfiguration $staticRouteConfigurationBfdConfiguration -StaticRouteConfigurationExtension "NPB" -StaticRouteConfigurationIpv4Route $staticRouteConfigurationIpv4Route

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IInternalNetwork
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagedNetworkFabricIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IInternalNetwork
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BGPCONFIGURATION <IInternalNetworkPropertiesBgpConfiguration>: BGP configuration properties.
  [AllowAs <Int32?>]: Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
  [AllowAsOverride <String>]: Enable Or Disable state.
  [BfdConfigurationIntervalInMilliSecond <Int32?>]: Interval in milliseconds. Example: 300.
  [BfdConfigurationMultiplier <Int32?>]: Multiplier for the Bfd Configuration. Example: 5.
  [DefaultRouteOriginate <String>]: Originate a defaultRoute. Ex: "True" | "False".
  [Ipv4ListenRangePrefix <List<String>>]: List of BGP IPv4 Listen Range prefixes.
  [Ipv4NeighborAddress <List<INeighborAddress>>]: List with stringified IPv4 Neighbor Addresses.
    [Address <String>]: IP Address.
  [Ipv6ListenRangePrefix <List<String>>]: List of BGP IPv6 Listen Ranges prefixes.
  [Ipv6NeighborAddress <List<INeighborAddress>>]: List with stringified IPv6 Neighbor Address.
  [PeerAsn <Int64?>]: Peer ASN. Example: 65047.
  [Annotation <String>]: Switch configuration description.

BODY <IInternalNetwork>: Defines the Internal Network resource.
  VlanId <Int32>: Vlan identifier. Example: 1001.
  [Annotation <String>]: Switch configuration description.
  [BgpConfiguration <IInternalNetworkPropertiesBgpConfiguration>]: BGP configuration properties.
    [AllowAs <Int32?>]: Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
    [AllowAsOverride <String>]: Enable Or Disable state.
    [BfdConfigurationIntervalInMilliSecond <Int32?>]: Interval in milliseconds. Example: 300.
    [BfdConfigurationMultiplier <Int32?>]: Multiplier for the Bfd Configuration. Example: 5.
    [DefaultRouteOriginate <String>]: Originate a defaultRoute. Ex: "True" | "False".
    [Ipv4ListenRangePrefix <List<String>>]: List of BGP IPv4 Listen Range prefixes.
    [Ipv4NeighborAddress <List<INeighborAddress>>]: List with stringified IPv4 Neighbor Addresses.
      [Address <String>]: IP Address.
    [Ipv6ListenRangePrefix <List<String>>]: List of BGP IPv6 Listen Ranges prefixes.
    [Ipv6NeighborAddress <List<INeighborAddress>>]: List with stringified IPv6 Neighbor Address.
    [PeerAsn <Int64?>]: Peer ASN. Example: 65047.
    [Annotation <String>]: Switch configuration description.
  [ConnectedIPv4Subnet <List<IConnectedSubnet>>]: List of Connected IPv4 Subnets.
    Prefix <String>: Prefix of the Connected Subnet.
  [ConnectedIPv6Subnet <List<IConnectedSubnet>>]: List of connected IPv6 Subnets.
  [EgressAclId <String>]: Egress Acl. ARM resource ID of Access Control Lists.
  [ExportRoutePolicy <IExportRoutePolicy>]: Export Route Policy either IPv4 or IPv6.
    [ExportIpv4RoutePolicyId <String>]: ARM resource ID of RoutePolicy.
    [ExportIpv6RoutePolicyId <String>]: ARM resource ID of RoutePolicy.
  [ExportRoutePolicyId <String>]: ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
  [Extension <String>]: Extension. Example: NoExtension | NPB.
  [ImportRoutePolicy <IImportRoutePolicy>]: Import Route Policy either IPv4 or IPv6.
    [ImportIpv4RoutePolicyId <String>]: ARM resource ID of RoutePolicy.
    [ImportIpv6RoutePolicyId <String>]: ARM resource ID of RoutePolicy.
  [ImportRoutePolicyId <String>]: ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
  [IngressAclId <String>]: Ingress Acl. ARM resource ID of Access Control Lists.
  [IsMonitoringEnabled <String>]: To check whether monitoring of internal network is enabled or not.
  [Mtu <Int32?>]: Maximum transmission unit. Default value is 1500.
  [StaticRouteConfigurationBfdConfiguration <IBfdConfiguration>]: BFD configuration properties
    [IntervalInMilliSecond <Int32?>]: Interval in milliseconds. Example: 300.
    [Multiplier <Int32?>]: Multiplier for the Bfd Configuration. Example: 5.
  [StaticRouteConfigurationExtension <String>]: Extension. Example: NoExtension | NPB.
  [StaticRouteConfigurationIpv4Route <List<IStaticRouteProperties>>]: List of IPv4 Routes.
    NextHop <List<String>>: List of next hop addresses.
    Prefix <String>: Prefix of the route.
  [StaticRouteConfigurationIpv6Route <List<IStaticRouteProperties>>]: List of IPv6 Routes.

CONNECTEDIPV4SUBNET <IConnectedSubnet[]>: List of Connected IPv4 Subnets.
  Prefix <String>: Prefix of the Connected Subnet.
  [Annotation <String>]: Switch configuration description.

CONNECTEDIPV6SUBNET <IConnectedSubnet[]>: List of connected IPv6 Subnets.
  Prefix <String>: Prefix of the Connected Subnet.
  [Annotation <String>]: Switch configuration description.

EXPORTROUTEPOLICY <IExportRoutePolicy>: Export Route Policy either IPv4 or IPv6.
  [ExportIpv4RoutePolicyId <String>]: ARM resource ID of RoutePolicy.
  [ExportIpv6RoutePolicyId <String>]: ARM resource ID of RoutePolicy.

IMPORTROUTEPOLICY <IImportRoutePolicy>: Import Route Policy either IPv4 or IPv6.
  [ImportIpv4RoutePolicyId <String>]: ARM resource ID of RoutePolicy.
  [ImportIpv6RoutePolicyId <String>]: ARM resource ID of RoutePolicy.

L3ISOLATIONDOMAININPUTOBJECT <IManagedNetworkFabricIdentity>: Identity Parameter
  [AccessControlListName <String>]: Name of the Access Control List.
  [ExternalNetworkName <String>]: Name of the External Network.
  [IPCommunityName <String>]: Name of the IP Community.
  [IPExtendedCommunityName <String>]: Name of the IP Extended Community.
  [IPPrefixName <String>]: Name of the IP Prefix.
  [Id <String>]: Resource identity path
  [InternalNetworkName <String>]: Name of the Internal Network.
  [InternetGatewayName <String>]: Name of the Internet Gateway.
  [InternetGatewayRuleName <String>]: Name of the Internet Gateway rule.
  [L2IsolationDomainName <String>]: Name of the L2 Isolation Domain.
  [L3IsolationDomainName <String>]: Name of the L3 Isolation Domain.
  [NeighborGroupName <String>]: Name of the Neighbor Group.
  [NetworkDeviceName <String>]: Name of the Network Device.
  [NetworkDeviceSkuName <String>]: Name of the Network Device SKU.
  [NetworkFabricControllerName <String>]: Name of the Network Fabric Controller.
  [NetworkFabricName <String>]: Name of the Network Fabric.
  [NetworkFabricSkuName <String>]: Name of the Network Fabric SKU.
  [NetworkInterfaceName <String>]: Name of the Network Interface.
  [NetworkPacketBrokerName <String>]: Name of the Network Packet Broker.
  [NetworkRackName <String>]: Name of the Network Rack.
  [NetworkTapName <String>]: Name of the Network Tap.
  [NetworkTapRuleName <String>]: Name of the Network Tap Rule.
  [NetworkToNetworkInterconnectName <String>]: Name of the Network to Network Interconnect.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [RoutePolicyName <String>]: Name of the Route Policy.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

STATICROUTECONFIGURATIONBFDCONFIGURATION <IBfdConfiguration>: BFD configuration properties
  [IntervalInMilliSecond <Int32?>]: Interval in milliseconds. Example: 300.
  [Multiplier <Int32?>]: Multiplier for the Bfd Configuration. Example: 5.

STATICROUTECONFIGURATIONIPV4ROUTE <IStaticRouteProperties[]>: List of IPv4 Routes.
  NextHop <List<String>>: List of next hop addresses.
  Prefix <String>: Prefix of the route.

STATICROUTECONFIGURATIONIPV6ROUTE <IStaticRouteProperties[]>: List of IPv6 Routes.
  NextHop <List<String>>: List of next hop addresses.
  Prefix <String>: Prefix of the route.
.Link
https://learn.microsoft.com/powershell/module/az.managednetworkfabric/new-aznetworkfabricinternalnetwork
#>
function New-AzNetworkFabricInternalNetwork {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IInternalNetwork])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('InternalNetworkName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [System.String]
    # Name of the Internal Network.
    ${Name},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [System.String]
    # Name of the L3 Isolation Domain.
    ${L3IsolationDomainName},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaJsonFilePath')]
    [Parameter(ParameterSetName='CreateViaJsonString')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomain', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagedNetworkFabricIdentity]
    # Identity Parameter
    ${L3IsolationDomainInputObject},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.Int32]
    # Vlan identifier.
    # Example: 1001.
    ${VlanId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Switch configuration description.
    ${Annotation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IInternalNetworkPropertiesBgpConfiguration]
    # BGP configuration properties.
    ${BgpConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IConnectedSubnet[]]
    # List of Connected IPv4 Subnets.
    ${ConnectedIPv4Subnet},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IConnectedSubnet[]]
    # List of connected IPv6 Subnets.
    ${ConnectedIPv6Subnet},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Egress Acl.
    # ARM resource ID of Access Control Lists.
    ${EgressAclId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IExportRoutePolicy]
    # Export Route Policy either IPv4 or IPv6.
    ${ExportRoutePolicy},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # ARM Resource ID of the RoutePolicy.
    # This is used for the backward compatibility.
    ${ExportRoutePolicyId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("NoExtension", "NPB")]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Extension.
    # Example: NoExtension | NPB.
    ${Extension},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IImportRoutePolicy]
    # Import Route Policy either IPv4 or IPv6.
    ${ImportRoutePolicy},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # ARM Resource ID of the RoutePolicy.
    # This is used for the backward compatibility.
    ${ImportRoutePolicyId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Ingress Acl.
    # ARM resource ID of Access Control Lists.
    ${IngressAclId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("True", "False")]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # To check whether monitoring of internal network is enabled or not.
    ${IsMonitoringEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.Int32]
    # Maximum transmission unit.
    # Default value is 1500.
    ${Mtu},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IBfdConfiguration]
    # BFD configuration properties
    ${StaticRouteConfigurationBfdConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("NoExtension", "NPB")]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Extension.
    # Example: NoExtension | NPB.
    ${StaticRouteConfigurationExtension},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IStaticRouteProperties[]]
    # List of IPv4 Routes.
    ${StaticRouteConfigurationIpv4Route},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomainExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IStaticRouteProperties[]]
    # List of IPv6 Routes.
    ${StaticRouteConfigurationIpv6Route},

    [Parameter(ParameterSetName='CreateViaIdentityL3IsolationDomain', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IInternalNetwork]
    # Defines the Internal Network resource.
    ${Body},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabricInternalNetwork_CreateExpanded';
            CreateViaIdentityL3IsolationDomain = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabricInternalNetwork_CreateViaIdentityL3IsolationDomain';
            CreateViaIdentityL3IsolationDomainExpanded = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabricInternalNetwork_CreateViaIdentityL3IsolationDomainExpanded';
            CreateViaJsonFilePath = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabricInternalNetwork_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabricInternalNetwork_CreateViaJsonString';
        }
        if (('CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
