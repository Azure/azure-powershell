
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create Network Fabric resource.
.Description
Create Network Fabric resource.
.Example
$managementNetworkConfiguration = @{
    InfrastructureVpnConfigurationPeeringOption = "OptionB"
    WorkloadVpnConfigurationPeeringOption = "OptionB"
    InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsExportIpv4RouteTarget = @("65046:10039")
    InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsExportIpv6RouteTarget = @("65046:10039")
    InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsImportIpv4RouteTarget = @("65046:10039")
    InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsImportIpv6RouteTarget = @("65046:10039")
    WorkloadVpnConfigurationOptionBPropertiesRouteTargetsExportIpv4RouteTarget = @("65046:10039")
    WorkloadVpnConfigurationOptionBPropertiesRouteTargetsExportIpv6RouteTarget = @("65046:10039")
    WorkloadVpnConfigurationOptionBPropertiesRouteTargetsImportIpv4RouteTarget = @("65046:10039")
    WorkloadVpnConfigurationOptionBPropertiesRouteTargetsImportIpv6RouteTarget = @("65046:10039")
}

$terminalServerConfiguration = @{
    UserName = "username"
    Password = "password"
    SerialNumber = "2351"
    PrimaryIpv4Prefix = "172.31.0.0/30"
    SecondaryIpv4Prefix = "172.31.0.20/30"
}

New-AzNetworkFabric -Name $name -ResourceGroupName $resourceGroupName -Location $location -ManagementNetworkConfiguration $managementNetworkConfiguration -NetworkFabricControllerId $nfcId -NetworkFabricSku "fab1" -ServerCountPerRack 5 -RackCount 2 -FabricAsn 30 -Ipv4Prefix "20.1.0.0/19" -TerminalServerConfiguration $terminalServerConfiguration
.Example
$managementNetworkConfiguration = @{
    InfrastructureVpnConfigurationPeeringOption = "OptionA"
    WorkloadVpnConfigurationPeeringOption = "OptionA"
    InfrastructureVpnConfigurationOptionAPropertiesBfdConfigurationIntervalInMilliSecond = 300
    InfrastructureVpnConfigurationOptionAPropertiesBfdConfigurationMultiplier = 3
    InfrastructureVpnConfigurationOptionAPropertiesMtu = 1500
    InfrastructureVpnConfigurationOptionAPropertiesPeerAsn = 28
    InfrastructureVpnConfigurationOptionAPropertiesVlanId = 501
    InfrastructureVpnConfigurationOptionAPropertiesPrimaryIpv4Prefix = "10.0.0.14/30"
    InfrastructureVpnConfigurationOptionAPropertiesSecondaryIpv4Prefix = "10.0.0.14/30"
    WorkloadVpnConfigurationOptionAPropertiesBfdConfigurationIntervalInMilliSecond = 300
    WorkloadVpnConfigurationOptionAPropertiesBfdConfigurationMultiplier = 3
    WorkloadVpnConfigurationOptionAPropertiesMtu = 1500
    WorkloadVpnConfigurationOptionAPropertiesPeerAsn = 28
    WorkloadVpnConfigurationOptionAPropertiesVlanId = 501
    WorkloadVpnConfigurationOptionAPropertiesPrimaryIpv4Prefix = "10.0.0.14/30"
    WorkloadVpnConfigurationOptionAPropertiesSecondaryIpv4Prefix = "10.0.0.14/30"
}

$terminalServerConfiguration = @{
    UserName = "username"
    Password = "password"
    SerialNumber = "2351"
    PrimaryIpv4Prefix = "172.31.0.0/30"
    SecondaryIpv4Prefix = "172.31.0.20/30"
}

New-AzNetworkFabric -Name $name -ResourceGroupName $resourceGroupName -Location $location -ManagementNetworkConfiguration $managementNetworkConfiguration -NetworkFabricControllerId $nfcId -NetworkFabricSku "fab1" -ServerCountPerRack 5 -RackCount 2 -FabricAsn 30 -Ipv4Prefix "20.1.0.0/19" -TerminalServerConfiguration $terminalServerConfiguration

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabric
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

MANAGEMENTNETWORKCONFIGURATION <IManagementNetworkConfigurationProperties>: Configuration to be used to setup the management network.
  InfrastructureVpnConfigurationPeeringOption <String>: Peering option list.
  WorkloadVpnConfigurationPeeringOption <String>: Peering option list.
  [InfrastructureVpnConfigurationNetworkToNetworkInterconnectId <String>]: ARM Resource ID of the Network To Network Interconnect.
  [InfrastructureVpnConfigurationOptionAPropertiesBfdConfigurationIntervalInMilliSecond <Int32?>]: Interval in milliseconds. Example: 300.
  [InfrastructureVpnConfigurationOptionAPropertiesBfdConfigurationMultiplier <Int32?>]: Multiplier for the Bfd Configuration. Example: 5.
  [InfrastructureVpnConfigurationOptionAPropertiesMtu <Int32?>]: MTU to use for option A peering.
  [InfrastructureVpnConfigurationOptionAPropertiesPeerAsn <Int64?>]: Peer ASN number.Example : 28
  [InfrastructureVpnConfigurationOptionAPropertiesPrimaryIpv4Prefix <String>]: IPv4 Address Prefix.
  [InfrastructureVpnConfigurationOptionAPropertiesPrimaryIpv6Prefix <String>]: IPv6 Address Prefix.
  [InfrastructureVpnConfigurationOptionAPropertiesSecondaryIpv4Prefix <String>]: Secondary IPv4 Address Prefix.
  [InfrastructureVpnConfigurationOptionAPropertiesSecondaryIpv6Prefix <String>]: Secondary IPv6 Address Prefix.
  [InfrastructureVpnConfigurationOptionAPropertiesVlanId <Int32?>]: Vlan Id.Example : 501
  [InfrastructureVpnConfigurationOptionBPropertiesExportRouteTarget <List<String>>]: Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
  [InfrastructureVpnConfigurationOptionBPropertiesImportRouteTarget <List<String>>]: Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
  [InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsExportIpv4RouteTarget <List<String>>]: Route Targets to be applied for outgoing routes into CE.
  [InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsExportIpv6RouteTarget <List<String>>]: Route Targets to be applied for outgoing routes from CE.
  [InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsImportIpv4RouteTarget <List<String>>]: Route Targets to be applied for incoming routes into CE.
  [InfrastructureVpnConfigurationOptionBPropertiesRouteTargetsImportIpv6RouteTarget <List<String>>]: Route Targets to be applied for incoming routes from CE.
  [WorkloadVpnConfigurationNetworkToNetworkInterconnectId <String>]: ARM Resource ID of the Network To Network Interconnect.
  [WorkloadVpnConfigurationOptionAPropertiesBfdConfigurationIntervalInMilliSecond <Int32?>]: Interval in milliseconds. Example: 300.
  [WorkloadVpnConfigurationOptionAPropertiesBfdConfigurationMultiplier <Int32?>]: Multiplier for the Bfd Configuration. Example: 5.
  [WorkloadVpnConfigurationOptionAPropertiesMtu <Int32?>]: MTU to use for option A peering.
  [WorkloadVpnConfigurationOptionAPropertiesPeerAsn <Int64?>]: Peer ASN number.Example : 28
  [WorkloadVpnConfigurationOptionAPropertiesPrimaryIpv4Prefix <String>]: IPv4 Address Prefix.
  [WorkloadVpnConfigurationOptionAPropertiesPrimaryIpv6Prefix <String>]: IPv6 Address Prefix.
  [WorkloadVpnConfigurationOptionAPropertiesSecondaryIpv4Prefix <String>]: Secondary IPv4 Address Prefix.
  [WorkloadVpnConfigurationOptionAPropertiesSecondaryIpv6Prefix <String>]: Secondary IPv6 Address Prefix.
  [WorkloadVpnConfigurationOptionAPropertiesVlanId <Int32?>]: Vlan Id.Example : 501
  [WorkloadVpnConfigurationOptionBPropertiesExportRouteTarget <List<String>>]: Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
  [WorkloadVpnConfigurationOptionBPropertiesImportRouteTarget <List<String>>]: Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
  [WorkloadVpnConfigurationOptionBPropertiesRouteTargetsExportIpv4RouteTarget <List<String>>]: Route Targets to be applied for outgoing routes into CE.
  [WorkloadVpnConfigurationOptionBPropertiesRouteTargetsExportIpv6RouteTarget <List<String>>]: Route Targets to be applied for outgoing routes from CE.
  [WorkloadVpnConfigurationOptionBPropertiesRouteTargetsImportIpv4RouteTarget <List<String>>]: Route Targets to be applied for incoming routes into CE.
  [WorkloadVpnConfigurationOptionBPropertiesRouteTargetsImportIpv6RouteTarget <List<String>>]: Route Targets to be applied for incoming routes from CE.

TERMINALSERVERCONFIGURATION <ITerminalServerConfiguration>: Network and credentials configuration currently applied to terminal server.
  [Password <String>]: Password for the terminal server connection.
  [SerialNumber <String>]: Serial Number of Terminal server.
  [Username <String>]: Username for the terminal server connection.
  [PrimaryIpv4Prefix <String>]: IPv4 Address Prefix.
  [PrimaryIpv6Prefix <String>]: IPv6 Address Prefix.
  [SecondaryIpv4Prefix <String>]: Secondary IPv4 Address Prefix.
  [SecondaryIpv6Prefix <String>]: Secondary IPv6 Address Prefix.
.Link
https://learn.microsoft.com/powershell/module/az.managednetworkfabric/new-aznetworkfabric
#>
function New-AzNetworkFabric {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabric])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('NetworkFabricName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [System.String]
    # Name of the Network Fabric.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.Int64]
    # ASN of CE devices for CE/PE connectivity.
    ${FabricAsn},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # IPv4Prefix for Management Network.
    # Example: 10.1.0.0/19.
    ${Ipv4Prefix},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationProperties]
    # Configuration to be used to setup the management network.
    ${ManagementNetworkConfiguration},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
    ${NetworkFabricControllerId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Supported Network Fabric SKU.Example: Compute / Aggregate racks.
    # Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric.
    # The SKU determines whether it is a single / multi rack Network Fabric.
    ${NetworkFabricSku},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.Int32]
    # Number of servers.Possible values are from 1-16.
    ${ServerCountPerRack},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITerminalServerConfiguration]
    # Network and credentials configuration currently applied to terminal server.
    ${TerminalServerConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Switch configuration description.
    ${Annotation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # IPv6Prefix for Management Network.
    # Example: 3FFE:FFFF:0:CD40::/59
    ${Ipv6Prefix},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.Int32]
    # Number of compute racks associated to Network Fabric.
    ${RackCount},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabric_CreateExpanded';
            CreateViaJsonFilePath = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabric_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.ManagedNetworkFabric.private\New-AzNetworkFabric_CreateViaJsonString';
        }
        if (('CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
