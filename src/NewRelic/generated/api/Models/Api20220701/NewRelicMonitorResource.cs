// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Extensions;

    /// <summary>A Monitor Resource by NewRelic</summary>
    public partial class NewRelicMonitorResource :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResource,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.TrackedResource();

        /// <summary>Source of account creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? AccountCreationSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountCreationSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountCreationSource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource)""); }

        /// <summary>Account id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string AccountInfoAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountInfoAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountInfoAccountId = value ?? null; }

        /// <summary>ingestion key of account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public System.Security.SecureString AccountInfoIngestionKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountInfoIngestionKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountInfoIngestionKey = value ?? null; }

        /// <summary>NewRelic account region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string AccountInfoRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountInfoRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).AccountInfoRegion = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentity _identity;

        /// <summary>The managed service identities assigned to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ManagedServiceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ManagedServiceIdentityType)""); }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>Liftr resource category</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.LiftrResourceCategories? LiftrResourceCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).LiftrResourceCategory; }

        /// <summary>Liftr resource preference. The priority of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public int? LiftrResourcePreference { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).LiftrResourcePreference; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Marketplace Subscription Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string MarketplaceSubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MarketplaceSubscriptionId; }

        /// <summary>NewRelic Organization properties of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MarketplaceSubscriptionStatus? MarketplaceSubscriptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MarketplaceSubscriptionStatus; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for LiftrResourceCategory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.LiftrResourceCategories? Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.LiftrResourceCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).LiftrResourceCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).LiftrResourceCategory = value; }

        /// <summary>Internal Acessors for LiftrResourcePreference</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.LiftrResourcePreference { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).LiftrResourcePreference; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).LiftrResourcePreference = value; }

        /// <summary>Internal Acessors for MarketplaceSubscriptionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.MarketplaceSubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MarketplaceSubscriptionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MarketplaceSubscriptionId = value; }

        /// <summary>Internal Acessors for MarketplaceSubscriptionStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MarketplaceSubscriptionStatus? Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.MarketplaceSubscriptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MarketplaceSubscriptionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MarketplaceSubscriptionStatus = value; }

        /// <summary>Internal Acessors for MonitoringStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MonitoringStatus? Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.MonitoringStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MonitoringStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MonitoringStatus = value; }

        /// <summary>Internal Acessors for NewRelicAccountProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountProperties Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.NewRelicAccountProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountProperty = value; }

        /// <summary>Internal Acessors for NewRelicAccountPropertyAccountInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IAccountInfo Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.NewRelicAccountPropertyAccountInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertyAccountInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertyAccountInfo = value; }

        /// <summary>Internal Acessors for NewRelicAccountPropertyOrganizationInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IOrganizationInfo Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.NewRelicAccountPropertyOrganizationInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertyOrganizationInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertyOrganizationInfo = value; }

        /// <summary>Internal Acessors for NewRelicAccountPropertySingleSignOnProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicSingleSignOnProperties Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.NewRelicAccountPropertySingleSignOnProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertySingleSignOnProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertySingleSignOnProperty = value; }

        /// <summary>Internal Acessors for PlanData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanData Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.PlanData { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanData; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanData = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorProperties Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.MonitorProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for UserInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfo Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceInternal.UserInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfo = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>MonitoringStatus of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MonitoringStatus? MonitoringStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).MonitoringStatus; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Name; }

        /// <summary>User id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string NewRelicAccountPropertyUserId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertyUserId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).NewRelicAccountPropertyUserId = value ?? null; }

        /// <summary>Source of org creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? OrgCreationSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).OrgCreationSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).OrgCreationSource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource)""); }

        /// <summary>Organization id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string OrganizationInfoOrganizationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).OrganizationInfoOrganizationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).OrganizationInfoOrganizationId = value ?? null; }

        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle? PlanDataBillingCycle { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataBillingCycle; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataBillingCycle = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle)""); }

        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public global::System.DateTime? PlanDataEffectiveDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataEffectiveDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataEffectiveDate = value ?? default(global::System.DateTime); }

        /// <summary>plan id as published by NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string PlanDataPlanDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataPlanDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataPlanDetail = value ?? null; }

        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType? PlanDataUsageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataUsageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).PlanDataUsageType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType)""); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.MonitorProperties()); set => this._property = value; }

        /// <summary>Provisioning State of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>The Id of the Enterprise App used for Single sign-on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string SingleSignOnPropertyEnterpriseAppId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertyEnterpriseAppId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertyEnterpriseAppId = value ?? null; }

        /// <summary>Provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? SingleSignOnPropertyProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertyProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertyProvisioningState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState)""); }

        /// <summary>Single sign-on state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates? SingleSignOnPropertySingleSignOnState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertySingleSignOnState; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertySingleSignOnState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates)""); }

        /// <summary>The login URL specific to this NewRelic Organization</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string SingleSignOnPropertySingleSignOnUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertySingleSignOnUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).SingleSignOnPropertySingleSignOnUrl = value ?? null; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.IResourceInternal)__trackedResource).Type; }

        /// <summary>country if user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoCountry { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoCountry; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoCountry = value ?? null; }

        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoEmailAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoEmailAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoEmailAddress = value ?? null; }

        /// <summary>First name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoFirstName { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoFirstName; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoFirstName = value ?? null; }

        /// <summary>Last name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoLastName { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoLastName; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoLastName = value ?? null; }

        /// <summary>Contact phone number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoPhoneNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoPhoneNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorPropertiesInternal)Property).UserInfoPhoneNumber = value ?? null; }

        /// <summary>Creates an new <see cref="NewRelicMonitorResource" /> instance.</summary>
        public NewRelicMonitorResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A Monitor Resource by NewRelic
    public partial interface INewRelicMonitorResource :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResource
    {
        /// <summary>Source of account creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Source of account creation",
        SerializedName = @"accountCreationSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? AccountCreationSource { get; set; }
        /// <summary>Account id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Account id",
        SerializedName = @"accountId",
        PossibleTypes = new [] { typeof(string) })]
        string AccountInfoAccountId { get; set; }
        /// <summary>ingestion key of account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ingestion key of account",
        SerializedName = @"ingestionKey",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AccountInfoIngestionKey { get; set; }
        /// <summary>NewRelic account region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NewRelic account region",
        SerializedName = @"region",
        PossibleTypes = new [] { typeof(string) })]
        string AccountInfoRegion { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ManagedServiceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Liftr resource category</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Liftr resource category",
        SerializedName = @"liftrResourceCategory",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.LiftrResourceCategories) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.LiftrResourceCategories? LiftrResourceCategory { get;  }
        /// <summary>Liftr resource preference. The priority of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Liftr resource preference. The priority of the resource.",
        SerializedName = @"liftrResourcePreference",
        PossibleTypes = new [] { typeof(int) })]
        int? LiftrResourcePreference { get;  }
        /// <summary>Marketplace Subscription Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Marketplace Subscription Id",
        SerializedName = @"marketplaceSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string MarketplaceSubscriptionId { get;  }
        /// <summary>NewRelic Organization properties of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"NewRelic Organization properties of the resource",
        SerializedName = @"marketplaceSubscriptionStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MarketplaceSubscriptionStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MarketplaceSubscriptionStatus? MarketplaceSubscriptionStatus { get;  }
        /// <summary>MonitoringStatus of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"MonitoringStatus of the resource",
        SerializedName = @"monitoringStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MonitoringStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MonitoringStatus? MonitoringStatus { get;  }
        /// <summary>User id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User id",
        SerializedName = @"userId",
        PossibleTypes = new [] { typeof(string) })]
        string NewRelicAccountPropertyUserId { get; set; }
        /// <summary>Source of org creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Source of org creation",
        SerializedName = @"orgCreationSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? OrgCreationSource { get; set; }
        /// <summary>Organization id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Organization id",
        SerializedName = @"organizationId",
        PossibleTypes = new [] { typeof(string) })]
        string OrganizationInfoOrganizationId { get; set; }
        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Different billing cycles like MONTHLY/WEEKLY. this could be enum",
        SerializedName = @"billingCycle",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle? PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"date when plan was applied",
        SerializedName = @"effectiveDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"plan id as published by NewRelic",
        SerializedName = @"planDetails",
        PossibleTypes = new [] { typeof(string) })]
        string PlanDataPlanDetail { get; set; }
        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Different usage type like PAYG/COMMITTED. this could be enum",
        SerializedName = @"usageType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType? PlanDataUsageType { get; set; }
        /// <summary>Provisioning State of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning State of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>The Id of the Enterprise App used for Single sign-on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Id of the Enterprise App used for Single sign-on.",
        SerializedName = @"enterpriseAppId",
        PossibleTypes = new [] { typeof(string) })]
        string SingleSignOnPropertyEnterpriseAppId { get; set; }
        /// <summary>Provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? SingleSignOnPropertyProvisioningState { get; set; }
        /// <summary>Single sign-on state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Single sign-on state",
        SerializedName = @"singleSignOnState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates? SingleSignOnPropertySingleSignOnState { get; set; }
        /// <summary>The login URL specific to this NewRelic Organization</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The login URL specific to this NewRelic Organization",
        SerializedName = @"singleSignOnUrl",
        PossibleTypes = new [] { typeof(string) })]
        string SingleSignOnPropertySingleSignOnUrl { get; set; }
        /// <summary>country if user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"country if user",
        SerializedName = @"country",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoCountry { get; set; }
        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User Email",
        SerializedName = @"emailAddress",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoEmailAddress { get; set; }
        /// <summary>First name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"First name",
        SerializedName = @"firstName",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoFirstName { get; set; }
        /// <summary>Last name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last name",
        SerializedName = @"lastName",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoLastName { get; set; }
        /// <summary>Contact phone number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Contact phone number",
        SerializedName = @"phoneNumber",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoPhoneNumber { get; set; }

    }
    /// A Monitor Resource by NewRelic
    internal partial interface INewRelicMonitorResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api30.ITrackedResourceInternal
    {
        /// <summary>Source of account creation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? AccountCreationSource { get; set; }
        /// <summary>Account id</summary>
        string AccountInfoAccountId { get; set; }
        /// <summary>ingestion key of account</summary>
        System.Security.SecureString AccountInfoIngestionKey { get; set; }
        /// <summary>NewRelic account region</summary>
        string AccountInfoRegion { get; set; }
        /// <summary>The managed service identities assigned to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Liftr resource category</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.LiftrResourceCategories? LiftrResourceCategory { get; set; }
        /// <summary>Liftr resource preference. The priority of the resource.</summary>
        int? LiftrResourcePreference { get; set; }
        /// <summary>Marketplace Subscription Id</summary>
        string MarketplaceSubscriptionId { get; set; }
        /// <summary>NewRelic Organization properties of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MarketplaceSubscriptionStatus? MarketplaceSubscriptionStatus { get; set; }
        /// <summary>MonitoringStatus of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.MonitoringStatus? MonitoringStatus { get; set; }
        /// <summary>MarketplaceSubscriptionStatus of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountProperties NewRelicAccountProperty { get; set; }
        /// <summary>NewRelic Account Information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IAccountInfo NewRelicAccountPropertyAccountInfo { get; set; }
        /// <summary>NewRelic Organization Information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IOrganizationInfo NewRelicAccountPropertyOrganizationInfo { get; set; }
        /// <summary>date when plan was applied</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicSingleSignOnProperties NewRelicAccountPropertySingleSignOnProperty { get; set; }
        /// <summary>User id</summary>
        string NewRelicAccountPropertyUserId { get; set; }
        /// <summary>Source of org creation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? OrgCreationSource { get; set; }
        /// <summary>Organization id</summary>
        string OrganizationInfoOrganizationId { get; set; }
        /// <summary>Plan details</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanData PlanData { get; set; }
        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle? PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by NewRelic</summary>
        string PlanDataPlanDetail { get; set; }
        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType? PlanDataUsageType { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitorProperties Property { get; set; }
        /// <summary>Provisioning State of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>The Id of the Enterprise App used for Single sign-on.</summary>
        string SingleSignOnPropertyEnterpriseAppId { get; set; }
        /// <summary>Provisioning state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? SingleSignOnPropertyProvisioningState { get; set; }
        /// <summary>Single sign-on state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates? SingleSignOnPropertySingleSignOnState { get; set; }
        /// <summary>The login URL specific to this NewRelic Organization</summary>
        string SingleSignOnPropertySingleSignOnUrl { get; set; }
        /// <summary>User Info</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfo UserInfo { get; set; }
        /// <summary>country if user</summary>
        string UserInfoCountry { get; set; }
        /// <summary>User Email</summary>
        string UserInfoEmailAddress { get; set; }
        /// <summary>First name</summary>
        string UserInfoFirstName { get; set; }
        /// <summary>Last name</summary>
        string UserInfoLastName { get; set; }
        /// <summary>Contact phone number</summary>
        string UserInfoPhoneNumber { get; set; }

    }
}