// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Extensions;

    /// <summary>The updatable properties of the NewRelicMonitorResource.</summary>
    public partial class NewRelicMonitorResourceUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AccountCreationSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? _accountCreationSource;

        /// <summary>Source of account creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? AccountCreationSource { get => this._accountCreationSource; set => this._accountCreationSource = value; }

        /// <summary>Account id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string AccountInfoAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfoAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfoAccountId = value ?? null; }

        /// <summary>ingestion key of account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public System.Security.SecureString AccountInfoIngestionKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfoIngestionKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfoIngestionKey = value ?? null; }

        /// <summary>NewRelic account region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string AccountInfoRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfoRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfoRegion = value ?? null; }

        /// <summary>Internal Acessors for NewRelicAccountProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountProperties Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal.NewRelicAccountProperty { get => (this._newRelicAccountProperty = this._newRelicAccountProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.NewRelicAccountProperties()); set { {_newRelicAccountProperty = value;} } }

        /// <summary>Internal Acessors for NewRelicAccountPropertyAccountInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IAccountInfo Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal.NewRelicAccountPropertyAccountInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).AccountInfo = value; }

        /// <summary>Internal Acessors for NewRelicAccountPropertyOrganizationInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IOrganizationInfo Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal.NewRelicAccountPropertyOrganizationInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).OrganizationInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).OrganizationInfo = value; }

        /// <summary>Internal Acessors for NewRelicAccountPropertySingleSignOnProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicSingleSignOnProperties Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal.NewRelicAccountPropertySingleSignOnProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnProperty = value; }

        /// <summary>Internal Acessors for PlanData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanData Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal.PlanData { get => (this._planData = this._planData ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.PlanData()); set { {_planData = value;} } }

        /// <summary>Internal Acessors for UserInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfo Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicMonitorResourceUpdatePropertiesInternal.UserInfo { get => (this._userInfo = this._userInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.UserInfo()); set { {_userInfo = value;} } }

        /// <summary>Backing field for <see cref="NewRelicAccountProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountProperties _newRelicAccountProperty;

        /// <summary>MarketplaceSubscriptionStatus of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountProperties NewRelicAccountProperty { get => (this._newRelicAccountProperty = this._newRelicAccountProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.NewRelicAccountProperties()); set => this._newRelicAccountProperty = value; }

        /// <summary>User id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string NewRelicAccountPropertyUserId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).UserId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).UserId = value ?? null; }

        /// <summary>Backing field for <see cref="OrgCreationSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? _orgCreationSource;

        /// <summary>Source of org creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? OrgCreationSource { get => this._orgCreationSource; set => this._orgCreationSource = value; }

        /// <summary>Organization id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string OrganizationInfoOrganizationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).OrganizationInfoOrganizationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).OrganizationInfoOrganizationId = value ?? null; }

        /// <summary>Backing field for <see cref="PlanData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanData _planData;

        /// <summary>Plan details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanData PlanData { get => (this._planData = this._planData ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.PlanData()); set => this._planData = value; }

        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle? PlanDataBillingCycle { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).BillingCycle; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).BillingCycle = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle)""); }

        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public global::System.DateTime? PlanDataEffectiveDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).EffectiveDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).EffectiveDate = value ?? default(global::System.DateTime); }

        /// <summary>plan id as published by NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string PlanDataPlanDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).PlanDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).PlanDetail = value ?? null; }

        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType? PlanDataUsageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).UsageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanDataInternal)PlanData).UsageType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType)""); }

        /// <summary>The Id of the Enterprise App used for Single sign-on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string SingleSignOnPropertyEnterpriseAppId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertyEnterpriseAppId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertyEnterpriseAppId = value ?? null; }

        /// <summary>Provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? SingleSignOnPropertyProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertyProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertyProvisioningState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState)""); }

        /// <summary>Single sign-on state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates? SingleSignOnPropertySingleSignOnState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertySingleSignOnState; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertySingleSignOnState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates)""); }

        /// <summary>The login URL specific to this NewRelic Organization</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string SingleSignOnPropertySingleSignOnUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertySingleSignOnUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountPropertiesInternal)NewRelicAccountProperty).SingleSignOnPropertySingleSignOnUrl = value ?? null; }

        /// <summary>Backing field for <see cref="UserInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfo _userInfo;

        /// <summary>User Info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfo UserInfo { get => (this._userInfo = this._userInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.UserInfo()); set => this._userInfo = value; }

        /// <summary>country if user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoCountry { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).Country; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).Country = value ?? null; }

        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoEmailAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).EmailAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).EmailAddress = value ?? null; }

        /// <summary>First name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoFirstName { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).FirstName; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).FirstName = value ?? null; }

        /// <summary>Last name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoLastName { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).LastName; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).LastName = value ?? null; }

        /// <summary>Contact phone number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string UserInfoPhoneNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).PhoneNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfoInternal)UserInfo).PhoneNumber = value ?? null; }

        /// <summary>Creates an new <see cref="NewRelicMonitorResourceUpdateProperties" /> instance.</summary>
        public NewRelicMonitorResourceUpdateProperties()
        {

        }
    }
    /// The updatable properties of the NewRelicMonitorResource.
    public partial interface INewRelicMonitorResourceUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IJsonSerializable
    {
        /// <summary>Source of account creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Source of account creation",
        SerializedName = @"accountCreationSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? AccountCreationSource { get; set; }
        /// <summary>Account id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Account id",
        SerializedName = @"accountId",
        PossibleTypes = new [] { typeof(string) })]
        string AccountInfoAccountId { get; set; }
        /// <summary>ingestion key of account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ingestion key of account",
        SerializedName = @"ingestionKey",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AccountInfoIngestionKey { get; set; }
        /// <summary>NewRelic account region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NewRelic account region",
        SerializedName = @"region",
        PossibleTypes = new [] { typeof(string) })]
        string AccountInfoRegion { get; set; }
        /// <summary>User id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User id",
        SerializedName = @"userId",
        PossibleTypes = new [] { typeof(string) })]
        string NewRelicAccountPropertyUserId { get; set; }
        /// <summary>Source of org creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Source of org creation",
        SerializedName = @"orgCreationSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? OrgCreationSource { get; set; }
        /// <summary>Organization id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Organization id",
        SerializedName = @"organizationId",
        PossibleTypes = new [] { typeof(string) })]
        string OrganizationInfoOrganizationId { get; set; }
        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Different billing cycles like MONTHLY/WEEKLY. this could be enum",
        SerializedName = @"billingCycle",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle? PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"date when plan was applied",
        SerializedName = @"effectiveDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"plan id as published by NewRelic",
        SerializedName = @"planDetails",
        PossibleTypes = new [] { typeof(string) })]
        string PlanDataPlanDetail { get; set; }
        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Different usage type like PAYG/COMMITTED. this could be enum",
        SerializedName = @"usageType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType? PlanDataUsageType { get; set; }
        /// <summary>The Id of the Enterprise App used for Single sign-on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Id of the Enterprise App used for Single sign-on.",
        SerializedName = @"enterpriseAppId",
        PossibleTypes = new [] { typeof(string) })]
        string SingleSignOnPropertyEnterpriseAppId { get; set; }
        /// <summary>Provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? SingleSignOnPropertyProvisioningState { get; set; }
        /// <summary>Single sign-on state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Single sign-on state",
        SerializedName = @"singleSignOnState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates? SingleSignOnPropertySingleSignOnState { get; set; }
        /// <summary>The login URL specific to this NewRelic Organization</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The login URL specific to this NewRelic Organization",
        SerializedName = @"singleSignOnUrl",
        PossibleTypes = new [] { typeof(string) })]
        string SingleSignOnPropertySingleSignOnUrl { get; set; }
        /// <summary>country if user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"country if user",
        SerializedName = @"country",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoCountry { get; set; }
        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User Email",
        SerializedName = @"emailAddress",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoEmailAddress { get; set; }
        /// <summary>First name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"First name",
        SerializedName = @"firstName",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoFirstName { get; set; }
        /// <summary>Last name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last name",
        SerializedName = @"lastName",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoLastName { get; set; }
        /// <summary>Contact phone number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Contact phone number",
        SerializedName = @"phoneNumber",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoPhoneNumber { get; set; }

    }
    /// The updatable properties of the NewRelicMonitorResource.
    internal partial interface INewRelicMonitorResourceUpdatePropertiesInternal

    {
        /// <summary>Source of account creation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.AccountCreationSource? AccountCreationSource { get; set; }
        /// <summary>Account id</summary>
        string AccountInfoAccountId { get; set; }
        /// <summary>ingestion key of account</summary>
        System.Security.SecureString AccountInfoIngestionKey { get; set; }
        /// <summary>NewRelic account region</summary>
        string AccountInfoRegion { get; set; }
        /// <summary>MarketplaceSubscriptionStatus of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicAccountProperties NewRelicAccountProperty { get; set; }
        /// <summary>NewRelic Account Information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IAccountInfo NewRelicAccountPropertyAccountInfo { get; set; }
        /// <summary>NewRelic Organization Information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IOrganizationInfo NewRelicAccountPropertyOrganizationInfo { get; set; }
        /// <summary>date when plan was applied</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.INewRelicSingleSignOnProperties NewRelicAccountPropertySingleSignOnProperty { get; set; }
        /// <summary>User id</summary>
        string NewRelicAccountPropertyUserId { get; set; }
        /// <summary>Source of org creation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.OrgCreationSource? OrgCreationSource { get; set; }
        /// <summary>Organization id</summary>
        string OrganizationInfoOrganizationId { get; set; }
        /// <summary>Plan details</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IPlanData PlanData { get; set; }
        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.BillingCycle? PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by NewRelic</summary>
        string PlanDataPlanDetail { get; set; }
        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.UsageType? PlanDataUsageType { get; set; }
        /// <summary>The Id of the Enterprise App used for Single sign-on.</summary>
        string SingleSignOnPropertyEnterpriseAppId { get; set; }
        /// <summary>Provisioning state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? SingleSignOnPropertyProvisioningState { get; set; }
        /// <summary>Single sign-on state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SingleSignOnStates? SingleSignOnPropertySingleSignOnState { get; set; }
        /// <summary>The login URL specific to this NewRelic Organization</summary>
        string SingleSignOnPropertySingleSignOnUrl { get; set; }
        /// <summary>User Info</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IUserInfo UserInfo { get; set; }
        /// <summary>country if user</summary>
        string UserInfoCountry { get; set; }
        /// <summary>User Email</summary>
        string UserInfoEmailAddress { get; set; }
        /// <summary>First name</summary>
        string UserInfoFirstName { get; set; }
        /// <summary>Last name</summary>
        string UserInfoLastName { get; set; }
        /// <summary>Contact phone number</summary>
        string UserInfoPhoneNumber { get; set; }

    }
}