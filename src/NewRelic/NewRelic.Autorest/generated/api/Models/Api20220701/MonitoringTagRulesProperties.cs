// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Extensions;

    /// <summary>The resource-specific properties for this resource.</summary>
    public partial class MonitoringTagRulesProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitoringTagRulesProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitoringTagRulesPropertiesInternal
    {

        /// <summary>Backing field for <see cref="LogRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRules _logRule;

        /// <summary>Set of rules for sending logs for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRules LogRule { get => (this._logRule = this._logRule ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.LogRules()); set => this._logRule = value; }

        /// <summary>
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty,
        /// all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
        /// specified, the rules will only include resources with the associated tags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag[] LogRuleFilteringTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).FilteringTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).FilteringTag = value ?? null /* arrayOf */; }

        /// <summary>Flag specifying if AAD logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendAadLogsStatus? LogRuleSendAadLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).SendAadLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).SendAadLog = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendAadLogsStatus)""); }

        /// <summary>
        /// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendActivityLogsStatus? LogRuleSendActivityLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).SendActivityLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).SendActivityLog = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendActivityLogsStatus)""); }

        /// <summary>Flag specifying if subscription logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendSubscriptionLogsStatus? LogRuleSendSubscriptionLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).SendSubscriptionLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRulesInternal)LogRule).SendSubscriptionLog = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendSubscriptionLogsStatus)""); }

        /// <summary>Backing field for <see cref="MetricRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRules _metricRule;

        /// <summary>Set of rules for sending metrics for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRules MetricRule { get => (this._metricRule = this._metricRule ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.MetricRules()); set => this._metricRule = value; }

        /// <summary>List of filtering tags to be used for capturing metrics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag[] MetricRuleFilteringTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRulesInternal)MetricRule).FilteringTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRulesInternal)MetricRule).FilteringTag = value ?? null /* arrayOf */; }

        /// <summary>Flag specifying if metrics should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendMetricsStatus? MetricRuleSendMetric { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRulesInternal)MetricRule).SendMetric; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRulesInternal)MetricRule).SendMetric = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendMetricsStatus)""); }

        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string MetricRuleUserEmail { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRulesInternal)MetricRule).UserEmail; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRulesInternal)MetricRule).UserEmail = value ?? null; }

        /// <summary>Internal Acessors for LogRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRules Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitoringTagRulesPropertiesInternal.LogRule { get => (this._logRule = this._logRule ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.LogRules()); set { {_logRule = value;} } }

        /// <summary>Internal Acessors for MetricRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRules Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitoringTagRulesPropertiesInternal.MetricRule { get => (this._metricRule = this._metricRule ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.MetricRules()); set { {_metricRule = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMonitoringTagRulesPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? _provisioningState;

        /// <summary>Provisioning State of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Creates an new <see cref="MonitoringTagRulesProperties" /> instance.</summary>
        public MonitoringTagRulesProperties()
        {

        }
    }
    /// The resource-specific properties for this resource.
    public partial interface IMonitoringTagRulesProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IJsonSerializable
    {
        /// <summary>
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty,
        /// all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
        /// specified, the rules will only include resources with the associated tags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
        If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.",
        SerializedName = @"filteringTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag[] LogRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if AAD logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag specifying if AAD logs should be sent for the Monitor resource.",
        SerializedName = @"sendAadLogs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendAadLogsStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendAadLogsStatus? LogRuleSendAadLog { get; set; }
        /// <summary>
        /// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.",
        SerializedName = @"sendActivityLogs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendActivityLogsStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendActivityLogsStatus? LogRuleSendActivityLog { get; set; }
        /// <summary>Flag specifying if subscription logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag specifying if subscription logs should be sent for the Monitor resource.",
        SerializedName = @"sendSubscriptionLogs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendSubscriptionLogsStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendSubscriptionLogsStatus? LogRuleSendSubscriptionLog { get; set; }
        /// <summary>List of filtering tags to be used for capturing metrics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of filtering tags to be used for capturing metrics.",
        SerializedName = @"filteringTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag[] MetricRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if metrics should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag specifying if metrics should be sent for the Monitor resource.",
        SerializedName = @"sendMetrics",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendMetricsStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendMetricsStatus? MetricRuleSendMetric { get; set; }
        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User Email",
        SerializedName = @"userEmail",
        PossibleTypes = new [] { typeof(string) })]
        string MetricRuleUserEmail { get; set; }
        /// <summary>Provisioning State of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning State of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? ProvisioningState { get;  }

    }
    /// The resource-specific properties for this resource.
    internal partial interface IMonitoringTagRulesPropertiesInternal

    {
        /// <summary>Set of rules for sending logs for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.ILogRules LogRule { get; set; }
        /// <summary>
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty,
        /// all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
        /// specified, the rules will only include resources with the associated tags.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag[] LogRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if AAD logs should be sent for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendAadLogsStatus? LogRuleSendAadLog { get; set; }
        /// <summary>
        /// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendActivityLogsStatus? LogRuleSendActivityLog { get; set; }
        /// <summary>Flag specifying if subscription logs should be sent for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendSubscriptionLogsStatus? LogRuleSendSubscriptionLog { get; set; }
        /// <summary>Set of rules for sending metrics for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IMetricRules MetricRule { get; set; }
        /// <summary>List of filtering tags to be used for capturing metrics.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.Api20220701.IFilteringTag[] MetricRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if metrics should be sent for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.SendMetricsStatus? MetricRuleSendMetric { get; set; }
        /// <summary>User Email</summary>
        string MetricRuleUserEmail { get; set; }
        /// <summary>Provisioning State of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Support.ProvisioningState? ProvisioningState { get; set; }

    }
}