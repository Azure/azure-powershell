
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for MonitoredSubscription.
.Description
Create an in-memory object for MonitoredSubscription.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.MonitoredSubscription
.Link
https://learn.microsoft.com/powershell/module/Az.NewRelic/new-aznewrelicmonitoredsubscriptionobject
#>
function New-AzNewRelicMonitoredSubscriptionObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.MonitoredSubscription')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The reason of not monitoring the subscription.")]
        [string]
        $Error,
        [Parameter(HelpMessage="List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
        If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag[]]
        $LogRuleFilteringTag,
        [Parameter(HelpMessage="Flag specifying if AAD logs should be sent for the Monitor resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $LogRuleSendAadLog,
        [Parameter(HelpMessage="Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $LogRuleSendActivityLog,
        [Parameter(HelpMessage="Flag specifying if subscription logs should be sent for the Monitor resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $LogRuleSendSubscriptionLog,
        [Parameter(HelpMessage="List of filtering tags to be used for capturing metrics.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag[]]
        $MetricRuleFilteringTag,
        [Parameter(HelpMessage="Flag specifying if metrics should be sent for the Monitor resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $MetricRuleSendMetric,
        [Parameter(HelpMessage="User Email.")]
        [string]
        $MetricRuleUserEmail,
        [Parameter(HelpMessage="The state of monitoring.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("InProgress", "Active", "Failed", "Deleting")]
        [string]
        $Status,
        [Parameter(HelpMessage="The subscriptionId to be monitored.")]
        [string]
        $SubscriptionId
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.MonitoredSubscription]::New()

        if ($PSBoundParameters.ContainsKey('Error')) {
            $Object.Error = $Error
        }
        if ($PSBoundParameters.ContainsKey('LogRuleFilteringTag')) {
            $Object.LogRuleFilteringTag = $LogRuleFilteringTag
        }
        if ($PSBoundParameters.ContainsKey('LogRuleSendAadLog')) {
            $Object.LogRuleSendAadLog = $LogRuleSendAadLog
        }
        if ($PSBoundParameters.ContainsKey('LogRuleSendActivityLog')) {
            $Object.LogRuleSendActivityLog = $LogRuleSendActivityLog
        }
        if ($PSBoundParameters.ContainsKey('LogRuleSendSubscriptionLog')) {
            $Object.LogRuleSendSubscriptionLog = $LogRuleSendSubscriptionLog
        }
        if ($PSBoundParameters.ContainsKey('MetricRuleFilteringTag')) {
            $Object.MetricRuleFilteringTag = $MetricRuleFilteringTag
        }
        if ($PSBoundParameters.ContainsKey('MetricRuleSendMetric')) {
            $Object.MetricRuleSendMetric = $MetricRuleSendMetric
        }
        if ($PSBoundParameters.ContainsKey('MetricRuleUserEmail')) {
            $Object.MetricRuleUserEmail = $MetricRuleUserEmail
        }
        if ($PSBoundParameters.ContainsKey('Status')) {
            $Object.Status = $Status
        }
        if ($PSBoundParameters.ContainsKey('SubscriptionId')) {
            $Object.SubscriptionId = $SubscriptionId
        }
        return $Object
    }
}

