
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Get a NewRelicMonitorResource
.Description
Get a NewRelicMonitorResource
.Example
Get-AzNewRelicMonitor
.Example
Get-AzNewRelicMonitor -ResourceGroupName ps-test
.Example
Get-AzNewRelicMonitor -Name test-01 -ResourceGroupName ps-test

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.ILinkedResource
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicMonitorResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <INewRelicIdentity>: Identity Parameter
  [ConfigurationName <String>]: The configuration name. Only 'default' value is supported.
  [Id <String>]: Resource identity path
  [MonitorName <String>]: Name of the Monitors resource
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [RuleSetName <String>]: Name of the TagRule
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.newrelic/get-aznewrelicmonitor
#>
function Get-AzNewRelicMonitor {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicMonitorResource], [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.ILinkedResource])]
[CmdletBinding(DefaultParameterSetName='List', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Alias('MonitorName')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [System.String]
    # Name of the Monitors resource
    ${Name},

    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='List1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Get')]
    [Parameter(ParameterSetName='List')]
    [Parameter(ParameterSetName='List1')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='Get')]
    [System.Management.Automation.SwitchParameter]
    # List Linked Resource
    ${ListLinkedResource},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
    
    $LinkedResource = $PSBoundParameters.Remove('ListLinkedResource')
    $EnvPSBoundParameters = @{}
    if ($PSBoundParameters.ContainsKey('Debug')) {
        $EnvPSBoundParameters['Debug'] = $Debug
    }
    if ($PSBoundParameters.ContainsKey('HttpPipelineAppend')) {
        $EnvPSBoundParameters['HttpPipelineAppend'] = $HttpPipelineAppend
    }
    if ($PSBoundParameters.ContainsKey('HttpPipelinePrepend')) {
        $EnvPSBoundParameters['HttpPipelinePrepend'] = $HttpPipelinePrepend
    }
    if ($PSBoundParameters.ContainsKey('Proxy')) {
        $EnvPSBoundParameters['Proxy'] = $Proxy
    }
    if ($PSBoundParameters.ContainsKey('ProxyCredential')) {
        $EnvPSBoundParameters['ProxyCredential'] = $ProxyCredential
    }
    if ($PSBoundParameters.ContainsKey('ProxyUseDefaultCredentials')) {
        $EnvPSBoundParameters['ProxyUseDefaultCredentials'] = $ProxyUseDefaultCredentials
    }

    if ($LinkedResource) {
        Az.NewRelic.internal\Get-AzNewRelicMonitorLinkedResource -ResourceGroupName $ResourceGroupName -Name $Name @EnvPSBoundParameters
    }
    else {
        Az.NewRelic.internal\Get-AzNewRelicMonitor @PSBoundParameters
    }
}
}