
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a NewRelicMonitorResource
.Description
Create a NewRelicMonitorResource
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicMonitorResource
.Link
https://learn.microsoft.com/powershell/module/az.newrelic/new-aznewrelicmonitor
#>
function New-AzNewRelicMonitor {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicMonitorResource])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('MonitorName')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [System.String]
    # Name of the Monitors resource
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("LIFTR", "NEWRELIC")]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Source of account creation
    ${AccountCreationSource},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Account id
    ${AccountInfoAccountId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.Security.SecureString]
    # ingestion key of account
    ${AccountInfoIngestionKey},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Region where New Relic account is present
    ${AccountInfoRegion},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Decides if enable a system assigned identity for the resource.
    ${EnableSystemAssignedIdentity},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # User id
    ${NewRelicAccountPropertyUserId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("LIFTR", "NEWRELIC")]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Source of org creation
    ${OrgCreationSource},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Organization id
    ${OrganizationInfoOrganizationId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("YEARLY", "MONTHLY", "WEEKLY")]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Different billing cycles like MONTHLY/WEEKLY.
    # this could be enum
    ${PlanDataBillingCycle},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.DateTime]
    # date when plan was applied
    ${PlanDataEffectiveDate},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # plan id as published by NewRelic
    ${PlanDataPlanDetail},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("PAYG", "COMMITTED")]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Different usage type like PAYG/COMMITTED.
    # this could be enum
    ${PlanDataUsageType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Status of Azure Subscription where Marketplace SaaS is located.
    ${SaaSAzureSubscriptionStatus},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # The Id of the Enterprise App used for Single sign-on.
    ${SingleSignOnPropertyEnterpriseAppId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Accepted", "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "NotSpecified")]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Provisioning state
    ${SingleSignOnPropertyProvisioningState},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Initial", "Enable", "Disable", "Existing")]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Single sign-on state
    ${SingleSignOnPropertySingleSignOnState},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # The login URL specific to this NewRelic Organization
    ${SingleSignOnPropertySingleSignOnUrl},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # State of the Azure Subscription containing the monitor resource
    ${SubscriptionState},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String[]]
    # The array of user assigned identities associated with the resource.
    # The elements in array will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.'
    ${UserAssignedIdentity},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # country if user
    ${UserInfoCountry},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # User Email
    ${UserInfoEmailAddress},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # First name
    ${UserInfoFirstName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Last name
    ${UserInfoLastName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Contact phone number
    ${UserInfoPhoneNumber},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
    try {
        Import-Module -Name Az.Resources
    }
    catch {
        Write-Error -Message "Required module Az.Resources is missing, make sure you have installed Az.Resources. Please try again later Or try importing manually."
    }

    $EnvPSBoundParameters = @{}
    if ($PSBoundParameters.ContainsKey('Debug')) {
        $EnvPSBoundParameters['Debug'] = $Debug
    }
    if ($PSBoundParameters.ContainsKey('HttpPipelineAppend')) {
        $EnvPSBoundParameters['HttpPipelineAppend'] = $HttpPipelineAppend
    }
    if ($PSBoundParameters.ContainsKey('HttpPipelinePrepend')) {
        $EnvPSBoundParameters['HttpPipelinePrepend'] = $HttpPipelinePrepend
    }
    if ($PSBoundParameters.ContainsKey('Proxy')) {
        $EnvPSBoundParameters['Proxy'] = $Proxy
    }
    if ($PSBoundParameters.ContainsKey('ProxyCredential')) {
        $EnvPSBoundParameters['ProxyCredential'] = $ProxyCredential
    }
    if ($PSBoundParameters.ContainsKey('ProxyUseDefaultCredentials')) {
        $EnvPSBoundParameters['ProxyUseDefaultCredentials'] = $ProxyUseDefaultCredentials
    }

    $NewRelicProviderNamespace = "NewRelic.Observability"
    $SaaSProviderNamespace = "Microsoft.SaaS"
    $InsightsProviderNamespace = "microsoft.insights"
    $ProviderNamespaceList = @($NewRelicProviderNamespace, $SaaSProviderNamespace, $InsightsProviderNamespace)

    # Checking resource provide $ProviderNamespaceList on this subscription
    $rpState = Get-AzResourceProvider -ProviderNamespace $ProviderNamespaceList @EnvPSBoundParameters
    $RegisteredResourcesForRP = $rpState.Where({$_.RegistrationState  -eq "Registered"})
    $RegisteredSaaS = $RegisteredResourcesForRP.ProviderNamespace.Contains($SaaSProviderNamespace)
    $RegisteredInsights = $RegisteredResourcesForRP.ProviderNamespace.Contains($InsightsProviderNamespace)
    $RegisteredNewRelic = $RegisteredResourcesForRP.ProviderNamespace.Contains($NewRelicProviderNamespace)
    if ($RegisteredSaaS -and $RegisteredInsights -and $RegisteredNewRelic)
    {
        Write-Debug -Message "NewRelic.Observability, Microsoft.SaaS and microsoft.insights have already registered. Continue creating."
    }
    if (!$RegisteredSaaS) {
        try
        {
            Write-Host -Message "Please wait while we register Microsoft.SaaS resource provider on this subscription. It might take upto 2 mins."
            $null = Register-AzResourceProvider -ProviderNamespace $SaaSProviderNamespace @EnvPSBoundParameters
            Write-Host -Message "Success to registered Microsoft.SaaS resource provider on this subscription."
        }
        catch
        {
            Write-Error -Message "Failed to register Microsoft.SaaS resource provider on this subscription, make sure you have owner or contributor role on this subscription. Please try again later Or try registering manually."
            throw 
        }
    }
    if (!$RegisteredInsights) {
        try
        {
            Write-Host -Message "Please wait while we register microsoft.insights resource provider on this subscription. It might take upto 2 mins."
            $null = Register-AzResourceProvider -ProviderNamespace $InsightsProviderNamespace @EnvPSBoundParameters
            Write-Host -Message "Success to registered microsoft.insights resource provider on this subscription"
        }
        catch
        {
            Write-Error -Message "Failed to register microsoft.insights resource provider on this subscription, make sure you have owner or contributor role on this subscription. Please try again later Or try registering manually."
            throw 
        }
    }
    if (!$RegisteredNewRelic) {
        try
        {
            Write-Host -Message "Please wait while we register NewRelic.Observability resource provider on this subscription. It might take upto 2 mins."
            $null = Register-AzResourceProvider -ProviderNamespace $NewRelicProviderNamespace @EnvPSBoundParameters
            Write-Host -Message "Success to registered NewRelic.Observability resource provider on this subscription"
        }
        catch
        {
            Write-Error -Message "Failed to register NewRelic.Observability resource provider on this subscription, make sure you have owner or contributor role on this subscription. Please try again later Or try registering manually"
            throw 
        }
    }

    Az.NewRelic.internal\New-AzNewRelicMonitor @PSBoundParameters
}

}