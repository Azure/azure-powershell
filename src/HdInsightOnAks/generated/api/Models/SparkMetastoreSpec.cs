// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>The metastore specification for Spark cluster.</summary>
    public partial class SparkMetastoreSpec :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal
    {

        /// <summary>Backing field for <see cref="DbName" /> property.</summary>
        private string _dbName;

        /// <summary>The database name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string DbName { get => this._dbName; set => this._dbName = value; }

        /// <summary>Backing field for <see cref="DbPasswordSecretName" /> property.</summary>
        private string _dbPasswordSecretName;

        /// <summary>The secret name which contains the database user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string DbPasswordSecretName { get => this._dbPasswordSecretName; set => this._dbPasswordSecretName = value; }

        /// <summary>Backing field for <see cref="DbServerHost" /> property.</summary>
        private string _dbServerHost;

        /// <summary>The database server host.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string DbServerHost { get => this._dbServerHost; set => this._dbServerHost = value; }

        /// <summary>Backing field for <see cref="DbUserName" /> property.</summary>
        private string _dbUserName;

        /// <summary>The database user name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string DbUserName { get => this._dbUserName; set => this._dbUserName = value; }

        /// <summary>Backing field for <see cref="KeyVaultId" /> property.</summary>
        private string _keyVaultId;

        /// <summary>The key vault resource id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string KeyVaultId { get => this._keyVaultId; set => this._keyVaultId = value; }

        /// <summary>Backing field for <see cref="ThriftUrl" /> property.</summary>
        private string _thriftUrl;

        /// <summary>The thrift url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string ThriftUrl { get => this._thriftUrl; set => this._thriftUrl = value; }

        /// <summary>Creates an new <see cref="SparkMetastoreSpec" /> instance.</summary>
        public SparkMetastoreSpec()
        {

        }
    }
    /// The metastore specification for Spark cluster.
    public partial interface ISparkMetastoreSpec :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>The database name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database name.",
        SerializedName = @"dbName",
        PossibleTypes = new [] { typeof(string) })]
        string DbName { get; set; }
        /// <summary>The secret name which contains the database user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The secret name which contains the database user password.",
        SerializedName = @"dbPasswordSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string DbPasswordSecretName { get; set; }
        /// <summary>The database server host.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database server host.",
        SerializedName = @"dbServerHost",
        PossibleTypes = new [] { typeof(string) })]
        string DbServerHost { get; set; }
        /// <summary>The database user name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database user name.",
        SerializedName = @"dbUserName",
        PossibleTypes = new [] { typeof(string) })]
        string DbUserName { get; set; }
        /// <summary>The key vault resource id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The key vault resource id.",
        SerializedName = @"keyVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultId { get; set; }
        /// <summary>The thrift url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The thrift url.",
        SerializedName = @"thriftUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ThriftUrl { get; set; }

    }
    /// The metastore specification for Spark cluster.
    internal partial interface ISparkMetastoreSpecInternal

    {
        /// <summary>The database name.</summary>
        string DbName { get; set; }
        /// <summary>The secret name which contains the database user password.</summary>
        string DbPasswordSecretName { get; set; }
        /// <summary>The database server host.</summary>
        string DbServerHost { get; set; }
        /// <summary>The database user name.</summary>
        string DbUserName { get; set; }
        /// <summary>The key vault resource id.</summary>
        string KeyVaultId { get; set; }
        /// <summary>The thrift url.</summary>
        string ThriftUrl { get; set; }

    }
}