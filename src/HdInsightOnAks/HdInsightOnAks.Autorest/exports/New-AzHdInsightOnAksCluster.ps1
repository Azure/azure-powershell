
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a cluster.
.Description
Creates a cluster.
.Example
# Create Simple Trino Cluster
$clusterPoolName="{your cluster pool name}";
$resourceGroupName="{your resource group name}";
$location="West US 2";

$clusterType="Trino"
# Get available cluster version based the command Get-AzHdInsightOnAksAvailableClusterVersion
$clusterVersion= (Get-AzHdInsightOnAksAvailableClusterVersion -Location $location | Where-Object {$_.ClusterType -eq $clusterType})[0]

$msiResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/{your resource group name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{your msi}";
$msiClientId="00000000-0000-0000-0000-000000000000";
$msiObjectId="00000000-0000-0000-0000-000000000000";

$userId="00000000-0000-0000-0000-000000000000";

# create node profile
$vmSize="Standard_E8ads_v5";
$workerCount=5;

$nodeProfile = New-AzHdInsightOnAksNodeProfileObject -Type Worker -Count $workerCount -VMSize $vmSize

$clusterName="{your cluster name}";


New-AzHdInsightOnAksCluster -Name $clusterName `
                            -PoolName $clusterPoolName `
                            -ResourceGroupName $resourceGroupName `
                            -Location $location `
                            -ClusterType $clusterType `
                            -ClusterVersion $clusterVersion.ClusterVersionValue `
                            -OssVersion $clusterVersion.OssVersion `
                            -AssignedIdentityResourceId $msiResourceId `
                            -AssignedIdentityClientId $msiClientId `
                            -AssignedIdentityObjectId $msiObjectId `
                            -ComputeProfileNode $nodeProfile `
                            -AuthorizationUserId $userId
.Example
# Create trino cluster with Hive catalog
$clusterPoolName="{your cluster pool name}";
$resourceGroupName="{your resource group name}";
$location="West US 2";

$clusterType="Trino"
# Get available cluster version based the command Get-AzHdInsightOnAksAvailableClusterVersion
$clusterVersion= (Get-AzHdInsightOnAksAvailableClusterVersion -Location $location | Where-Object {$_.ClusterType -eq $clusterType})[0]

# user msi related parameters
$msiResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/{your resource group name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{your msi}";
$msiClientId="00000000-0000-0000-0000-000000000000";
$msiObjectId="00000000-0000-0000-0000-000000000000";

# cluster authorization information
$userId="00000000-0000-0000-0000-000000000000";

# create node profile
$vmSize="Standard_E8ads_v5";
$workerCount=5;

$nodeProfile = New-AzHdInsightOnAksNodeProfileObject -Type Worker -Count $workerCount -VMSize $vmSize

$keyVaultResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{your resource group name}/providers/Microsoft.KeyVault/vaults/{your vault name}";
$secretName="{your secret name}"
$referenceName="{your secret reference name}";

$secretReference=New-AzHdInsightOnAksSecretReferenceObject -SecretName $secretName -ReferenceName $referenceName

#hive catalog configuration

$catalogName="{your catalog name}"
$metastoreDbConnectionURL="jdbc:sqlserver://{your sql server url};database={your db name};encrypt=true;trustServerCertificate=true;loginTimeout=30;";
$metastoreDbUserName="{your db user name}";
$metastoreDbPasswordSecret=$secretName;
$metastoreWarehouseDir="abfs://{your container name}@{your adls gen2 endpoint}/{your path}";

$trinoHiveCatalogOption=New-AzHdInsightOnAksTrinoHiveCatalogObject -CatalogName $catalogName -MetastoreDbConnectionUrl $metastoreDbConnectionURL -MetastoreDbConnectionUserName $metastoreDbUserName -MetastoreDbConnectionPasswordSecret $metastoreDbPasswordSecret -MetastoreWarehouseDir $metastoreWarehouseDir

$clusterName="{your cluster name}";


New-AzHdInsightOnAksCluster -Name $clusterName `
                            -PoolName $clusterPoolName `
                            -ResourceGroupName $resourceGroupName `
                            -Location $location `
                            -ClusterType $clusterType `
                            -ClusterVersion $clusterVersion.ClusterVersionValue `
                            -OssVersion $clusterVersion.OssVersion `
                            -AssignedIdentityResourceId $msiResourceId `
                            -AssignedIdentityClientId $msiClientId `
                            -AssignedIdentityObjectId $msiObjectId `
                            -ComputeProfileNode $nodeProfile `
                            -AuthorizationUserId $userId `
                            -KeyVaultResourceId $keyVaultResourceId `
                            -SecretReference $secretReference `
                            -TrinoHiveCatalog $trinoHiveCatalogOption
.Example
$clusterPoolName="{your cluster pool name}";
$resourceGroupName="{your resource group name}";
$location="West US 2";

$clusterType="Spark"
# Get available cluster version based the command Get-AzHdInsightOnAksAvailableClusterVersion
$clusterVersion= (Get-AzHdInsightOnAksAvailableClusterVersion -Location $location | Where-Object {$_.ClusterType -eq $clusterType})[0]

$msiResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/{your resource group name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{your msi}";
$msiClientId="00000000-0000-0000-0000-000000000000";
$msiObjectId="00000000-0000-0000-0000-000000000000";

$userId="00000000-0000-0000-0000-000000000000";

# create node profile
$vmSize="Standard_E8d_v5";
$workerCount=5;

$nodeProfile = New-AzHdInsightOnAksNodeProfileObject -Type Worker -Count $workerCount -VMSize $vmSize

$sparkStorageUrl="abfs://{your container name}@{your adls gen2 endpoint}"

$clusterName="{your cluster name}";


New-AzHdInsightOnAksCluster -Name $clusterName `
                            -PoolName $clusterPoolName `
                            -ResourceGroupName $resourceGroupName `
                            -Location $location `
                            -ClusterType $clusterType `
                            -ClusterVersion $clusterVersion.ClusterVersionValue `
                            -OssVersion $clusterVersion.OssVersion `
                            -AssignedIdentityResourceId $msiResourceId `
                            -AssignedIdentityClientId $msiClientId `
                            -AssignedIdentityObjectId $msiObjectId `
                            -ComputeProfileNode $nodeProfile `
                            -AuthorizationUserId $userId `
                            -SparkStorageUrl $sparkStorageUrl
.Example
$clusterPoolName="{your cluster pool name}";
$resourceGroupName="{your resource group name}";
$location="West US 2";

$clusterType="Spark"
# Get available cluster version based the command Get-AzHdInsightOnAksAvailableClusterVersion
$clusterVersion= (Get-AzHdInsightOnAksAvailableClusterVersion -Location $location | Where-Object {$_.ClusterType -eq $clusterType})[0]

$msiResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/{your resource group name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{your msi}";
$msiClientId="00000000-0000-0000-0000-000000000000";
$msiObjectId="00000000-0000-0000-0000-000000000000";

$userId="00000000-0000-0000-0000-000000000000";

# create node profile
$vmSize="Standard_E8s_v3";
$workerCount=5;
$nodeProfile = New-AzHdInsightOnAksNodeProfileObject -Type Worker -Count $workerCount -VMSize $vmSize

# secret profile
$keyVaultResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{your resource group name}/providers/Microsoft.KeyVault/vaults/{your vault name}";
$secretName="{your secret name}"
$referenceName="{your secret reference name}";

$secretReference=New-AzHdInsightOnAksSecretReferenceObject -SecretName $secretName -ReferenceName $referenceName

# Spark config
$sparkStorageUrl="abfs://{your container}@{your adls gen2 endpoint}" # example abfs://container@adlsgen2storage.dfs.core.windows.net

# Spark Hive catalog config
$metastoreDbName="{your db name}"
$metastoreServerName="{your sql server endpoint}" # example: server1.database.windows.net
$metastoreDbUserName="{your db user name}"
$metastoreDbPasswordSecret=$secretName

$clusterName="{your cluster name}";

New-AzHdInsightOnAksCluster -Name $clusterName `
                            -PoolName $clusterPoolName `
                            -ResourceGroupName $resourceGroupName `
                            -Location $location `
                            -ClusterType $clusterType `
                            -ClusterVersion $clusterVersion.ClusterVersionValue `
                            -OssVersion $clusterVersion.OssVersion `
                            -AssignedIdentityResourceId $msiResourceId `
                            -AssignedIdentityClientId $msiClientId `
                            -AssignedIdentityObjectId $msiObjectId `
                            -ComputeProfileNode $nodeProfile `
                            -AuthorizationUserId $userId `
                            -KeyVaultResourceId $keyVaultResourceId `
                            -SecretReference $secretReference `
                            -SparkStorageUrl $sparkStorageUrl `
                            -SparkHiveCatalogDbName $metastoreDbName `
                            -SparkHiveCatalogDbPasswordSecretName $metastoreDbPasswordSecret `
                            -SparkHiveCatalogDbServerName $metastoreServerName `
                            -SparkHiveCatalogDbUserName $metastoreDbUserName `
                            -SparkHiveCatalogKeyVaultId $keyVaultResourceId
.Example
$clusterPoolName="{your cluster pool name}";
$resourceGroupName="{your resource group name}";
$location="West US 2";

$clusterType="Flink"
# Get available cluster version based the command Get-AzHdInsightOnAksAvailableClusterVersion
$clusterVersion= (Get-AzHdInsightOnAksAvailableClusterVersion -Location $location | Where-Object {$_.ClusterType -eq $clusterType})[0]

$msiResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/{your resource group name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{your msi}";
$msiClientId="00000000-0000-0000-0000-000000000000";
$msiObjectId="00000000-0000-0000-0000-000000000000";

$userId="00000000-0000-0000-0000-000000000000";

# create node profile
$vmSize="Standard_E8d_v5";
$workerCount=5;

$nodeProfile = New-AzHdInsightOnAksNodeProfileObject -Type Worker -Count $workerCount -VMSize $vmSize

# Flink config
$flinkStorageUrl="abfs://{your container}@{your adls gen2 endpoint}" # example abfs://container@adlsgen2storage.dfs.core.windows.net
$taskManagerCpu=1
$taskManagerMemory=4096  # memory in MB

$jobManagerCpu=1
$jobManagerMemory=4096   # memory in MB

$clusterName="{your cluster name}";

New-AzHdInsightOnAksCluster -Name $clusterName `
                            -PoolName $clusterPoolName `
                            -ResourceGroupName $resourceGroupName `
                            -Location $location `
                            -ClusterType $clusterType `
                            -ClusterVersion $clusterVersion.ClusterVersionValue `
                            -OssVersion $clusterVersion.OssVersion `
                            -AssignedIdentityResourceId $msiResourceId `
                            -AssignedIdentityClientId $msiClientId `
                            -AssignedIdentityObjectId $msiObjectId `
                            -ComputeProfileNode $nodeProfile `
                            -AuthorizationUserId $userId `
                            -FlinkStorageUrl $flinkStorageUrl `
                            -JobManagerCpu $jobManagerCpu `
                            -JobManagerMemory $jobManagerMemory `
                            -TaskManagerCpu $taskManagerCpu `
                            -TaskManagerMemory $taskManagerMemory
.Example
$clusterPoolName="{your cluster pool name}";
$resourceGroupName="{your resource group name}";
$location="West US 2";

$clusterType="Flink"
# Get available cluster version based the command Get-AzHdInsightOnAksAvailableClusterVersion
$clusterVersion= (Get-AzHdInsightOnAksAvailableClusterVersion -Location $location | Where-Object {$_.ClusterType -eq $clusterType})[0]

$msiResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/{your resource group name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{your msi}";
$msiClientId="00000000-0000-0000-0000-000000000000";
$msiObjectId="00000000-0000-0000-0000-000000000000";

$userId="00000000-0000-0000-0000-000000000000";

# create node profile
$vmSize="Standard_E8d_v5";
$workerCount=5;

$nodeProfile = New-AzHdInsightOnAksNodeProfileObject -Type Worker -Count $workerCount -VMSize $vmSize

# Flink config
$flinkStorageUrl="abfs://{your container}@{your adls gen2 endpoint}" # example abfs://container@adlsgen2storage.dfs.core.windows.net
$taskManagerCpu=1
$taskManagerMemory=4096  # memory in MB

$jobManagerCpu=1
$jobManagerMemory=4096   # memory in MB

# secret profile
$keyVaultResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{your resource group name}/providers/Microsoft.KeyVault/vaults/{your vault name}";
$secretName="{your secret name}"
$referenceName="{your secret reference name}";

$secretReference=New-AzHdInsightOnAksSecretReferenceObject -SecretName $secretName -ReferenceName $referenceName

# Flink hive catalog config
$metastoreDbConnectionUrl="jdbc:sqlserver://{your sql server url};database={your db name};encrypt=true;trustServerCertificate=true;loginTimeout=30;";
$metastoreDbUserName="{your db user name}"
$metastoreDbPasswordSecret=$secretName

$clusterName="{your cluster name}";

New-AzHdInsightOnAksCluster -Name $clusterName `
                            -PoolName $clusterPoolName `
                            -ResourceGroupName $resourceGroupName `
                            -Location $location `
                            -ClusterType $clusterType `
                            -ClusterVersion $clusterVersion.ClusterVersionValue `
                            -OssVersion $clusterVersion.OssVersion `
                            -AssignedIdentityResourceId $msiResourceId `
                            -AssignedIdentityClientId $msiClientId `
                            -AssignedIdentityObjectId $msiObjectId `
                            -ComputeProfileNode $nodeProfile `
                            -AuthorizationUserId $userId `
                            -KeyVaultResourceId $keyVaultResourceId `
                            -SecretReference $secretReference `
                            -FlinkStorageUrl $flinkStorageUrl `
                            -JobManagerCpu $jobManagerCpu `
                            -JobManagerMemory $jobManagerMemory `
                            -TaskManagerCpu $taskManagerCpu `
                            -TaskManagerMemory $taskManagerMemory `
                            -FlinkHiveCatalogDbConnectionUrl $metastoreDbConnectionUrl `
                            -FlinkHiveCatalogDbUserName $metastoreDbUserName `
                            -FlinkHiveCatalogDbPasswordSecretName $metastoreDbPasswordSecret

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICluster
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHdInsightOnAksIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICluster
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CLUSTERPOOLINPUTOBJECT <IHdInsightOnAksIdentity>: Identity Parameter
  [ClusterName <String>]: The name of the HDInsight cluster.
  [ClusterPoolName <String>]: The name of the cluster pool.
  [Id <String>]: Resource identity path
  [Location <String>]: The name of the Azure region.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

COMPUTEPROFILENODE <INodeProfile[]>: The nodes definitions.
  Count <Int32>: The number of virtual machines.
  Type <String>: The node type.
  VMSize <String>: The virtual machine SKU.

HDINSIGHTONAKSCLUSTER <ICluster>: The cluster.
  Location <String>: The geo-location where the resource lives
  [Tag <ITrackedResourceTags>]: Resource tags.
    [(Any) <String>]: This indicates any property can be added to this object.
  [ApplicationLogStdErrorEnabled <Boolean?>]: True if stderror is enabled, otherwise false.
  [ApplicationLogStdOutEnabled <Boolean?>]: True if stdout is enabled, otherwise false.
  [AuthorizationProfileGroupId <List<String>>]: AAD group Ids authorized for data plane access.
  [AuthorizationProfileUserId <List<String>>]: AAD user Ids authorized for data plane access.
  [AutoscaleProfileAutoscaleType <String>]: User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
  [AutoscaleProfileEnabled <Boolean?>]: This indicates whether auto scale is enabled on HDInsight on AKS cluster.
  [AutoscaleProfileGracefulDecommissionTimeout <Int32?>]: This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
  [ClusterType <String>]: The type of cluster.
  [ComputeProfileNode <List<INodeProfile>>]: The nodes definitions.
    Count <Int32>: The number of virtual machines.
    Type <String>: The node type.
    VMSize <String>: The virtual machine SKU.
  [CoordinatorDebugEnable <Boolean?>]: The flag that if enable debug or not.
  [CoordinatorDebugPort <Int32?>]: The debug port.
  [CoordinatorDebugSuspend <Boolean?>]: The flag that if suspend debug or not.
  [CoordinatorHighAvailabilityEnabled <Boolean?>]: The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
  [FlinkProfileNumReplica <Int32?>]: The number of task managers.
  [HistoryServerCpu <Single?>]: The required CPU.
  [HistoryServerMemory <Int64?>]: The required memory in MB, Container memory will be 110 percentile
  [HiveMetastoreDbConnectionPasswordSecret <String>]: Secret reference name from secretsProfile.secrets containing password for database connection.
  [HiveMetastoreDbConnectionUrl <String>]: Connection string for hive metastore database.
  [HiveMetastoreDbConnectionUserName <String>]: User name for database connection.
  [IdentityProfileMsiClientId <String>]: ClientId of the MSI.
  [IdentityProfileMsiObjectId <String>]: ObjectId of the MSI.
  [IdentityProfileMsiResourceId <String>]: ResourceId of the MSI.
  [JobManagerCpu <Single?>]: The required CPU.
  [JobManagerMemory <Int64?>]: The required memory in MB, Container memory will be 110 percentile
  [LoadBasedConfigCooldownPeriod <Int32?>]: This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
  [LoadBasedConfigMaxNode <Int32?>]: User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
  [LoadBasedConfigMinNode <Int32?>]: User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
  [LoadBasedConfigPollInterval <Int32?>]: User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
  [LoadBasedConfigScalingRule <List<IScalingRule>>]: The scaling rules.
    ActionType <String>: The action type.
    ComparisonRuleOperator <String>: The comparison operator.
    ComparisonRuleThreshold <Single>: Threshold setting.
    EvaluationCount <Int32>: This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
    ScalingMetric <String>: Metrics name for individual workloads. For example: cpu
  [LogAnalyticProfileEnabled <Boolean?>]: True if log analytics is enabled for the cluster, otherwise false.
  [LogAnalyticProfileMetricsEnabled <Boolean?>]: True if metrics are enabled, otherwise false.
  [MetastoreSpecDbName <String>]: The database name.
  [MetastoreSpecDbPasswordSecretName <String>]: The secret name which contains the database user password.
  [MetastoreSpecDbServerHost <String>]: The database server host.
  [MetastoreSpecDbUserName <String>]: The database user name.
  [MetastoreSpecKeyVaultId <String>]: The key vault resource id.
  [MetastoreSpecThriftUrl <String>]: The thrift url.
  [ProfileClusterVersion <String>]: Version with 3/4 part.
  [ProfileKafkaProfile <IClusterProfileKafkaProfile>]: Kafka cluster profile.
    [(Any) <Object>]: This indicates any property can be added to this object.
  [ProfileLlapProfile <IClusterProfileLlapProfile>]: LLAP cluster profile.
    [(Any) <Object>]: This indicates any property can be added to this object.
  [ProfileOssVersion <String>]: Version with three part.
  [ProfileScriptActionProfile <List<IScriptActionProfile>>]: The script action profile list.
    Name <String>: Script name.
    Service <List<String>>: List of services to apply the script action.
    Type <String>: Type of the script action. Supported type is bash scripts.
    Url <String>: Url of the script file.
    [Parameter <String>]: Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
    [ShouldPersist <Boolean?>]: Specify if the script should persist on the cluster.
    [TimeoutInMinute <Int32?>]: Timeout duration for the script action in minutes.
  [ProfileServiceConfigsProfile <List<IClusterServiceConfigsProfile>>]: The service configs profiles.
    Config <List<IClusterServiceConfig>>: List of service configs.
      Component <String>: Name of the component the config files should apply to.
      File <List<IClusterConfigFile>>: List of Config Files.
        FileName <String>: Configuration file name.
        [Content <String>]: Free form content of the entire configuration file.
        [Encoding <String>]: This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
        [Path <String>]: Path of the config file if content is specified.
        [Value <IClusterConfigFileValues>]: List of key value pairs         where key represents a valid service configuration name and value represents the value of the config.
          [(Any) <String>]: This indicates any property can be added to this object.
    ServiceName <String>: Name of the service the configurations should apply to.
  [ProfileStubProfile <IClusterProfileStubProfile>]: Stub cluster profile.
    [(Any) <Object>]: This indicates any property can be added to this object.
  [PrometheuProfileEnabled <Boolean?>]: Enable Prometheus for cluster or not.
  [ScheduleBasedConfigDefaultCount <Int32?>]: Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
  [ScheduleBasedConfigSchedule <List<ISchedule>>]: This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
    Count <Int32>: User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
    Day <List<String>>: User has to set the days where schedule has to be set for autoscale operation.
    EndTime <String>: User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
    StartTime <String>: User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
  [ScheduleBasedConfigTimeZone <String>]: User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
  [SecretProfileKeyVaultResourceId <String>]: Name of the user Key Vault where all the cluster specific user secrets are stored.
  [SecretProfileSecret <List<ISecretReference>>]: Properties of Key Vault secret.
    KeyVaultObjectName <String>: Object identifier name of the secret in key vault.
    ReferenceName <String>: Reference name of the secret to be used in service configs.
    Type <String>: Type of key vault object: secret, key or certificate.
    [Version <String>]: Version of the secret in key vault.
  [SparkProfileDefaultStorageUrl <String>]: The default storage URL.
  [SparkProfileUserPluginsSpecPlugin <List<ISparkUserPlugin>>]: Spark user plugins.
    Path <String>: Fully qualified path to the folder containing the plugins.
  [SshProfileCount <Int32?>]: Number of ssh pods per cluster.
  [StorageHivecatalogName <String>]: Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
  [StorageHivecatalogSchema <String>]: Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
  [StoragePartitionRetentionInDay <Int32?>]: Retention period for query log table partitions, this doesn't have any affect on actual data.
  [StoragePath <String>]: Azure storage location of the blobs.
  [StorageStoragekey <String>]: Storage key is only required for wasb(s) storage.
  [StorageUri <String>]: Storage account uri which is used for savepoint and checkpoint state.
  [TaskManagerCpu <Single?>]: The required CPU.
  [TaskManagerMemory <Int64?>]: The required memory in MB, Container memory will be 110 percentile
  [TrinoProfileCatalogOptionsHive <List<IHiveCatalogOption>>]: hive catalog options.
    CatalogName <String>: Name of trino catalog which should use specified hive metastore.
    MetastoreDbConnectionPasswordSecret <String>: Secret reference name from secretsProfile.secrets containing password for database connection.
    MetastoreDbConnectionUrl <String>: Connection string for hive metastore database.
    MetastoreDbConnectionUserName <String>: User name for database connection.
    MetastoreWarehouseDir <String>: Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
  [TrinoProfileUserPluginsSpecPlugin <List<ITrinoUserPlugin>>]: Trino user plugins.
    [Enabled <Boolean?>]: Denotes whether the plugin is active or not.
    [Name <String>]: This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
    [Path <String>]: Fully qualified path to the folder containing the plugins.
  [WorkerDebugEnable <Boolean?>]: The flag that if enable debug or not.
  [WorkerDebugPort <Int32?>]: The debug port.
  [WorkerDebugSuspend <Boolean?>]: The flag that if suspend debug or not.

INPUTOBJECT <IHdInsightOnAksIdentity>: Identity Parameter
  [ClusterName <String>]: The name of the HDInsight cluster.
  [ClusterPoolName <String>]: The name of the cluster pool.
  [Id <String>]: Resource identity path
  [Location <String>]: The name of the Azure region.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

LOADBASEDCONFIGSCALINGRULE <IScalingRule[]>: The scaling rules.
  ActionType <String>: The action type.
  ComparisonRuleOperator <String>: The comparison operator.
  ComparisonRuleThreshold <Single>: Threshold setting.
  EvaluationCount <Int32>: This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
  ScalingMetric <String>: Metrics name for individual workloads. For example: cpu

SCHEDULEBASEDCONFIGSCHEDULE <ISchedule[]>: This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
  Count <Int32>: User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
  Day <List<String>>: User has to set the days where schedule has to be set for autoscale operation.
  EndTime <String>: User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
  StartTime <String>: User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).

SCRIPTACTIONPROFILE <IScriptActionProfile[]>: The script action profile list.
  Name <String>: Script name.
  Service <List<String>>: List of services to apply the script action.
  Type <String>: Type of the script action. Supported type is bash scripts.
  Url <String>: Url of the script file.
  [Parameter <String>]: Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
  [ShouldPersist <Boolean?>]: Specify if the script should persist on the cluster.
  [TimeoutInMinute <Int32?>]: Timeout duration for the script action in minutes.

SECRETREFERENCE <ISecretReference[]>: Properties of Key Vault secret.
  KeyVaultObjectName <String>: Object identifier name of the secret in key vault.
  ReferenceName <String>: Reference name of the secret to be used in service configs.
  Type <String>: Type of key vault object: secret, key or certificate.
  [Version <String>]: Version of the secret in key vault.

SERVICECONFIGSPROFILE <IClusterServiceConfigsProfile[]>: The service configs profiles.
  Config <List<IClusterServiceConfig>>: List of service configs.
    Component <String>: Name of the component the config files should apply to.
    File <List<IClusterConfigFile>>: List of Config Files.
      FileName <String>: Configuration file name.
      [Content <String>]: Free form content of the entire configuration file.
      [Encoding <String>]: This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
      [Path <String>]: Path of the config file if content is specified.
      [Value <IClusterConfigFileValues>]: List of key value pairs         where key represents a valid service configuration name and value represents the value of the config.
        [(Any) <String>]: This indicates any property can be added to this object.
  ServiceName <String>: Name of the service the configurations should apply to.

SPARKPROFILEUSERPLUGINSSPECPLUGIN <ISparkUserPlugin[]>: Spark user plugins.
  Path <String>: Fully qualified path to the folder containing the plugins.

TRINOHIVECATALOG <IHiveCatalogOption[]>: hive catalog options.
  CatalogName <String>: Name of trino catalog which should use specified hive metastore.
  MetastoreDbConnectionPasswordSecret <String>: Secret reference name from secretsProfile.secrets containing password for database connection.
  MetastoreDbConnectionUrl <String>: Connection string for hive metastore database.
  MetastoreDbConnectionUserName <String>: User name for database connection.
  MetastoreWarehouseDir <String>: Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri

TRINOPROFILEUSERPLUGINSSPECPLUGIN <ITrinoUserPlugin[]>: Trino user plugins.
  [Enabled <Boolean?>]: Denotes whether the plugin is active or not.
  [Name <String>]: This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
  [Path <String>]: Fully qualified path to the folder containing the plugins.
.Link
https://learn.microsoft.com/powershell/module/az.hdinsightonaks/new-azhdinsightonakscluster
#>
function New-AzHdInsightOnAksCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICluster])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpool', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Alias('ClusterName')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Path')]
    [System.String]
    # The name of the HDInsight cluster.
    ${Name},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Alias('ClusterPoolName')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Path')]
    [System.String]
    # The name of the cluster pool.
    ${PoolName},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Create')]
    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaJsonFilePath')]
    [Parameter(ParameterSetName='CreateViaJsonString')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHdInsightOnAksIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='CreateViaIdentityClusterpool', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHdInsightOnAksIdentity]
    # Identity Parameter
    # To construct, see NOTES section for CLUSTERPOOLINPUTOBJECT properties and create a hash table.
    ${ClusterpoolInputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpool', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICluster]
    # The cluster.
    # To construct, see NOTES section for HDINSIGHTONAKSCLUSTER properties and create a hash table.
    ${HdInsightOnAksCluster},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # True if stderror is enabled, otherwise false.
    ${ApplicationLogStdErrorEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # True if stdout is enabled, otherwise false.
    ${ApplicationLogStdOutEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # ClientId of the MSI.
    ${AssignedIdentityClientId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # ObjectId of the MSI.
    ${AssignedIdentityObjectId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # ResourceId of the MSI.
    ${AssignedIdentityResourceId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String[]]
    # AAD group Ids authorized for data plane access.
    ${AuthorizationGroupId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String[]]
    # AAD user Ids authorized for data plane access.
    ${AuthorizationUserId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("ScheduleBased", "LoadBased")]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
    ${AutoscaleProfileAutoscaleType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # This indicates whether auto scale is enabled on HDInsight on AKS cluster.
    ${AutoscaleProfileEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place.
    # This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED.
    # The default value is 3600 seconds.
    # Negative value (like -1) is handled as infinite timeout.
    ${AutoscaleProfileGracefulDecommissionTimeout},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The type of cluster.
    ${ClusterType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Version with 3/4 part.
    ${ClusterVersion},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.INodeProfile[]]
    # The nodes definitions.
    # To construct, see NOTES section for COMPUTEPROFILENODE properties and create a hash table.
    ${ComputeProfileNode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The flag that if enable debug or not.
    ${CoordinatorDebugEnable},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # The debug port.
    ${CoordinatorDebugPort},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The flag that if suspend debug or not.
    ${CoordinatorDebugSuspend},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
    # Default: true.
    ${CoordinatorHighAvailabilityEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # True if log analytics is enabled for the cluster, otherwise false.
    ${EnableLogAnalytics},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Connection string for hive metastore database.
    ${FlinkHiveCatalogDbConnectionUrl},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Secret reference name from secretsProfile.secrets containing password for database connection.
    ${FlinkHiveCatalogDbPasswordSecretName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # User name for database connection.
    ${FlinkHiveCatalogDbUserName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Storage account uri which is used for savepoint and checkpoint state.
    ${FlinkStorageUrl},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # The number of task managers.
    ${FlinkTaskManagerReplicaCount},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Single]
    # The required CPU.
    ${HistoryServerCpu},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int64]
    # The required memory in MB, Container memory will be 110 percentile
    ${HistoryServerMemory},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Single]
    # The required CPU.
    ${JobManagerCpu},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int64]
    # The required memory in MB, Container memory will be 110 percentile
    ${JobManagerMemory},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileKafkaProfile]))]
    [System.Collections.Hashtable]
    # Kafka cluster profile.
    ${KafkaProfile},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Name of the user Key Vault where all the cluster specific user secrets are stored.
    ${KeyVaultResourceId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileLlapProfile]))]
    [System.Collections.Hashtable]
    # LLAP cluster profile.
    ${LlapProfile},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it.
    # The default value is 300 seconds.
    ${LoadBasedConfigCooldownPeriod},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
    ${LoadBasedConfigMaxNode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
    ${LoadBasedConfigMinNode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
    ${LoadBasedConfigPollInterval},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScalingRule[]]
    # The scaling rules.
    # To construct, see NOTES section for LOADBASEDCONFIGSCALINGRULE properties and create a hash table.
    ${LoadBasedConfigScalingRule},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # True if metrics are enabled, otherwise false.
    ${LogAnalyticProfileMetricsEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Version with three part.
    ${OssVersion},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable Prometheus for cluster or not.
    ${PrometheuProfileEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # Setting default node count of current schedule configuration.
    # Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
    ${ScheduleBasedConfigDefaultCount},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISchedule[]]
    # This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
    # To construct, see NOTES section for SCHEDULEBASEDCONFIGSCHEDULE properties and create a hash table.
    ${ScheduleBasedConfigSchedule},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
    ${ScheduleBasedConfigTimeZone},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile[]]
    # The script action profile list.
    # To construct, see NOTES section for SCRIPTACTIONPROFILE properties and create a hash table.
    ${ScriptActionProfile},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretReference[]]
    # Properties of Key Vault secret.
    # To construct, see NOTES section for SECRETREFERENCE properties and create a hash table.
    ${SecretReference},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterServiceConfigsProfile[]]
    # The service configs profiles.
    # To construct, see NOTES section for SERVICECONFIGSPROFILE properties and create a hash table.
    ${ServiceConfigsProfile},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The database name.
    ${SparkHiveCatalogDbName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The secret name which contains the database user password.
    ${SparkHiveCatalogDbPasswordSecretName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The database server host.
    ${SparkHiveCatalogDbServerName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The database user name.
    ${SparkHiveCatalogDbUserName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The key vault resource id.
    ${SparkHiveCatalogKeyVaultId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The default storage URL.
    ${SparkStorageUrl},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # The thrift url.
    ${SparkThriftUrl},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # Number of ssh pods per cluster.
    ${SshProfileCount},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
    ${StorageHivecatalogName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
    ${StorageHivecatalogSchema},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # Retention period for query log table partitions, this doesn't have any affect on actual data.
    ${StoragePartitionRetentionInDay},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Azure storage location of the blobs.
    ${StoragePath},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileStubProfile]))]
    [System.Collections.Hashtable]
    # Stub cluster profile.
    ${StubProfile},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Single]
    # The required CPU.
    ${TaskManagerCpu},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int64]
    # The required memory in MB, Container memory will be 110 percentile
    ${TaskManagerMemory},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption[]]
    # hive catalog options.
    # To construct, see NOTES section for TRINOHIVECATALOG properties and create a hash table.
    ${TrinoHiveCatalog},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin[]]
    # Trino user plugins.
    # To construct, see NOTES section for TRINOPROFILEUSERPLUGINSSPECPLUGIN properties and create a hash table.
    ${TrinoProfileUserPluginsSpecPlugin},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The flag that if enable debug or not.
    ${WorkerDebugEnable},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Int32]
    # The debug port.
    ${WorkerDebugPort},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityClusterpoolExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The flag that if suspend debug or not.
    ${WorkerDebugSuspend},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Create = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_Create';
            CreateExpanded = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateExpanded';
            CreateViaIdentity = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateViaIdentity';
            CreateViaIdentityClusterpool = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateViaIdentityClusterpool';
            CreateViaIdentityClusterpoolExpanded = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateViaIdentityClusterpoolExpanded';
            CreateViaIdentityExpanded = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateViaIdentityExpanded';
            CreateViaJsonFilePath = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.HdInsightOnAks.private\New-AzHdInsightOnAksCluster_CreateViaJsonString';
        }
        if (('Create', 'CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
