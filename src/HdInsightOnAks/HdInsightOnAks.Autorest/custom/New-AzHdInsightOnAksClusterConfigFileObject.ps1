# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create cluster config file.
.Description
Create cluster config file.
.Example
$coreSiteConfigFile=New-AzHDInsightAksClusterConfigFile -FileName "core-site.xml" -Value @{"fs.defaultFS"="abfs://testcontainer@$teststorage.dfs.core.windows.net"}

.Inputs
System.Collections.HashTable
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterConfigFile
.Notes

.Link
https://learn.microsoft.com/powershell/module/az.hdinsightonaks/New-AzHdInsightOnAksClusterConfigFileObject
#>
function New-AzHdInsightOnAksClusterConfigFileObject {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterConfigFile])]
    [CmdletBinding(DefaultParameterSetName = 'Create', PositionalBinding = $false)]
    param(
        [Parameter(ParameterSetName = 'Create', Mandatory)]
        [Alias('Name')]
        [System.String]
        # The name of the config file.
        ${FileName},

        [Parameter(ParameterSetName = 'Create', Mandatory)]
        [System.Collections.HashTable]
        # List of key value pairs where key represents a valid service configuration name and value represents the value of the config.
        ${Value}
    )

    process {
        try {
            $configFileValue = New-Object Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterConfigFileValues

            foreach ($item in $Value.GetEnumerator()) {
                $configFileValue.Add($item.Name, $item.Value)
            }

            $configFile = New-Object Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterConfigFile -Property @{FileName = $FileName; Value = $configFileValue }
            return $configFile
        }
        catch {
       
            throw
        }

        finally {
      
        }
    }
}