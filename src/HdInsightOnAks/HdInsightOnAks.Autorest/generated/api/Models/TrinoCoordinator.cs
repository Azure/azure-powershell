// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>Trino Coordinator.</summary>
    public partial class TrinoCoordinator :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal
    {

        /// <summary>Backing field for <see cref="Debug" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig _debug;

        /// <summary>Trino debug configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Debug { get => (this._debug = this._debug ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoDebugConfig()); set => this._debug = value; }

        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? DebugEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfigInternal)Debug).Enable; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfigInternal)Debug).Enable = value ?? default(bool); }

        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? DebugPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfigInternal)Debug).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfigInternal)Debug).Port = value ?? default(int); }

        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? DebugSuspend { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfigInternal)Debug).Suspend; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfigInternal)Debug).Suspend = value ?? default(bool); }

        /// <summary>Backing field for <see cref="HighAvailabilityEnabled" /> property.</summary>
        private bool? _highAvailabilityEnabled;

        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public bool? HighAvailabilityEnabled { get => this._highAvailabilityEnabled; set => this._highAvailabilityEnabled = value; }

        /// <summary>Internal Acessors for Debug</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal.Debug { get => (this._debug = this._debug ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoDebugConfig()); set { {_debug = value;} } }

        /// <summary>Creates an new <see cref="TrinoCoordinator" /> instance.</summary>
        public TrinoCoordinator()
        {

        }
    }
    /// Trino Coordinator.
    public partial interface ITrinoCoordinator :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable debug or not.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The debug port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? DebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if suspend debug or not.",
        SerializedName = @"suspend",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DebugSuspend { get; set; }
        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.",
        SerializedName = @"highAvailabilityEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HighAvailabilityEnabled { get; set; }

    }
    /// Trino Coordinator.
    internal partial interface ITrinoCoordinatorInternal

    {
        /// <summary>Trino debug configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Debug { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        bool? DebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        int? DebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        bool? DebugSuspend { get; set; }
        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        bool? HighAvailabilityEnabled { get; set; }

    }
}