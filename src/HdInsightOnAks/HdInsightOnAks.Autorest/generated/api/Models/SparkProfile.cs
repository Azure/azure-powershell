// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>The spark cluster profile.</summary>
    public partial class SparkProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfile,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal
    {

        /// <summary>Backing field for <see cref="DefaultStorageUrl" /> property.</summary>
        private string _defaultStorageUrl;

        /// <summary>The default storage URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string DefaultStorageUrl { get => this._defaultStorageUrl; set => this._defaultStorageUrl = value; }

        /// <summary>Backing field for <see cref="MetastoreSpec" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec _metastoreSpec;

        /// <summary>The metastore specification for Spark cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec MetastoreSpec { get => (this._metastoreSpec = this._metastoreSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SparkMetastoreSpec()); set => this._metastoreSpec = value; }

        /// <summary>The database name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbName = value ?? null; }

        /// <summary>The secret name which contains the database user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbPasswordSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbPasswordSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbPasswordSecretName = value ?? null; }

        /// <summary>The database server host.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbServerHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbServerHost; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbServerHost = value ?? null; }

        /// <summary>The database user name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).DbUserName = value ?? null; }

        /// <summary>The key vault resource id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecKeyVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).KeyVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).KeyVaultId = value ?? null; }

        /// <summary>The thrift url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecThriftUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).ThriftUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpecInternal)MetastoreSpec).ThriftUrl = value ?? null; }

        /// <summary>Internal Acessors for MetastoreSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal.MetastoreSpec { get => (this._metastoreSpec = this._metastoreSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SparkMetastoreSpec()); set { {_metastoreSpec = value;} } }

        /// <summary>Internal Acessors for UserPluginsSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugins Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal.UserPluginsSpec { get => (this._userPluginsSpec = this._userPluginsSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SparkUserPlugins()); set { {_userPluginsSpec = value;} } }

        /// <summary>Spark user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin> UserPluginSpecPlugin { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPluginsInternal)UserPluginsSpec).Plugin; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPluginsInternal)UserPluginsSpec).Plugin = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="UserPluginsSpec" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugins _userPluginsSpec;

        /// <summary>Spark user plugins spec</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugins UserPluginsSpec { get => (this._userPluginsSpec = this._userPluginsSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SparkUserPlugins()); set => this._userPluginsSpec = value; }

        /// <summary>Creates an new <see cref="SparkProfile" /> instance.</summary>
        public SparkProfile()
        {

        }
    }
    /// The spark cluster profile.
    public partial interface ISparkProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>The default storage URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The default storage URL.",
        SerializedName = @"defaultStorageUrl",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultStorageUrl { get; set; }
        /// <summary>The database name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database name.",
        SerializedName = @"dbName",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbName { get; set; }
        /// <summary>The secret name which contains the database user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The secret name which contains the database user password.",
        SerializedName = @"dbPasswordSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbPasswordSecretName { get; set; }
        /// <summary>The database server host.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database server host.",
        SerializedName = @"dbServerHost",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbServerHost { get; set; }
        /// <summary>The database user name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database user name.",
        SerializedName = @"dbUserName",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbUserName { get; set; }
        /// <summary>The key vault resource id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The key vault resource id.",
        SerializedName = @"keyVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecKeyVaultId { get; set; }
        /// <summary>The thrift url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The thrift url.",
        SerializedName = @"thriftUrl",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecThriftUrl { get; set; }
        /// <summary>Spark user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Spark user plugins.",
        SerializedName = @"plugins",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin> UserPluginSpecPlugin { get; set; }

    }
    /// The spark cluster profile.
    internal partial interface ISparkProfileInternal

    {
        /// <summary>The default storage URL.</summary>
        string DefaultStorageUrl { get; set; }
        /// <summary>The metastore specification for Spark cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec MetastoreSpec { get; set; }
        /// <summary>The database name.</summary>
        string MetastoreSpecDbName { get; set; }
        /// <summary>The secret name which contains the database user password.</summary>
        string MetastoreSpecDbPasswordSecretName { get; set; }
        /// <summary>The database server host.</summary>
        string MetastoreSpecDbServerHost { get; set; }
        /// <summary>The database user name.</summary>
        string MetastoreSpecDbUserName { get; set; }
        /// <summary>The key vault resource id.</summary>
        string MetastoreSpecKeyVaultId { get; set; }
        /// <summary>The thrift url.</summary>
        string MetastoreSpecThriftUrl { get; set; }
        /// <summary>Spark user plugins.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin> UserPluginSpecPlugin { get; set; }
        /// <summary>Spark user plugins spec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugins UserPluginsSpec { get; set; }

    }
}