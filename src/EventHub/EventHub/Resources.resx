<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateConsumerGroup" xml:space="preserve">
    <value>Adding a new Consumer Group {0} under Eventhub {1}</value>
  </data>
  <data name="CreateEventHub" xml:space="preserve">
    <value>Creating new EventHub:{0} under Namespace:{1}</value>
  </data>
  <data name="CreateEventHubAuthorizationrule" xml:space="preserve">
    <value>Creating new AuthorizationRule named:{0} for EventHub: {1}</value>
  </data>
  <data name="CreateEventhubCluster" xml:space="preserve">
    <value>Creating new Eventhub Cluster in ResourceGroup {0} with Name {1}</value>
  </data>
  <data name="CreateNamespace" xml:space="preserve">
    <value>Create a new EvetntHub-Namespace:{0} under Resource Group:{1}</value>
  </data>
  <data name="CreateNamespaceAuthorizationrule" xml:space="preserve">
    <value>Creating new AuthorizationRule named:{0} for Namespace: {1}</value>
  </data>
  <data name="DRBreakPairing" xml:space="preserve">
    <value>Disabling the Disaster Recovery and stops replicating changes from primary namespace {0} to secondary namespace {1}</value>
  </data>
  <data name="DRFailOver" xml:space="preserve">
    <value>Invoking Geo DR failover and reconfigure the alias - {0} to point to the secondary namespace - {1}</value>
  </data>
  <data name="DRNew" xml:space="preserve">
    <value>Creating new Alias :{0} under Namespace:{1}</value>
  </data>
  <data name="DRRemoveAlias" xml:space="preserve">
    <value>Deleting Alias: {0} of Namespace{1}</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File {0} does not exist</value>
  </data>
  <data name="GetEventhubCluster" xml:space="preserve">
    <value>Get Eventhub Cluster details from ResourceGroup {0} with NAme {1}</value>
  </data>
  <data name="RegenerateKeyEventHub" xml:space="preserve">
    <value>Generating PrimaryKey/SecondaryKey for AuthorizationRule: {0} of EventHub: {1}</value>
  </data>
  <data name="RegenerateKeyNamesapce" xml:space="preserve">
    <value>Generating PrimaryKey/SecondaryKey for AuthorizationRule: {0} of Namespace:{1}</value>
  </data>
  <data name="RemoveConsumerGroup" xml:space="preserve">
    <value>Deleting ConsumerGrop:{0} from Eventhub:{1}</value>
  </data>
  <data name="RemoveEventHubAuthorizationRule" xml:space="preserve">
    <value>Removeing AtuhorizationRule:{0} from EventHub:{1} of Namespace: {2}</value>
  </data>
  <data name="RemoveEventhubcluster" xml:space="preserve">
    <value>Deleteing Eventhub Cluster {1} from ResourceGroup {0}</value>
  </data>
  <data name="RemoveNamespaceAuthorizationRule" xml:space="preserve">
    <value>Removing AtuhorizationRule:{0} of Namespace: {1}</value>
  </data>
  <data name="RemoveNamespaces" xml:space="preserve">
    <value>Delete NameSpace:{0} from ResourceGroup:{1}</value>
  </data>
  <data name="RemoveNetwrokruleSet" xml:space="preserve">
    <value>Delete NetworkruleSet for Namespace {0} of ResourceGroup {1}</value>
  </data>
  <data name="RemovingEventHub" xml:space="preserve">
    <value>Deleting EventHub: {0} of Namespace{1}</value>
  </data>
  <data name="RemovingEventHubAuthorizationRule" xml:space="preserve">
    <value>Are you sure you want to remove AtuhorizationRule:{0} from EventHub: {1} of Namespace: {2}</value>
  </data>
  <data name="RemovingNamespaceAuthorizationRule" xml:space="preserve">
    <value>Are you sure you want to delete  AtuhorizationRule:{0} of Namespace: {1}</value>
  </data>
  <data name="SetEventhubCluster" xml:space="preserve">
    <value>update Eventhub Cluster in ResourceGroup {0} with Name {1}</value>
  </data>
  <data name="UpdateConsumerGroup" xml:space="preserve">
    <value>Updating ConsumerGroup: {0} for the Eventhub:{1}</value>
  </data>
  <data name="UpdateEventHub" xml:space="preserve">
    <value>Updating EventHub:{0} of Namespace:{1}</value>
  </data>
  <data name="UpdateEventHubAuthorizationrule" xml:space="preserve">
    <value>Updating AuthorizationRule named:{0} for EventHub: {1}</value>
  </data>
  <data name="UpdateNamespace" xml:space="preserve">
    <value>Update Namespace:{0} from ResourceGroup:{1}</value>
  </data>
  <data name="UpdateNamespaceAuthorizationrule" xml:space="preserve">
    <value>Updating  AuthorizationRule named:{0} for Namespace: {1}</value>
  </data>
</root>