// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.EventHub
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ApplicationGroupOperations
    /// </summary>
    public static partial class ApplicationGroupOperationsExtensions
    {
        /// <summary>
        /// Gets a list of application groups for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationGroup> ListByNamespace(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName)
        {
                return ((IApplicationGroupOperations)operations).ListByNamespaceAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of application groups for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationGroup>> ListByNamespaceAsync(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNamespaceWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an ApplicationGroup for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='applicationGroupName'>
        /// The Application Group name
        /// </param>
        public static ApplicationGroup CreateOrUpdateApplicationGroup(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, string applicationGroupName, ApplicationGroup parameters)
        {
                return ((IApplicationGroupOperations)operations).CreateOrUpdateApplicationGroupAsync(resourceGroupName, namespaceName, applicationGroupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an ApplicationGroup for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='applicationGroupName'>
        /// The Application Group name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApplicationGroup> CreateOrUpdateApplicationGroupAsync(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, string applicationGroupName, ApplicationGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateApplicationGroupWithHttpMessagesAsync(resourceGroupName, namespaceName, applicationGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an ApplicationGroup for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='applicationGroupName'>
        /// The Application Group name
        /// </param>
        public static void Delete(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, string applicationGroupName)
        {
                ((IApplicationGroupOperations)operations).DeleteAsync(resourceGroupName, namespaceName, applicationGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an ApplicationGroup for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='applicationGroupName'>
        /// The Application Group name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, string applicationGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, applicationGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets an ApplicationGroup for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='applicationGroupName'>
        /// The Application Group name
        /// </param>
        public static ApplicationGroup Get(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, string applicationGroupName)
        {
                return ((IApplicationGroupOperations)operations).GetAsync(resourceGroupName, namespaceName, applicationGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an ApplicationGroup for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the azure subscription.
        /// </param>
        /// <param name='namespaceName'>
        /// The Namespace name
        /// </param>
        /// <param name='applicationGroupName'>
        /// The Application Group name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApplicationGroup> GetAsync(this IApplicationGroupOperations operations, string resourceGroupName, string namespaceName, string applicationGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, applicationGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of application groups for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationGroup> ListByNamespaceNext(this IApplicationGroupOperations operations, string nextPageLink)
        {
                return ((IApplicationGroupOperations)operations).ListByNamespaceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of application groups for a Namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationGroup>> ListByNamespaceNextAsync(this IApplicationGroupOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNamespaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
