// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using System.Linq;

    /// <summary>
    /// Single item in List or Get Schema Group operation
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SchemaGroup : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SchemaGroup class.
        /// </summary>
        public SchemaGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SchemaGroup class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.EventHub/Namespaces&#34; or
        /// &#34;Microsoft.EventHub/Namespaces/EventHubs&#34;
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="systemData">The system meta data relating to this resource.
        /// </param>

        /// <param name="schemaCompatibility">
        /// Possible values include: &#39;None&#39;, &#39;Backward&#39;, &#39;Forward&#39;</param>

        /// <param name="schemaType">
        /// Possible values include: &#39;Unknown&#39;, &#39;Avro&#39;</param>

        /// <param name="updatedAtUtc">Exact time the Schema Group was updated
        /// </param>

        /// <param name="createdAtUtc">Exact time the Schema Group was created.
        /// </param>

        /// <param name="eTag">The ETag value.
        /// </param>

        /// <param name="groupProperties">dictionary object for SchemaGroup group properties
        /// </param>
        public SchemaGroup(string id = default(string), string name = default(string), string type = default(string), string location = default(string), SystemData systemData = default(SystemData), string schemaCompatibility = default(string), string schemaType = default(string), System.DateTime? updatedAtUtc = default(System.DateTime?), System.DateTime? createdAtUtc = default(System.DateTime?), System.Guid? eTag = default(System.Guid?), System.Collections.Generic.IDictionary<string, string> groupProperties = default(System.Collections.Generic.IDictionary<string, string>))

        : base(id, name, type, location)
        {
            this.SystemData = systemData;
            this.SchemaCompatibility = schemaCompatibility;
            this.SchemaType = schemaType;
            this.UpdatedAtUtc = updatedAtUtc;
            this.CreatedAtUtc = createdAtUtc;
            this.ETag = eTag;
            this.GroupProperties = groupProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the system meta data relating to this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;None&#39;, &#39;Backward&#39;, &#39;Forward&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.schemaCompatibility")]
        public string SchemaCompatibility {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;Unknown&#39;, &#39;Avro&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.schemaType")]
        public string SchemaType {get; set; }

        /// <summary>
        /// Gets exact time the Schema Group was updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.updatedAtUtc")]
        public System.DateTime? UpdatedAtUtc {get; private set; }

        /// <summary>
        /// Gets exact time the Schema Group was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdAtUtc")]
        public System.DateTime? CreatedAtUtc {get; private set; }

        /// <summary>
        /// Gets the ETag value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.eTag")]
        public System.Guid? ETag {get; private set; }

        /// <summary>
        /// Gets or sets dictionary object for SchemaGroup group properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.groupProperties")]
        public System.Collections.Generic.IDictionary<string, string> GroupProperties {get; set; }
    }
}