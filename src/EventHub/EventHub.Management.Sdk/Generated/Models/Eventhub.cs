// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using System.Linq;

    /// <summary>
    /// Single item in List or Get Event Hub operation
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Eventhub : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Eventhub class.
        /// </summary>
        public Eventhub()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Eventhub class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.EventHub/Namespaces&#34; or
        /// &#34;Microsoft.EventHub/Namespaces/EventHubs&#34;
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="systemData">The system meta data relating to this resource.
        /// </param>

        /// <param name="captureDescription">Properties of capture description
        /// </param>

        /// <param name="partitionIds">Current number of shards on the Event Hub.
        /// </param>

        /// <param name="createdAt">Exact time the Event Hub was created.
        /// </param>

        /// <param name="updatedAt">The exact time the message was updated.
        /// </param>

        /// <param name="messageRetentionInDays">Number of days to retain the events for this Event Hub, value should be 1
        /// to 7 days
        /// </param>

        /// <param name="partitionCount">Number of partitions created for the Event Hub, allowed values are from 1
        /// to 32 partitions.
        /// </param>

        /// <param name="status">Enumerates the possible values for the status of the Event Hub.
        /// Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Restoring&#39;, &#39;SendDisabled&#39;,
        /// &#39;ReceiveDisabled&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Renaming&#39;, &#39;Unknown&#39;</param>
        public Eventhub(string id = default(string), string name = default(string), string type = default(string), string location = default(string), SystemData systemData = default(SystemData), CaptureDescription captureDescription = default(CaptureDescription), System.Collections.Generic.IList<string> partitionIds = default(System.Collections.Generic.IList<string>), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), long? messageRetentionInDays = default(long?), long? partitionCount = default(long?), EntityStatus? status = default(EntityStatus?))

        : base(id, name, type, location)
        {
            this.SystemData = systemData;
            this.CaptureDescription = captureDescription;
            this.PartitionIds = partitionIds;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.MessageRetentionInDays = messageRetentionInDays;
            this.PartitionCount = partitionCount;
            this.Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the system meta data relating to this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets properties of capture description
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.captureDescription")]
        public CaptureDescription CaptureDescription {get; set; }

        /// <summary>
        /// Gets current number of shards on the Event Hub.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partitionIds")]
        public System.Collections.Generic.IList<string> PartitionIds {get; private set; }

        /// <summary>
        /// Gets exact time the Event Hub was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt {get; private set; }

        /// <summary>
        /// Gets the exact time the message was updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt {get; private set; }

        /// <summary>
        /// Gets or sets number of days to retain the events for this Event Hub, value
        /// should be 1 to 7 days
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.messageRetentionInDays")]
        public long? MessageRetentionInDays {get; set; }

        /// <summary>
        /// Gets or sets number of partitions created for the Event Hub, allowed values
        /// are from 1 to 32 partitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partitionCount")]
        public long? PartitionCount {get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the status of the Event
        /// Hub. Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Restoring&#39;, &#39;SendDisabled&#39;, &#39;ReceiveDisabled&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Renaming&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public EntityStatus? Status {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.MessageRetentionInDays != null)
            {
                if (this.MessageRetentionInDays < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MessageRetentionInDays", 1);
                }
            }
            if (this.PartitionCount != null)
            {
                if (this.PartitionCount < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PartitionCount", 1);
                }
            }

        }
    }
}