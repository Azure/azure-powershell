// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{

    /// <summary>
    /// Defines values for UnavailableReason.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum UnavailableReason
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None,
        [System.Runtime.Serialization.EnumMember(Value = "InvalidName")]
        InvalidName,
        [System.Runtime.Serialization.EnumMember(Value = "SubscriptionIsDisabled")]
        SubscriptionIsDisabled,
        [System.Runtime.Serialization.EnumMember(Value = "NameInUse")]
        NameInUse,
        [System.Runtime.Serialization.EnumMember(Value = "NameInLockdown")]
        NameInLockdown,
        [System.Runtime.Serialization.EnumMember(Value = "TooManyNamespaceInCurrentSubscription")]
        TooManyNamespaceInCurrentSubscription
    }
    internal static class UnavailableReasonEnumExtension
    {
        internal static string ToSerializedValue(this UnavailableReason? value)
        {
            return value == null ? null : ((UnavailableReason)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this UnavailableReason value)
        {
            switch( value )
            {
                case UnavailableReason.None:
                    return "None";
                case UnavailableReason.InvalidName:
                    return "InvalidName";
                case UnavailableReason.SubscriptionIsDisabled:
                    return "SubscriptionIsDisabled";
                case UnavailableReason.NameInUse:
                    return "NameInUse";
                case UnavailableReason.NameInLockdown:
                    return "NameInLockdown";
                case UnavailableReason.TooManyNamespaceInCurrentSubscription:
                    return "TooManyNamespaceInCurrentSubscription";
            }
            return null;
        }
        internal static UnavailableReason? ParseUnavailableReason(this string value)
        {
            switch( value )
            {
                case "None":
                    return UnavailableReason.None;
                case "InvalidName":
                    return UnavailableReason.InvalidName;
                case "SubscriptionIsDisabled":
                    return UnavailableReason.SubscriptionIsDisabled;
                case "NameInUse":
                    return UnavailableReason.NameInUse;
                case "NameInLockdown":
                    return UnavailableReason.NameInLockdown;
                case "TooManyNamespaceInCurrentSubscription":
                    return UnavailableReason.TooManyNamespaceInCurrentSubscription;
            }
            return null;
        }
    }
}