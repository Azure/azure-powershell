// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of Access Rule
    /// </summary>
    public partial class NspAccessRuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the NspAccessRuleProperties class.
        /// </summary>
        public NspAccessRuleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NspAccessRuleProperties class.
        /// </summary>

        /// <param name="direction">Direction of Access Rule
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="addressPrefixes">Address prefixes in the CIDR format for inbound rules
        /// </param>

        /// <param name="subscriptions">Subscriptions for inbound rules
        /// </param>

        /// <param name="networkSecurityPerimeters">NetworkSecurityPerimeters for inbound rules
        /// </param>

        /// <param name="fullyQualifiedDomainNames">FQDN for outbound rules
        /// </param>
        public NspAccessRuleProperties(string direction = default(string), System.Collections.Generic.IList<string> addressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<NspAccessRulePropertiesSubscriptionsItem> subscriptions = default(System.Collections.Generic.IList<NspAccessRulePropertiesSubscriptionsItem>), System.Collections.Generic.IList<NetworkSecurityPerimeter> networkSecurityPerimeters = default(System.Collections.Generic.IList<NetworkSecurityPerimeter>), System.Collections.Generic.IList<string> fullyQualifiedDomainNames = default(System.Collections.Generic.IList<string>))

        {
            this.Direction = direction;
            this.AddressPrefixes = addressPrefixes;
            this.Subscriptions = subscriptions;
            this.NetworkSecurityPerimeters = networkSecurityPerimeters;
            this.FullyQualifiedDomainNames = fullyQualifiedDomainNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets direction of Access Rule Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }

        /// <summary>
        /// Gets or sets address prefixes in the CIDR format for inbound rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressPrefixes")]
        public System.Collections.Generic.IList<string> AddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets subscriptions for inbound rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptions")]
        public System.Collections.Generic.IList<NspAccessRulePropertiesSubscriptionsItem> Subscriptions {get; set; }

        /// <summary>
        /// Gets networkSecurityPerimeters for inbound rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSecurityPerimeters")]
        public System.Collections.Generic.IList<NetworkSecurityPerimeter> NetworkSecurityPerimeters {get; private set; }

        /// <summary>
        /// Gets fQDN for outbound rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullyQualifiedDomainNames")]
        public System.Collections.Generic.IList<string> FullyQualifiedDomainNames {get; private set; }
    }
}