// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using System.Linq;

    /// <summary>
    /// SKU parameters particular to a cluster instance.
    /// </summary>
    public partial class ClusterSku
    {
        /// <summary>
        /// Initializes a new instance of the ClusterSku class.
        /// </summary>
        public ClusterSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterSku class.
        /// </summary>

        /// <param name="capacity">The quantity of Event Hubs Cluster Capacity Units contained in this
        /// cluster.
        /// </param>
        public ClusterSku(int? capacity = default(int?))

        {
            this.Capacity = capacity;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for ClusterSku class.
        /// </summary>
        static ClusterSku()
        {
            Name = "Dedicated";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the quantity of Event Hubs Cluster Capacity Units contained in
        /// this cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capacity")]
        public int? Capacity {get; set; }
        /// <summary>
        /// Gets or sets name of this SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public static string Name {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Capacity != null)
            {
                if (this.Capacity < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Capacity", 1);
                }
            }
        }
    }
}