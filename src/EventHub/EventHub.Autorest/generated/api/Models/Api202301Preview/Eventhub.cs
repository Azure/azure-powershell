// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Extensions;

    /// <summary>Single item in List or Get Event Hub operation</summary>
    [Microsoft.Azure.PowerShell.Cmdlets.EventHub.DoNotFormat]
    public partial class Eventhub :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhub,
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal,
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.ProxyResource();

        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string ArchiveNameFormat { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).ArchiveNameFormat; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).ArchiveNameFormat = value ?? null; }

        /// <summary>Blob container Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string BlobContainer { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).BlobContainer; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).BlobContainer = value ?? null; }

        /// <summary>A value that indicates whether capture description is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public bool? CaptureEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionEnabled = value ?? default(bool); }

        /// <summary>Enumerates the possible values for cleanup policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CleanupPolicyRetentionDescription? CleanupPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescriptionCleanupPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescriptionCleanupPolicy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CleanupPolicyRetentionDescription)""); }

        /// <summary>Exact time the Event Hub was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CreatedAt; }

        /// <summary>The Azure Data Lake Store name for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string DataLakeAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DataLakeAccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DataLakeAccountName = value ?? null; }

        /// <summary>The destination folder path for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string DataLakeFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DataLakeFolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DataLakeFolderPath = value ?? null; }

        /// <summary>Subscription Id of Azure Data Lake Store</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string DataLakeSubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DataLakeSubscriptionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DataLakeSubscriptionId = value ?? null; }

        /// <summary>Name for capture destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string DestinationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DestinationName; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DestinationName = value ?? null; }

        /// <summary>
        /// Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated
        /// in New API Version
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EncodingCaptureDescription? Encoding { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionEncoding; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionEncoding = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EncodingCaptureDescription)""); }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Id; }

        /// <summary>Type of Azure Active Directory Managed Identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CaptureIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).IdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).IdentityType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CaptureIdentityType)""); }

        /// <summary>
        /// The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between
        /// 60 to 900 seconds
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public int? IntervalInSeconds { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionIntervalInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionIntervalInSecond = value ?? default(int); }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Location; }

        /// <summary>
        /// Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public long? MessageRetentionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).MessageRetentionInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).MessageRetentionInDay = value ?? default(long); }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Location</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal.Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Location = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Type = value; }

        /// <summary>Internal Acessors for CaptureDescription</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.ICaptureDescription Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.CaptureDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescription = value; }

        /// <summary>Internal Acessors for CaptureDescriptionDestination</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IDestination Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.CaptureDescriptionDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionDestination = value; }

        /// <summary>Internal Acessors for CreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.CreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CreatedAt = value; }

        /// <summary>Internal Acessors for DestinationIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.ICaptureIdentity Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.DestinationIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DestinationIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DestinationIdentity = value; }

        /// <summary>Internal Acessors for DestinationProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IDestinationProperties Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.DestinationProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DestinationProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).DestinationProperty = value; }

        /// <summary>Internal Acessors for PartitionId</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.PartitionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).PartitionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).PartitionId = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubProperties Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.EventhubProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RetentionDescription</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IRetentionDescription Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.RetentionDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescription = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemData Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.SystemData()); set { {_systemData = value;} } }

        /// <summary>Internal Acessors for UpdatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubInternal.UpdatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).UpdatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).UpdatedAt = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Name; }

        /// <summary>
        /// Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public long? PartitionCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).PartitionCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).PartitionCount = value ?? default(long); }

        /// <summary>Current number of shards on the Event Hub.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string[] PartitionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).PartitionId; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubProperties _property;

        /// <summary>Properties supplied to the Create Or Update Event Hub operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.EventhubProperties()); set => this._property = value; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy
        /// is Compact the returned value of this property is Long.MaxValue
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public long? RetentionTimeInHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescriptionRetentionTimeInHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescriptionRetentionTimeInHour = value ?? default(long); }

        /// <summary>
        /// The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between
        /// 10485760 to 524288000 bytes
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public int? SizeLimitInBytes { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionSizeLimitInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionSizeLimitInByte = value ?? default(int); }

        /// <summary>A value that indicates whether to Skip Empty Archives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public bool? SkipEmptyArchive { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionSkipEmptyArchive; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).CaptureDescriptionSkipEmptyArchive = value ?? default(bool); }

        /// <summary>Enumerates the possible values for the status of the Event Hub.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EntityStatus? Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).Status = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EntityStatus)""); }

        /// <summary>Resource id of the storage account to be used to create the blobs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string StorageAccountResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).StorageAccountResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).StorageAccountResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemData _systemData;

        /// <summary>The system meta data relating to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).CreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType)""); }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemDataInternal)SystemData).LastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType)""); }

        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is
        /// Compact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from
        /// starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the
        /// compacted Event Hub
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public int? TombstoneRetentionTimeInHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescriptionTombstoneRetentionTimeInHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).RetentionDescriptionTombstoneRetentionTimeInHour = value ?? default(int); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal)__proxyResource).Type; }

        /// <summary>The exact time the message was updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpdatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).UpdatedAt; }

        /// <summary>
        /// ARM ID of Managed User Identity. This property is required is the type is UserAssignedIdentity. If type is SystemAssigned,
        /// then the System Assigned Identity Associated with the namespace will be used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public string UserAssignedIdentityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).IdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubPropertiesInternal)Property).IdentityUserAssignedIdentity = value ?? null; }

        /// <summary>Creates an new <see cref="Eventhub" /> instance.</summary>
        public Eventhub()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// Single item in List or Get Event Hub operation
    public partial interface IEventhub :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResource
    {
        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order",
        SerializedName = @"archiveNameFormat",
        PossibleTypes = new [] { typeof(string) })]
        string ArchiveNameFormat { get; set; }
        /// <summary>Blob container Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob container Name",
        SerializedName = @"blobContainer",
        PossibleTypes = new [] { typeof(string) })]
        string BlobContainer { get; set; }
        /// <summary>A value that indicates whether capture description is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A value that indicates whether capture description is enabled. ",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CaptureEnabled { get; set; }
        /// <summary>Enumerates the possible values for cleanup policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enumerates the possible values for cleanup policy",
        SerializedName = @"cleanupPolicy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CleanupPolicyRetentionDescription) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CleanupPolicyRetentionDescription? CleanupPolicy { get; set; }
        /// <summary>Exact time the Event Hub was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Exact time the Event Hub was created.",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedAt { get;  }
        /// <summary>The Azure Data Lake Store name for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Azure Data Lake Store name for the captured events",
        SerializedName = @"dataLakeAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string DataLakeAccountName { get; set; }
        /// <summary>The destination folder path for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The destination folder path for the captured events",
        SerializedName = @"dataLakeFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string DataLakeFolderPath { get; set; }
        /// <summary>Subscription Id of Azure Data Lake Store</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription Id of Azure Data Lake Store",
        SerializedName = @"dataLakeSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string DataLakeSubscriptionId { get; set; }
        /// <summary>Name for capture destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name for capture destination",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DestinationName { get; set; }
        /// <summary>
        /// Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated
        /// in New API Version
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version",
        SerializedName = @"encoding",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EncodingCaptureDescription) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EncodingCaptureDescription? Encoding { get; set; }
        /// <summary>Type of Azure Active Directory Managed Identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of Azure Active Directory Managed Identity.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CaptureIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CaptureIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between
        /// 60 to 900 seconds
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds",
        SerializedName = @"intervalInSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? IntervalInSeconds { get; set; }
        /// <summary>
        /// Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of days to retain the events for this Event Hub, value should be 1 to 7 days",
        SerializedName = @"messageRetentionInDays",
        PossibleTypes = new [] { typeof(long) })]
        long? MessageRetentionInDay { get; set; }
        /// <summary>
        /// Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.",
        SerializedName = @"partitionCount",
        PossibleTypes = new [] { typeof(long) })]
        long? PartitionCount { get; set; }
        /// <summary>Current number of shards on the Event Hub.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Current number of shards on the Event Hub.",
        SerializedName = @"partitionIds",
        PossibleTypes = new [] { typeof(string) })]
        string[] PartitionId { get;  }
        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy
        /// is Compact the returned value of this property is Long.MaxValue
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy is Compact the returned value of this property is Long.MaxValue ",
        SerializedName = @"retentionTimeInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? RetentionTimeInHour { get; set; }
        /// <summary>
        /// The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between
        /// 10485760 to 524288000 bytes
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes",
        SerializedName = @"sizeLimitInBytes",
        PossibleTypes = new [] { typeof(int) })]
        int? SizeLimitInBytes { get; set; }
        /// <summary>A value that indicates whether to Skip Empty Archives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A value that indicates whether to Skip Empty Archives",
        SerializedName = @"skipEmptyArchives",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SkipEmptyArchive { get; set; }
        /// <summary>Enumerates the possible values for the status of the Event Hub.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enumerates the possible values for the status of the Event Hub.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EntityStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EntityStatus? Status { get; set; }
        /// <summary>Resource id of the storage account to be used to create the blobs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource id of the storage account to be used to create the blobs",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountResourceId { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is
        /// Compact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from
        /// starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the
        /// compacted Event Hub
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is Compact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the compacted Event Hub",
        SerializedName = @"tombstoneRetentionTimeInHours",
        PossibleTypes = new [] { typeof(int) })]
        int? TombstoneRetentionTimeInHour { get; set; }
        /// <summary>The exact time the message was updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The exact time the message was updated.",
        SerializedName = @"updatedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpdatedAt { get;  }
        /// <summary>
        /// ARM ID of Managed User Identity. This property is required is the type is UserAssignedIdentity. If type is SystemAssigned,
        /// then the System Assigned Identity Associated with the namespace will be used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ARM ID of Managed User Identity. This property is required is the type is UserAssignedIdentity. If type is SystemAssigned, then the System Assigned Identity Associated with the namespace will be used.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string UserAssignedIdentityId { get; set; }

    }
    /// Single item in List or Get Event Hub operation
    internal partial interface IEventhubInternal :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api20.IProxyResourceInternal
    {
        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        string ArchiveNameFormat { get; set; }
        /// <summary>Blob container Name</summary>
        string BlobContainer { get; set; }
        /// <summary>Properties of capture description</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.ICaptureDescription CaptureDescription { get; set; }
        /// <summary>
        /// Properties of Destination where capture will be stored. (Storage Account, Blob Names)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IDestination CaptureDescriptionDestination { get; set; }
        /// <summary>A value that indicates whether capture description is enabled.</summary>
        bool? CaptureEnabled { get; set; }
        /// <summary>Enumerates the possible values for cleanup policy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CleanupPolicyRetentionDescription? CleanupPolicy { get; set; }
        /// <summary>Exact time the Event Hub was created.</summary>
        global::System.DateTime? CreatedAt { get; set; }
        /// <summary>The Azure Data Lake Store name for the captured events</summary>
        string DataLakeAccountName { get; set; }
        /// <summary>The destination folder path for the captured events</summary>
        string DataLakeFolderPath { get; set; }
        /// <summary>Subscription Id of Azure Data Lake Store</summary>
        string DataLakeSubscriptionId { get; set; }
        /// <summary>A value that indicates whether capture description is enabled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.ICaptureIdentity DestinationIdentity { get; set; }
        /// <summary>Name for capture destination</summary>
        string DestinationName { get; set; }
        /// <summary>
        /// Properties describing the storage account, blob container and archive name format for capture destination
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IDestinationProperties DestinationProperty { get; set; }
        /// <summary>
        /// Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated
        /// in New API Version
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EncodingCaptureDescription? Encoding { get; set; }
        /// <summary>Type of Azure Active Directory Managed Identity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CaptureIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between
        /// 60 to 900 seconds
        /// </summary>
        int? IntervalInSeconds { get; set; }
        /// <summary>
        /// Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        /// </summary>
        long? MessageRetentionInDay { get; set; }
        /// <summary>
        /// Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
        /// </summary>
        long? PartitionCount { get; set; }
        /// <summary>Current number of shards on the Event Hub.</summary>
        string[] PartitionId { get; set; }
        /// <summary>Properties supplied to the Create Or Update Event Hub operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEventhubProperties Property { get; set; }
        /// <summary>Event Hub retention settings</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IRetentionDescription RetentionDescription { get; set; }
        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy
        /// is Compact the returned value of this property is Long.MaxValue
        /// </summary>
        long? RetentionTimeInHour { get; set; }
        /// <summary>
        /// The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between
        /// 10485760 to 524288000 bytes
        /// </summary>
        int? SizeLimitInBytes { get; set; }
        /// <summary>A value that indicates whether to Skip Empty Archives</summary>
        bool? SkipEmptyArchive { get; set; }
        /// <summary>Enumerates the possible values for the status of the Event Hub.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.EntityStatus? Status { get; set; }
        /// <summary>Resource id of the storage account to be used to create the blobs</summary>
        string StorageAccountResourceId { get; set; }
        /// <summary>The system meta data relating to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api10.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is
        /// Compact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from
        /// starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the
        /// compacted Event Hub
        /// </summary>
        int? TombstoneRetentionTimeInHour { get; set; }
        /// <summary>The exact time the message was updated.</summary>
        global::System.DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// ARM ID of Managed User Identity. This property is required is the type is UserAssignedIdentity. If type is SystemAssigned,
        /// then the System Assigned Identity Associated with the namespace will be used.
        /// </summary>
        string UserAssignedIdentityId { get; set; }

    }
}