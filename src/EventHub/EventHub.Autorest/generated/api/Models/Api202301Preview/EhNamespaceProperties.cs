// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Extensions;

    /// <summary>Namespace properties supplied for create namespace operation.</summary>
    [Microsoft.Azure.PowerShell.Cmdlets.EventHub.DoNotFormat]
    public partial class EhNamespaceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespaceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AlternateName" /> property.</summary>
        private string _alternateName;

        /// <summary>Alternate name specified when alias and namespace names are same.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string AlternateName { get => this._alternateName; set => this._alternateName = value; }

        /// <summary>Backing field for <see cref="ClusterArmId" /> property.</summary>
        private string _clusterArmId;

        /// <summary>Cluster ARM ID of the Namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string ClusterArmId { get => this._clusterArmId; set => this._clusterArmId = value; }

        /// <summary>Backing field for <see cref="CreatedAt" /> property.</summary>
        private global::System.DateTime? _createdAt;

        /// <summary>The time the Namespace was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedAt { get => this._createdAt; }

        /// <summary>Backing field for <see cref="DisableLocalAuth" /> property.</summary>
        private bool? _disableLocalAuth;

        /// <summary>This property disables SAS authentication for the Event Hubs namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public bool? DisableLocalAuth { get => this._disableLocalAuth; set => this._disableLocalAuth = value; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryption _encryption;

        /// <summary>Properties of BYOK Encryption description</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.Encryption()); set => this._encryption = value; }

        /// <summary>Enumerates the possible value of keySource for Encryption</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.KeySource? EncryptionKeySource { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryptionInternal)Encryption).KeySource; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryptionInternal)Encryption).KeySource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.KeySource)""); }

        /// <summary>Properties of KeyVault</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IKeyVaultProperties[] EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryptionInternal)Encryption).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryptionInternal)Encryption).KeyVaultProperty = value ?? null /* arrayOf */; }

        /// <summary>Enable Infrastructure Encryption (Double Encryption)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public bool? EncryptionRequireInfrastructureEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryptionInternal)Encryption).RequireInfrastructureEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryptionInternal)Encryption).RequireInfrastructureEncryption = value ?? default(bool); }

        /// <summary>Backing field for <see cref="GeoDataReplication" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationProperties _geoDataReplication;

        /// <summary>Geo Data Replication settings for the namespace</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationProperties GeoDataReplication { get => (this._geoDataReplication = this._geoDataReplication ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.GeoDataReplicationProperties()); set => this._geoDataReplication = value; }

        /// <summary>A list of regions where replicas of the namespace are maintained.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.INamespaceReplicaLocation[] GeoDataReplicationLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationPropertiesInternal)GeoDataReplication).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationPropertiesInternal)GeoDataReplication).Location = value ?? null /* arrayOf */; }

        /// <summary>
        /// The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.
        /// When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0
        /// and 5 minutes to 1 day.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Inlined)]
        public int? GeoDataReplicationMaxReplicationLagDurationInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationPropertiesInternal)GeoDataReplication).MaxReplicationLagDurationInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationPropertiesInternal)GeoDataReplication).MaxReplicationLagDurationInSecond = value ?? default(int); }

        /// <summary>Backing field for <see cref="IsAutoInflateEnabled" /> property.</summary>
        private bool? _isAutoInflateEnabled;

        /// <summary>Value that indicates whether AutoInflate is enabled for eventhub namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public bool? IsAutoInflateEnabled { get => this._isAutoInflateEnabled; set => this._isAutoInflateEnabled = value; }

        /// <summary>Backing field for <see cref="KafkaEnabled" /> property.</summary>
        private bool? _kafkaEnabled;

        /// <summary>Value that indicates whether Kafka is enabled for eventhub namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public bool? KafkaEnabled { get => this._kafkaEnabled; set => this._kafkaEnabled = value; }

        /// <summary>Backing field for <see cref="MaximumThroughputUnit" /> property.</summary>
        private int? _maximumThroughputUnit;

        /// <summary>
        /// Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if
        /// AutoInflateEnabled = true)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public int? MaximumThroughputUnit { get => this._maximumThroughputUnit; set => this._maximumThroughputUnit = value; }

        /// <summary>Backing field for <see cref="MetricId" /> property.</summary>
        private string _metricId;

        /// <summary>Identifier for Azure Insights metrics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string MetricId { get => this._metricId; }

        /// <summary>Internal Acessors for CreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.CreatedAt { get => this._createdAt; set { {_createdAt = value;} } }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryption Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.Encryption()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for GeoDataReplication</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationProperties Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.GeoDataReplication { get => (this._geoDataReplication = this._geoDataReplication ?? new Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.GeoDataReplicationProperties()); set { {_geoDataReplication = value;} } }

        /// <summary>Internal Acessors for MetricId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.MetricId { get => this._metricId; set { {_metricId = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for ServiceBusEndpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.ServiceBusEndpoint { get => this._serviceBusEndpoint; set { {_serviceBusEndpoint = value;} } }

        /// <summary>Internal Acessors for Status</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.Status { get => this._status; set { {_status = value;} } }

        /// <summary>Internal Acessors for UpdatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEhNamespacePropertiesInternal.UpdatedAt { get => this._updatedAt; set { {_updatedAt = value;} } }

        /// <summary>Backing field for <see cref="MinimumTlsVersion" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.TlsVersion? _minimumTlsVersion;

        /// <summary>The minimum TLS version for the cluster to support, e.g. '1.2'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.TlsVersion? MinimumTlsVersion { get => this._minimumTlsVersion; set => this._minimumTlsVersion = value; }

        /// <summary>Backing field for <see cref="PrivateEndpointConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IPrivateEndpointConnection[] _privateEndpointConnection;

        /// <summary>List of private endpoint connections.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get => this._privateEndpointConnection; set => this._privateEndpointConnection = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the Namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicNetworkAccess" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.PublicNetworkAccess? _publicNetworkAccess;

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.PublicNetworkAccess? PublicNetworkAccess { get => this._publicNetworkAccess; set => this._publicNetworkAccess = value; }

        /// <summary>Backing field for <see cref="ServiceBusEndpoint" /> property.</summary>
        private string _serviceBusEndpoint;

        /// <summary>Endpoint you can use to perform Service Bus operations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string ServiceBusEndpoint { get => this._serviceBusEndpoint; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of the Namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string Status { get => this._status; }

        /// <summary>Backing field for <see cref="UpdatedAt" /> property.</summary>
        private global::System.DateTime? _updatedAt;

        /// <summary>The time the Namespace was updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public global::System.DateTime? UpdatedAt { get => this._updatedAt; }

        /// <summary>Backing field for <see cref="ZoneRedundant" /> property.</summary>
        private bool? _zoneRedundant;

        /// <summary>
        /// Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public bool? ZoneRedundant { get => this._zoneRedundant; set => this._zoneRedundant = value; }

        /// <summary>Creates an new <see cref="EhNamespaceProperties" /> instance.</summary>
        public EhNamespaceProperties()
        {

        }
    }
    /// Namespace properties supplied for create namespace operation.
    public partial interface IEhNamespaceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IJsonSerializable
    {
        /// <summary>Alternate name specified when alias and namespace names are same.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alternate name specified when alias and namespace names are same.",
        SerializedName = @"alternateName",
        PossibleTypes = new [] { typeof(string) })]
        string AlternateName { get; set; }
        /// <summary>Cluster ARM ID of the Namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cluster ARM ID of the Namespace.",
        SerializedName = @"clusterArmId",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterArmId { get; set; }
        /// <summary>The time the Namespace was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time the Namespace was created.",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedAt { get;  }
        /// <summary>This property disables SAS authentication for the Event Hubs namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property disables SAS authentication for the Event Hubs namespace.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableLocalAuth { get; set; }
        /// <summary>Enumerates the possible value of keySource for Encryption</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enumerates the possible value of keySource for Encryption",
        SerializedName = @"keySource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.KeySource) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>Properties of KeyVault</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Properties of KeyVault",
        SerializedName = @"keyVaultProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IKeyVaultProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IKeyVaultProperties[] EncryptionKeyVaultProperty { get; set; }
        /// <summary>Enable Infrastructure Encryption (Double Encryption)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable Infrastructure Encryption (Double Encryption)",
        SerializedName = @"requireInfrastructureEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptionRequireInfrastructureEncryption { get; set; }
        /// <summary>A list of regions where replicas of the namespace are maintained.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of regions where replicas of the namespace are maintained.",
        SerializedName = @"locations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.INamespaceReplicaLocation) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.INamespaceReplicaLocation[] GeoDataReplicationLocation { get; set; }
        /// <summary>
        /// The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.
        /// When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0
        /// and 5 minutes to 1 day.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.  When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0 and 5 minutes to 1 day.",
        SerializedName = @"maxReplicationLagDurationInSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? GeoDataReplicationMaxReplicationLagDurationInSecond { get; set; }
        /// <summary>Value that indicates whether AutoInflate is enabled for eventhub namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value that indicates whether AutoInflate is enabled for eventhub namespace.",
        SerializedName = @"isAutoInflateEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsAutoInflateEnabled { get; set; }
        /// <summary>Value that indicates whether Kafka is enabled for eventhub namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value that indicates whether Kafka is enabled for eventhub namespace.",
        SerializedName = @"kafkaEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KafkaEnabled { get; set; }
        /// <summary>
        /// Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if
        /// AutoInflateEnabled = true)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)",
        SerializedName = @"maximumThroughputUnits",
        PossibleTypes = new [] { typeof(int) })]
        int? MaximumThroughputUnit { get; set; }
        /// <summary>Identifier for Azure Insights metrics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier for Azure Insights metrics.",
        SerializedName = @"metricId",
        PossibleTypes = new [] { typeof(string) })]
        string MetricId { get;  }
        /// <summary>The minimum TLS version for the cluster to support, e.g. '1.2'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum TLS version for the cluster to support, e.g. '1.2'",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.TlsVersion) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.TlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>List of private endpoint connections.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of private endpoint connections.",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>Provisioning state of the Namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the Namespace.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This determines if traffic is allowed over public network. By default it is enabled.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>Endpoint you can use to perform Service Bus operations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Endpoint you can use to perform Service Bus operations.",
        SerializedName = @"serviceBusEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceBusEndpoint { get;  }
        /// <summary>Status of the Namespace.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Status of the Namespace.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get;  }
        /// <summary>The time the Namespace was updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time the Namespace was updated.",
        SerializedName = @"updatedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpdatedAt { get;  }
        /// <summary>
        /// Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.",
        SerializedName = @"zoneRedundant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ZoneRedundant { get; set; }

    }
    /// Namespace properties supplied for create namespace operation.
    internal partial interface IEhNamespacePropertiesInternal

    {
        /// <summary>Alternate name specified when alias and namespace names are same.</summary>
        string AlternateName { get; set; }
        /// <summary>Cluster ARM ID of the Namespace.</summary>
        string ClusterArmId { get; set; }
        /// <summary>The time the Namespace was created.</summary>
        global::System.DateTime? CreatedAt { get; set; }
        /// <summary>This property disables SAS authentication for the Event Hubs namespace.</summary>
        bool? DisableLocalAuth { get; set; }
        /// <summary>Properties of BYOK Encryption description</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IEncryption Encryption { get; set; }
        /// <summary>Enumerates the possible value of keySource for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>Properties of KeyVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IKeyVaultProperties[] EncryptionKeyVaultProperty { get; set; }
        /// <summary>Enable Infrastructure Encryption (Double Encryption)</summary>
        bool? EncryptionRequireInfrastructureEncryption { get; set; }
        /// <summary>Geo Data Replication settings for the namespace</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IGeoDataReplicationProperties GeoDataReplication { get; set; }
        /// <summary>A list of regions where replicas of the namespace are maintained.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.INamespaceReplicaLocation[] GeoDataReplicationLocation { get; set; }
        /// <summary>
        /// The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary replicas.
        /// When the lag exceeds the configured amount, operations on the primary replica will be failed. The allowed values are 0
        /// and 5 minutes to 1 day.
        /// </summary>
        int? GeoDataReplicationMaxReplicationLagDurationInSecond { get; set; }
        /// <summary>Value that indicates whether AutoInflate is enabled for eventhub namespace.</summary>
        bool? IsAutoInflateEnabled { get; set; }
        /// <summary>Value that indicates whether Kafka is enabled for eventhub namespace.</summary>
        bool? KafkaEnabled { get; set; }
        /// <summary>
        /// Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if
        /// AutoInflateEnabled = true)
        /// </summary>
        int? MaximumThroughputUnit { get; set; }
        /// <summary>Identifier for Azure Insights metrics.</summary>
        string MetricId { get; set; }
        /// <summary>The minimum TLS version for the cluster to support, e.g. '1.2'</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.TlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>List of private endpoint connections.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>Provisioning state of the Namespace.</summary>
        string ProvisioningState { get; set; }
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>Endpoint you can use to perform Service Bus operations.</summary>
        string ServiceBusEndpoint { get; set; }
        /// <summary>Status of the Namespace.</summary>
        string Status { get; set; }
        /// <summary>The time the Namespace was updated.</summary>
        global::System.DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.
        /// </summary>
        bool? ZoneRedundant { get; set; }

    }
}