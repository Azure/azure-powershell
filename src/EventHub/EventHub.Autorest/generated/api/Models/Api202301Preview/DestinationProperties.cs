// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Extensions;

    /// <summary>
    /// Properties describing the storage account, blob container and archive name format for capture destination
    /// </summary>
    [Microsoft.Azure.PowerShell.Cmdlets.EventHub.DoNotFormat]
    public partial class DestinationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IDestinationProperties,
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.Api202301Preview.IDestinationPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ArchiveNameFormat" /> property.</summary>
        private string _archiveNameFormat;

        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string ArchiveNameFormat { get => this._archiveNameFormat; set => this._archiveNameFormat = value; }

        /// <summary>Backing field for <see cref="BlobContainer" /> property.</summary>
        private string _blobContainer;

        /// <summary>Blob container Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string BlobContainer { get => this._blobContainer; set => this._blobContainer = value; }

        /// <summary>Backing field for <see cref="DataLakeAccountName" /> property.</summary>
        private string _dataLakeAccountName;

        /// <summary>The Azure Data Lake Store name for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string DataLakeAccountName { get => this._dataLakeAccountName; set => this._dataLakeAccountName = value; }

        /// <summary>Backing field for <see cref="DataLakeFolderPath" /> property.</summary>
        private string _dataLakeFolderPath;

        /// <summary>The destination folder path for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string DataLakeFolderPath { get => this._dataLakeFolderPath; set => this._dataLakeFolderPath = value; }

        /// <summary>Backing field for <see cref="DataLakeSubscriptionId" /> property.</summary>
        private string _dataLakeSubscriptionId;

        /// <summary>Subscription Id of Azure Data Lake Store</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string DataLakeSubscriptionId { get => this._dataLakeSubscriptionId; set => this._dataLakeSubscriptionId = value; }

        /// <summary>Backing field for <see cref="StorageAccountResourceId" /> property.</summary>
        private string _storageAccountResourceId;

        /// <summary>Resource id of the storage account to be used to create the blobs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string StorageAccountResourceId { get => this._storageAccountResourceId; set => this._storageAccountResourceId = value; }

        /// <summary>Creates an new <see cref="DestinationProperties" /> instance.</summary>
        public DestinationProperties()
        {

        }
    }
    /// Properties describing the storage account, blob container and archive name format for capture destination
    public partial interface IDestinationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order",
        SerializedName = @"archiveNameFormat",
        PossibleTypes = new [] { typeof(string) })]
        string ArchiveNameFormat { get; set; }
        /// <summary>Blob container Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob container Name",
        SerializedName = @"blobContainer",
        PossibleTypes = new [] { typeof(string) })]
        string BlobContainer { get; set; }
        /// <summary>The Azure Data Lake Store name for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Azure Data Lake Store name for the captured events",
        SerializedName = @"dataLakeAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string DataLakeAccountName { get; set; }
        /// <summary>The destination folder path for the captured events</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The destination folder path for the captured events",
        SerializedName = @"dataLakeFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string DataLakeFolderPath { get; set; }
        /// <summary>Subscription Id of Azure Data Lake Store</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription Id of Azure Data Lake Store",
        SerializedName = @"dataLakeSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string DataLakeSubscriptionId { get; set; }
        /// <summary>Resource id of the storage account to be used to create the blobs</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource id of the storage account to be used to create the blobs",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountResourceId { get; set; }

    }
    /// Properties describing the storage account, blob container and archive name format for capture destination
    internal partial interface IDestinationPropertiesInternal

    {
        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
        /// Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        string ArchiveNameFormat { get; set; }
        /// <summary>Blob container Name</summary>
        string BlobContainer { get; set; }
        /// <summary>The Azure Data Lake Store name for the captured events</summary>
        string DataLakeAccountName { get; set; }
        /// <summary>The destination folder path for the captured events</summary>
        string DataLakeFolderPath { get; set; }
        /// <summary>Subscription Id of Azure Data Lake Store</summary>
        string DataLakeSubscriptionId { get; set; }
        /// <summary>Resource id of the storage account to be used to create the blobs</summary>
        string StorageAccountResourceId { get; set; }

    }
}