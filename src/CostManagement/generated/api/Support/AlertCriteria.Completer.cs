// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Support
{

    /// <summary>Criteria that triggered alert</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Support.AlertCriteriaTypeConverter))]
    public partial struct AlertCriteria :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CostThresholdExceeded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CostThresholdExceeded", "CostThresholdExceeded", global::System.Management.Automation.CompletionResultType.ParameterValue, "CostThresholdExceeded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UsageThresholdExceeded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("UsageThresholdExceeded", "UsageThresholdExceeded", global::System.Management.Automation.CompletionResultType.ParameterValue, "UsageThresholdExceeded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CreditThresholdApproaching".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CreditThresholdApproaching", "CreditThresholdApproaching", global::System.Management.Automation.CompletionResultType.ParameterValue, "CreditThresholdApproaching");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CreditThresholdReached".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CreditThresholdReached", "CreditThresholdReached", global::System.Management.Automation.CompletionResultType.ParameterValue, "CreditThresholdReached");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "QuotaThresholdApproaching".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("QuotaThresholdApproaching", "QuotaThresholdApproaching", global::System.Management.Automation.CompletionResultType.ParameterValue, "QuotaThresholdApproaching");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "QuotaThresholdReached".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("QuotaThresholdReached", "QuotaThresholdReached", global::System.Management.Automation.CompletionResultType.ParameterValue, "QuotaThresholdReached");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MultiCurrency".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("MultiCurrency", "MultiCurrency", global::System.Management.Automation.CompletionResultType.ParameterValue, "MultiCurrency");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ForecastCostThresholdExceeded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("ForecastCostThresholdExceeded", "ForecastCostThresholdExceeded", global::System.Management.Automation.CompletionResultType.ParameterValue, "ForecastCostThresholdExceeded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ForecastUsageThresholdExceeded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("ForecastUsageThresholdExceeded", "ForecastUsageThresholdExceeded", global::System.Management.Automation.CompletionResultType.ParameterValue, "ForecastUsageThresholdExceeded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InvoiceDueDateApproaching".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("InvoiceDueDateApproaching", "InvoiceDueDateApproaching", global::System.Management.Automation.CompletionResultType.ParameterValue, "InvoiceDueDateApproaching");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InvoiceDueDateReached".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("InvoiceDueDateReached", "InvoiceDueDateReached", global::System.Management.Automation.CompletionResultType.ParameterValue, "InvoiceDueDateReached");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CrossCloudNewDataAvailable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CrossCloudNewDataAvailable", "CrossCloudNewDataAvailable", global::System.Management.Automation.CompletionResultType.ParameterValue, "CrossCloudNewDataAvailable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CrossCloudCollectionError".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CrossCloudCollectionError", "CrossCloudCollectionError", global::System.Management.Automation.CompletionResultType.ParameterValue, "CrossCloudCollectionError");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GeneralThresholdError".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("GeneralThresholdError", "GeneralThresholdError", global::System.Management.Automation.CompletionResultType.ParameterValue, "GeneralThresholdError");
            }
        }
    }
}