// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Extensions;

    /// <summary>
    /// This represents the blob storage account location where exports of costs will be delivered. There are two ways to configure
    /// the destination. The approach recommended for most customers is to specify the resourceId of the storage account. This
    /// requires a one-time registration of the account's subscription with the Microsoft.CostManagementExports resource provider
    /// in order to give Cost Management services access to the storage. When creating an export in the Azure portal this registration
    /// is performed automatically but API users may need to register the subscription explicitly (for more information see https://learn.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services
    /// ). Another way to configure the destination is available ONLY to Partners with a Microsoft Partner Agreement plan who
    /// are global admins of their billing account. These Partners, instead of specifying the resourceId of a storage account,
    /// can specify the storage account name along with a SAS token for the account. This allows exports of costs to a storage
    /// account in any tenant. The SAS token should be created for the blob service with Service/Container/Object resource types
    /// and with Read/Write/Delete/List/Add/Create permissions (for more information see https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/export-cost-data-storage-account-sas-key
    /// ).
    /// </summary>
    public partial class ExportDeliveryDestination :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.Api20211001.IExportDeliveryDestination,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.Api20211001.IExportDeliveryDestinationInternal
    {

        /// <summary>Backing field for <see cref="Container" /> property.</summary>
        private string _container;

        /// <summary>
        /// The name of the container where exports will be uploaded. If the container does not exist it will be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string Container { get => this._container; set => this._container = value; }

        /// <summary>Backing field for <see cref="ResourceId" /> property.</summary>
        private string _resourceId;

        /// <summary>
        /// The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount
        /// are specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string ResourceId { get => this._resourceId; set => this._resourceId = value; }

        /// <summary>Backing field for <see cref="RootFolderPath" /> property.</summary>
        private string _rootFolderPath;

        /// <summary>The name of the directory where exports will be uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string RootFolderPath { get => this._rootFolderPath; set => this._rootFolderPath = value; }

        /// <summary>Backing field for <see cref="SasToken" /> property.</summary>
        private string _sasToken;

        /// <summary>
        /// A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning
        /// this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string SasToken { get => this._sasToken; set => this._sasToken = value; }

        /// <summary>Backing field for <see cref="StorageAccount" /> property.</summary>
        private string _storageAccount;

        /// <summary>
        /// The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string StorageAccount { get => this._storageAccount; set => this._storageAccount = value; }

        /// <summary>Creates an new <see cref="ExportDeliveryDestination" /> instance.</summary>
        public ExportDeliveryDestination()
        {

        }
    }
    /// This represents the blob storage account location where exports of costs will be delivered. There are two ways to configure
    /// the destination. The approach recommended for most customers is to specify the resourceId of the storage account. This
    /// requires a one-time registration of the account's subscription with the Microsoft.CostManagementExports resource provider
    /// in order to give Cost Management services access to the storage. When creating an export in the Azure portal this registration
    /// is performed automatically but API users may need to register the subscription explicitly (for more information see https://learn.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services
    /// ). Another way to configure the destination is available ONLY to Partners with a Microsoft Partner Agreement plan who
    /// are global admins of their billing account. These Partners, instead of specifying the resourceId of a storage account,
    /// can specify the storage account name along with a SAS token for the account. This allows exports of costs to a storage
    /// account in any tenant. The SAS token should be created for the blob service with Service/Container/Object resource types
    /// and with Read/Write/Delete/List/Add/Create permissions (for more information see https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/export-cost-data-storage-account-sas-key
    /// ).
    public partial interface IExportDeliveryDestination :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The name of the container where exports will be uploaded. If the container does not exist it will be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the container where exports will be uploaded. If the container does not exist it will be created.",
        SerializedName = @"container",
        PossibleTypes = new [] { typeof(string) })]
        string Container { get; set; }
        /// <summary>
        /// The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount
        /// are specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount are specified.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceId { get; set; }
        /// <summary>The name of the directory where exports will be uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the directory where exports will be uploaded.",
        SerializedName = @"rootFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string RootFolderPath { get; set; }
        /// <summary>
        /// A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning
        /// this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be specified.",
        SerializedName = @"sasToken",
        PossibleTypes = new [] { typeof(string) })]
        string SasToken { get; set; }
        /// <summary>
        /// The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken can be specified instead of resourceId.",
        SerializedName = @"storageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccount { get; set; }

    }
    /// This represents the blob storage account location where exports of costs will be delivered. There are two ways to configure
    /// the destination. The approach recommended for most customers is to specify the resourceId of the storage account. This
    /// requires a one-time registration of the account's subscription with the Microsoft.CostManagementExports resource provider
    /// in order to give Cost Management services access to the storage. When creating an export in the Azure portal this registration
    /// is performed automatically but API users may need to register the subscription explicitly (for more information see https://learn.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services
    /// ). Another way to configure the destination is available ONLY to Partners with a Microsoft Partner Agreement plan who
    /// are global admins of their billing account. These Partners, instead of specifying the resourceId of a storage account,
    /// can specify the storage account name along with a SAS token for the account. This allows exports of costs to a storage
    /// account in any tenant. The SAS token should be created for the blob service with Service/Container/Object resource types
    /// and with Read/Write/Delete/List/Add/Create permissions (for more information see https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/export-cost-data-storage-account-sas-key
    /// ).
    public partial interface IExportDeliveryDestinationInternal

    {
        /// <summary>
        /// The name of the container where exports will be uploaded. If the container does not exist it will be created.
        /// </summary>
        string Container { get; set; }
        /// <summary>
        /// The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount
        /// are specified.
        /// </summary>
        string ResourceId { get; set; }
        /// <summary>The name of the directory where exports will be uploaded.</summary>
        string RootFolderPath { get; set; }
        /// <summary>
        /// A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning
        /// this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be
        /// specified.
        /// </summary>
        string SasToken { get; set; }
        /// <summary>
        /// The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        string StorageAccount { get; set; }

    }
}