using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.KeyVault.Properties;
using Microsoft.Azure.Commands.KeyVault.SecurityDomain.Common;
using Microsoft.Azure.Commands.KeyVault.SecurityDomain.Models;
using Newtonsoft.Json;
using System;
using System.Linq;
using System.Management.Automation;
using System.Security.Cryptography.X509Certificates;

namespace Microsoft.Azure.Commands.KeyVault.SecurityDomain.Cmdlets
{
    [Cmdlet(VerbsData.Restore, ResourceManager.Common.AzureRMConstants.AzurePrefix + CmdletNoun.KeyVault + "SecurityDomainBlob", SupportsShouldProcess = true)]
    [OutputType(typeof(bool))]
    public class RestoreSecurityDomainBlob : SecurityDomainCmdletClient
    {
        [Parameter(HelpMessage = "Information about the keys that are used to decrypt the security domain data. See examples for how it is constructed.", Mandatory = true)]
        [ValidateNotNullOrEmpty]
        public KeyPath[] Keys { get; set; }

        [Parameter(HelpMessage = "Information about the exchange key used to encrypt the security domain data. Constructed by Initialize-AzKeyVaultSecurityDomainRecovery.", Mandatory = true)]
        [ValidateNotNullOrEmpty]
        public string ExchangeKey { get; set; }

        [Parameter(HelpMessage = "Specify the path to the encrypted security domain data.", Mandatory = true)]
        [ValidateNotNullOrEmpty]
        public string SecurityDomainPath { get; set; }

        [Parameter(HelpMessage = "Local file path to store the security domain encrypted with the exchange key.", Mandatory = true)]
        [ValidateNotNullOrEmpty]
        public string SecurityDomainRestoreBlob { get; set; }

        [Parameter(HelpMessage = "When specified, a boolean will be returned when cmdlet succeeds.")]
        public SwitchParameter PassThru { get; set; }

        [Parameter(HelpMessage = "Specify whether to overwrite existing file.")]
        public SwitchParameter Force { get; set; }

        public override void DoExecuteCmdlet()
        {
            ValidateParameters();
            if (ShouldProcess($"Generating file {SecurityDomainRestoreBlob}", $"restore security domain data from file \"{SecurityDomainPath}\""))
            {
                Keys = Keys.Select(key => new KeyPath() {
                    PublicKey = ResolveUserPath(key.PublicKey),
                    PrivateKey = ResolveUserPath(key.PrivateKey)
                    }).ToArray();
                ExchangeKey = ResolveUserPath(ExchangeKey);
                SecurityDomainRestoreBlob = ResolveUserPath(SecurityDomainRestoreBlob);

                // Decrypt using Private Keys
                var securityDomain = LoadSdFromFile(ResolveUserPath(SecurityDomainPath));
                var rawSecurityDomain = Client.DecryptSecurityDomain(securityDomain, Keys);
                // Encript using Exchange Keys Generated by Initialize-AzKeyVaultSecurityDomainRecovery
                var exchangeKey = new X509Certificate2(ExchangeKey);
                var encryptedSecurityDomain = Client.EncryptForRestore(rawSecurityDomain, exchangeKey);
                string securityDomainBlob = JsonConvert.SerializeObject(encryptedSecurityDomain);

                if (!AzureSession.Instance.DataStore.FileExists(SecurityDomainRestoreBlob) || Force || ShouldContinue(string.Format(Resources.FileOverwriteMessage, SecurityDomainRestoreBlob), Resources.FileOverwriteCaption))
                {
                    AzureSession.Instance.DataStore.WriteFile(SecurityDomainRestoreBlob, securityDomainBlob);
                    WriteDebug($"Security domain data of exported managed HSM '{SecurityDomainPath}' restored to '{SecurityDomainRestoreBlob}'.");
                    if (PassThru)
                    {
                        WriteObject(true);
                    }
                }
            }
        }

        private void ValidateParameters()
        {
            if (Keys.Length < 2)
            {
                throw new ArgumentException(string.Format(Resources.RestoreSecurityDomainNotEnoughKey, Common.Constants.MinQuorum));
            }
            if (Keys.Any(key => string.IsNullOrEmpty(key.PublicKey) || string.IsNullOrEmpty(key.PrivateKey)))
            {
                throw new ArgumentException(Resources.RestoreSecurityDomainBadKey);
            }
        }

        private SecurityDomainData LoadSdFromFile(string path)
        {
            try
            {
                string content = Utils.FileToString(path);
                if (string.IsNullOrWhiteSpace(content))
                {
                    throw new ArgumentException(nameof(SecurityDomainPath));
                }
                return JsonConvert.DeserializeObject<SecurityDomainData>(content);
            }
            catch (Exception ex)
            {
                throw new Exception(
                    string.Format(Resources.LoadSecurityDomainFileFailed, path), ex);
            }
        }
    }
}
