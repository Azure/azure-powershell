// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.KeyVault
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateEndpointConnectionsOperations
    /// </summary>
    public static partial class PrivateEndpointConnectionsOperationsExtensions
    {
        /// <summary>
        /// Gets the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        public static PrivateEndpointConnection Get(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).GetAsync(resourceGroupName, vaultName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> GetAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vaultName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        public static PrivateEndpointConnection Put(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName, PrivateEndpointConnection properties)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).PutAsync(resourceGroupName, vaultName, privateEndpointConnectionName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> PutAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName, PrivateEndpointConnection properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutWithHttpMessagesAsync(resourceGroupName, vaultName, privateEndpointConnectionName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        public static PrivateEndpointConnection Delete(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).DeleteAsync(resourceGroupName, vaultName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> DeleteAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, vaultName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The List operation gets information about the private endpoint connections associated with the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateEndpointConnection> ListByResource(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).ListByResourceAsync(resourceGroupName, vaultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The List operation gets information about the private endpoint connections associated with the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateEndpointConnection>> ListByResourceAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceWithHttpMessagesAsync(resourceGroupName, vaultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        public static PrivateEndpointConnection BeginDelete(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).BeginDeleteAsync(resourceGroupName, vaultName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified private endpoint connection associated with the key vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group that contains the key vault.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the key vault.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection associated with the key vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> BeginDeleteAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string vaultName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, vaultName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The List operation gets information about the private endpoint connections associated with the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateEndpointConnection> ListByResourceNext(this IPrivateEndpointConnectionsOperations operations, string nextPageLink)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).ListByResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The List operation gets information about the private endpoint connections associated with the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateEndpointConnection>> ListByResourceNextAsync(this IPrivateEndpointConnectionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
