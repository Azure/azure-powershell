// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters for updating the access policy in a vault
    /// </summary>
    public partial class VaultAccessPolicyParameters : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the VaultAccessPolicyParameters class.
        /// </summary>
        public VaultAccessPolicyParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VaultAccessPolicyParameters class.
        /// </summary>

        /// <param name="id">The resource id of the access policy.
        /// </param>

        /// <param name="name">The resource name of the access policy.
        /// </param>

        /// <param name="type">The resource name of the access policy.
        /// </param>

        /// <param name="location">The resource type of the access policy.
        /// </param>

        /// <param name="properties">Properties of the access policy
        /// </param>
        public VaultAccessPolicyParameters(VaultAccessPolicyProperties properties, string id = default(string), string name = default(string), string type = default(string), string location = default(string))

        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Location = location;
            this.Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the resource id of the access policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the resource name of the access policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the resource name of the access policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the resource type of the access policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; private set; }

        /// <summary>
        /// Gets or sets properties of the access policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public VaultAccessPolicyProperties Properties {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Properties == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Properties");
            }




            if (this.Properties != null)
            {
                this.Properties.Validate();
            }
        }
    }
}