// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using System.Linq;

    /// <summary>
    /// SKU details
    /// </summary>
    public partial class Sku
    {
        /// <summary>
        /// Initializes a new instance of the Sku class.
        /// </summary>
        public Sku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Sku class.
        /// </summary>

        /// <param name="name">SKU name to specify whether the key vault is a standard vault or a premium
        /// vault.
        /// Possible values include: 'standard', 'premium'</param>
        public Sku(SkuName name)

        {
            this.Name = name;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for Sku class.
        /// </summary>
        static Sku()
        {
            Family = "A";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sKU name to specify whether the key vault is a standard vault
        /// or a premium vault. Possible values include: &#39;standard&#39;, &#39;premium&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public SkuName Name {get; set; }
        /// <summary>
        /// Gets or sets sKU family name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "family")]
        public static string Family {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


        }
    }
}