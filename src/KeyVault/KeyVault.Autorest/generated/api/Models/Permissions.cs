// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Extensions;

    /// <summary>Permissions the identity has for keys, secrets, certificates and storage.</summary>
    public partial class Permissions :
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IPermissions,
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IPermissionsInternal
    {

        /// <summary>Backing field for <see cref="Certificate" /> property.</summary>
        private System.Collections.Generic.List<string> _certificate;

        /// <summary>Permissions to certificates</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Certificate { get => this._certificate; set => this._certificate = value; }

        /// <summary>Backing field for <see cref="Key" /> property.</summary>
        private System.Collections.Generic.List<string> _key;

        /// <summary>Permissions to keys</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Key { get => this._key; set => this._key = value; }

        /// <summary>Backing field for <see cref="Secret" /> property.</summary>
        private System.Collections.Generic.List<string> _secret;

        /// <summary>Permissions to secrets</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Secret { get => this._secret; set => this._secret = value; }

        /// <summary>Backing field for <see cref="Storage" /> property.</summary>
        private System.Collections.Generic.List<string> _storage;

        /// <summary>Permissions to storage accounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Storage { get => this._storage; set => this._storage = value; }

        /// <summary>Creates an new <see cref="Permissions" /> instance.</summary>
        public Permissions()
        {

        }
    }
    /// Permissions the identity has for keys, secrets, certificates and storage.
    public partial interface IPermissions :
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.IJsonSerializable
    {
        /// <summary>Permissions to certificates</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Permissions to certificates",
        SerializedName = @"certificates",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "get", "list", "delete", "create", "import", "update", "managecontacts", "getissuers", "listissuers", "setissuers", "deleteissuers", "manageissuers", "recover", "purge", "backup", "restore")]
        System.Collections.Generic.List<string> Certificate { get; set; }
        /// <summary>Permissions to keys</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Permissions to keys",
        SerializedName = @"keys",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "encrypt", "decrypt", "wrapKey", "unwrapKey", "sign", "verify", "get", "list", "create", "update", "import", "delete", "backup", "restore", "recover", "purge", "release", "rotate", "getrotationpolicy", "setrotationpolicy")]
        System.Collections.Generic.List<string> Key { get; set; }
        /// <summary>Permissions to secrets</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Permissions to secrets",
        SerializedName = @"secrets",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "get", "list", "set", "delete", "backup", "restore", "recover", "purge")]
        System.Collections.Generic.List<string> Secret { get; set; }
        /// <summary>Permissions to storage accounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Permissions to storage accounts",
        SerializedName = @"storage",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "get", "list", "delete", "set", "update", "regeneratekey", "recover", "purge", "backup", "restore", "setsas", "listsas", "getsas", "deletesas")]
        System.Collections.Generic.List<string> Storage { get; set; }

    }
    /// Permissions the identity has for keys, secrets, certificates and storage.
    internal partial interface IPermissionsInternal

    {
        /// <summary>Permissions to certificates</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "get", "list", "delete", "create", "import", "update", "managecontacts", "getissuers", "listissuers", "setissuers", "deleteissuers", "manageissuers", "recover", "purge", "backup", "restore")]
        System.Collections.Generic.List<string> Certificate { get; set; }
        /// <summary>Permissions to keys</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "encrypt", "decrypt", "wrapKey", "unwrapKey", "sign", "verify", "get", "list", "create", "update", "import", "delete", "backup", "restore", "recover", "purge", "release", "rotate", "getrotationpolicy", "setrotationpolicy")]
        System.Collections.Generic.List<string> Key { get; set; }
        /// <summary>Permissions to secrets</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "get", "list", "set", "delete", "backup", "restore", "recover", "purge")]
        System.Collections.Generic.List<string> Secret { get; set; }
        /// <summary>Permissions to storage accounts</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("all", "get", "list", "delete", "set", "update", "regeneratekey", "recover", "purge", "backup", "restore", "setsas", "listsas", "getsas", "deletesas")]
        System.Collections.Generic.List<string> Storage { get; set; }

    }
}