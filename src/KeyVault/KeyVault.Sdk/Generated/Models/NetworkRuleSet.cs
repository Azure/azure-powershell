// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using System.Linq;

    /// <summary>
    /// A set of rules governing the network accessibility of a vault.
    /// </summary>
    public partial class NetworkRuleSet
    {
        /// <summary>
        /// Initializes a new instance of the NetworkRuleSet class.
        /// </summary>
        public NetworkRuleSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkRuleSet class.
        /// </summary>

        /// <param name="bypass">Tells what traffic can bypass network rules. This can be &#39;AzureServices&#39; or
        /// &#39;None&#39;.  If not specified the default is &#39;AzureServices&#39;.
        /// Possible values include: 'AzureServices', 'None'</param>

        /// <param name="defaultAction">The default action when no rule from ipRules and from virtualNetworkRules
        /// match. This is only used after the bypass property has been evaluated.
        /// Possible values include: 'Allow', 'Deny'</param>

        /// <param name="ipRules">The list of IP address rules.
        /// </param>

        /// <param name="virtualNetworkRules">The list of virtual network rules.
        /// </param>
        public NetworkRuleSet(string bypass = default(string), string defaultAction = default(string), System.Collections.Generic.IList<IPRule> ipRules = default(System.Collections.Generic.IList<IPRule>), System.Collections.Generic.IList<VirtualNetworkRule> virtualNetworkRules = default(System.Collections.Generic.IList<VirtualNetworkRule>))

        {
            this.Bypass = bypass;
            this.DefaultAction = defaultAction;
            this.IPRules = ipRules;
            this.VirtualNetworkRules = virtualNetworkRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets tells what traffic can bypass network rules. This can be
        /// &#39;AzureServices&#39; or &#39;None&#39;.  If not specified the default is
        /// &#39;AzureServices&#39;. Possible values include: &#39;AzureServices&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bypass")]
        public string Bypass {get; set; }

        /// <summary>
        /// Gets or sets the default action when no rule from ipRules and from
        /// virtualNetworkRules match. This is only used after the bypass property has
        /// been evaluated. Possible values include: &#39;Allow&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultAction")]
        public string DefaultAction {get; set; }

        /// <summary>
        /// Gets or sets the list of IP address rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipRules")]
        public System.Collections.Generic.IList<IPRule> IPRules {get; set; }

        /// <summary>
        /// Gets or sets the list of virtual network rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkRules")]
        public System.Collections.Generic.IList<VirtualNetworkRule> VirtualNetworkRules {get; set; }
    }
}