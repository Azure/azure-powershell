// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the vault access policy
    /// </summary>
    public partial class VaultAccessPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the VaultAccessPolicyProperties class.
        /// </summary>
        public VaultAccessPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VaultAccessPolicyProperties class.
        /// </summary>

        /// <param name="accessPolicies">An array of 0 to 16 identities that have access to the key vault. All
        /// identities in the array must use the same tenant ID as the key vault&#39;s
        /// tenant ID.
        /// </param>
        public VaultAccessPolicyProperties(System.Collections.Generic.IList<AccessPolicyEntry> accessPolicies)

        {
            this.AccessPolicies = accessPolicies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an array of 0 to 16 identities that have access to the key
        /// vault. All identities in the array must use the same tenant ID as the key
        /// vault&#39;s tenant ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessPolicies")]
        public System.Collections.Generic.IList<AccessPolicyEntry> AccessPolicies {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AccessPolicies == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccessPolicies");
            }
            if (this.AccessPolicies != null)
            {
                foreach (var element in this.AccessPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}