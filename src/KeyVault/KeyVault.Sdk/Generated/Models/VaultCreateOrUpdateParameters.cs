// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters for creating or updating a vault
    /// </summary>
    public partial class VaultCreateOrUpdateParameters : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the VaultCreateOrUpdateParameters class.
        /// </summary>
        public VaultCreateOrUpdateParameters()
        {
            this.Properties = new VaultProperties();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VaultCreateOrUpdateParameters class.
        /// </summary>

        /// <param name="location">The supported Azure location where the key vault should be created.
        /// </param>

        /// <param name="tags">The tags that will be assigned to the key vault.
        /// </param>

        /// <param name="properties">Properties of the vault
        /// </param>
        public VaultCreateOrUpdateParameters(string location, VaultProperties properties, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.Location = location;
            this.Tags = tags;
            this.Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the supported Azure location where the key vault should be
        /// created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets the tags that will be assigned to the key vault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets properties of the vault
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public VaultProperties Properties {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }
            if (this.Properties == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Properties");
            }


            if (this.Properties != null)
            {
                this.Properties.Validate();
            }
        }
    }
}