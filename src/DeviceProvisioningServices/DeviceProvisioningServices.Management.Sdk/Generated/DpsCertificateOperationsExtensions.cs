// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DeviceProvisioningServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DpsCertificateOperations
    /// </summary>
    public static partial class DpsCertificateOperationsExtensions
    {
        /// <summary>
        /// Get the certificate from the provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='certificateName'>
        /// Name of the certificate to retrieve.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service the certificate is associated with.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate.
        /// </param>
        public static CertificateResponse Get(this IDpsCertificateOperations operations, string certificateName, string resourceGroupName, string provisioningServiceName, string ifMatch = default(string))
        {
                return ((IDpsCertificateOperations)operations).GetAsync(certificateName, resourceGroupName, provisioningServiceName, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the certificate from the provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='certificateName'>
        /// Name of the certificate to retrieve.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service the certificate is associated with.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CertificateResponse> GetAsync(this IDpsCertificateOperations operations, string certificateName, string resourceGroupName, string provisioningServiceName, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(certificateName, resourceGroupName, provisioningServiceName, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Add new certificate or update an existing certificate.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The name of the provisioning service.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate create or update.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate. This is required to update an existing
        /// certificate, and ignored while creating a brand new certificate.
        /// </param>
        public static CertificateResponse CreateOrUpdate(this IDpsCertificateOperations operations, string resourceGroupName, string provisioningServiceName, string certificateName, CertificateBodyDescription certificateDescription, string ifMatch = default(string))
        {
                return ((IDpsCertificateOperations)operations).CreateOrUpdateAsync(resourceGroupName, provisioningServiceName, certificateName, certificateDescription, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Add new certificate or update an existing certificate.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The name of the provisioning service.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate create or update.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate. This is required to update an existing
        /// certificate, and ignored while creating a brand new certificate.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CertificateResponse> CreateOrUpdateAsync(this IDpsCertificateOperations operations, string resourceGroupName, string provisioningServiceName, string certificateName, CertificateBodyDescription certificateDescription, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, certificateName, certificateDescription, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified certificate assosciated with the Provisioning Service
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The name of the provisioning service.
        /// </param>
        /// <param name='certificateName'>
        /// This is a mandatory field, and is the logical name of the certificate that
        /// the provisioning service will access by.
        /// </param>
        /// <param name='certificateName1'>
        /// This is optional, and it is the Common Name of the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data within the certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// A description that mentions the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Time the certificate is created.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Time the certificate is last updated.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains a private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        public static void Delete(this IDpsCertificateOperations operations, string resourceGroupName, string ifMatch, string provisioningServiceName, string certificateName, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string))
        {
                ((IDpsCertificateOperations)operations).DeleteAsync(resourceGroupName, ifMatch, provisioningServiceName, certificateName, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified certificate assosciated with the Provisioning Service
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The name of the provisioning service.
        /// </param>
        /// <param name='certificateName'>
        /// This is a mandatory field, and is the logical name of the certificate that
        /// the provisioning service will access by.
        /// </param>
        /// <param name='certificateName1'>
        /// This is optional, and it is the Common Name of the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data within the certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// A description that mentions the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Time the certificate is created.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Time the certificate is last updated.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains a private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDpsCertificateOperations operations, string resourceGroupName, string ifMatch, string provisioningServiceName, string certificateName, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, ifMatch, provisioningServiceName, certificateName, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Generate verification code for Proof of Possession.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='certificateName'>
        /// The mandatory logical name of the certificate, that the provisioning
        /// service uses to access.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate. This is required to update an existing
        /// certificate, and ignored while creating a brand new certificate.
        /// </param>
        /// <param name='resourceGroupName'>
        /// name of resource group.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service.
        /// </param>
        /// <param name='certificateName1'>
        /// Common Name for the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data of certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if the certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// Description mentioning the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Certificate creation time.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Certificate last updated time.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        public static VerificationCodeResponse GenerateVerificationCode(this IDpsCertificateOperations operations, string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string))
        {
                return ((IDpsCertificateOperations)operations).GenerateVerificationCodeAsync(certificateName, ifMatch, resourceGroupName, provisioningServiceName, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Generate verification code for Proof of Possession.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='certificateName'>
        /// The mandatory logical name of the certificate, that the provisioning
        /// service uses to access.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate. This is required to update an existing
        /// certificate, and ignored while creating a brand new certificate.
        /// </param>
        /// <param name='resourceGroupName'>
        /// name of resource group.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service.
        /// </param>
        /// <param name='certificateName1'>
        /// Common Name for the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data of certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if the certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// Description mentioning the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Certificate creation time.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Certificate last updated time.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VerificationCodeResponse> GenerateVerificationCodeAsync(this IDpsCertificateOperations operations, string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GenerateVerificationCodeWithHttpMessagesAsync(certificateName, ifMatch, resourceGroupName, provisioningServiceName, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Verifies the certificate&#39;s private key possession by providing the leaf
        /// cert issued by the verifying pre uploaded certificate.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='certificateName'>
        /// The mandatory logical name of the certificate, that the provisioning
        /// service uses to access.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Provisioning service name.
        /// </param>
        /// <param name='certificateName1'>
        /// Common Name for the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data of certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if the certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// Describe the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Certificate creation time.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Certificate last updated time.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        public static CertificateResponse VerifyCertificate(this IDpsCertificateOperations operations, string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, VerificationCodeRequest request, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string))
        {
                return ((IDpsCertificateOperations)operations).VerifyCertificateAsync(certificateName, ifMatch, resourceGroupName, provisioningServiceName, request, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Verifies the certificate&#39;s private key possession by providing the leaf
        /// cert issued by the verifying pre uploaded certificate.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='certificateName'>
        /// The mandatory logical name of the certificate, that the provisioning
        /// service uses to access.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Provisioning service name.
        /// </param>
        /// <param name='certificateName1'>
        /// Common Name for the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data of certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if the certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// Describe the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Certificate creation time.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Certificate last updated time.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CertificateResponse> VerifyCertificateAsync(this IDpsCertificateOperations operations, string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, VerificationCodeRequest request, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.VerifyCertificateWithHttpMessagesAsync(certificateName, ifMatch, resourceGroupName, provisioningServiceName, request, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
