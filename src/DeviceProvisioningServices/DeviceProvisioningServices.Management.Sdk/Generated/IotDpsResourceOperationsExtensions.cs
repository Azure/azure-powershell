// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DeviceProvisioningServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IotDpsResourceOperations
    /// </summary>
    public static partial class IotDpsResourceOperationsExtensions
    {
        /// <summary>
        /// Get the metadata of the provisioning service without SAS keys.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service to retrieve.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        public static ProvisioningServiceDescription Get(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
        {
                return ((IIotDpsResourceOperations)operations).GetAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the metadata of the provisioning service without SAS keys.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service to retrieve.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProvisioningServiceDescription> GetAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the metadata of the provisioning service. The usual
        /// pattern to modify a property is to retrieve the provisioning service
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        public static ProvisioningServiceDescription CreateOrUpdate(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription)
        {
                return ((IIotDpsResourceOperations)operations).CreateOrUpdateAsync(resourceGroupName, provisioningServiceName, iotDpsDescription).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the metadata of the provisioning service. The usual
        /// pattern to modify a property is to retrieve the provisioning service
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProvisioningServiceDescription> CreateOrUpdateAsync(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, iotDpsDescription, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update an existing provisioning service&#39;s tags. to update other fields use
        /// the CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        public static ProvisioningServiceDescription Update(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, TagsResource provisioningServiceTags)
        {
                return ((IIotDpsResourceOperations)operations).UpdateAsync(resourceGroupName, provisioningServiceName, provisioningServiceTags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an existing provisioning service&#39;s tags. to update other fields use
        /// the CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProvisioningServiceDescription> UpdateAsync(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, TagsResource provisioningServiceTags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, provisioningServiceTags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the Provisioning Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to delete.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        public static void Delete(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
        {
                ((IIotDpsResourceOperations)operations).DeleteAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the Provisioning Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to delete.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription> ListBySubscription(this IIotDpsResourceOperations operations)
        {
                return ((IIotDpsResourceOperations)operations).ListBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription>> ListBySubscriptionAsync(this IIotDpsResourceOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of all provisioning services in the given resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription> ListByResourceGroup(this IIotDpsResourceOperations operations, string resourceGroupName)
        {
                return ((IIotDpsResourceOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all provisioning services in the given resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription>> ListByResourceGroupAsync(this IIotDpsResourceOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the status of a long running operation, such as create, update or
        /// delete a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='operationId'>
        /// Operation id corresponding to long running operation. Use this to poll for
        /// the status.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service that the operation is running on.
        /// </param>
        /// <param name='asyncinfo'>
        /// Async header used to poll on the status of the operation, obtained while
        /// creating the long running operation.
        /// </param>
        public static AsyncOperationResult GetOperationResult(this IIotDpsResourceOperations operations, string operationId, string resourceGroupName, string provisioningServiceName, string asyncinfo)
        {
                return ((IIotDpsResourceOperations)operations).GetOperationResultAsync(operationId, resourceGroupName, provisioningServiceName, asyncinfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the status of a long running operation, such as create, update or
        /// delete a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='operationId'>
        /// Operation id corresponding to long running operation. Use this to poll for
        /// the status.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service that the operation is running on.
        /// </param>
        /// <param name='asyncinfo'>
        /// Async header used to poll on the status of the operation, obtained while
        /// creating the long running operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AsyncOperationResult> GetOperationResultAsync(this IIotDpsResourceOperations operations, string operationId, string resourceGroupName, string provisioningServiceName, string asyncinfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetOperationResultWithHttpMessagesAsync(operationId, resourceGroupName, provisioningServiceName, asyncinfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of valid SKUs and tiers for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of resource group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotDpsSkuDefinition> ListValidSkus(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
        {
                return ((IIotDpsResourceOperations)operations).ListValidSkusAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of valid SKUs and tiers for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotDpsSkuDefinition>> ListValidSkusAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListValidSkusWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Check if a provisioning service name is available. This will validate if
        /// the name is syntactically valid and if the name is usable
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static NameAvailabilityInfo CheckProvisioningServiceNameAvailability(this IIotDpsResourceOperations operations, OperationInputs arguments)
        {
                return ((IIotDpsResourceOperations)operations).CheckProvisioningServiceNameAvailabilityAsync(arguments).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Check if a provisioning service name is available. This will validate if
        /// the name is syntactically valid and if the name is usable
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NameAvailabilityInfo> CheckProvisioningServiceNameAvailabilityAsync(this IIotDpsResourceOperations operations, OperationInputs arguments, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckProvisioningServiceNameAvailabilityWithHttpMessagesAsync(arguments, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List the primary and secondary keys for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The provisioning service name to get the shared access keys for.
        /// </param>
        /// <param name='resourceGroupName'>
        /// resource group name
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> ListKeys(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
        {
                return ((IIotDpsResourceOperations)operations).ListKeysAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the primary and secondary keys for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The provisioning service name to get the shared access keys for.
        /// </param>
        /// <param name='resourceGroupName'>
        /// resource group name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> ListKeysAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListKeysWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List primary and secondary keys for a specific key name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service.
        /// </param>
        /// <param name='keyName'>
        /// Logical key name to get key-values for.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the provisioning service.
        /// </param>
        public static SharedAccessSignatureAuthorizationRuleAccessRightsDescription ListKeysForKeyName(this IIotDpsResourceOperations operations, string provisioningServiceName, string keyName, string resourceGroupName)
        {
                return ((IIotDpsResourceOperations)operations).ListKeysForKeyNameAsync(provisioningServiceName, keyName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List primary and secondary keys for a specific key name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service.
        /// </param>
        /// <param name='keyName'>
        /// Logical key name to get key-values for.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the provisioning service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> ListKeysForKeyNameAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string keyName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListKeysForKeyNameWithHttpMessagesAsync(provisioningServiceName, keyName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the metadata of the provisioning service. The usual
        /// pattern to modify a property is to retrieve the provisioning service
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        public static ProvisioningServiceDescription BeginCreateOrUpdate(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription)
        {
                return ((IIotDpsResourceOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, provisioningServiceName, iotDpsDescription).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the metadata of the provisioning service. The usual
        /// pattern to modify a property is to retrieve the provisioning service
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProvisioningServiceDescription> BeginCreateOrUpdateAsync(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, ProvisioningServiceDescription iotDpsDescription, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, iotDpsDescription, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update an existing provisioning service&#39;s tags. to update other fields use
        /// the CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        public static ProvisioningServiceDescription BeginUpdate(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, TagsResource provisioningServiceTags)
        {
                return ((IIotDpsResourceOperations)operations).BeginUpdateAsync(resourceGroupName, provisioningServiceName, provisioningServiceTags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an existing provisioning service&#39;s tags. to update other fields use
        /// the CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProvisioningServiceDescription> BeginUpdateAsync(this IIotDpsResourceOperations operations, string resourceGroupName, string provisioningServiceName, TagsResource provisioningServiceTags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, provisioningServiceName, provisioningServiceTags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the Provisioning Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to delete.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        public static void BeginDelete(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName)
        {
                ((IIotDpsResourceOperations)operations).BeginDeleteAsync(provisioningServiceName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the Provisioning Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service to delete.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IIotDpsResourceOperations operations, string provisioningServiceName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(provisioningServiceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription> ListBySubscriptionNext(this IIotDpsResourceOperations operations, string nextPageLink)
        {
                return ((IIotDpsResourceOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription>> ListBySubscriptionNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of all provisioning services in the given resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription> ListByResourceGroupNext(this IIotDpsResourceOperations operations, string nextPageLink)
        {
                return ((IIotDpsResourceOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all provisioning services in the given resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProvisioningServiceDescription>> ListByResourceGroupNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of valid SKUs and tiers for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotDpsSkuDefinition> ListValidSkusNext(this IIotDpsResourceOperations operations, string nextPageLink)
        {
                return ((IIotDpsResourceOperations)operations).ListValidSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of valid SKUs and tiers for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotDpsSkuDefinition>> ListValidSkusNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListValidSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List the primary and secondary keys for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> ListKeysNext(this IIotDpsResourceOperations operations, string nextPageLink)
        {
                return ((IIotDpsResourceOperations)operations).ListKeysNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the primary and secondary keys for a provisioning service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> ListKeysNextAsync(this IIotDpsResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
