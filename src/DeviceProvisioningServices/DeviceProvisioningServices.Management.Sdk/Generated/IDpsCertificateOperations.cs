// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DeviceProvisioningServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// DpsCertificateOperations operations.
    /// </summary>
    public partial interface IDpsCertificateOperations
    {
        /// <summary>
        /// Get the certificate from the provisioning service.
        /// </summary>
        /// <remarks>
        /// Get the certificate from the provisioning service.
        /// </remarks>
        /// <param name='certificateName'>
        /// Name of the certificate to retrieve.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of the provisioning service the certificate is associated with.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<CertificateResponse>> GetWithHttpMessagesAsync(string certificateName, string resourceGroupName, string provisioningServiceName, string ifMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new certificate or update an existing certificate.
        /// </summary>
        /// <remarks>
        /// Add new certificate or update an existing certificate.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The name of the provisioning service.
        /// </param>
        /// <param name='certificateName'>
        /// The name of the certificate create or update.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate. This is required to update an existing
        /// certificate, and ignored while creating a brand new certificate.
        /// </param>
        /// <param name='certificateDescription'>
        /// The certificate body.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<CertificateResponse>> CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string provisioningServiceName, string certificateName, CertificateBodyDescription certificateDescription, string ifMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes the specified certificate assosciated with the Provisioning Service
        /// </summary>
        /// <remarks>
        /// Deletes the specified certificate assosciated with the Provisioning Service
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate
        /// </param>
        /// <param name='provisioningServiceName'>
        /// The name of the provisioning service.
        /// </param>
        /// <param name='certificateName'>
        /// This is a mandatory field, and is the logical name of the certificate that
        /// the provisioning service will access by.
        /// </param>
        /// <param name='certificateName1'>
        /// This is optional, and it is the Common Name of the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data within the certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// A description that mentions the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Time the certificate is created.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Time the certificate is last updated.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains a private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string ifMatch, string provisioningServiceName, string certificateName, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate verification code for Proof of Possession.
        /// </summary>
        /// <remarks>
        /// Generate verification code for Proof of Possession.
        /// </remarks>
        /// <param name='certificateName'>
        /// The mandatory logical name of the certificate, that the provisioning
        /// service uses to access.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate. This is required to update an existing
        /// certificate, and ignored while creating a brand new certificate.
        /// </param>
        /// <param name='resourceGroupName'>
        /// name of resource group.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Name of provisioning service.
        /// </param>
        /// <param name='certificateName1'>
        /// Common Name for the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data of certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if the certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// Description mentioning the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Certificate creation time.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Certificate last updated time.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<VerificationCodeResponse>> GenerateVerificationCodeWithHttpMessagesAsync(string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verifies the certificate&#39;s private key possession by providing the leaf
        /// cert issued by the verifying pre uploaded certificate.
        /// </summary>
        /// <remarks>
        /// Verifies the certificate&#39;s private key possession by providing the leaf
        /// cert issued by the verifying pre uploaded certificate.
        /// </remarks>
        /// <param name='certificateName'>
        /// The mandatory logical name of the certificate, that the provisioning
        /// service uses to access.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the certificate.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='provisioningServiceName'>
        /// Provisioning service name.
        /// </param>
        /// <param name='certificateName1'>
        /// Common Name for the certificate.
        /// </param>
        /// <param name='certificateRawBytes'>
        /// Raw data of certificate.
        /// </param>
        /// <param name='certificateIsVerified'>
        /// Indicates if the certificate has been verified by owner of the private key.
        /// </param>
        /// <param name='certificatePurpose'>
        /// Describe the purpose of the certificate.
        /// </param>
        /// <param name='certificateCreated'>
        /// Certificate creation time.
        /// </param>
        /// <param name='certificateLastUpdated'>
        /// Certificate last updated time.
        /// </param>
        /// <param name='certificateHasPrivateKey'>
        /// Indicates if the certificate contains private key.
        /// </param>
        /// <param name='certificateNonce'>
        /// Random number generated to indicate Proof of Possession.
        /// </param>
        /// <param name='request'>
        /// The name of the certificate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<CertificateResponse>> VerifyCertificateWithHttpMessagesAsync(string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, VerificationCodeRequest request, string certificateName1 = default(string), byte[] certificateRawBytes = default(byte[]), bool? certificateIsVerified = default(bool?), string certificatePurpose = default(string), System.DateTimeOffset? certificateCreated = default(System.DateTimeOffset?), System.DateTimeOffset? certificateLastUpdated = default(System.DateTimeOffset?), bool? certificateHasPrivateKey = default(bool?), string certificateNonce = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}