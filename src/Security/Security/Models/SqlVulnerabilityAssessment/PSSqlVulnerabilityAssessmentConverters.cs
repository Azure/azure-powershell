using Microsoft.Azure.Management.Security.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment
{
    public static class PSSqlVulnerabilityAssessmentConverters
    {
        public static PSSqlVulnerabilityAssessmentScanRecord ConvertToPSType(this Scan value)
        {
            return new PSSqlVulnerabilityAssessmentScanRecord()
            {
                Id = value.Id,
                Name = value.Name,
                Type = value.Type,
                TriggerType = value.Properties.TriggerType,
                State = value.Properties.State,
                Server = value.Properties.Server,
                Database = value.Properties.Database,
                SqlVersion = value.Properties.SqlVersion,
                StartTime = value.Properties.StartTime,
                EndTime = value.Properties.EndTime,
                HighSeverityFailedRulesCount = value.Properties.HighSeverityFailedRulesCount ?? 0,
                MediumSeverityFailedRulesCount = value.Properties.MediumSeverityFailedRulesCount ?? 0,
                LowSeverityFailedRulesCount = value.Properties.LowSeverityFailedRulesCount ?? 0,
                TotalPassedRulesCount = value.Properties.TotalPassedRulesCount ?? 0,
                TotalFailedRulesCount = value.Properties.TotalFailedRulesCount ?? 0,
                TotalRulesCount = value.Properties.TotalRulesCount ?? 0,
                IsBaselineApplied = value.Properties.IsBaselineApplied ?? false
            };
        }

        public static IList<PSSqlVulnerabilityAssessmentScanRecord> ConvertToPSType(this Scans value)
        {
            return value.Value.Select(scan => scan.ConvertToPSType()).ToList();
        }

        public static PSSqlVulnerabilityAssessmentQueryCheck ConvertToPSType(this QueryCheck value)
        {
            return new PSSqlVulnerabilityAssessmentQueryCheck()
            {
                Query = value.Query,
                ColumnNames = value.ColumnNames?.ToArray() ?? new string[0],
                ExpectedResult = value.ExpectedResult?.Select(result => result.ToArray()).ToArray() ?? new string[0][]
            };
        }

        public static PSSqlVulnerabilityBenchmarkReference ConvertToPSType(this BenchmarkReference value)
        {
            return new PSSqlVulnerabilityBenchmarkReference()
            {
                Benchmark = value.Benchmark,
                Reference = value.Reference
            };
        }

        public static PSSqlVulnerabilityAssessmentRule ConvertToPSType(this VaRule value)
        {
            return new PSSqlVulnerabilityAssessmentRule()
            {
                RuleId = value.RuleId,
                Title = value.Title,
                Severity = value.Severity,
                RuleType = value.RuleType,
                Description = value.Description,
                Category = value.Category,
                Rationale = value.Rationale,
                QueryCheck = value.QueryCheck.ConvertToPSType(),
                BenchmarkReferences = value.BenchmarkReferences?.Select(benchmark => benchmark.ConvertToPSType()).ToArray() ?? new PSSqlVulnerabilityBenchmarkReference[0]
            };
        }

        public static PSSqlVulnerabilityAssessmentRemediation ConvertToPSType(this Remediation value)
        {
            return new PSSqlVulnerabilityAssessmentRemediation()
            {
                Automated = value.Automated ?? false,
                Description = value.Description,
                PortalLink = value.PortalLink,
                Scripts = value.Scripts.ToArray()
            };
        }

        public static PSSqlVulnerabilityAssessmentBaseline ConvertToPSType(this Baseline value)
        {
            return new PSSqlVulnerabilityAssessmentBaseline()
            {
                ExpectedResults = value.ExpectedResults?.Select(result => result.ToArray()).ToArray() ?? new string[0][],
                UpdatedTime = value.UpdatedTime
            };
        }

        public static PSSqlVulnerabilityAssessmentBaselineAdjustedResult ConvertToPSType(this BaselineAdjustedResult value)
        {
            return new PSSqlVulnerabilityAssessmentBaselineAdjustedResult()
            {
                Status = value?.Status ?? string.Empty,
                ResultsNotInBaseline = value?.ResultsNotInBaseline?.Select(result => result.ToArray()).ToArray() ?? new string[0][],
                ResultsOnlyInBaseline = value?.ResultsOnlyInBaseline?.Select(result => result.ToArray()).ToArray() ?? new string[0][],
                Baseline = value?.Baseline.ConvertToPSType() ?? null
            };
        }

        public static PSSqlVulnerabilityAssessmentScanResult ConvertToPSType(this ScanResult value)
        {
            return new PSSqlVulnerabilityAssessmentScanResult()
            {
                Id = value.Id,
                Name = value.Name,
                Type = value.Type,
                RuleId = value.Properties.RuleId,
                IsTrimmed = value.Properties.IsTrimmed,
                QueryResults = value.Properties.QueryResults?.Select(result => result.ToArray()).ToArray() ?? new string[0][],
                Status = value.Properties.Status,
                Remediation = value.Properties.Remediation.ConvertToPSType(),
                BaselineAdjustedResult = value.Properties.BaselineAdjustedResult.ConvertToPSType(),
                RuleMetadata = value.Properties.RuleMetadata.ConvertToPSType()
            };
        }

        public static IList<PSSqlVulnerabilityAssessmentScanResult> ConvertToPSType(this ScanResults value)
        {
            return value.Value.Select(scan => scan.ConvertToPSType()).ToList();
        }

        public static PSSqlVulnerabilityAssessmentRuleBaselineResults ConvertToPSType(this RuleResults value)
        {
            return new PSSqlVulnerabilityAssessmentRuleBaselineResults()
            {
                Id = value.Id,
                Name = value.Name,
                Type = value.Type,
                Results = value.Properties.Results?.Select(result => result.ToArray()).ToArray() ?? new string[0][]
            };
        }

        public static PSSqlVulnerabilityAssessmentBaselineResults ConvertToPSType(this RulesResults value, string workspaceId = "")
        {
            return new PSSqlVulnerabilityAssessmentBaselineResults()
            {
                Results = value.Value?.Select(scan => scan.ConvertToPSType()).ToList() ?? new List<PSSqlVulnerabilityAssessmentRuleBaselineResults>(),
                WorkSpaceId = workspaceId
            };
        }
    }
}

