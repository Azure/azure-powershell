using Commands.Security;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.New, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlVulnerabilityAssessmentBaseline", SupportsShouldProcess = true), OutputType(typeof(PSSqlVulnerabilityAssessmentBaselineResults))]

    public class NewSqlVulnerabilityAssessmentBaseline : SqlVulnerabilityAssessmentSetBaselineBase
    {
        [Parameter(ParameterSetName = ParameterSetNames.InputObjectWithResourceId, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        [Parameter(ParameterSetName = ParameterSetNames.InputObjectWithOnPrem, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        public PSSqlVulnerabilityAssessmentBaselineResults InputObject { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithBaselineObject, Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithBaselineObject, Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        public Hashtable Baseline { get; set; }


        public override void ExecuteCmdlet()
        {
            var databaseResourceId = BuildDatabaseResourceId();
            if (UseLatest.IsPresent)
            {
                var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.AddWithHttpMessagesAsync(WorkspaceId, "2020-07-01-preview", databaseResourceId, latestScan: true).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType());
            }
            else
            {
                Dictionary<string, IList<IList<string>>> baseline = null;
                if (this.ParameterSetName == ParameterSetNames.InputObjectWithResourceId
                    || this.ParameterSetName == ParameterSetNames.InputObjectWithOnPrem)
                {
                    baseline = InputObject.Results.ToDictionary(
                        result => result.Name,
                        result => (IList<IList<string>>)result.Results.Select(
                            row => (IList<string>)row.ToList()).ToList());
                }
                else
                {
                    baseline = Baseline.Cast<DictionaryEntry>()
                        .ToDictionary(
                        kvp => (string)kvp.Key,
                        kvp => (IList<IList<string>>)((object[])kvp.Value)
                            .Select(arr => (IList<string>)((object[])arr)
                                .Select(str => (string)str).ToList())
                                .ToList());
                }

                var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.AddWithHttpMessagesAsync(WorkspaceId, "2020-07-01-preview", databaseResourceId, results: baseline).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType());
            }
        }
    }
}
