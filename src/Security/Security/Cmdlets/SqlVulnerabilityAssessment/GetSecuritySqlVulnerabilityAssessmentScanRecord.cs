// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------

using Commands.Security;
using System.Management.Automation;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment;

namespace Microsoft.Azure.Commands.Security.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Get, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SecuritySqlVulnerabilityAssessmentScanRecord", DefaultParameterSetName = ParameterSetNames.ResourceId), OutputType(typeof(PSSqlVulnerabilityAssessmentScanRecord))]
    public class GetSecuritySqlVulnerabilityAssessmentScanRecord : SqlVulnerabilityAssessmentCmdlet
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = false, HelpMessage = ParameterHelpMessages.ScanId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachines, Mandatory = false,  HelpMessage = ParameterHelpMessages.ScanId)]
        public string ScanId { get; set; }

        public override void ExecuteCmdlet()
        {
            var databaseResourceId = BuildDatabaseResourceId();
            if (string.IsNullOrEmpty(ScanId))
            {
                var results = SecurityCenterClient.SqlVulnerabilityAssessmentScans.ListWithHttpMessagesAsync(WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType(), enumerateCollection: true);
            }
            else
            {
                var result = SecurityCenterClient.SqlVulnerabilityAssessmentScans.GetWithHttpMessagesAsync(ScanId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(result?.ConvertToPSType(), enumerateCollection: false);
            }
        }
    }
}
