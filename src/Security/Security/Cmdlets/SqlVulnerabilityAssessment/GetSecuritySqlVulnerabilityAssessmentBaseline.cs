using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using System;
using System.Collections.Generic;
using System.Management.Automation;
using System.Text;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Get, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SecuritySqlVulnerabilityAssessmentBaseline", DefaultParameterSetName = ParameterSetNames.ResourceId), OutputType(typeof(PSSqlVulnerabilityAssessmentBaselineResults))]
    public class GetSecuritySqlVulnerabilityAssessmentBaseline : SqlVulnerabilityAssessmentCmdlet
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = false, HelpMessage = ParameterHelpMessages.RuleId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachines, Mandatory = false, HelpMessage = ParameterHelpMessages.RuleId)]
        public string RuleId { get; set; }

        public override void ExecuteCmdlet()
        {
            var databaseResourceId = BuildDatabaseResourceId();
            if (!string.IsNullOrEmpty(RuleId))
            {

                var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.GetWithHttpMessagesAsync(RuleId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(new PSSqlVulnerabilityAssessmentBaselineResults()
                {
                    Results = new List<PSSqlVulnerabilityAssessmentRuleBaselineResults>() { results?.ConvertToPSType() },
                    WorkSpaceId = WorkspaceId
                });
            }
            else
            {
                var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.ListWithHttpMessagesAsync(WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType(WorkspaceId));
            }
        }
    }
}
