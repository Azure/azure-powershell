using Commands.Security;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using System;
using System.Collections.Generic;
using System.Management.Automation;
using System.Text;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Add, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SecuritySqlVulnerabilityAssessmentBaseline", DefaultParameterSetName = ParameterSetNames.ResourceIdWithBaselineObject, SupportsShouldProcess = true), OutputType(typeof(PSSqlVulnerabilityAssessmentBaselineResults))]
    public class AddSecuritySqlVulnerabilityAssessmentBaseline : SqlVulnerabilityAssessmentBaseWithBaseline
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithBaselineObject, Mandatory = true, HelpMessage = ParameterHelpMessages.RuleId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithBaselineObject, Mandatory = true, HelpMessage = ParameterHelpMessages.RuleId)]
        public string RuleId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithBaselineObject, Mandatory = false, HelpMessage = ParameterHelpMessages.Baseline)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithBaselineObject, Mandatory = false, HelpMessage = ParameterHelpMessages.Baseline)]
        public string[][] Baseline { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.InputObjectBaselineWithResourceId, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        [Parameter(ParameterSetName = ParameterSetNames.InputObjectBaselineWithOnPrem, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        public PSSqlVulnerabilityAssessmentBaselineResults InputObject { get; set; }

        public override void ExecuteCmdlet()
        {
            var databaseResourceId = BuildDatabaseResourceId();
            if (this.ParameterSetName == ParameterSetNames.InputObjectBaselineWithResourceId
                || this.ParameterSetName == ParameterSetNames.InputObjectBaselineWithOnPrem)
            {
                foreach (var rule in InputObject.Results)
                {
                    if (ShouldProcess(rule.Name, $"Adding baseline for {databaseResourceId}."))
                    {
                        var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.CreateOrUpdateWithHttpMessagesAsync(rule.Name, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId, results: rule.Results).GetAwaiter().GetResult().Body;
                        WriteObject(results?.ConvertToPSType());
                    }
                }
            }
            else
            {
                if (ShouldProcess(RuleId, $"Adding baseline for {databaseResourceId}."))
                {
                    if (Baseline == null)
                    {
                        var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.CreateOrUpdateWithHttpMessagesAsync(RuleId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId, latestScan: true).GetAwaiter().GetResult().Body;
                        WriteObject(results?.ConvertToPSType());
                    }
                    else
                    {
                        var results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.CreateOrUpdateWithHttpMessagesAsync(RuleId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId, results: Baseline).GetAwaiter().GetResult().Body;
                        WriteObject(results?.ConvertToPSType());
                    }
                }
            }
        }
    }
}
