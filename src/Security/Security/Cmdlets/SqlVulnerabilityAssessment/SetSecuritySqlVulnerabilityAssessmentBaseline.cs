using Commands.Security;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using Microsoft.Azure.Management.Security.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Set, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SecuritySqlVulnerabilityAssessmentBaseline", SupportsShouldProcess = true, DefaultParameterSetName = ParameterSetNames.ResourceIdWithBaselineObject), OutputType(typeof(PSSqlVulnerabilityAssessmentBaselineResults))]
    public class SetSecuritySqlVulnerabilityAssessmentBaseline : SqlVulnerabilityAssessmentBaseWithBaseline
    {
        [Parameter(ParameterSetName = ParameterSetNames.InputObjectBaselineWithResourceId, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        [Parameter(ParameterSetName = ParameterSetNames.InputObjectBaselineWithOnPrem, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        public PSSqlVulnerabilityAssessmentBaselineResults InputObject { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithBaselineObject, Mandatory = false, HelpMessage = ParameterHelpMessages.Baseline)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithBaselineObject, Mandatory = false, HelpMessage = ParameterHelpMessages.Baseline)]
        public Hashtable BaselineSet { get; set; }

        [Parameter(Mandatory = false, HelpMessage = ParameterHelpMessages.ForceSetBaseline)]
        public SwitchParameter Force { get; set; }

        public override void ExecuteCmdlet()
        {
            var databaseResourceId = BuildDatabaseResourceId();
            Dictionary<string, IList<IList<string>>> baseline = null;
            if (this.ParameterSetName == ParameterSetNames.InputObjectBaselineWithResourceId
                || this.ParameterSetName == ParameterSetNames.InputObjectBaselineWithOnPrem)
            {
                baseline = InputObject.Results.ToDictionary(
                    result => result.Name,
                    result => (IList<IList<string>>)result.Results.Select(
                        row => (IList<string>)row.ToList()).ToList());
            }
            else
            {
                if (BaselineSet != null)
                {
                    baseline = BaselineSet.Cast<DictionaryEntry>()
                        .ToDictionary(
                        kvp => (string)kvp.Key,
                        kvp => (IList<IList<string>>)((object[])kvp.Value)
                            .Select(arr => (IList<string>)((object[])arr)
                                .Select(str => (string)str).ToList())
                                .ToList());
                }
            }

            RulesResults results = null;
            if (Force.IsPresent || ShouldContinue($"Are you sure you want to set baseline? - This will discard your old baseline work.", $"Setting baseline for {databaseResourceId}."))
            {
                if (baseline != null)
                {
                    results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.AddWithHttpMessagesAsync(WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId, results: baseline).GetAwaiter().GetResult().Body;
                }
                else
                {
                    results = SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.AddWithHttpMessagesAsync(WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId, latestScan: true).GetAwaiter().GetResult().Body;
                }

                WriteObject(results?.ConvertToPSType(WorkspaceId));
            }
        }
    }
}
