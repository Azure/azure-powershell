using Commands.Security;
using System.Management.Automation;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Get, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlVulnerabilityAssessmentScanRecord", DefaultParameterSetName = ParameterSetNames.ResourceId, SupportsShouldProcess = true), OutputType(typeof(PSSqlVulnerabilityAssessmentScanRecord))]

    class GetSqlVulnerabilityAssessmentScanRecords : SecurityCenterCmdletBase
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        [ValidateNotNullOrEmpty]
        public string ResourceId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        [ValidateNotNullOrEmpty]
        public string WorkspaceId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        public string ScanId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = false, ValueFromPipelineByPropertyName = false, HelpMessage = ParameterHelpMessages.ResourceId)]
        public SwitchParameter UseLatest { get; set; }

        public override void ExecuteCmdlet()
        {
            if (UseLatest.IsPresent)
            {
                ScanId = "lastest";
            }

            if (string.IsNullOrEmpty(ScanId))
            {
                var results = SecurityCenterClient.SqlVulnerabilityAssessmentScans.ListWithHttpMessagesAsync(WorkspaceId, "", ResourceId).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType(), enumerateCollection: true);
            }
            else
            {
                var result = SecurityCenterClient.SqlVulnerabilityAssessmentScans.GetWithHttpMessagesAsync(ScanId, WorkspaceId, "", ResourceId).GetAwaiter().GetResult().Body;
                WriteObject(result?.ConvertToPSType(), enumerateCollection: false);
            }

        }
    }
}
