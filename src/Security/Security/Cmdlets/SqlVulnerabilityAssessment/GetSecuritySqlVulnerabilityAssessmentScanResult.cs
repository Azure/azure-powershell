using Commands.Security;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Get, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SecuritySqlVulnerabilityAssessmentScanResult", DefaultParameterSetName = ParameterSetNames.ResourceId), OutputType(typeof(PSSqlVulnerabilityAssessmentScanResult))]
    public class GetSecuritySqlVulnerabilityAssessmentScanResult : SqlVulnerabilityAssessmentCmdlet
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = false, HelpMessage = ParameterHelpMessages.ScanId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachines, Mandatory = false, HelpMessage = ParameterHelpMessages.ScanId)]
        public string ScanId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = false, HelpMessage = ParameterHelpMessages.RuleId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachines, Mandatory = false, HelpMessage = ParameterHelpMessages.RuleId)]
        public string RuleId { get; set; }

        public override void ExecuteCmdlet()
        {
            if (string.IsNullOrEmpty(ScanId))
            {
                ScanId = "latest";
            }

            var databaseResourceId = BuildDatabaseResourceId();
            if (string.IsNullOrEmpty(RuleId))
            {
                var results = SecurityCenterClient.SqlVulnerabilityAssessmentScanResults.ListWithHttpMessagesAsync(ScanId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType(), enumerateCollection: true);
            }
            else
            {
                var result = SecurityCenterClient.SqlVulnerabilityAssessmentScanResults.GetWithHttpMessagesAsync(ScanId, RuleId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(result?.ConvertToPSType(), enumerateCollection: false);
            }
        }
    }
}
