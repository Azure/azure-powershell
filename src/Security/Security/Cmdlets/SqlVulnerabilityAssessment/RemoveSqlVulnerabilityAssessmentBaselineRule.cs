using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using System;
using System.Collections.Generic;
using System.Management.Automation;
using System.Text;

namespace Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Remove, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlVulnerabilityAssessmentBaselineRule", DefaultParameterSetName = ParameterSetNames.ResourceId, SupportsShouldProcess = true), OutputType(typeof(bool))]
    public class RemoveSqlVulnerabilityAssessmentBaselineRule : SqlVulnerabilityAssessmentCmdlet
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceId, Mandatory = true, HelpMessage = ParameterHelpMessages.RuleId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachines, Mandatory = true, HelpMessage = ParameterHelpMessages.RuleId)]
        public string RuleId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.InputObject, Mandatory = true, ValueFromPipeline = true, HelpMessage = ParameterHelpMessages.InputObject)]
        public PSSqlVulnerabilityAssessmentBaselineResults InputObject { get; set; }

        public override void ExecuteCmdlet()
        {
            if (this.ParameterSetName == ParameterSetNames.InputObject)
            {
                foreach (var rule in InputObject.Results)
                {
                    var dbResourceId = rule.Id.Substring(0, rule.Id.IndexOf("/providers/Microsoft.Security"));
                    SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.DeleteWithHttpMessagesAsync(rule.Name, InputObject.WorkSpaceId, VulnerabilityAssessmentConstants.ApiVersion, dbResourceId).GetAwaiter().GetResult();
                }

                WriteObject(true);
            }
            else
            {
                var databaseResourceId = BuildDatabaseResourceId();

                SecurityCenterClient.SqlVulnerabilityAssessmentBaselineRules.DeleteWithHttpMessagesAsync(RuleId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult();
                WriteObject(true);
            }
        }
    }
}
