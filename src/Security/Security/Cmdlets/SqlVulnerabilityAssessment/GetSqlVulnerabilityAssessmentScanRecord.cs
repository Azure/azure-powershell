// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------

using Commands.Security;
using System.Management.Automation;
using Microsoft.Azure.Commands.Security.Common;
using Microsoft.Azure.Commands.SecurityCenter.Models.SqlVulnerabilityAssessment;
using Microsoft.Azure.Commands.SecurityCenter.Cmdlets.SqlVulnerabilityAssessment;

namespace Microsoft.Azure.Commands.Security.Cmdlets.SqlVulnerabilityAssessment
{
    [Cmdlet(VerbsCommon.Get, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlVulnerabilityAssessmentScanRecord"), OutputType(typeof(PSSqlVulnerabilityAssessmentScanRecord))]
    public class GetSqlVulnerabilityAssessmentScanRecord : SecurityCenterCmdletBase
    {
        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.ResourceId)]
        [ValidateNotNullOrEmpty]
        public string ResourceId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.WorkspaceId)]
        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.WorkspaceId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.WorkspaceId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.WorkspaceId)]
        [ValidateNotNullOrEmpty]
        public string WorkspaceId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.Server)]
        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.Server)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.Server)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.Server)]
        [ValidateNotNullOrEmpty]
        public string Server { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.Database)]
        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.Database)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.Database)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.Database)]
        [ValidateNotNullOrEmpty]
        public string Database { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.ComputerName)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.ComputerName)]
        [ValidateNotNullOrEmpty]
        public string ComputerName { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.VMUUID)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.VMUUID)]
        [ValidateNotNullOrEmpty]
        public string VMUUID { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.AgentId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.AgentId)]
        [ValidateNotNullOrEmpty]
        public string AgentId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = true, HelpMessage = ParameterHelpMessages.WorkspaceResourceId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.WorkspaceResourceId)]
        [ValidateNotNullOrEmpty]
        public string WorkspaceResourceId { get; set; }


        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithScanId, Mandatory = false, HelpMessage = ParameterHelpMessages.ScanId)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithScanId, Mandatory = false,  HelpMessage = ParameterHelpMessages.ScanId)]
        public string ScanId { get; set; }

        [Parameter(ParameterSetName = ParameterSetNames.ResourceIdWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.UseLatest)]
        [Parameter(ParameterSetName = ParameterSetNames.OnPremMachinesWithLatest, Mandatory = true, HelpMessage = ParameterHelpMessages.UseLatest)]
        public SwitchParameter UseLatest { get; set; }

        public override void ExecuteCmdlet()
        {
            if (this.ParameterSetName == ParameterSetNames.OnPremMachinesWithLatest
                || this.ParameterSetName == ParameterSetNames.ResourceIdWithLatest)
            {
                ScanId = "latest";
            }

            var databaseResourceId = BuildDatabaseResourceId();
            if (string.IsNullOrEmpty(ScanId))
            {
                var results = SecurityCenterClient.SqlVulnerabilityAssessmentScans.ListWithHttpMessagesAsync(WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(results?.ConvertToPSType(), enumerateCollection: true);
            }
            else
            {
                var result = SecurityCenterClient.SqlVulnerabilityAssessmentScans.GetWithHttpMessagesAsync(ScanId, WorkspaceId, VulnerabilityAssessmentConstants.ApiVersion, databaseResourceId).GetAwaiter().GetResult().Body;
                WriteObject(result?.ConvertToPSType(), enumerateCollection: false);
            }
        }

        public string BuildDatabaseResourceId()
        {
            if (this.ParameterSetName == ParameterSetNames.OnPremMachinesWithScanId
                || this.ParameterSetName == ParameterSetNames.OnPremMachinesWithBaselineLatest)
            {
                return $"{WorkspaceResourceId}/onPremiseMachines/{ComputerName}_{AgentId}_{VMUUID}/sqlServers/{Server}/databases/{Database}";
            }

            return $"{ResourceId}/sqlServers/{Server}/databases/{Database}";
        }
    }
}
