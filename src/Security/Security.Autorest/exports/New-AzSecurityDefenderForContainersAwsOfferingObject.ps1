
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DefenderForContainersAwsOffering.
.Description
Create an in-memory object for DefenderForContainersAwsOffering.
.Example
$arnPrefix = "arn:aws:iam::123456789012:role"
New-AzSecurityDefenderForContainersAwsOfferingObject `
    -AutoProvisioning $true -KuberneteServiceCloudRoleArn "$arnPrefix/DefenderForCloud-Containers-K8s" -KuberneteScubaReaderCloudRoleArn "$arnPrefix/DefenderForCloud-DataCollection" `
    -KinesiToS3CloudRoleArn "$arnPrefix/DefenderForCloud-Containers-K8s-kinesis-to-s3" -CloudWatchToKinesiCloudRoleArn "$arnPrefix/DefenderForCloud-Containers-K8s-cloudwatch-to-kinesis" `
    -KubeAuditRetentionTime 30 -ScubaExternalId "a47ae0a2-7bf7-482a-897a-7a139d30736c" `
    -MdcContainerAgentlessDiscoveryK8SEnabled $true -MdcContainerAgentlessDiscoveryK8SCloudRoleArn "$arnPrefix/MDCContainersAgentlessDiscoveryK8sRole" `
    -MdcContainerImageAssessmentEnabled $true -MdcContainerImageAssessmentCloudRoleArn "$arnPrefix/MDCContainersImageAssessmentRole" `
    -EnableContainerVulnerabilityAssessment $false

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForContainersAwsOffering
.Link
https://learn.microsoft.com/powershell/module/Az.Security/new-azsecuritydefenderforcontainersawsofferingobject
#>
function New-AzSecurityDefenderForContainersAwsOfferingObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForContainersAwsOffering])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is audit logs pipeline auto provisioning enabled.
    ${AutoProvisioning},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS used by CloudWatch to transfer data into Kinesis.
    ${CloudWatchToKinesiCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS for this feature.
    ${ContainerVulnerabilityAssessmentCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS for this feature.
    ${ContainerVulnerabilityAssessmentTaskCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Enable container vulnerability assessment feature.
    ${EnableContainerVulnerabilityAssessment},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS used by Kinesis to transfer data into S3.
    ${KinesiToS3CloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Int64]
    # The retention time in days of kube audit logs set on the CloudWatch log group.
    ${KubeAuditRetentionTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS for this feature used for reading data.
    ${KuberneteScubaReaderCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS for this feature used for provisioning resources.
    ${KuberneteServiceCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS for this feature.
    ${MdcContainerAgentlessDiscoveryK8SCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is Microsoft Defender container agentless discovery K8s enabled.
    ${MdcContainerAgentlessDiscoveryK8SEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The cloud role ARN in AWS for this feature.
    ${MdcContainerImageAssessmentCloudRoleArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is Microsoft Defender container image assessment enabled.
    ${MdcContainerImageAssessmentEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The externalId used by the data reader to prevent the confused deputy attack.
    ${ScubaExternalId}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Security.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.Security.custom\New-AzSecurityDefenderForContainersAwsOfferingObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Security.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Security.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Security.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
