
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DefenderCspmGcpOffering.
.Description
Create an in-memory object for DefenderCspmGcpOffering.
.Example
$emailSuffix = "myproject.iam.gserviceaccount.com"
New-AzSecurityDefenderCspmGcpOfferingObject `
    -VMScannerEnabled $true -ConfigurationScanningMode Default -ConfigurationExclusionTag @{key="value"} `
    -MdcContainerAgentlessDiscoveryK8SEnabled $true -MdcContainerAgentlessDiscoveryK8SServiceAccountEmailAddress "mdc-containers-k8s-operator@$emailSuffix" -MdcContainerAgentlessDiscoveryK8SWorkloadIdentityProviderId "containers" `
    -MdcContainerImageAssessmentEnabled $true -MdcContainerImageAssessmentServiceAccountEmailAddress "mdc-containers-artifact-assess@$emailSuffix" -MdcContainerImageAssessmentWorkloadIdentityProviderId "containers" `
    -DataSensitivityDiscoveryEnabled $true -DataSensitivityDiscoveryServiceAccountEmailAddress "mdc-data-sec-posture-storage@$emailSuffix" -DataSensitivityDiscoveryWorkloadIdentityProviderId "data-security-posture-storage" `
    -CiemDiscoveryServiceAccountEmailAddress "microsoft-defender-ciem@$emailSuffix" -CiemDiscoveryAzureActiveDirectoryAppName "mciem-gcp-oidc-app" -CiemDiscoveryWorkloadIdentityProviderId "ciem-discovery"

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderCspmGcpOffering
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CONFIGURATIONEXCLUSIONTAG <IDefenderCspmGcpOfferingVMScannersConfigurationExclusionTags>: VM tags that indicates that VM should not be scanned.
  [(Any) <String>]: This indicates any property can be added to this object.
.Link
https://learn.microsoft.com/powershell/module/Az.Security/new-azsecuritydefendercspmgcpofferingobject
#>
function New-AzSecurityDefenderCspmGcpOfferingObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderCspmGcpOffering])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # the azure active directory app name used of authenticating against GCP workload identity federation.
    ${CiemDiscoveryAzureActiveDirectoryAppName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The service account email address in GCP for CIEM discovery offering.
    ${CiemDiscoveryServiceAccountEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The GCP workload identity provider id for CIEM discovery offering.
    ${CiemDiscoveryWorkloadIdentityProviderId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Models.IDefenderCspmGcpOfferingVMScannersConfigurationExclusionTags]
    # VM tags that indicates that VM should not be scanned.
    ${ConfigurationExclusionTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.PSArgumentCompleterAttribute("Default")]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The scanning mode for the VM scan.
    ${ConfigurationScanningMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is Microsoft Defender Data Sensitivity discovery enabled.
    ${DataSensitivityDiscoveryEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The service account email address in GCP for this feature.
    ${DataSensitivityDiscoveryServiceAccountEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The workload identity provider id in GCP for this feature.
    ${DataSensitivityDiscoveryWorkloadIdentityProviderId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is Microsoft Defender container agentless discovery enabled.
    ${MdcContainerAgentlessDiscoveryK8SEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The service account email address in GCP for this feature.
    ${MdcContainerAgentlessDiscoveryK8SServiceAccountEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The workload identity provider id in GCP for this feature.
    ${MdcContainerAgentlessDiscoveryK8SWorkloadIdentityProviderId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is Microsoft Defender container image assessment enabled.
    ${MdcContainerImageAssessmentEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The service account email address in GCP for this feature.
    ${MdcContainerImageAssessmentServiceAccountEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.String]
    # The workload identity provider id in GCP for this feature.
    ${MdcContainerImageAssessmentWorkloadIdentityProviderId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Security.Category('Body')]
    [System.Boolean]
    # Is Microsoft Defender for Server VM scanning enabled.
    ${VMScannerEnabled}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Security.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.Security.custom\New-AzSecurityDefenderCspmGcpOfferingObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Security.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Security.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Security.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
