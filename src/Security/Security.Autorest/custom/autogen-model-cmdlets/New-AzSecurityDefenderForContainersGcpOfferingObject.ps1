
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DefenderForContainersGcpOffering.
.Description
Create an in-memory object for DefenderForContainersGcpOffering.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForContainersGcpOffering
.Link
https://learn.microsoft.com/powershell/module/Az.Security/new-azsecuritydefenderforcontainersgcpofferingobject
#>
function New-AzSecurityDefenderForContainersGcpOfferingObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForContainersGcpOffering')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Is audit logs data collection enabled.")]
        [bool]
        $AuditLogsAutoProvisioningFlag,
        [Parameter(HelpMessage="The data collection service account email address in GCP for this offering.")]
        [string]
        $DataPipelineNativeCloudConnectionServiceAccountEmailAddress,
        [Parameter(HelpMessage="The data collection GCP workload identity provider id for this offering.")]
        [string]
        $DataPipelineNativeCloudConnectionWorkloadIdentityProviderId,
        [Parameter(HelpMessage="Is Microsoft Defender for Cloud Kubernetes agent auto provisioning enabled.")]
        [bool]
        $DefenderAgentAutoProvisioningFlag,
        [Parameter(HelpMessage="Is Microsoft Defender container agentless discovery enabled.")]
        [bool]
        $MdcContainerAgentlessDiscoveryK8SEnabled,
        [Parameter(HelpMessage="The service account email address in GCP for this feature.")]
        [string]
        $MdcContainerAgentlessDiscoveryK8SServiceAccountEmailAddress,
        [Parameter(HelpMessage="The workload identity provider id in GCP for this feature.")]
        [string]
        $MdcContainerAgentlessDiscoveryK8SWorkloadIdentityProviderId,
        [Parameter(HelpMessage="Is Microsoft Defender container image assessment enabled.")]
        [bool]
        $MdcContainerImageAssessmentEnabled,
        [Parameter(HelpMessage="The service account email address in GCP for this feature.")]
        [string]
        $MdcContainerImageAssessmentServiceAccountEmailAddress,
        [Parameter(HelpMessage="The workload identity provider id in GCP for this feature.")]
        [string]
        $MdcContainerImageAssessmentWorkloadIdentityProviderId,
        [Parameter(HelpMessage="The service account email address in GCP for this offering.")]
        [string]
        $NativeCloudConnectionServiceAccountEmailAddress,
        [Parameter(HelpMessage="The GCP workload identity provider id for this offering.")]
        [string]
        $NativeCloudConnectionWorkloadIdentityProviderId,
        [Parameter(HelpMessage="Is Policy Kubernetes agent auto provisioning enabled.")]
        [bool]
        $PolicyAgentAutoProvisioningFlag
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForContainersGcpOffering]::New()

        if ($PSBoundParameters.ContainsKey('AuditLogsAutoProvisioningFlag')) {
            $Object.AuditLogsAutoProvisioningFlag = $AuditLogsAutoProvisioningFlag
        }
        if ($PSBoundParameters.ContainsKey('DataPipelineNativeCloudConnectionServiceAccountEmailAddress')) {
            $Object.DataPipelineNativeCloudConnectionServiceAccountEmailAddress = $DataPipelineNativeCloudConnectionServiceAccountEmailAddress
        }
        if ($PSBoundParameters.ContainsKey('DataPipelineNativeCloudConnectionWorkloadIdentityProviderId')) {
            $Object.DataPipelineNativeCloudConnectionWorkloadIdentityProviderId = $DataPipelineNativeCloudConnectionWorkloadIdentityProviderId
        }
        if ($PSBoundParameters.ContainsKey('DefenderAgentAutoProvisioningFlag')) {
            $Object.DefenderAgentAutoProvisioningFlag = $DefenderAgentAutoProvisioningFlag
        }
        if ($PSBoundParameters.ContainsKey('MdcContainerAgentlessDiscoveryK8SEnabled')) {
            $Object.MdcContainerAgentlessDiscoveryK8SEnabled = $MdcContainerAgentlessDiscoveryK8SEnabled
        }
        if ($PSBoundParameters.ContainsKey('MdcContainerAgentlessDiscoveryK8SServiceAccountEmailAddress')) {
            $Object.MdcContainerAgentlessDiscoveryK8SServiceAccountEmailAddress = $MdcContainerAgentlessDiscoveryK8SServiceAccountEmailAddress
        }
        if ($PSBoundParameters.ContainsKey('MdcContainerAgentlessDiscoveryK8SWorkloadIdentityProviderId')) {
            $Object.MdcContainerAgentlessDiscoveryK8SWorkloadIdentityProviderId = $MdcContainerAgentlessDiscoveryK8SWorkloadIdentityProviderId
        }
        if ($PSBoundParameters.ContainsKey('MdcContainerImageAssessmentEnabled')) {
            $Object.MdcContainerImageAssessmentEnabled = $MdcContainerImageAssessmentEnabled
        }
        if ($PSBoundParameters.ContainsKey('MdcContainerImageAssessmentServiceAccountEmailAddress')) {
            $Object.MdcContainerImageAssessmentServiceAccountEmailAddress = $MdcContainerImageAssessmentServiceAccountEmailAddress
        }
        if ($PSBoundParameters.ContainsKey('MdcContainerImageAssessmentWorkloadIdentityProviderId')) {
            $Object.MdcContainerImageAssessmentWorkloadIdentityProviderId = $MdcContainerImageAssessmentWorkloadIdentityProviderId
        }
        if ($PSBoundParameters.ContainsKey('NativeCloudConnectionServiceAccountEmailAddress')) {
            $Object.NativeCloudConnectionServiceAccountEmailAddress = $NativeCloudConnectionServiceAccountEmailAddress
        }
        if ($PSBoundParameters.ContainsKey('NativeCloudConnectionWorkloadIdentityProviderId')) {
            $Object.NativeCloudConnectionWorkloadIdentityProviderId = $NativeCloudConnectionWorkloadIdentityProviderId
        }
        if ($PSBoundParameters.ContainsKey('PolicyAgentAutoProvisioningFlag')) {
            $Object.PolicyAgentAutoProvisioningFlag = $PolicyAgentAutoProvisioningFlag
        }
        return $Object
    }
}

