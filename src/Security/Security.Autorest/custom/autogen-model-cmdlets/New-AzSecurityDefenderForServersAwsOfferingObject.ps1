
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DefenderForServersAwsOffering.
.Description
Create an in-memory object for DefenderForServersAwsOffering.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForServersAwsOffering
.Link
https://learn.microsoft.com/powershell/module/Az.Security/new-azsecuritydefenderforserversawsofferingobject
#>
function New-AzSecurityDefenderForServersAwsOfferingObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForServersAwsOffering')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The cloud role ARN in AWS for this feature.")]
        [string]
        $ArcAutoProvisioningCloudRoleArn,
        [Parameter(HelpMessage="Is arc auto provisioning enabled.")]
        [bool]
        $ArcAutoProvisioningEnabled,
        [Parameter(HelpMessage="The cloud role ARN in AWS for this feature.")]
        [string]
        $ConfigurationCloudRoleArn,
        [Parameter(HelpMessage="VM tags that indicates that VM should not be scanned.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.Models.IDefenderForServersAwsOfferingVMScannersConfigurationExclusionTags]
        $ConfigurationExclusionTag,
        [Parameter(HelpMessage="Optional Arc private link scope resource id to link the Arc agent.")]
        [string]
        $ConfigurationPrivateLinkScope,
        [Parameter(HelpMessage="Optional HTTP proxy endpoint to use for the Arc agent.")]
        [string]
        $ConfigurationProxy,
        [Parameter(HelpMessage="The scanning mode for the VM scan.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.PSArgumentCompleterAttribute("Default")]
        [string]
        $ConfigurationScanningMode,
        [Parameter(HelpMessage="The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.PSArgumentCompleterAttribute("Qualys", "TVM")]
        [string]
        $ConfigurationType,
        [Parameter(HelpMessage="The cloud role ARN in AWS for this feature.")]
        [string]
        $DefenderForServerCloudRoleArn,
        [Parameter(HelpMessage="configuration for Microsoft Defender for Endpoint autoprovisioning.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.Models.IAny]
        $MdeAutoProvisioningConfiguration,
        [Parameter(HelpMessage="Is Microsoft Defender for Endpoint auto provisioning enabled.")]
        [bool]
        $MdeAutoProvisioningEnabled,
        [Parameter(HelpMessage="The available sub plans.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Security.PSArgumentCompleterAttribute("P1", "P2")]
        [string]
        $SubPlanType,
        [Parameter(HelpMessage="Is Microsoft Defender for Server VM scanning enabled.")]
        [bool]
        $VMScannerEnabled,
        [Parameter(HelpMessage="Is Vulnerability Assessment auto provisioning enabled.")]
        [bool]
        $VaAutoProvisioningEnabled
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Security.Models.DefenderForServersAwsOffering]::New()

        if ($PSBoundParameters.ContainsKey('ArcAutoProvisioningCloudRoleArn')) {
            $Object.ArcAutoProvisioningCloudRoleArn = $ArcAutoProvisioningCloudRoleArn
        }
        if ($PSBoundParameters.ContainsKey('ArcAutoProvisioningEnabled')) {
            $Object.ArcAutoProvisioningEnabled = $ArcAutoProvisioningEnabled
        }
        if ($PSBoundParameters.ContainsKey('ConfigurationCloudRoleArn')) {
            $Object.ConfigurationCloudRoleArn = $ConfigurationCloudRoleArn
        }
        if ($PSBoundParameters.ContainsKey('ConfigurationExclusionTag')) {
            $Object.ConfigurationExclusionTag = $ConfigurationExclusionTag
        }
        if ($PSBoundParameters.ContainsKey('ConfigurationPrivateLinkScope')) {
            $Object.ConfigurationPrivateLinkScope = $ConfigurationPrivateLinkScope
        }
        if ($PSBoundParameters.ContainsKey('ConfigurationProxy')) {
            $Object.ConfigurationProxy = $ConfigurationProxy
        }
        if ($PSBoundParameters.ContainsKey('ConfigurationScanningMode')) {
            $Object.ConfigurationScanningMode = $ConfigurationScanningMode
        }
        if ($PSBoundParameters.ContainsKey('ConfigurationType')) {
            $Object.ConfigurationType = $ConfigurationType
        }
        if ($PSBoundParameters.ContainsKey('DefenderForServerCloudRoleArn')) {
            $Object.DefenderForServerCloudRoleArn = $DefenderForServerCloudRoleArn
        }
        if ($PSBoundParameters.ContainsKey('MdeAutoProvisioningConfiguration')) {
            $Object.MdeAutoProvisioningConfiguration = $MdeAutoProvisioningConfiguration
        }
        if ($PSBoundParameters.ContainsKey('MdeAutoProvisioningEnabled')) {
            $Object.MdeAutoProvisioningEnabled = $MdeAutoProvisioningEnabled
        }
        if ($PSBoundParameters.ContainsKey('SubPlanType')) {
            $Object.SubPlanType = $SubPlanType
        }
        if ($PSBoundParameters.ContainsKey('VMScannerEnabled')) {
            $Object.VMScannerEnabled = $VMScannerEnabled
        }
        if ($PSBoundParameters.ContainsKey('VaAutoProvisioningEnabled')) {
            $Object.VaAutoProvisioningEnabled = $VaAutoProvisioningEnabled
        }
        return $Object
    }
}

