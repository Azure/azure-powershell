// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ServerVulnerabilityAssessmentsSettingsOperations
    /// </summary>
    public static partial class ServerVulnerabilityAssessmentsSettingsOperationsExtensions
    {
        /// <summary>
        /// Get a list of all the server vulnerability assessments settings over a
        /// subscription level scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ServerVulnerabilityAssessmentsSetting> ListBySubscription(this IServerVulnerabilityAssessmentsSettingsOperations operations)
        {
                return ((IServerVulnerabilityAssessmentsSettingsOperations)operations).ListBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all the server vulnerability assessments settings over a
        /// subscription level scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ServerVulnerabilityAssessmentsSetting>> ListBySubscriptionAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a server vulnerability assessments setting of the requested kind, that
        /// is set on the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static ServerVulnerabilityAssessmentsSetting Get(this IServerVulnerabilityAssessmentsSettingsOperations operations)
        {
                return ((IServerVulnerabilityAssessmentsSettingsOperations)operations).GetAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a server vulnerability assessments setting of the requested kind, that
        /// is set on the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ServerVulnerabilityAssessmentsSetting> GetAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a server vulnerability assessments setting of the
        /// requested kind on the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static ServerVulnerabilityAssessmentsSetting CreateOrUpdate(this IServerVulnerabilityAssessmentsSettingsOperations operations, ServerVulnerabilityAssessmentsSetting serverVulnerabilityAssessmentsSetting)
        {
                return ((IServerVulnerabilityAssessmentsSettingsOperations)operations).CreateOrUpdateAsync(serverVulnerabilityAssessmentsSetting).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a server vulnerability assessments setting of the
        /// requested kind on the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ServerVulnerabilityAssessmentsSetting> CreateOrUpdateAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, ServerVulnerabilityAssessmentsSetting serverVulnerabilityAssessmentsSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(serverVulnerabilityAssessmentsSetting, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the server vulnerability assessments setting of the requested kind
        /// from the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static void Delete(this IServerVulnerabilityAssessmentsSettingsOperations operations)
        {
                ((IServerVulnerabilityAssessmentsSettingsOperations)operations).DeleteAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the server vulnerability assessments setting of the requested kind
        /// from the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get a list of all the server vulnerability assessments settings over a
        /// subscription level scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ServerVulnerabilityAssessmentsSetting> ListBySubscriptionNext(this IServerVulnerabilityAssessmentsSettingsOperations operations, string nextPageLink)
        {
                return ((IServerVulnerabilityAssessmentsSettingsOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all the server vulnerability assessments settings over a
        /// subscription level scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ServerVulnerabilityAssessmentsSetting>> ListBySubscriptionNextAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
