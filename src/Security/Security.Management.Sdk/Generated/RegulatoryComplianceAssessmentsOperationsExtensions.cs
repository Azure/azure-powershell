// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RegulatoryComplianceAssessmentsOperations
    /// </summary>
    public static partial class RegulatoryComplianceAssessmentsOperationsExtensions
    {
        /// <summary>
        /// Details and state of assessments mapped to selected regulatory compliance control
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='regulatoryComplianceControlName'>
        /// Name of the regulatory compliance control object
        /// </param>
        /// <param name='filter'>
        /// OData filter. Optional.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RegulatoryComplianceAssessment> List(this IRegulatoryComplianceAssessmentsOperations operations, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, string filter = default(string))
        {
                return ((IRegulatoryComplianceAssessmentsOperations)operations).ListAsync(regulatoryComplianceStandardName, regulatoryComplianceControlName, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Details and state of assessments mapped to selected regulatory compliance control
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='regulatoryComplianceControlName'>
        /// Name of the regulatory compliance control object
        /// </param>
        /// <param name='filter'>
        /// OData filter. Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RegulatoryComplianceAssessment>> ListAsync(this IRegulatoryComplianceAssessmentsOperations operations, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(regulatoryComplianceStandardName, regulatoryComplianceControlName, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Supported regulatory compliance details and state for selected assessment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='regulatoryComplianceControlName'>
        /// Name of the regulatory compliance control object
        /// </param>
        /// <param name='regulatoryComplianceAssessmentName'>
        /// Name of the regulatory compliance assessment object
        /// </param>
        public static RegulatoryComplianceAssessment Get(this IRegulatoryComplianceAssessmentsOperations operations, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, string regulatoryComplianceAssessmentName)
        {
                return ((IRegulatoryComplianceAssessmentsOperations)operations).GetAsync(regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Supported regulatory compliance details and state for selected assessment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='regulatoryComplianceControlName'>
        /// Name of the regulatory compliance control object
        /// </param>
        /// <param name='regulatoryComplianceAssessmentName'>
        /// Name of the regulatory compliance assessment object
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RegulatoryComplianceAssessment> GetAsync(this IRegulatoryComplianceAssessmentsOperations operations, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, string regulatoryComplianceAssessmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Details and state of assessments mapped to selected regulatory compliance control
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RegulatoryComplianceAssessment> ListNext(this IRegulatoryComplianceAssessmentsOperations operations, string nextPageLink)
        {
                return ((IRegulatoryComplianceAssessmentsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Details and state of assessments mapped to selected regulatory compliance control
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RegulatoryComplianceAssessment>> ListNextAsync(this IRegulatoryComplianceAssessmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
