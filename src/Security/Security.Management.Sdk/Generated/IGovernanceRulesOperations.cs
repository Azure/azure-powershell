// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// GovernanceRulesOperations operations.
    /// </summary>
    public partial interface IGovernanceRulesOperations
    {
        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <remarks>
        /// Get a list of all relevant governance rules over a scope
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<GovernanceRule>>> ListWithHttpMessagesAsync(string scope, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// </summary>
        /// <remarks>
        /// Get a specific governance rule for the requested scope by ruleId
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<GovernanceRule>> GetWithHttpMessagesAsync(string scope, string ruleId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a governance rule over a given scope
        /// </summary>
        /// <remarks>
        /// Creates or updates a governance rule over a given scope
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='governanceRule'>
        /// Governance rule over a given scope
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<GovernanceRule>> CreateOrUpdateWithHttpMessagesAsync(string scope, string ruleId, GovernanceRule governanceRule, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <remarks>
        /// Delete a Governance rule over a given scope
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationHeaderResponse<GovernanceRulesDeleteHeaders>> DeleteWithHttpMessagesAsync(string scope, string ruleId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <remarks>
        /// Execute a governance rule
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='overrideParameter'>
        /// Describe if governance rule should be override
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationHeaderResponse<GovernanceRulesExecuteHeaders>> ExecuteWithHttpMessagesAsync(string scope, string ruleId, bool? overrideParameter = default(bool?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get governance rules long run operation result for the requested scope by ruleId and operationId
        /// </summary>
        /// <remarks>
        /// Get governance rules long run operation result for the requested scope by ruleId and operationId
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='operationId'>
        /// The governance rule long running operation unique key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<OperationResultAutoGenerated,GovernanceRulesOperationResultsHeaders>> OperationResultsWithHttpMessagesAsync(string scope, string ruleId, string operationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <remarks>
        /// Delete a Governance rule over a given scope
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationHeaderResponse<GovernanceRulesDeleteHeaders>> BeginDeleteWithHttpMessagesAsync(string scope, string ruleId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <remarks>
        /// Execute a governance rule
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='overrideParameter'>
        /// Describe if governance rule should be override
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationHeaderResponse<GovernanceRulesExecuteHeaders>> BeginExecuteWithHttpMessagesAsync(string scope, string ruleId, bool? overrideParameter = default(bool?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <remarks>
        /// Get a list of all relevant governance rules over a scope
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<GovernanceRule>>> ListNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}