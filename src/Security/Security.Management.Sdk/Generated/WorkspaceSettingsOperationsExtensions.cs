// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WorkspaceSettingsOperations
    /// </summary>
    public static partial class WorkspaceSettingsOperationsExtensions
    {
        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkspaceSetting> List(this IWorkspaceSettingsOperations operations)
        {
                return ((IWorkspaceSettingsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkspaceSetting>> ListAsync(this IWorkspaceSettingsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        public static WorkspaceSetting Get(this IWorkspaceSettingsOperations operations, string workspaceSettingName)
        {
                return ((IWorkspaceSettingsOperations)operations).GetAsync(workspaceSettingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkspaceSetting> GetAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(workspaceSettingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// creating settings about where we should store your security data and logs
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        public static WorkspaceSetting Create(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId = default(string), string scope = default(string))
        {
                return ((IWorkspaceSettingsOperations)operations).CreateAsync(workspaceSettingName, workspaceId, scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// creating settings about where we should store your security data and logs
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkspaceSetting> CreateAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId = default(string), string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(workspaceSettingName, workspaceId, scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Settings about where we should store your security data and logs
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        public static WorkspaceSetting Update(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId = default(string), string scope = default(string))
        {
                return ((IWorkspaceSettingsOperations)operations).UpdateAsync(workspaceSettingName, workspaceId, scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings about where we should store your security data and logs
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkspaceSetting> UpdateAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, string workspaceId = default(string), string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(workspaceSettingName, workspaceId, scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the custom workspace settings for this subscription. new VMs will report to the default workspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        public static void Delete(this IWorkspaceSettingsOperations operations, string workspaceSettingName)
        {
                ((IWorkspaceSettingsOperations)operations).DeleteAsync(workspaceSettingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the custom workspace settings for this subscription. new VMs will report to the default workspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceSettingName'>
        /// Name of the security setting
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IWorkspaceSettingsOperations operations, string workspaceSettingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(workspaceSettingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkspaceSetting> ListNext(this IWorkspaceSettingsOperations operations, string nextPageLink)
        {
                return ((IWorkspaceSettingsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkspaceSetting>> ListNextAsync(this IWorkspaceSettingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
