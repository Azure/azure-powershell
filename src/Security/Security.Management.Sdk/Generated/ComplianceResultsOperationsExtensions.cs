// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ComplianceResultsOperations
    /// </summary>
    public static partial class ComplianceResultsOperationsExtensions
    {
        /// <summary>
        /// Security compliance results in the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ComplianceResult> List(this IComplianceResultsOperations operations, string scope)
        {
                return ((IComplianceResultsOperations)operations).ListAsync(scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Security compliance results in the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ComplianceResult>> ListAsync(this IComplianceResultsOperations operations, string scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Security Compliance Result
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='complianceResultName'>
        /// name of the desired assessment compliance result
        /// </param>
        public static ComplianceResult Get(this IComplianceResultsOperations operations, string resourceId, string complianceResultName)
        {
                return ((IComplianceResultsOperations)operations).GetAsync(resourceId, complianceResultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Security Compliance Result
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='complianceResultName'>
        /// name of the desired assessment compliance result
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ComplianceResult> GetAsync(this IComplianceResultsOperations operations, string resourceId, string complianceResultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceId, complianceResultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Security compliance results in the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ComplianceResult> ListNext(this IComplianceResultsOperations operations, string nextPageLink)
        {
                return ((IComplianceResultsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Security compliance results in the subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ComplianceResult>> ListNextAsync(this IComplianceResultsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
