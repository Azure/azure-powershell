// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Security Control Definition Properties.
    /// </summary>
    public partial class SecureScoreControlDefinitionItemProperties
    {
        /// <summary>
        /// Initializes a new instance of the SecureScoreControlDefinitionItemProperties class.
        /// </summary>
        public SecureScoreControlDefinitionItemProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecureScoreControlDefinitionItemProperties class.
        /// </summary>

        /// <param name="displayName">User friendly display name of the control
        /// </param>

        /// <param name="description">User friendly description of the control
        /// </param>

        /// <param name="maxScore">Maximum control score (0..10)
        /// </param>

        /// <param name="source">Source object from which the control was created
        /// </param>

        /// <param name="assessmentDefinitions">Array of assessments metadata IDs that are included in this security
        /// control
        /// </param>
        public SecureScoreControlDefinitionItemProperties(string displayName = default(string), string description = default(string), int? maxScore = default(int?), SecureScoreControlDefinitionSource source = default(SecureScoreControlDefinitionSource), System.Collections.Generic.IList<AzureResourceLink> assessmentDefinitions = default(System.Collections.Generic.IList<AzureResourceLink>))

        {
            this.DisplayName = displayName;
            this.Description = description;
            this.MaxScore = maxScore;
            this.Source = source;
            this.AssessmentDefinitions = assessmentDefinitions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets user friendly display name of the control
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; private set; }

        /// <summary>
        /// Gets user friendly description of the control
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; private set; }

        /// <summary>
        /// Gets maximum control score (0..10)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxScore")]
        public int? MaxScore {get; private set; }

        /// <summary>
        /// Gets source object from which the control was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public SecureScoreControlDefinitionSource Source {get; private set; }

        /// <summary>
        /// Gets array of assessments metadata IDs that are included in this security
        /// control
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assessmentDefinitions")]
        public System.Collections.Generic.IList<AzureResourceLink> AssessmentDefinitions {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Description != null)
            {
                if (this.Description.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 256);
                }
            }
            if (this.MaxScore != null)
            {
                if (this.MaxScore > 10)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxScore", 10);
                }
                if (this.MaxScore < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxScore", 0);
                }
            }


        }
    }
}