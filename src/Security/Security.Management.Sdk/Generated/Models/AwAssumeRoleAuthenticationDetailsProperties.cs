// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// AWS cloud account connector based assume role, the role enables delegating
    /// access to your AWS resources. The role is composed of role Amazon Resource
    /// Name (ARN) and external ID. For more details, refer to &lt;a
    /// href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html&#34;&gt;Creating
    /// a Role to Delegate Permissions to an IAM User (write only)&lt;/a&gt;
    /// </summary>
    [Newtonsoft.Json.JsonObject("awsAssumeRole")]
    public partial class AwAssumeRoleAuthenticationDetailsProperties : AuthenticationDetailsProperties
    {
        /// <summary>
        /// Initializes a new instance of the AwAssumeRoleAuthenticationDetailsProperties class.
        /// </summary>
        public AwAssumeRoleAuthenticationDetailsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AwAssumeRoleAuthenticationDetailsProperties class.
        /// </summary>

        /// <param name="authenticationProvisioningState">State of the multi-cloud connector
        /// Possible values include: 'Valid', 'Invalid', 'Expired', 'IncorrectPolicy'</param>

        /// <param name="grantedPermissions">The permissions detected in the cloud account.
        /// </param>

        /// <param name="accountId">The ID of the cloud account
        /// </param>

        /// <param name="awsAssumeRoleArn">Assumed role ID is an identifier that you can use to create temporary
        /// security credentials.
        /// </param>

        /// <param name="awsExternalId">A unique identifier that is required when you assume a role in another
        /// account.
        /// </param>
        public AwAssumeRoleAuthenticationDetailsProperties(string awsAssumeRoleArn, string awsExternalId, string authenticationProvisioningState = default(string), System.Collections.Generic.IList<string> grantedPermissions = default(System.Collections.Generic.IList<string>), string accountId = default(string))

        : base(authenticationProvisioningState, grantedPermissions)
        {
            this.AccountId = accountId;
            this.AwsAssumeRoleArn = awsAssumeRoleArn;
            this.AwsExternalId = awsExternalId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the cloud account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountId")]
        public string AccountId {get; private set; }

        /// <summary>
        /// Gets or sets assumed role ID is an identifier that you can use to create
        /// temporary security credentials.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "awsAssumeRoleArn")]
        public string AwsAssumeRoleArn {get; set; }

        /// <summary>
        /// Gets or sets a unique identifier that is required when you assume a role in
        /// another account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "awsExternalId")]
        public string AwsExternalId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AwsAssumeRoleArn == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AwsAssumeRoleArn");
            }
            if (this.AwsExternalId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AwsExternalId");
            }



        }
    }
}