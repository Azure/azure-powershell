// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Describes properties of an assessment metadata response.
    /// </summary>
    public partial class SecurityAssessmentMetadataPropertiesResponse : SecurityAssessmentMetadataProperties
    {
        /// <summary>
        /// Initializes a new instance of the SecurityAssessmentMetadataPropertiesResponse class.
        /// </summary>
        public SecurityAssessmentMetadataPropertiesResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAssessmentMetadataPropertiesResponse class.
        /// </summary>

        /// <param name="displayName">User friendly display name of the assessment
        /// </param>

        /// <param name="policyDefinitionId">Azure resource ID of the policy definition that turns this assessment
        /// calculation on
        /// </param>

        /// <param name="description">Human readable description of the assessment
        /// </param>

        /// <param name="remediationDescription">Human readable description of what you should do to mitigate this security
        /// issue
        /// </param>

        /// <param name="categories">
        /// </param>

        /// <param name="severity">The severity level of the assessment
        /// Possible values include: 'Low', 'Medium', 'High'</param>

        /// <param name="userImpact">The user impact of the assessment
        /// Possible values include: 'Low', 'Moderate', 'High'</param>

        /// <param name="implementationEffort">The implementation effort required to remediate this assessment
        /// Possible values include: 'Low', 'Moderate', 'High'</param>

        /// <param name="threats">
        /// </param>

        /// <param name="preview">True if this assessment is in preview release status
        /// </param>

        /// <param name="assessmentType">BuiltIn if the assessment based on built-in Azure Policy definition, Custom
        /// if the assessment based on custom Azure Policy definition
        /// Possible values include: 'BuiltIn', 'CustomPolicy', 'CustomerManaged',
        /// 'VerifiedPartner'</param>

        /// <param name="partnerData">Describes the partner that created the assessment
        /// </param>

        /// <param name="publishDates">
        /// </param>

        /// <param name="plannedDeprecationDate">
        /// </param>

        /// <param name="tactics">
        /// </param>

        /// <param name="techniques">
        /// </param>
        public SecurityAssessmentMetadataPropertiesResponse(string displayName, string severity, string assessmentType, string policyDefinitionId = default(string), string description = default(string), string remediationDescription = default(string), System.Collections.Generic.IList<string> categories = default(System.Collections.Generic.IList<string>), string userImpact = default(string), string implementationEffort = default(string), System.Collections.Generic.IList<string> threats = default(System.Collections.Generic.IList<string>), bool? preview = default(bool?), SecurityAssessmentMetadataPartnerData partnerData = default(SecurityAssessmentMetadataPartnerData), SecurityAssessmentMetadataPropertiesResponsePublishDates publishDates = default(SecurityAssessmentMetadataPropertiesResponsePublishDates), string plannedDeprecationDate = default(string), System.Collections.Generic.IList<string> tactics = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> techniques = default(System.Collections.Generic.IList<string>))

        : base(displayName, severity, assessmentType, policyDefinitionId, description, remediationDescription, categories, userImpact, implementationEffort, threats, preview, partnerData)
        {
            this.PublishDates = publishDates;
            this.PlannedDeprecationDate = plannedDeprecationDate;
            this.Tactics = tactics;
            this.Techniques = techniques;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publishDates")]
        public SecurityAssessmentMetadataPropertiesResponsePublishDates PublishDates {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "plannedDeprecationDate")]
        public string PlannedDeprecationDate {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tactics")]
        public System.Collections.Generic.IList<string> Tactics {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "techniques")]
        public System.Collections.Generic.IList<string> Techniques {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.PublishDates != null)
            {
                this.PublishDates.Validate();
            }
            if (this.PlannedDeprecationDate != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.PlannedDeprecationDate, "^[0-9]{2}/[0-9]{4}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "PlannedDeprecationDate", "^[0-9]{2}/[0-9]{4}$");
                }
            }


        }
    }
}