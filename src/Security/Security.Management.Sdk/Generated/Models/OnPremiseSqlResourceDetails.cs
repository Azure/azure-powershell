// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Details of the On Premise Sql resource that was assessed
    /// </summary>
    [Newtonsoft.Json.JsonObject("OnPremiseSql")]
    public partial class OnPremiseSqlResourceDetails : OnPremiseResourceDetails
    {
        /// <summary>
        /// Initializes a new instance of the OnPremiseSqlResourceDetails class.
        /// </summary>
        public OnPremiseSqlResourceDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OnPremiseSqlResourceDetails class.
        /// </summary>

        /// <param name="workspaceId">Azure resource Id of the workspace the machine is attached to
        /// </param>

        /// <param name="vmuuid">The unique Id of the machine
        /// </param>

        /// <param name="sourceComputerId">The oms agent Id installed on the machine
        /// </param>

        /// <param name="machineName">The name of the machine
        /// </param>

        /// <param name="serverName">The Sql server name installed on the machine
        /// </param>

        /// <param name="databaseName">The Sql database name installed on the machine
        /// </param>
        public OnPremiseSqlResourceDetails(string workspaceId, string vmuuid, string sourceComputerId, string machineName, string serverName, string databaseName)

        : base(workspaceId, vmuuid, sourceComputerId, machineName)
        {
            this.ServerName = serverName;
            this.DatabaseName = databaseName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Sql server name installed on the machine
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; set; }

        /// <summary>
        /// Gets or sets the Sql database name installed on the machine
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.ServerName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServerName");
            }
            if (this.DatabaseName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DatabaseName");
            }


        }
    }
}