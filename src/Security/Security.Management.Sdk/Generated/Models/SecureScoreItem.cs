// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Secure score item data model
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SecureScoreItem : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SecureScoreItem class.
        /// </summary>
        public SecureScoreItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecureScoreItem class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="displayName">The initiative’s name
        /// </param>

        /// <param name="weight">The relative weight for each subscription. Used when calculating an
        /// aggregated secure score for multiple subscriptions.
        /// </param>

        /// <param name="max">Maximum score available
        /// </param>

        /// <param name="current">Current score
        /// </param>

        /// <param name="percentage">Ratio of the current score divided by the maximum. Rounded to 4 digits
        /// after the decimal point
        /// </param>
        public SecureScoreItem(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), long? weight = default(long?), int? max = default(int?), double? current = default(double?), double? percentage = default(double?))

        : base(id, name, type)
        {
            this.DisplayName = displayName;
            this.Weight = weight;
            this.Max = max;
            this.Current = current;
            this.Percentage = percentage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the initiative’s name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; private set; }

        /// <summary>
        /// Gets the relative weight for each subscription. Used when calculating an
        /// aggregated secure score for multiple subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.weight")]
        public long? Weight {get; private set; }

        /// <summary>
        /// Gets maximum score available
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.score.max")]
        public int? Max {get; private set; }

        /// <summary>
        /// Gets current score
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.score.current")]
        public double? Current {get; private set; }

        /// <summary>
        /// Gets ratio of the current score divided by the maximum. Rounded to 4 digits
        /// after the decimal point
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.score.percentage")]
        public double? Percentage {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Weight != null)
            {
                if (this.Weight < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Weight", 0);
                }
            }
            if (this.Max != null)
            {
                if (this.Max < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Max", 0);
                }
            }
            if (this.Current != null)
            {
                if (this.Current < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Current", 0);
                }
            }
            if (this.Percentage != null)
            {
                if (this.Percentage > 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Percentage", 1);
                }
                if (this.Percentage < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Percentage", 0);
                }
            }
        }
    }
}