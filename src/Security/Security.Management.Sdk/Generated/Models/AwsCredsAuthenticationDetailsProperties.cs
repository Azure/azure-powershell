// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// AWS cloud account connector based credentials, the credentials is composed
    /// of access key ID and secret key, for more details, refer to &lt;a
    /// href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;Creating
    /// an IAM User in Your AWS Account (write only)&lt;/a&gt;
    /// </summary>
    [Newtonsoft.Json.JsonObject("awsCreds")]
    public partial class AwsCredsAuthenticationDetailsProperties : AuthenticationDetailsProperties
    {
        /// <summary>
        /// Initializes a new instance of the AwsCredsAuthenticationDetailsProperties class.
        /// </summary>
        public AwsCredsAuthenticationDetailsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AwsCredsAuthenticationDetailsProperties class.
        /// </summary>

        /// <param name="authenticationProvisioningState">State of the multi-cloud connector
        /// Possible values include: 'Valid', 'Invalid', 'Expired', 'IncorrectPolicy'</param>

        /// <param name="grantedPermissions">The permissions detected in the cloud account.
        /// </param>

        /// <param name="accountId">The ID of the cloud account
        /// </param>

        /// <param name="awsAccessKeyId">Public key element of the AWS credential object (write only)
        /// </param>

        /// <param name="awsSecretAccessKey">Secret key element of the AWS credential object (write only)
        /// </param>
        public AwsCredsAuthenticationDetailsProperties(string awsAccessKeyId, string awsSecretAccessKey, string authenticationProvisioningState = default(string), System.Collections.Generic.IList<string> grantedPermissions = default(System.Collections.Generic.IList<string>), string accountId = default(string))

        : base(authenticationProvisioningState, grantedPermissions)
        {
            this.AccountId = accountId;
            this.AwsAccessKeyId = awsAccessKeyId;
            this.AwsSecretAccessKey = awsSecretAccessKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the cloud account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountId")]
        public string AccountId {get; private set; }

        /// <summary>
        /// Gets or sets public key element of the AWS credential object (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "awsAccessKeyId")]
        public string AwsAccessKeyId {get; set; }

        /// <summary>
        /// Gets or sets secret key element of the AWS credential object (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "awsSecretAccessKey")]
        public string AwsSecretAccessKey {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AwsAccessKeyId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AwsAccessKeyId");
            }
            if (this.AwsSecretAccessKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AwsSecretAccessKey");
            }



        }
    }
}