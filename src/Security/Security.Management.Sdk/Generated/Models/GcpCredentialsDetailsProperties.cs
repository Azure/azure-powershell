// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// GCP cloud account connector based service to service credentials, the
    /// credentials are composed of the organization ID and a JSON API key (write
    /// only)
    /// </summary>
    [Newtonsoft.Json.JsonObject("gcpCredentials")]
    public partial class GcpCredentialsDetailsProperties : AuthenticationDetailsProperties
    {
        /// <summary>
        /// Initializes a new instance of the GcpCredentialsDetailsProperties class.
        /// </summary>
        public GcpCredentialsDetailsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GcpCredentialsDetailsProperties class.
        /// </summary>

        /// <param name="authenticationProvisioningState">State of the multi-cloud connector
        /// Possible values include: 'Valid', 'Invalid', 'Expired', 'IncorrectPolicy'</param>

        /// <param name="grantedPermissions">The permissions detected in the cloud account.
        /// </param>

        /// <param name="organizationId">The organization ID of the GCP cloud account
        /// </param>

        /// <param name="type">Type field of the API key (write only)
        /// </param>

        /// <param name="projectId">Project ID field of the API key (write only)
        /// </param>

        /// <param name="privateKeyId">Private key ID field of the API key (write only)
        /// </param>

        /// <param name="privateKey">Private key field of the API key (write only)
        /// </param>

        /// <param name="clientEmail">Client email field of the API key (write only)
        /// </param>

        /// <param name="clientId">Client ID field of the API key (write only)
        /// </param>

        /// <param name="authUri">Auth URI field of the API key (write only)
        /// </param>

        /// <param name="tokenUri">Token URI field of the API key (write only)
        /// </param>

        /// <param name="authProviderX509CertUrl">Auth provider x509 certificate URL field of the API key (write only)
        /// </param>

        /// <param name="clientX509CertUrl">Client x509 certificate URL field of the API key (write only)
        /// </param>
        public GcpCredentialsDetailsProperties(string organizationId, string type, string projectId, string privateKeyId, string privateKey, string clientEmail, string clientId, string authUri, string tokenUri, string authProviderX509CertUrl, string clientX509CertUrl, string authenticationProvisioningState = default(string), System.Collections.Generic.IList<string> grantedPermissions = default(System.Collections.Generic.IList<string>))

        : base(authenticationProvisioningState, grantedPermissions)
        {
            this.OrganizationId = organizationId;
            this.Type = type;
            this.ProjectId = projectId;
            this.PrivateKeyId = privateKeyId;
            this.PrivateKey = privateKey;
            this.ClientEmail = clientEmail;
            this.ClientId = clientId;
            this.AuthUri = authUri;
            this.TokenUri = tokenUri;
            this.AuthProviderX509CertUrl = authProviderX509CertUrl;
            this.ClientX509CertUrl = clientX509CertUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the organization ID of the GCP cloud account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "organizationId")]
        public string OrganizationId {get; set; }

        /// <summary>
        /// Gets or sets type field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets project ID field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectId")]
        public string ProjectId {get; set; }

        /// <summary>
        /// Gets or sets private key ID field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateKeyId")]
        public string PrivateKeyId {get; set; }

        /// <summary>
        /// Gets or sets private key field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateKey")]
        public string PrivateKey {get; set; }

        /// <summary>
        /// Gets or sets client email field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientEmail")]
        public string ClientEmail {get; set; }

        /// <summary>
        /// Gets or sets client ID field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public string ClientId {get; set; }

        /// <summary>
        /// Gets or sets auth URI field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authUri")]
        public string AuthUri {get; set; }

        /// <summary>
        /// Gets or sets token URI field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tokenUri")]
        public string TokenUri {get; set; }

        /// <summary>
        /// Gets or sets auth provider x509 certificate URL field of the API key (write
        /// only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authProviderX509CertUrl")]
        public string AuthProviderX509CertUrl {get; set; }

        /// <summary>
        /// Gets or sets client x509 certificate URL field of the API key (write only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientX509CertUrl")]
        public string ClientX509CertUrl {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.OrganizationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OrganizationId");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.ProjectId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProjectId");
            }
            if (this.PrivateKeyId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrivateKeyId");
            }
            if (this.PrivateKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrivateKey");
            }
            if (this.ClientEmail == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClientEmail");
            }
            if (this.ClientId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClientId");
            }
            if (this.AuthUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthUri");
            }
            if (this.TokenUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TokenUri");
            }
            if (this.AuthProviderX509CertUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthProviderX509CertUrl");
            }
            if (this.ClientX509CertUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClientX509CertUrl");
            }











        }
    }
}