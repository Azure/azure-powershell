// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// The source event types which evaluate the security automation set of rules.
    /// For example - security alerts and security assessments. To learn more about
    /// the supported security events data models schemas - please visit
    /// https://aka.ms/ASCAutomationSchemas.
    /// </summary>
    public partial class AutomationSource
    {
        /// <summary>
        /// Initializes a new instance of the AutomationSource class.
        /// </summary>
        public AutomationSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AutomationSource class.
        /// </summary>

        /// <param name="eventSource">A valid event source type.
        /// Possible values include: 'Assessments', 'AssessmentsSnapshot',
        /// 'SubAssessments', 'SubAssessmentsSnapshot', 'Alerts', 'SecureScores',
        /// 'SecureScoresSnapshot', 'SecureScoreControls',
        /// 'SecureScoreControlsSnapshot', 'RegulatoryComplianceAssessment',
        /// 'RegulatoryComplianceAssessmentSnapshot'</param>

        /// <param name="ruleSets">A set of rules which evaluate upon event interception. A logical
        /// disjunction is applied between defined rule sets (logical &#39;or&#39;).
        /// </param>
        public AutomationSource(string eventSource = default(string), System.Collections.Generic.IList<AutomationRuleSet> ruleSets = default(System.Collections.Generic.IList<AutomationRuleSet>))

        {
            this.EventSource = eventSource;
            this.RuleSets = ruleSets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a valid event source type. Possible values include: &#39;Assessments&#39;, &#39;AssessmentsSnapshot&#39;, &#39;SubAssessments&#39;, &#39;SubAssessmentsSnapshot&#39;, &#39;Alerts&#39;, &#39;SecureScores&#39;, &#39;SecureScoresSnapshot&#39;, &#39;SecureScoreControls&#39;, &#39;SecureScoreControlsSnapshot&#39;, &#39;RegulatoryComplianceAssessment&#39;, &#39;RegulatoryComplianceAssessmentSnapshot&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventSource")]
        public string EventSource {get; set; }

        /// <summary>
        /// Gets or sets a set of rules which evaluate upon event interception. A
        /// logical disjunction is applied between defined rule sets (logical &#39;or&#39;).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSets")]
        public System.Collections.Generic.IList<AutomationRuleSet> RuleSets {get; set; }
    }
}