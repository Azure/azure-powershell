// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Describes properties of an assessment metadata.
    /// </summary>
    public partial class SecurityAssessmentMetadataProperties
    {
        /// <summary>
        /// Initializes a new instance of the SecurityAssessmentMetadataProperties class.
        /// </summary>
        public SecurityAssessmentMetadataProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAssessmentMetadataProperties class.
        /// </summary>

        /// <param name="displayName">User friendly display name of the assessment
        /// </param>

        /// <param name="policyDefinitionId">Azure resource ID of the policy definition that turns this assessment
        /// calculation on
        /// </param>

        /// <param name="description">Human readable description of the assessment
        /// </param>

        /// <param name="remediationDescription">Human readable description of what you should do to mitigate this security
        /// issue
        /// </param>

        /// <param name="categories">
        /// </param>

        /// <param name="severity">The severity level of the assessment
        /// Possible values include: 'Low', 'Medium', 'High'</param>

        /// <param name="userImpact">The user impact of the assessment
        /// Possible values include: 'Low', 'Moderate', 'High'</param>

        /// <param name="implementationEffort">The implementation effort required to remediate this assessment
        /// Possible values include: 'Low', 'Moderate', 'High'</param>

        /// <param name="threats">
        /// </param>

        /// <param name="preview">True if this assessment is in preview release status
        /// </param>

        /// <param name="assessmentType">BuiltIn if the assessment based on built-in Azure Policy definition, Custom
        /// if the assessment based on custom Azure Policy definition
        /// Possible values include: 'BuiltIn', 'CustomPolicy', 'CustomerManaged',
        /// 'VerifiedPartner'</param>

        /// <param name="partnerData">Describes the partner that created the assessment
        /// </param>
        public SecurityAssessmentMetadataProperties(string displayName, string severity, string assessmentType, string policyDefinitionId = default(string), string description = default(string), string remediationDescription = default(string), System.Collections.Generic.IList<string> categories = default(System.Collections.Generic.IList<string>), string userImpact = default(string), string implementationEffort = default(string), System.Collections.Generic.IList<string> threats = default(System.Collections.Generic.IList<string>), bool? preview = default(bool?), SecurityAssessmentMetadataPartnerData partnerData = default(SecurityAssessmentMetadataPartnerData))

        {
            this.DisplayName = displayName;
            this.PolicyDefinitionId = policyDefinitionId;
            this.Description = description;
            this.RemediationDescription = remediationDescription;
            this.Categories = categories;
            this.Severity = severity;
            this.UserImpact = userImpact;
            this.ImplementationEffort = implementationEffort;
            this.Threats = threats;
            this.Preview = preview;
            this.AssessmentType = assessmentType;
            this.PartnerData = partnerData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets user friendly display name of the assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets azure resource ID of the policy definition that turns this assessment
        /// calculation on
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionId")]
        public string PolicyDefinitionId {get; private set; }

        /// <summary>
        /// Gets or sets human readable description of the assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets human readable description of what you should do to mitigate
        /// this security issue
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remediationDescription")]
        public string RemediationDescription {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "categories")]
        public System.Collections.Generic.IList<string> Categories {get; set; }

        /// <summary>
        /// Gets or sets the severity level of the assessment Possible values include: &#39;Low&#39;, &#39;Medium&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "severity")]
        public string Severity {get; set; }

        /// <summary>
        /// Gets or sets the user impact of the assessment Possible values include: &#39;Low&#39;, &#39;Moderate&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userImpact")]
        public string UserImpact {get; set; }

        /// <summary>
        /// Gets or sets the implementation effort required to remediate this
        /// assessment Possible values include: &#39;Low&#39;, &#39;Moderate&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "implementationEffort")]
        public string ImplementationEffort {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threats")]
        public System.Collections.Generic.IList<string> Threats {get; set; }

        /// <summary>
        /// Gets or sets true if this assessment is in preview release status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preview")]
        public bool? Preview {get; set; }

        /// <summary>
        /// Gets or sets builtIn if the assessment based on built-in Azure Policy
        /// definition, Custom if the assessment based on custom Azure Policy
        /// definition Possible values include: &#39;BuiltIn&#39;, &#39;CustomPolicy&#39;, &#39;CustomerManaged&#39;, &#39;VerifiedPartner&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assessmentType")]
        public string AssessmentType {get; set; }

        /// <summary>
        /// Gets or sets describes the partner that created the assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerData")]
        public SecurityAssessmentMetadataPartnerData PartnerData {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DisplayName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DisplayName");
            }
            if (this.Severity == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Severity");
            }
            if (this.AssessmentType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AssessmentType");
            }










            if (this.PartnerData != null)
            {
                this.PartnerData.Validate();
            }
        }
    }
}