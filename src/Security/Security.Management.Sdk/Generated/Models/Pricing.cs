// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Microsoft Defender for Cloud is provided in two pricing tiers: free and
    /// standard. The standard tier offers advanced security capabilities, while
    /// the free tier offers basic security features.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Pricing : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Pricing class.
        /// </summary>
        public Pricing()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Pricing class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="pricingTier">The pricing tier value. Microsoft Defender for Cloud is provided in two
        /// pricing tiers: free and standard. The standard tier offers advanced
        /// security capabilities, while the free tier offers basic security features.
        /// Possible values include: 'Free', 'Standard'</param>

        /// <param name="subPlan">The sub-plan selected for a Standard pricing configuration, when more than
        /// one sub-plan is available. Each sub-plan enables a set of security
        /// features. When not specified, full plan is applied.
        /// </param>

        /// <param name="freeTrialRemainingTime">The duration left for the subscriptions free trial period - in ISO 8601
        /// format (e.g. P3Y6M4DT12H30M5S).
        /// </param>

        /// <param name="enablementTime">Optional. If `pricingTier` is `Standard` then this property holds the date
        /// of the last time the `pricingTier` was set to `Standard`, when available
        /// (e.g 2023-03-01T12:42:42.1921106Z).
        /// </param>

        /// <param name="deprecated">Optional. True if the plan is deprecated. If there are replacing plans they
        /// will appear in `replacedBy` property
        /// </param>

        /// <param name="replacedBy">Optional. List of plans that replace this plan. This property exists only
        /// if this plan is deprecated.
        /// </param>

        /// <param name="extensions">Optional. List of extensions offered under a plan.
        /// </param>
        public Pricing(string id = default(string), string name = default(string), string type = default(string), string pricingTier = default(string), string subPlan = default(string), System.TimeSpan? freeTrialRemainingTime = default(System.TimeSpan?), System.DateTime? enablementTime = default(System.DateTime?), bool? deprecated = default(bool?), System.Collections.Generic.IList<string> replacedBy = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<Extension> extensions = default(System.Collections.Generic.IList<Extension>))

        : base(id, name, type)
        {
            this.PricingTier = pricingTier;
            this.SubPlan = subPlan;
            this.FreeTrialRemainingTime = freeTrialRemainingTime;
            this.EnablementTime = enablementTime;
            this.Deprecated = deprecated;
            this.ReplacedBy = replacedBy;
            this.Extensions = extensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the pricing tier value. Microsoft Defender for Cloud is
        /// provided in two pricing tiers: free and standard. The standard tier offers
        /// advanced security capabilities, while the free tier offers basic security
        /// features. Possible values include: &#39;Free&#39;, &#39;Standard&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.pricingTier")]
        public string PricingTier {get; set; }

        /// <summary>
        /// Gets or sets the sub-plan selected for a Standard pricing configuration,
        /// when more than one sub-plan is available. Each sub-plan enables a set of
        /// security features. When not specified, full plan is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subPlan")]
        public string SubPlan {get; set; }

        /// <summary>
        /// Gets the duration left for the subscriptions free trial period - in ISO
        /// 8601 format (e.g. P3Y6M4DT12H30M5S).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.freeTrialRemainingTime")]
        public System.TimeSpan? FreeTrialRemainingTime {get; private set; }

        /// <summary>
        /// Gets optional. If `pricingTier` is `Standard` then this property holds the
        /// date of the last time the `pricingTier` was set to `Standard`, when
        /// available (e.g 2023-03-01T12:42:42.1921106Z).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enablementTime")]
        public System.DateTime? EnablementTime {get; private set; }

        /// <summary>
        /// Gets optional. True if the plan is deprecated. If there are replacing plans
        /// they will appear in `replacedBy` property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deprecated")]
        public bool? Deprecated {get; private set; }

        /// <summary>
        /// Gets optional. List of plans that replace this plan. This property exists
        /// only if this plan is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replacedBy")]
        public System.Collections.Generic.IList<string> ReplacedBy {get; private set; }

        /// <summary>
        /// Gets or sets optional. List of extensions offered under a plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extensions")]
        public System.Collections.Generic.IList<Extension> Extensions {get; set; }
    }
}