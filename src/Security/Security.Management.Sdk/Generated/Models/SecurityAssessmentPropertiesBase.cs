// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Describes properties of an assessment.
    /// </summary>
    public partial class SecurityAssessmentPropertiesBase
    {
        /// <summary>
        /// Initializes a new instance of the SecurityAssessmentPropertiesBase class.
        /// </summary>
        public SecurityAssessmentPropertiesBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAssessmentPropertiesBase class.
        /// </summary>

        /// <param name="resourceDetails">Details of the resource that was assessed
        /// </param>

        /// <param name="displayName">User friendly display name of the assessment
        /// </param>

        /// <param name="additionalData">Additional data regarding the assessment
        /// </param>

        /// <param name="links">Links relevant to the assessment
        /// </param>

        /// <param name="metadata">Describes properties of an assessment metadata.
        /// </param>

        /// <param name="partnersData">Data regarding 3rd party partner integration
        /// </param>
        public SecurityAssessmentPropertiesBase(ResourceDetails resourceDetails, string displayName = default(string), System.Collections.Generic.IDictionary<string, string> additionalData = default(System.Collections.Generic.IDictionary<string, string>), AssessmentLinks links = default(AssessmentLinks), SecurityAssessmentMetadataProperties metadata = default(SecurityAssessmentMetadataProperties), SecurityAssessmentPartnerData partnersData = default(SecurityAssessmentPartnerData))

        {
            this.ResourceDetails = resourceDetails;
            this.DisplayName = displayName;
            this.AdditionalData = additionalData;
            this.Links = links;
            this.Metadata = metadata;
            this.PartnersData = partnersData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets details of the resource that was assessed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceDetails")]
        public ResourceDetails ResourceDetails {get; set; }

        /// <summary>
        /// Gets user friendly display name of the assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; private set; }

        /// <summary>
        /// Gets or sets additional data regarding the assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalData")]
        public System.Collections.Generic.IDictionary<string, string> AdditionalData {get; set; }

        /// <summary>
        /// Gets links relevant to the assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "links")]
        public AssessmentLinks Links {get; private set; }

        /// <summary>
        /// Gets or sets describes properties of an assessment metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public SecurityAssessmentMetadataProperties Metadata {get; set; }

        /// <summary>
        /// Gets or sets data regarding 3rd party partner integration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnersData")]
        public SecurityAssessmentPartnerData PartnersData {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ResourceDetails == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ResourceDetails");
            }




            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.PartnersData != null)
            {
                this.PartnersData.Validate();
            }
        }
    }
}