// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Regulatory compliance assessment data
    /// </summary>
    public partial class RegulatoryComplianceAssessmentProperties
    {
        /// <summary>
        /// Initializes a new instance of the RegulatoryComplianceAssessmentProperties class.
        /// </summary>
        public RegulatoryComplianceAssessmentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegulatoryComplianceAssessmentProperties class.
        /// </summary>

        /// <param name="description">The description of the regulatory compliance assessment
        /// </param>

        /// <param name="assessmentType">The expected type of assessment contained in the AssessmentDetailsLink
        /// </param>

        /// <param name="assessmentDetailsLink">Link to more detailed assessment results data. The response type will be
        /// according to the assessmentType field
        /// </param>

        /// <param name="state">Aggregative state based on the assessment&#39;s scanned resources states
        /// Possible values include: 'Passed', 'Failed', 'Skipped', 'Unsupported'</param>

        /// <param name="passedResources">The given assessment&#39;s related resources count with passed state.
        /// </param>

        /// <param name="failedResources">The given assessment&#39;s related resources count with failed state.
        /// </param>

        /// <param name="skippedResources">The given assessment&#39;s related resources count with skipped state.
        /// </param>

        /// <param name="unsupportedResources">The given assessment&#39;s related resources count with unsupported state.
        /// </param>
        public RegulatoryComplianceAssessmentProperties(string description = default(string), string assessmentType = default(string), string assessmentDetailsLink = default(string), string state = default(string), int? passedResources = default(int?), int? failedResources = default(int?), int? skippedResources = default(int?), int? unsupportedResources = default(int?))

        {
            this.Description = description;
            this.AssessmentType = assessmentType;
            this.AssessmentDetailsLink = assessmentDetailsLink;
            this.State = state;
            this.PassedResources = passedResources;
            this.FailedResources = failedResources;
            this.SkippedResources = skippedResources;
            this.UnsupportedResources = unsupportedResources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the description of the regulatory compliance assessment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; private set; }

        /// <summary>
        /// Gets the expected type of assessment contained in the AssessmentDetailsLink
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assessmentType")]
        public string AssessmentType {get; private set; }

        /// <summary>
        /// Gets link to more detailed assessment results data. The response type will
        /// be according to the assessmentType field
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assessmentDetailsLink")]
        public string AssessmentDetailsLink {get; private set; }

        /// <summary>
        /// Gets or sets aggregative state based on the assessment&#39;s scanned resources
        /// states Possible values include: &#39;Passed&#39;, &#39;Failed&#39;, &#39;Skipped&#39;, &#39;Unsupported&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets the given assessment&#39;s related resources count with passed state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passedResources")]
        public int? PassedResources {get; private set; }

        /// <summary>
        /// Gets the given assessment&#39;s related resources count with failed state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failedResources")]
        public int? FailedResources {get; private set; }

        /// <summary>
        /// Gets the given assessment&#39;s related resources count with skipped state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skippedResources")]
        public int? SkippedResources {get; private set; }

        /// <summary>
        /// Gets the given assessment&#39;s related resources count with unsupported state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unsupportedResources")]
        public int? UnsupportedResources {get; private set; }
    }
}