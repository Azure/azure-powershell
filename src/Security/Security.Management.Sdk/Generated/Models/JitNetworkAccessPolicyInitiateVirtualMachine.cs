// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    public partial class JitNetworkAccessPolicyInitiateVirtualMachine
    {
        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessPolicyInitiateVirtualMachine class.
        /// </summary>
        public JitNetworkAccessPolicyInitiateVirtualMachine()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessPolicyInitiateVirtualMachine class.
        /// </summary>

        /// <param name="id">Resource ID of the virtual machine that is linked to this policy
        /// </param>

        /// <param name="ports">The ports to open for the resource with the `id`
        /// </param>
        public JitNetworkAccessPolicyInitiateVirtualMachine(string id, System.Collections.Generic.IList<JitNetworkAccessPolicyInitiatePort> ports)

        {
            this.Id = id;
            this.Ports = ports;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource ID of the virtual machine that is linked to this
        /// policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the ports to open for the resource with the `id`
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ports")]
        public System.Collections.Generic.IList<JitNetworkAccessPolicyInitiatePort> Ports {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Id == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Id");
            }
            if (this.Ports == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Ports");
            }

            if (this.Ports != null)
            {
                foreach (var element in this.Ports)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}