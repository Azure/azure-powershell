// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Describes remote addresses that is recommended to communicate with the
    /// Azure resource on some (Protocol, Port, Direction). All other remote
    /// addresses are recommended to be blocked
    /// </summary>
    public partial class Rule
    {
        /// <summary>
        /// Initializes a new instance of the Rule class.
        /// </summary>
        public Rule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Rule class.
        /// </summary>

        /// <param name="name">The name of the rule
        /// </param>

        /// <param name="direction">The rule&#39;s direction
        /// Possible values include: 'Inbound', 'Outbound'</param>

        /// <param name="destinationPort">The rule&#39;s destination port
        /// </param>

        /// <param name="protocols">The rule&#39;s transport protocols
        /// </param>

        /// <param name="ipAddresses">The remote IP addresses that should be able to communicate with the Azure
        /// resource on the rule&#39;s destination port and protocol
        /// </param>
        public Rule(string name = default(string), string direction = default(string), int? destinationPort = default(int?), System.Collections.Generic.IList<string> protocols = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> ipAddresses = default(System.Collections.Generic.IList<string>))

        {
            this.Name = name;
            this.Direction = direction;
            this.DestinationPort = destinationPort;
            this.Protocols = protocols;
            this.IPAddresses = ipAddresses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the rule&#39;s direction Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }

        /// <summary>
        /// Gets or sets the rule&#39;s destination port
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPort")]
        public int? DestinationPort {get; set; }

        /// <summary>
        /// Gets or sets the rule&#39;s transport protocols
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocols")]
        public System.Collections.Generic.IList<string> Protocols {get; set; }

        /// <summary>
        /// Gets or sets the remote IP addresses that should be able to communicate
        /// with the Azure resource on the rule&#39;s destination port and protocol
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddresses")]
        public System.Collections.Generic.IList<string> IPAddresses {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.DestinationPort != null)
            {
                if (this.DestinationPort > 65535)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "DestinationPort", 65535);
                }
                if (this.DestinationPort < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DestinationPort", 0);
                }
            }


        }
    }
}