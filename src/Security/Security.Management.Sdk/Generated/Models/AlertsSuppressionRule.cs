// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the suppression rule
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AlertsSuppressionRule : Resource
    {
        /// <summary>
        /// Initializes a new instance of the AlertsSuppressionRule class.
        /// </summary>
        public AlertsSuppressionRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertsSuppressionRule class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="alertType">Type of the alert to automatically suppress. For all alert types, use &#39;*&#39;
        /// </param>

        /// <param name="lastModifiedUtc">The last time this rule was modified
        /// </param>

        /// <param name="expirationDateUtc">Expiration date of the rule, if value is not provided or provided as null
        /// this field will default to the maximum allowed expiration date.
        /// </param>

        /// <param name="reason">The reason for dismissing the alert
        /// </param>

        /// <param name="state">Possible states of the rule
        /// Possible values include: 'Enabled', 'Disabled', 'Expired'</param>

        /// <param name="comment">Any comment regarding the rule
        /// </param>

        /// <param name="suppressionAlertsScope">The suppression conditions
        /// </param>
        public AlertsSuppressionRule(string id = default(string), string name = default(string), string type = default(string), string alertType = default(string), System.DateTime? lastModifiedUtc = default(System.DateTime?), System.DateTime? expirationDateUtc = default(System.DateTime?), string reason = default(string), RuleState? state = default(RuleState?), string comment = default(string), SuppressionAlertsScope suppressionAlertsScope = default(SuppressionAlertsScope))

        : base(id, name, type)
        {
            this.AlertType = alertType;
            this.LastModifiedUtc = lastModifiedUtc;
            this.ExpirationDateUtc = expirationDateUtc;
            this.Reason = reason;
            this.State = state;
            this.Comment = comment;
            this.SuppressionAlertsScope = suppressionAlertsScope;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets type of the alert to automatically suppress. For all alert
        /// types, use &#39;*&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.alertType")]
        public string AlertType {get; set; }

        /// <summary>
        /// Gets the last time this rule was modified
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastModifiedUtc")]
        public System.DateTime? LastModifiedUtc {get; private set; }

        /// <summary>
        /// Gets or sets expiration date of the rule, if value is not provided or
        /// provided as null this field will default to the maximum allowed expiration
        /// date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expirationDateUtc")]
        public System.DateTime? ExpirationDateUtc {get; set; }

        /// <summary>
        /// Gets or sets the reason for dismissing the alert
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.reason")]
        public string Reason {get; set; }

        /// <summary>
        /// Gets or sets possible states of the rule Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;Expired&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public RuleState? State {get; set; }

        /// <summary>
        /// Gets or sets any comment regarding the rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.comment")]
        public string Comment {get; set; }

        /// <summary>
        /// Gets or sets the suppression conditions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.suppressionAlertsScope")]
        public SuppressionAlertsScope SuppressionAlertsScope {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.SuppressionAlertsScope != null)
            {
                this.SuppressionAlertsScope.Validate();
            }
        }
    }
}