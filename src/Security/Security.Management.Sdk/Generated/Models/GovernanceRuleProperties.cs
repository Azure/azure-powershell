// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Describes properties of an governance rule
    /// </summary>
    public partial class GovernanceRuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the GovernanceRuleProperties class.
        /// </summary>
        public GovernanceRuleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GovernanceRuleProperties class.
        /// </summary>

        /// <param name="tenantId">The tenantId (GUID)
        /// </param>

        /// <param name="displayName">Display name of the governance rule
        /// </param>

        /// <param name="description">Description of the governance rule
        /// </param>

        /// <param name="remediationTimeframe">Governance rule remediation timeframe - this is the time that will affect
        /// on the grace-period duration e.g. 7.00:00:00 - means 7 days
        /// </param>

        /// <param name="isGracePeriod">Defines whether there is a grace period on the governance rule
        /// </param>

        /// <param name="rulePriority">The governance rule priority, priority to the lower number. Rules with the
        /// same priority on the same scope will not be allowed
        /// </param>

        /// <param name="isDisabled">Defines whether the rule is active/inactive
        /// </param>

        /// <param name="ruleType">The rule type of the governance rule, defines the source of the rule e.g.
        /// Integrated
        /// Possible values include: 'Integrated', 'ServiceNow'</param>

        /// <param name="excludedScopes">Excluded scopes, filter out the descendants of the scope (on management
        /// scopes)
        /// </param>

        /// <param name="conditionSets">The governance rule conditionSets - see examples
        /// </param>

        /// <param name="includeMemberScopes">Defines whether the rule is management scope rule (master connector as a
        /// single scope or management scope)
        /// </param>

        /// <param name="ownerSource">The owner source for the governance rule - e.g. Manually by
        /// user@contoso.com - see example
        /// </param>

        /// <param name="governanceEmailNotification">The email notifications settings for the governance rule, states whether to
        /// disable notifications for mangers and owners
        /// </param>

        /// <param name="metadata">The governance rule metadata
        /// </param>
        public GovernanceRuleProperties(string displayName, int rulePriority, string ruleType, System.Collections.Generic.IList<object> conditionSets, GovernanceRuleOwnerSource ownerSource, string tenantId = default(string), string description = default(string), string remediationTimeframe = default(string), bool? isGracePeriod = default(bool?), bool? isDisabled = default(bool?), System.Collections.Generic.IList<string> excludedScopes = default(System.Collections.Generic.IList<string>), bool? includeMemberScopes = default(bool?), GovernanceRuleEmailNotification governanceEmailNotification = default(GovernanceRuleEmailNotification), GovernanceRuleMetadata metadata = default(GovernanceRuleMetadata))

        {
            this.TenantId = tenantId;
            this.DisplayName = displayName;
            this.Description = description;
            this.RemediationTimeframe = remediationTimeframe;
            this.IsGracePeriod = isGracePeriod;
            this.RulePriority = rulePriority;
            this.IsDisabled = isDisabled;
            this.RuleType = ruleType;
            this.ExcludedScopes = excludedScopes;
            this.ConditionSets = conditionSets;
            this.IncludeMemberScopes = includeMemberScopes;
            this.OwnerSource = ownerSource;
            this.GovernanceEmailNotification = governanceEmailNotification;
            this.Metadata = metadata;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for GovernanceRuleProperties class.
        /// </summary>
        static GovernanceRuleProperties()
        {
            SourceResourceType = "Assessments";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the tenantId (GUID)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; private set; }

        /// <summary>
        /// Gets or sets display name of the governance rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets description of the governance rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets governance rule remediation timeframe - this is the time that
        /// will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remediationTimeframe")]
        public string RemediationTimeframe {get; set; }

        /// <summary>
        /// Gets or sets defines whether there is a grace period on the governance rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isGracePeriod")]
        public bool? IsGracePeriod {get; set; }

        /// <summary>
        /// Gets or sets the governance rule priority, priority to the lower number.
        /// Rules with the same priority on the same scope will not be allowed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rulePriority")]
        public int RulePriority {get; set; }

        /// <summary>
        /// Gets or sets defines whether the rule is active/inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDisabled")]
        public bool? IsDisabled {get; set; }

        /// <summary>
        /// Gets or sets the rule type of the governance rule, defines the source of
        /// the rule e.g. Integrated Possible values include: &#39;Integrated&#39;, &#39;ServiceNow&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleType")]
        public string RuleType {get; set; }

        /// <summary>
        /// Gets or sets excluded scopes, filter out the descendants of the scope (on
        /// management scopes)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedScopes")]
        public System.Collections.Generic.IList<string> ExcludedScopes {get; set; }

        /// <summary>
        /// Gets or sets the governance rule conditionSets - see examples
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "conditionSets")]
        public System.Collections.Generic.IList<object> ConditionSets {get; set; }

        /// <summary>
        /// Gets or sets defines whether the rule is management scope rule (master
        /// connector as a single scope or management scope)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includeMemberScopes")]
        public bool? IncludeMemberScopes {get; set; }

        /// <summary>
        /// Gets or sets the owner source for the governance rule - e.g. Manually by
        /// user@contoso.com - see example
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ownerSource")]
        public GovernanceRuleOwnerSource OwnerSource {get; set; }

        /// <summary>
        /// Gets or sets the email notifications settings for the governance rule,
        /// states whether to disable notifications for mangers and owners
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "governanceEmailNotification")]
        public GovernanceRuleEmailNotification GovernanceEmailNotification {get; set; }

        /// <summary>
        /// Gets or sets the governance rule metadata
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public GovernanceRuleMetadata Metadata {get; set; }
        /// <summary>
        /// Gets or sets the governance rule source, what the rule affects, e.g. Assessments
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceResourceType")]
        public static string SourceResourceType {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DisplayName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DisplayName");
            }
            if (this.RuleType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleType");
            }
            if (this.ConditionSets == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConditionSets");
            }
            if (this.OwnerSource == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OwnerSource");
            }



            if (this.RemediationTimeframe != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.RemediationTimeframe, "^[0-9]+\\.[0-9]{2}:[0-9]{2}:[0-9]{2}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "RemediationTimeframe", "^[0-9]+\\.[0-9]{2}:[0-9]{2}:[0-9]{2}$");
                }
            }
            if (this.RulePriority > 1000)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RulePriority", 1000);
            }
            if (this.RulePriority < 0)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RulePriority", 0);
            }







        }
    }
}