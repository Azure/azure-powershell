// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// A vulnerability assessment scan result properties for a single rule.
    /// </summary>
    public partial class ScanResultProperties
    {
        /// <summary>
        /// Initializes a new instance of the ScanResultProperties class.
        /// </summary>
        public ScanResultProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScanResultProperties class.
        /// </summary>

        /// <param name="ruleId">The rule Id.
        /// </param>

        /// <param name="status">The rule result status.
        /// Possible values include: 'NonFinding', 'Finding', 'InternalError'</param>

        /// <param name="isTrimmed">Indicated whether the results specified here are trimmed.
        /// </param>

        /// <param name="queryResults">The results of the query that was run.
        /// </param>

        /// <param name="remediation">Remediation details.
        /// </param>

        /// <param name="baselineAdjustedResult">The rule result adjusted with baseline.
        /// </param>

        /// <param name="ruleMetadata">vulnerability assessment rule metadata details.
        /// </param>
        public ScanResultProperties(string ruleId = default(string), string status = default(string), bool? isTrimmed = default(bool?), System.Collections.Generic.IList<System.Collections.Generic.IList<string>> queryResults = default(System.Collections.Generic.IList<System.Collections.Generic.IList<string>>), Remediation remediation = default(Remediation), BaselineAdjustedResult baselineAdjustedResult = default(BaselineAdjustedResult), VaRule ruleMetadata = default(VaRule))

        {
            this.RuleId = ruleId;
            this.Status = status;
            this.IsTrimmed = isTrimmed;
            this.QueryResults = queryResults;
            this.Remediation = remediation;
            this.BaselineAdjustedResult = baselineAdjustedResult;
            this.RuleMetadata = ruleMetadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the rule Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleId")]
        public string RuleId {get; set; }

        /// <summary>
        /// Gets or sets the rule result status. Possible values include: &#39;NonFinding&#39;, &#39;Finding&#39;, &#39;InternalError&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets or sets indicated whether the results specified here are trimmed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTrimmed")]
        public bool? IsTrimmed {get; set; }

        /// <summary>
        /// Gets or sets the results of the query that was run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "queryResults")]
        public System.Collections.Generic.IList<System.Collections.Generic.IList<string>> QueryResults {get; set; }

        /// <summary>
        /// Gets or sets remediation details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remediation")]
        public Remediation Remediation {get; set; }

        /// <summary>
        /// Gets or sets the rule result adjusted with baseline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "baselineAdjustedResult")]
        public BaselineAdjustedResult BaselineAdjustedResult {get; set; }

        /// <summary>
        /// Gets or sets vulnerability assessment rule metadata details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleMetadata")]
        public VaRule RuleMetadata {get; set; }
    }
}