// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// The Defender for Storage resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DefenderForStorageSetting : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DefenderForStorageSetting class.
        /// </summary>
        public DefenderForStorageSetting()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DefenderForStorageSetting class.
        /// </summary>

        /// <param name="id">Resource Id
        /// </param>

        /// <param name="name">Resource name
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="isEnabled">Indicates whether Defender for Storage is enabled on this storage account.
        /// </param>

        /// <param name="overrideSubscriptionLevelSettings">Indicates whether the settings defined for this storage account should
        /// override the settings defined for the subscription.
        /// </param>

        /// <param name="malwareScanningOperationStatus">Upon failure or partial success. Additional data describing Malware
        /// Scanning enable/disable operation.
        /// </param>

        /// <param name="sensitiveDataDiscoveryOperationStatus">Upon failure or partial success. Additional data describing Sensitive Data
        /// Discovery enable/disable operation.
        /// </param>

        /// <param name="scanResultsEventGridTopicResourceId">Optional. Resource id of an Event Grid Topic to send scan results to.
        /// </param>

        /// <param name="sensitiveDataDiscoveryIsEnabled">Indicates whether Sensitive Data Discovery should be enabled.
        /// </param>

        /// <param name="malwareScanningOnUploadIsEnabled">Indicates whether On Upload malware scanning should be enabled.
        /// </param>

        /// <param name="capGbPerMonth">Defines the max GB to be scanned per Month. Set to -1 if no capping is
        /// needed.
        /// </param>
        public DefenderForStorageSetting(string id = default(string), string name = default(string), string type = default(string), bool? isEnabled = default(bool?), bool? overrideSubscriptionLevelSettings = default(bool?), OperationStatus malwareScanningOperationStatus = default(OperationStatus), OperationStatus sensitiveDataDiscoveryOperationStatus = default(OperationStatus), string scanResultsEventGridTopicResourceId = default(string), bool? sensitiveDataDiscoveryIsEnabled = default(bool?), bool? malwareScanningOnUploadIsEnabled = default(bool?), int? capGbPerMonth = default(int?))

        : base(id, name, type)
        {
            this.IsEnabled = isEnabled;
            this.OverrideSubscriptionLevelSettings = overrideSubscriptionLevelSettings;
            this.MalwareScanningOperationStatus = malwareScanningOperationStatus;
            this.SensitiveDataDiscoveryOperationStatus = sensitiveDataDiscoveryOperationStatus;
            this.ScanResultsEventGridTopicResourceId = scanResultsEventGridTopicResourceId;
            this.SensitiveDataDiscoveryIsEnabled = sensitiveDataDiscoveryIsEnabled;
            this.MalwareScanningOnUploadIsEnabled = malwareScanningOnUploadIsEnabled;
            this.CapGbPerMonth = capGbPerMonth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets indicates whether Defender for Storage is enabled on this
        /// storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isEnabled")]
        public bool? IsEnabled {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the settings defined for this storage
        /// account should override the settings defined for the subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.overrideSubscriptionLevelSettings")]
        public bool? OverrideSubscriptionLevelSettings {get; set; }

        /// <summary>
        /// Gets upon failure or partial success. Additional data describing Malware
        /// Scanning enable/disable operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.malwareScanning.operationStatus")]
        public OperationStatus MalwareScanningOperationStatus {get; private set; }

        /// <summary>
        /// Gets upon failure or partial success. Additional data describing Sensitive
        /// Data Discovery enable/disable operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sensitiveDataDiscovery.operationStatus")]
        public OperationStatus SensitiveDataDiscoveryOperationStatus {get; private set; }

        /// <summary>
        /// Gets or sets optional. Resource id of an Event Grid Topic to send scan
        /// results to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.malwareScanning.scanResultsEventGridTopicResourceId")]
        public string ScanResultsEventGridTopicResourceId {get; set; }

        /// <summary>
        /// Gets or sets indicates whether Sensitive Data Discovery should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sensitiveDataDiscovery.isEnabled")]
        public bool? SensitiveDataDiscoveryIsEnabled {get; set; }

        /// <summary>
        /// Gets or sets indicates whether On Upload malware scanning should be
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.malwareScanning.onUpload.isEnabled")]
        public bool? MalwareScanningOnUploadIsEnabled {get; set; }

        /// <summary>
        /// Gets or sets defines the max GB to be scanned per Month. Set to -1 if no
        /// capping is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.malwareScanning.onUpload.capGBPerMonth")]
        public int? CapGbPerMonth {get; set; }
    }
}