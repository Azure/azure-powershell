// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    public partial class JitNetworkAccessPortRule
    {
        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessPortRule class.
        /// </summary>
        public JitNetworkAccessPortRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessPortRule class.
        /// </summary>

        /// <param name="number">
        /// </param>

        /// <param name="protocol">
        /// Possible values include: 'TCP', 'UDP', '*'</param>

        /// <param name="allowedSourceAddressPrefix">Mutually exclusive with the &#34;allowedSourceAddressPrefixes&#34; parameter.
        /// Should be an IP address or CIDR, for example &#34;192.168.0.3&#34; or
        /// &#34;192.168.0.0/16&#34;.
        /// </param>

        /// <param name="allowedSourceAddressPrefixes">Mutually exclusive with the &#34;allowedSourceAddressPrefix&#34; parameter.
        /// </param>

        /// <param name="maxRequestAccessDuration">Maximum duration requests can be made for. In ISO 8601 duration format.
        /// Minimum 5 minutes, maximum 1 day
        /// </param>
        public JitNetworkAccessPortRule(int number, string protocol, string maxRequestAccessDuration, string allowedSourceAddressPrefix = default(string), System.Collections.Generic.IList<string> allowedSourceAddressPrefixes = default(System.Collections.Generic.IList<string>))

        {
            this.Number = number;
            this.Protocol = protocol;
            this.AllowedSourceAddressPrefix = allowedSourceAddressPrefix;
            this.AllowedSourceAddressPrefixes = allowedSourceAddressPrefixes;
            this.MaxRequestAccessDuration = maxRequestAccessDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "number")]
        public int Number {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;TCP&#39;, &#39;UDP&#39;, &#39;*&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets mutually exclusive with the &#34;allowedSourceAddressPrefixes&#34;
        /// parameter. Should be an IP address or CIDR, for example &#34;192.168.0.3&#34; or
        /// &#34;192.168.0.0/16&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedSourceAddressPrefix")]
        public string AllowedSourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets mutually exclusive with the &#34;allowedSourceAddressPrefix&#34;
        /// parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedSourceAddressPrefixes")]
        public System.Collections.Generic.IList<string> AllowedSourceAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets maximum duration requests can be made for. In ISO 8601
        /// duration format. Minimum 5 minutes, maximum 1 day
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxRequestAccessDuration")]
        public string MaxRequestAccessDuration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.MaxRequestAccessDuration == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MaxRequestAccessDuration");
            }
            if (this.Number > 65535)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Number", 65535);
            }
            if (this.Number < 0)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Number", 0);
            }




        }
    }
}