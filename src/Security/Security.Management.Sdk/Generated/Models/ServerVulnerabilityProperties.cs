// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Additional context fields for server vulnerability assessment
    /// </summary>
    [Newtonsoft.Json.JsonObject("ServerVulnerabilityAssessment")]
    public partial class ServerVulnerabilityProperties : AdditionalData
    {
        /// <summary>
        /// Initializes a new instance of the ServerVulnerabilityProperties class.
        /// </summary>
        public ServerVulnerabilityProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerVulnerabilityProperties class.
        /// </summary>

        /// <param name="type">Vulnerability Type. e.g: Vulnerability, Potential Vulnerability,
        /// Information Gathered
        /// </param>

        /// <param name="cvss">Dictionary from cvss version to cvss details object
        /// </param>

        /// <param name="patchable">Indicates whether a patch is available or not
        /// </param>

        /// <param name="cve">List of CVEs
        /// </param>

        /// <param name="threat">Threat name
        /// </param>

        /// <param name="publishedTime">Published time
        /// </param>

        /// <param name="vendorReferences">
        /// </param>
        public ServerVulnerabilityProperties(string type = default(string), System.Collections.Generic.IDictionary<string, Cvss> cvss = default(System.Collections.Generic.IDictionary<string, Cvss>), bool? patchable = default(bool?), System.Collections.Generic.IList<CVE> cve = default(System.Collections.Generic.IList<CVE>), string threat = default(string), System.DateTime? publishedTime = default(System.DateTime?), System.Collections.Generic.IList<VendorReference> vendorReferences = default(System.Collections.Generic.IList<VendorReference>))

        {
            this.Type = type;
            this.Cvss = cvss;
            this.Patchable = patchable;
            this.Cve = cve;
            this.Threat = threat;
            this.PublishedTime = publishedTime;
            this.VendorReferences = vendorReferences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets vulnerability Type. e.g: Vulnerability, Potential Vulnerability,
        /// Information Gathered
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets dictionary from cvss version to cvss details object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cvss")]
        public System.Collections.Generic.IDictionary<string, Cvss> Cvss {get; private set; }

        /// <summary>
        /// Gets indicates whether a patch is available or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "patchable")]
        public bool? Patchable {get; private set; }

        /// <summary>
        /// Gets list of CVEs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cve")]
        public System.Collections.Generic.IList<CVE> Cve {get; private set; }

        /// <summary>
        /// Gets threat name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threat")]
        public string Threat {get; private set; }

        /// <summary>
        /// Gets published time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publishedTime")]
        public System.DateTime? PublishedTime {get; private set; }

        /// <summary>
        /// Gets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vendorReferences")]
        public System.Collections.Generic.IList<VendorReference> VendorReferences {get; private set; }
    }
}