// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// vulnerability assessment rule metadata details.
    /// </summary>
    public partial class VaRule
    {
        /// <summary>
        /// Initializes a new instance of the VaRule class.
        /// </summary>
        public VaRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VaRule class.
        /// </summary>

        /// <param name="ruleId">The rule Id.
        /// </param>

        /// <param name="severity">The rule severity.
        /// Possible values include: 'High', 'Medium', 'Low', 'Informational',
        /// 'Obsolete'</param>

        /// <param name="category">The rule category.
        /// </param>

        /// <param name="ruleType">The rule type.
        /// Possible values include: 'Binary', 'BaselineExpected', 'PositiveList',
        /// 'NegativeList'</param>

        /// <param name="title">The rule title.
        /// </param>

        /// <param name="description">The rule description.
        /// </param>

        /// <param name="rationale">The rule rationale.
        /// </param>

        /// <param name="queryCheck">The rule query details.
        /// </param>

        /// <param name="benchmarkReferences">The benchmark references.
        /// </param>
        public VaRule(string ruleId = default(string), string severity = default(string), string category = default(string), string ruleType = default(string), string title = default(string), string description = default(string), string rationale = default(string), QueryCheck queryCheck = default(QueryCheck), System.Collections.Generic.IList<BenchmarkReference> benchmarkReferences = default(System.Collections.Generic.IList<BenchmarkReference>))

        {
            this.RuleId = ruleId;
            this.Severity = severity;
            this.Category = category;
            this.RuleType = ruleType;
            this.Title = title;
            this.Description = description;
            this.Rationale = rationale;
            this.QueryCheck = queryCheck;
            this.BenchmarkReferences = benchmarkReferences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the rule Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleId")]
        public string RuleId {get; set; }

        /// <summary>
        /// Gets or sets the rule severity. Possible values include: &#39;High&#39;, &#39;Medium&#39;, &#39;Low&#39;, &#39;Informational&#39;, &#39;Obsolete&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "severity")]
        public string Severity {get; set; }

        /// <summary>
        /// Gets or sets the rule category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public string Category {get; set; }

        /// <summary>
        /// Gets or sets the rule type. Possible values include: &#39;Binary&#39;, &#39;BaselineExpected&#39;, &#39;PositiveList&#39;, &#39;NegativeList&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleType")]
        public string RuleType {get; set; }

        /// <summary>
        /// Gets or sets the rule title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "title")]
        public string Title {get; set; }

        /// <summary>
        /// Gets or sets the rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the rule rationale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rationale")]
        public string Rationale {get; set; }

        /// <summary>
        /// Gets or sets the rule query details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "queryCheck")]
        public QueryCheck QueryCheck {get; set; }

        /// <summary>
        /// Gets or sets the benchmark references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "benchmarkReferences")]
        public System.Collections.Generic.IList<BenchmarkReference> BenchmarkReferences {get; set; }
    }
}