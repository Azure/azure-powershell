// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a path that is recommended to be allowed and its properties
    /// </summary>
    public partial class PathRecommendation
    {
        /// <summary>
        /// Initializes a new instance of the PathRecommendation class.
        /// </summary>
        public PathRecommendation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PathRecommendation class.
        /// </summary>

        /// <param name="path">The full path of the file, or an identifier of the application
        /// </param>

        /// <param name="action">The recommendation action of the machine or rule
        /// Possible values include: 'Recommended', 'Add', 'Remove'</param>

        /// <param name="type">The type of IoT Security recommendation.
        /// Possible values include: 'IoT_ACRAuthentication',
        /// 'IoT_AgentSendsUnutilizedMessages', 'IoT_Baseline',
        /// 'IoT_EdgeHubMemOptimize', 'IoT_EdgeLoggingOptions',
        /// 'IoT_InconsistentModuleSettings', 'IoT_InstallAgent',
        /// 'IoT_IPFilter_DenyAll', 'IoT_IPFilter_PermissiveRule', 'IoT_OpenPorts',
        /// 'IoT_PermissiveFirewallPolicy', 'IoT_PermissiveInputFirewallRules',
        /// 'IoT_PermissiveOutputFirewallRules', 'IoT_PrivilegedDockerOptions',
        /// 'IoT_SharedCredentials', 'IoT_VulnerableTLSCipherSuite'</param>

        /// <param name="publisherInfo">Represents the publisher information of a process/rule
        /// </param>

        /// <param name="common">Whether the application is commonly run on the machine
        /// </param>

        /// <param name="userSids">
        /// </param>

        /// <param name="usernames">
        /// </param>

        /// <param name="fileType">The type of the file (for Linux files - Executable is used)
        /// Possible values include: 'Exe', 'Dll', 'Msi', 'Script', 'Executable',
        /// 'Unknown'</param>

        /// <param name="configurationStatus">The configuration status of the machines group or machine or rule
        /// Possible values include: 'Configured', 'NotConfigured', 'InProgress',
        /// 'Failed', 'NoStatus'</param>
        public PathRecommendation(string path = default(string), string action = default(string), string type = default(string), PublisherInfo publisherInfo = default(PublisherInfo), bool? common = default(bool?), System.Collections.Generic.IList<string> userSids = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<UserRecommendation> usernames = default(System.Collections.Generic.IList<UserRecommendation>), string fileType = default(string), string configurationStatus = default(string))

        {
            this.Path = path;
            this.Action = action;
            this.Type = type;
            this.PublisherInfo = publisherInfo;
            this.Common = common;
            this.UserSids = userSids;
            this.Usernames = usernames;
            this.FileType = fileType;
            this.ConfigurationStatus = configurationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the full path of the file, or an identifier of the application
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets the recommendation action of the machine or rule Possible values include: &#39;Recommended&#39;, &#39;Add&#39;, &#39;Remove&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public string Action {get; set; }

        /// <summary>
        /// Gets or sets the type of IoT Security recommendation. Possible values include: &#39;IoT_ACRAuthentication&#39;, &#39;IoT_AgentSendsUnutilizedMessages&#39;, &#39;IoT_Baseline&#39;, &#39;IoT_EdgeHubMemOptimize&#39;, &#39;IoT_EdgeLoggingOptions&#39;, &#39;IoT_InconsistentModuleSettings&#39;, &#39;IoT_InstallAgent&#39;, &#39;IoT_IPFilter_DenyAll&#39;, &#39;IoT_IPFilter_PermissiveRule&#39;, &#39;IoT_OpenPorts&#39;, &#39;IoT_PermissiveFirewallPolicy&#39;, &#39;IoT_PermissiveInputFirewallRules&#39;, &#39;IoT_PermissiveOutputFirewallRules&#39;, &#39;IoT_PrivilegedDockerOptions&#39;, &#39;IoT_SharedCredentials&#39;, &#39;IoT_VulnerableTLSCipherSuite&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets represents the publisher information of a process/rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publisherInfo")]
        public PublisherInfo PublisherInfo {get; set; }

        /// <summary>
        /// Gets or sets whether the application is commonly run on the machine
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "common")]
        public bool? Common {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userSids")]
        public System.Collections.Generic.IList<string> UserSids {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usernames")]
        public System.Collections.Generic.IList<UserRecommendation> Usernames {get; set; }

        /// <summary>
        /// Gets or sets the type of the file (for Linux files - Executable is used) Possible values include: &#39;Exe&#39;, &#39;Dll&#39;, &#39;Msi&#39;, &#39;Script&#39;, &#39;Executable&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileType")]
        public string FileType {get; set; }

        /// <summary>
        /// Gets or sets the configuration status of the machines group or machine or
        /// rule Possible values include: &#39;Configured&#39;, &#39;NotConfigured&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;NoStatus&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configurationStatus")]
        public string ConfigurationStatus {get; set; }
    }
}