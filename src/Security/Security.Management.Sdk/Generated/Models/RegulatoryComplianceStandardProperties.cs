// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Security.Models
{
    using System.Linq;

    /// <summary>
    /// Regulatory compliance standard data
    /// </summary>
    public partial class RegulatoryComplianceStandardProperties
    {
        /// <summary>
        /// Initializes a new instance of the RegulatoryComplianceStandardProperties class.
        /// </summary>
        public RegulatoryComplianceStandardProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegulatoryComplianceStandardProperties class.
        /// </summary>

        /// <param name="state">Aggregative state based on the standard&#39;s supported controls states
        /// Possible values include: 'Passed', 'Failed', 'Skipped', 'Unsupported'</param>

        /// <param name="passedControls">The number of supported regulatory compliance controls of the given
        /// standard with a passed state
        /// </param>

        /// <param name="failedControls">The number of supported regulatory compliance controls of the given
        /// standard with a failed state
        /// </param>

        /// <param name="skippedControls">The number of supported regulatory compliance controls of the given
        /// standard with a skipped state
        /// </param>

        /// <param name="unsupportedControls">The number of regulatory compliance controls of the given standard which
        /// are unsupported by automated assessments
        /// </param>
        public RegulatoryComplianceStandardProperties(string state = default(string), int? passedControls = default(int?), int? failedControls = default(int?), int? skippedControls = default(int?), int? unsupportedControls = default(int?))

        {
            this.State = state;
            this.PassedControls = passedControls;
            this.FailedControls = failedControls;
            this.SkippedControls = skippedControls;
            this.UnsupportedControls = unsupportedControls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets aggregative state based on the standard&#39;s supported controls
        /// states Possible values include: &#39;Passed&#39;, &#39;Failed&#39;, &#39;Skipped&#39;, &#39;Unsupported&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets the number of supported regulatory compliance controls of the given
        /// standard with a passed state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passedControls")]
        public int? PassedControls {get; private set; }

        /// <summary>
        /// Gets the number of supported regulatory compliance controls of the given
        /// standard with a failed state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failedControls")]
        public int? FailedControls {get; private set; }

        /// <summary>
        /// Gets the number of supported regulatory compliance controls of the given
        /// standard with a skipped state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skippedControls")]
        public int? SkippedControls {get; private set; }

        /// <summary>
        /// Gets the number of regulatory compliance controls of the given standard
        /// which are unsupported by automated assessments
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unsupportedControls")]
        public int? UnsupportedControls {get; private set; }
    }
}