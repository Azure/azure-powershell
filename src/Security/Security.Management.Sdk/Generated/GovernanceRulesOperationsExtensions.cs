// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GovernanceRulesOperations
    /// </summary>
    public static partial class GovernanceRulesOperationsExtensions
    {
        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GovernanceRule> List(this IGovernanceRulesOperations operations, string scope)
        {
                return ((IGovernanceRulesOperations)operations).ListAsync(scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GovernanceRule>> ListAsync(this IGovernanceRulesOperations operations, string scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        public static GovernanceRule Get(this IGovernanceRulesOperations operations, string scope, string ruleId)
        {
                return ((IGovernanceRulesOperations)operations).GetAsync(scope, ruleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GovernanceRule> GetAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(scope, ruleId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a governance rule over a given scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        public static GovernanceRule CreateOrUpdate(this IGovernanceRulesOperations operations, string scope, string ruleId, GovernanceRule governanceRule)
        {
                return ((IGovernanceRulesOperations)operations).CreateOrUpdateAsync(scope, ruleId, governanceRule).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a governance rule over a given scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GovernanceRule> CreateOrUpdateAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, GovernanceRule governanceRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, ruleId, governanceRule, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        public static GovernanceRulesDeleteHeaders Delete(this IGovernanceRulesOperations operations, string scope, string ruleId)
        {
                return ((IGovernanceRulesOperations)operations).DeleteAsync(scope, ruleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GovernanceRulesDeleteHeaders> DeleteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(scope, ruleId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        public static GovernanceRulesExecuteHeaders Execute(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?))
        {
                return ((IGovernanceRulesOperations)operations).ExecuteAsync(scope, ruleId, overrideParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GovernanceRulesExecuteHeaders> ExecuteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExecuteWithHttpMessagesAsync(scope, ruleId, overrideParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Get governance rules long run operation result for the requested scope by ruleId and operationId
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='operationId'>
        /// The governance rule long running operation unique key
        /// </param>
        public static OperationResultAutoGenerated OperationResults(this IGovernanceRulesOperations operations, string scope, string ruleId, string operationId)
        {
                return ((IGovernanceRulesOperations)operations).OperationResultsAsync(scope, ruleId, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get governance rules long run operation result for the requested scope by ruleId and operationId
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='operationId'>
        /// The governance rule long running operation unique key
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<OperationResultAutoGenerated> OperationResultsAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.OperationResultsWithHttpMessagesAsync(scope, ruleId, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        public static GovernanceRulesDeleteHeaders BeginDelete(this IGovernanceRulesOperations operations, string scope, string ruleId)
        {
                return ((IGovernanceRulesOperations)operations).BeginDeleteAsync(scope, ruleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GovernanceRulesDeleteHeaders> BeginDeleteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(scope, ruleId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        public static GovernanceRulesExecuteHeaders BeginExecute(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?))
        {
                return ((IGovernanceRulesOperations)operations).BeginExecuteAsync(scope, ruleId, overrideParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the Governance rules. Valid scopes are: management group (format: &#39;providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security connector (format: &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GovernanceRulesExecuteHeaders> BeginExecuteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginExecuteWithHttpMessagesAsync(scope, ruleId, overrideParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GovernanceRule> ListNext(this IGovernanceRulesOperations operations, string nextPageLink)
        {
                return ((IGovernanceRulesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GovernanceRule>> ListNextAsync(this IGovernanceRulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
