// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AlertsSuppressionRulesOperations
    /// </summary>
    public static partial class AlertsSuppressionRulesOperationsExtensions
    {
        /// <summary>
        /// List of all the dismiss rules for the given subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertType'>
        /// Type of the alert to get rules for
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AlertsSuppressionRule> List(this IAlertsSuppressionRulesOperations operations, string alertType = default(string))
        {
                return ((IAlertsSuppressionRulesOperations)operations).ListAsync(alertType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List of all the dismiss rules for the given subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertType'>
        /// Type of the alert to get rules for
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AlertsSuppressionRule>> ListAsync(this IAlertsSuppressionRulesOperations operations, string alertType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(alertType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertsSuppressionRuleName'>
        /// The unique name of the suppression alert rule
        /// </param>
        public static AlertsSuppressionRule Get(this IAlertsSuppressionRulesOperations operations, string alertsSuppressionRuleName)
        {
                return ((IAlertsSuppressionRulesOperations)operations).GetAsync(alertsSuppressionRuleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertsSuppressionRuleName'>
        /// The unique name of the suppression alert rule
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AlertsSuppressionRule> GetAsync(this IAlertsSuppressionRulesOperations operations, string alertsSuppressionRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(alertsSuppressionRuleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update existing rule or create new rule if it doesn&#39;t exist
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertsSuppressionRuleName'>
        /// The unique name of the suppression alert rule
        /// </param>
        public static AlertsSuppressionRule Update(this IAlertsSuppressionRulesOperations operations, string alertsSuppressionRuleName, AlertsSuppressionRule alertsSuppressionRule)
        {
                return ((IAlertsSuppressionRulesOperations)operations).UpdateAsync(alertsSuppressionRuleName, alertsSuppressionRule).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update existing rule or create new rule if it doesn&#39;t exist
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertsSuppressionRuleName'>
        /// The unique name of the suppression alert rule
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AlertsSuppressionRule> UpdateAsync(this IAlertsSuppressionRulesOperations operations, string alertsSuppressionRuleName, AlertsSuppressionRule alertsSuppressionRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(alertsSuppressionRuleName, alertsSuppressionRule, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete dismiss alert rule for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertsSuppressionRuleName'>
        /// The unique name of the suppression alert rule
        /// </param>
        public static void Delete(this IAlertsSuppressionRulesOperations operations, string alertsSuppressionRuleName)
        {
                ((IAlertsSuppressionRulesOperations)operations).DeleteAsync(alertsSuppressionRuleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete dismiss alert rule for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='alertsSuppressionRuleName'>
        /// The unique name of the suppression alert rule
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IAlertsSuppressionRulesOperations operations, string alertsSuppressionRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(alertsSuppressionRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List of all the dismiss rules for the given subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AlertsSuppressionRule> ListNext(this IAlertsSuppressionRulesOperations operations, string nextPageLink)
        {
                return ((IAlertsSuppressionRulesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List of all the dismiss rules for the given subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AlertsSuppressionRule>> ListNextAsync(this IAlertsSuppressionRulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
