// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SettingsOperations
    /// </summary>
    public static partial class SettingsOperationsExtensions
    {
        /// <summary>
        /// Settings about different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Setting> List(this ISettingsOperations operations)
        {
                return ((ISettingsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings about different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Setting>> ListAsync(this ISettingsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Settings of different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='settingName'>
        /// The name of the setting
        /// </param>
        public static Setting Get(this ISettingsOperations operations, string settingName)
        {
                return ((ISettingsOperations)operations).GetAsync(settingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings of different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='settingName'>
        /// The name of the setting
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Setting> GetAsync(this ISettingsOperations operations, string settingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(settingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// updating settings about different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='settingName'>
        /// The name of the setting
        /// </param>
        public static Setting Update(this ISettingsOperations operations, string settingName, Setting setting)
        {
                return ((ISettingsOperations)operations).UpdateAsync(settingName, setting).GetAwaiter().GetResult();
        }

        /// <summary>
        /// updating settings about different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='settingName'>
        /// The name of the setting
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Setting> UpdateAsync(this ISettingsOperations operations, string settingName, Setting setting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(settingName, setting, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Settings about different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Setting> ListNext(this ISettingsOperations operations, string nextPageLink)
        {
                return ((ISettingsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Settings about different configurations in Microsoft Defender for Cloud
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Setting>> ListNextAsync(this ISettingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
