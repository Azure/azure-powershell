// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for HealthReportsOperations
    /// </summary>
    public static partial class HealthReportsOperationsExtensions
    {
        /// <summary>
        /// Get a list of all health reports inside a scope. Valid scopes are:
        /// subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security
        /// connector (format:
        /// &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope at which the operation is performed.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HealthReport> List(this IHealthReportsOperations operations, string scope)
        {
                return ((IHealthReportsOperations)operations).ListAsync(scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all health reports inside a scope. Valid scopes are:
        /// subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security
        /// connector (format:
        /// &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope at which the operation is performed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HealthReport>> ListAsync(this IHealthReportsOperations operations, string scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get health report of resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='healthReportName'>
        /// The health report Key - Unique key for the health report type
        /// </param>
        public static HealthReport Get(this IHealthReportsOperations operations, string resourceId, string healthReportName)
        {
                return ((IHealthReportsOperations)operations).GetAsync(resourceId, healthReportName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get health report of resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='healthReportName'>
        /// The health report Key - Unique key for the health report type
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HealthReport> GetAsync(this IHealthReportsOperations operations, string resourceId, string healthReportName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceId, healthReportName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of all health reports inside a scope. Valid scopes are:
        /// subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security
        /// connector (format:
        /// &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HealthReport> ListNext(this IHealthReportsOperations operations, string nextPageLink)
        {
                return ((IHealthReportsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all health reports inside a scope. Valid scopes are:
        /// subscription (format: &#39;subscriptions/{subscriptionId}&#39;), or security
        /// connector (format:
        /// &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HealthReport>> ListNextAsync(this IHealthReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
