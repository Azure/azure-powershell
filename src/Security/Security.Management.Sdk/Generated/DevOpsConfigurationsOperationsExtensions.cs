// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DevOpsConfigurationsOperations
    /// </summary>
    public static partial class DevOpsConfigurationsOperationsExtensions
    {
        /// <summary>
        /// List DevOps Configurations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DevOpsConfiguration> List(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName)
        {
                return ((IDevOpsConfigurationsOperations)operations).ListAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List DevOps Configurations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DevOpsConfiguration>> ListAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static DevOpsConfiguration Get(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName)
        {
                return ((IDevOpsConfigurationsOperations)operations).GetAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DevOpsConfiguration> GetAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static DevOpsConfiguration CreateOrUpdate(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties))
        {
                return ((IDevOpsConfigurationsOperations)operations).CreateOrUpdateAsync(resourceGroupName, securityConnectorName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DevOpsConfiguration> CreateOrUpdateAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static DevOpsConfiguration Update(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties))
        {
                return ((IDevOpsConfigurationsOperations)operations).UpdateAsync(resourceGroupName, securityConnectorName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DevOpsConfiguration> UpdateAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a DevOps Connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static void Delete(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName)
        {
                ((IDevOpsConfigurationsOperations)operations).DeleteAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a DevOps Connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static DevOpsConfiguration BeginCreateOrUpdate(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties))
        {
                return ((IDevOpsConfigurationsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, securityConnectorName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DevOpsConfiguration> BeginCreateOrUpdateAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static DevOpsConfiguration BeginUpdate(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties))
        {
                return ((IDevOpsConfigurationsOperations)operations).BeginUpdateAsync(resourceGroupName, securityConnectorName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a DevOps Configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DevOpsConfiguration> BeginUpdateAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, DevOpsConfigurationProperties properties = default(DevOpsConfigurationProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a DevOps Connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static void BeginDelete(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName)
        {
                ((IDevOpsConfigurationsOperations)operations).BeginDeleteAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a DevOps Connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDevOpsConfigurationsOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List DevOps Configurations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DevOpsConfiguration> ListNext(this IDevOpsConfigurationsOperations operations, string nextPageLink)
        {
                return ((IDevOpsConfigurationsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List DevOps Configurations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DevOpsConfiguration>> ListNextAsync(this IDevOpsConfigurationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
