// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SecurityConnectorsOperations
    /// </summary>
    public static partial class SecurityConnectorsOperationsExtensions
    {
        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityConnector> List(this ISecurityConnectorsOperations operations)
        {
                return ((ISecurityConnectorsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityConnector>> ListAsync(this ISecurityConnectorsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the security connectors in the specified resource group. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityConnector> ListByResourceGroup(this ISecurityConnectorsOperations operations, string resourceGroupName)
        {
                return ((ISecurityConnectorsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the security connectors in the specified resource group. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityConnector>> ListByResourceGroupAsync(this ISecurityConnectorsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves details of a specific security connector
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static SecurityConnector Get(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName)
        {
                return ((ISecurityConnectorsOperations)operations).GetAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves details of a specific security connector
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityConnector> GetAsync(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a security connector. If a security connector is already created and a subsequent request is issued for the same security connector id, then it will be updated.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static SecurityConnector CreateOrUpdate(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName, SecurityConnector securityConnector)
        {
                return ((ISecurityConnectorsOperations)operations).CreateOrUpdateAsync(resourceGroupName, securityConnectorName, securityConnector).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a security connector. If a security connector is already created and a subsequent request is issued for the same security connector id, then it will be updated.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityConnector> CreateOrUpdateAsync(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName, SecurityConnector securityConnector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, securityConnector, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a security connector
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static SecurityConnector Update(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName, SecurityConnector securityConnector)
        {
                return ((ISecurityConnectorsOperations)operations).UpdateAsync(resourceGroupName, securityConnectorName, securityConnector).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a security connector
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityConnector> UpdateAsync(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName, SecurityConnector securityConnector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, securityConnector, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a security connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static void Delete(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName)
        {
                ((ISecurityConnectorsOperations)operations).DeleteAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a security connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISecurityConnectorsOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityConnector> ListNext(this ISecurityConnectorsOperations operations, string nextPageLink)
        {
                return ((ISecurityConnectorsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityConnector>> ListNextAsync(this ISecurityConnectorsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the security connectors in the specified resource group. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityConnector> ListByResourceGroupNext(this ISecurityConnectorsOperations operations, string nextPageLink)
        {
                return ((ISecurityConnectorsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the security connectors in the specified resource group. Use the &#39;nextLink&#39; property in the response to get the next page of security connectors for the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityConnector>> ListByResourceGroupNextAsync(this ISecurityConnectorsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
