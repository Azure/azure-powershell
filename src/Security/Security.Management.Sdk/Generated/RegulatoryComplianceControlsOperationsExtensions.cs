// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RegulatoryComplianceControlsOperations
    /// </summary>
    public static partial class RegulatoryComplianceControlsOperationsExtensions
    {
        /// <summary>
        /// All supported regulatory compliance controls details and state for selected standard
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='filter'>
        /// OData filter. Optional.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RegulatoryComplianceControl> List(this IRegulatoryComplianceControlsOperations operations, string regulatoryComplianceStandardName, string filter = default(string))
        {
                return ((IRegulatoryComplianceControlsOperations)operations).ListAsync(regulatoryComplianceStandardName, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// All supported regulatory compliance controls details and state for selected standard
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='filter'>
        /// OData filter. Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RegulatoryComplianceControl>> ListAsync(this IRegulatoryComplianceControlsOperations operations, string regulatoryComplianceStandardName, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(regulatoryComplianceStandardName, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Selected regulatory compliance control details and state
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='regulatoryComplianceControlName'>
        /// Name of the regulatory compliance control object
        /// </param>
        public static RegulatoryComplianceControl Get(this IRegulatoryComplianceControlsOperations operations, string regulatoryComplianceStandardName, string regulatoryComplianceControlName)
        {
                return ((IRegulatoryComplianceControlsOperations)operations).GetAsync(regulatoryComplianceStandardName, regulatoryComplianceControlName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Selected regulatory compliance control details and state
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='regulatoryComplianceStandardName'>
        /// Name of the regulatory compliance standard object
        /// </param>
        /// <param name='regulatoryComplianceControlName'>
        /// Name of the regulatory compliance control object
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RegulatoryComplianceControl> GetAsync(this IRegulatoryComplianceControlsOperations operations, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(regulatoryComplianceStandardName, regulatoryComplianceControlName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// All supported regulatory compliance controls details and state for selected standard
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RegulatoryComplianceControl> ListNext(this IRegulatoryComplianceControlsOperations operations, string nextPageLink)
        {
                return ((IRegulatoryComplianceControlsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// All supported regulatory compliance controls details and state for selected standard
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RegulatoryComplianceControl>> ListNextAsync(this IRegulatoryComplianceControlsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
