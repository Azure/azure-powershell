// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GitHubOwnersOperations
    /// </summary>
    public static partial class GitHubOwnersOperationsExtensions
    {
        /// <summary>
        /// Returns a list of all GitHub owners accessible by the user token consumed
        /// by the connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static GitHubOwnerListResponse ListAvailable(this IGitHubOwnersOperations operations, string resourceGroupName, string securityConnectorName)
        {
                return ((IGitHubOwnersOperations)operations).ListAvailableAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of all GitHub owners accessible by the user token consumed
        /// by the connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GitHubOwnerListResponse> ListAvailableAsync(this IGitHubOwnersOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAvailableWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a list of GitHub owners onboarded to the connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GitHubOwner> List(this IGitHubOwnersOperations operations, string resourceGroupName, string securityConnectorName)
        {
                return ((IGitHubOwnersOperations)operations).ListAsync(resourceGroupName, securityConnectorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of GitHub owners onboarded to the connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GitHubOwner>> ListAsync(this IGitHubOwnersOperations operations, string resourceGroupName, string securityConnectorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, securityConnectorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a monitored GitHub owner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='ownerName'>
        /// The GitHub owner name.
        /// </param>
        public static GitHubOwner Get(this IGitHubOwnersOperations operations, string resourceGroupName, string securityConnectorName, string ownerName)
        {
                return ((IGitHubOwnersOperations)operations).GetAsync(resourceGroupName, securityConnectorName, ownerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a monitored GitHub owner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='securityConnectorName'>
        /// The security connector name.
        /// </param>
        /// <param name='ownerName'>
        /// The GitHub owner name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GitHubOwner> GetAsync(this IGitHubOwnersOperations operations, string resourceGroupName, string securityConnectorName, string ownerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, securityConnectorName, ownerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a list of GitHub owners onboarded to the connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GitHubOwner> ListNext(this IGitHubOwnersOperations operations, string nextPageLink)
        {
                return ((IGitHubOwnersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of GitHub owners onboarded to the connector.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GitHubOwner>> ListNextAsync(this IGitHubOwnersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
