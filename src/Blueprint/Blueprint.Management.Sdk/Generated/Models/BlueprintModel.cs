// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a Blueprint definition.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BlueprintModel : AzureResourceBase
    {
        /// <summary>
        /// Initializes a new instance of the BlueprintModel class.
        /// </summary>
        public BlueprintModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlueprintModel class.
        /// </summary>

        /// <param name="id">String Id used to locate any resource on Azure.
        /// </param>

        /// <param name="type">Type of this resource.
        /// </param>

        /// <param name="name">Name of this resource.
        /// </param>

        /// <param name="displayName">One-liner string explain this resource.
        /// </param>

        /// <param name="description">Multi-line explain this resource.
        /// </param>

        /// <param name="status">Status of the blueprint. This field is readonly.
        /// </param>

        /// <param name="targetScope">The scope where this blueprint definition can be assigned.
        /// Possible values include: &#39;subscription&#39;, &#39;managementGroup&#39;</param>

        /// <param name="parameters">Parameters required by this blueprint definition.
        /// </param>

        /// <param name="resourceGroups">Resource group placeholders defined by this blueprint definition.
        /// </param>

        /// <param name="versions">Published versions of this blueprint definition.
        /// </param>

        /// <param name="layout">Layout view of the blueprint definition for UI reference.
        /// </param>
        public BlueprintModel(string id = default(string), string type = default(string), string name = default(string), string displayName = default(string), string description = default(string), BlueprintStatus status = default(BlueprintStatus), string targetScope = default(string), System.Collections.Generic.IDictionary<string, ParameterDefinition> parameters = default(System.Collections.Generic.IDictionary<string, ParameterDefinition>), System.Collections.Generic.IDictionary<string, ResourceGroupDefinition> resourceGroups = default(System.Collections.Generic.IDictionary<string, ResourceGroupDefinition>), object versions = default(object), object layout = default(object))

        : base(id, type, name)
        {
            this.DisplayName = displayName;
            this.Description = description;
            this.Status = status;
            this.TargetScope = targetScope;
            this.Parameters = parameters;
            this.ResourceGroups = resourceGroups;
            this.Versions = versions;
            this.Layout = layout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets one-liner string explain this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets multi-line explain this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets status of the blueprint. This field is readonly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public BlueprintStatus Status {get; private set; }

        /// <summary>
        /// Gets or sets the scope where this blueprint definition can be assigned. Possible values include: &#39;subscription&#39;, &#39;managementGroup&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetScope")]
        public string TargetScope {get; set; }

        /// <summary>
        /// Gets or sets parameters required by this blueprint definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterDefinition> Parameters {get; set; }

        /// <summary>
        /// Gets or sets resource group placeholders defined by this blueprint
        /// definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGroups")]
        public System.Collections.Generic.IDictionary<string, ResourceGroupDefinition> ResourceGroups {get; set; }

        /// <summary>
        /// Gets or sets published versions of this blueprint definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.versions")]
        public object Versions {get; set; }

        /// <summary>
        /// Gets or sets layout view of the blueprint definition for UI reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.layout")]
        public object Layout {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 500);
                }
            }


            if (this.Parameters != null)
            {
                foreach (var valueElement in this.Parameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.ResourceGroups != null)
            {
                foreach (var valueElement in this.ResourceGroups.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }


        }
    }
}