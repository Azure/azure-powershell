// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Represent a parameter with constrains and metadata.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ParameterDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ParameterDefinition class.
        /// </summary>
        public ParameterDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParameterDefinition class.
        /// </summary>

        /// <param name="type">Allowed data types for Resource Manager template parameters.
        /// Possible values include: &#39;string&#39;, &#39;array&#39;, &#39;bool&#39;, &#39;int&#39;, &#39;object&#39;,
        /// &#39;secureObject&#39;, &#39;secureString&#39;</param>

        /// <param name="defaultValue">Default Value for this parameter.
        /// </param>

        /// <param name="allowedValues">Array of allowed values for this parameter.
        /// </param>

        /// <param name="displayName">DisplayName of this parameter/resourceGroup.
        /// </param>

        /// <param name="description">Description of this parameter/resourceGroup.
        /// </param>

        /// <param name="strongType">StrongType for UI to render rich experience during blueprint assignment.
        /// Supported strong types are resourceType, principalId and location.
        /// </param>
        public ParameterDefinition(string type, object defaultValue = default(object), System.Collections.Generic.IList<object> allowedValues = default(System.Collections.Generic.IList<object>), string displayName = default(string), string description = default(string), string strongType = default(string))

        {
            this.Type = type;
            this.DefaultValue = defaultValue;
            this.AllowedValues = allowedValues;
            this.DisplayName = displayName;
            this.Description = description;
            this.StrongType = strongType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets allowed data types for Resource Manager template parameters. Possible values include: &#39;string&#39;, &#39;array&#39;, &#39;bool&#39;, &#39;int&#39;, &#39;object&#39;, &#39;secureObject&#39;, &#39;secureString&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets default Value for this parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultValue")]
        public object DefaultValue {get; set; }

        /// <summary>
        /// Gets or sets array of allowed values for this parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedValues")]
        public System.Collections.Generic.IList<object> AllowedValues {get; set; }

        /// <summary>
        /// Gets or sets displayName of this parameter/resourceGroup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets description of this parameter/resourceGroup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets strongType for UI to render rich experience during blueprint
        /// assignment. Supported strong types are resourceType, principalId and
        /// location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata.strongType")]
        public string StrongType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }



            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 500);
                }
            }
            if (this.StrongType != null)
            {
                if (this.StrongType.Length > 64)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "StrongType", 64);
                }
            }
        }
    }
}