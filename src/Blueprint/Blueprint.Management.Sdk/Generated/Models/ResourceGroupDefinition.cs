// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Represents an Azure resource group in a blueprint definition.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ResourceGroupDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ResourceGroupDefinition class.
        /// </summary>
        public ResourceGroupDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceGroupDefinition class.
        /// </summary>

        /// <param name="name">Name of this resourceGroup. Leave empty if the resource group name will be
        /// specified during the blueprint assignment.
        /// </param>

        /// <param name="location">Location of this resourceGroup. Leave empty if the resource group location
        /// will be specified during the blueprint assignment.
        /// </param>

        /// <param name="dependsOn">Artifacts which need to be deployed before this resource group.
        /// </param>

        /// <param name="tags">Tags to be assigned to this resource group.
        /// </param>

        /// <param name="displayName">DisplayName of this parameter/resourceGroup.
        /// </param>

        /// <param name="description">Description of this parameter/resourceGroup.
        /// </param>

        /// <param name="strongType">StrongType for UI to render rich experience during blueprint assignment.
        /// Supported strong types are resourceType, principalId and location.
        /// </param>
        public ResourceGroupDefinition(string name = default(string), string location = default(string), System.Collections.Generic.IList<string> dependsOn = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string displayName = default(string), string description = default(string), string strongType = default(string))

        {
            this.Name = name;
            this.Location = location;
            this.DependsOn = dependsOn;
            this.Tags = tags;
            this.DisplayName = displayName;
            this.Description = description;
            this.StrongType = strongType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of this resourceGroup. Leave empty if the resource group
        /// name will be specified during the blueprint assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets location of this resourceGroup. Leave empty if the resource
        /// group location will be specified during the blueprint assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets artifacts which need to be deployed before this resource
        /// group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependsOn")]
        public System.Collections.Generic.IList<string> DependsOn {get; set; }

        /// <summary>
        /// Gets or sets tags to be assigned to this resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets displayName of this parameter/resourceGroup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets description of this parameter/resourceGroup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets strongType for UI to render rich experience during blueprint
        /// assignment. Supported strong types are resourceType, principalId and
        /// location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata.strongType")]
        public string StrongType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 500);
                }
            }
            if (this.StrongType != null)
            {
                if (this.StrongType.Length > 64)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "StrongType", 64);
                }
            }
        }
    }
}