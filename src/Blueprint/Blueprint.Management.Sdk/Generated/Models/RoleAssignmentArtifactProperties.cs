// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a Role assignment blueprint artifact.
    /// </summary>
    public partial class RoleAssignmentArtifactProperties
    {
        /// <summary>
        /// Initializes a new instance of the RoleAssignmentArtifactProperties class.
        /// </summary>
        public RoleAssignmentArtifactProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoleAssignmentArtifactProperties class.
        /// </summary>

        /// <param name="displayName">One-liner string explain this resource.
        /// </param>

        /// <param name="description">Multi-line explain this resource.
        /// </param>

        /// <param name="dependsOn">Artifacts which need to be deployed before the specified artifact.
        /// </param>

        /// <param name="roleDefinitionId">Azure resource ID of the RoleDefinition.
        /// </param>

        /// <param name="principalIds">Array of user or group identities in Azure Active Directory. The
        /// roleDefinition will apply to each identity.
        /// </param>

        /// <param name="resourceGroup">RoleAssignment will be scope to this resourceGroup. If empty, it scopes to
        /// the subscription.
        /// </param>
        public RoleAssignmentArtifactProperties(string roleDefinitionId, object principalIds, string displayName = default(string), string description = default(string), System.Collections.Generic.IList<string> dependsOn = default(System.Collections.Generic.IList<string>), string resourceGroup = default(string))

        {
            this.DisplayName = displayName;
            this.Description = description;
            this.DependsOn = dependsOn;
            this.RoleDefinitionId = roleDefinitionId;
            this.PrincipalIds = principalIds;
            this.ResourceGroup = resourceGroup;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets one-liner string explain this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets multi-line explain this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets artifacts which need to be deployed before the specified
        /// artifact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependsOn")]
        public System.Collections.Generic.IList<string> DependsOn {get; set; }

        /// <summary>
        /// Gets or sets azure resource ID of the RoleDefinition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roleDefinitionId")]
        public string RoleDefinitionId {get; set; }

        /// <summary>
        /// Gets or sets array of user or group identities in Azure Active Directory.
        /// The roleDefinition will apply to each identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "principalIds")]
        public object PrincipalIds {get; set; }

        /// <summary>
        /// Gets or sets roleAssignment will be scope to this resourceGroup. If empty,
        /// it scopes to the subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RoleDefinitionId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RoleDefinitionId");
            }
            if (this.PrincipalIds == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrincipalIds");
            }
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 500);
                }
            }




        }
    }
}