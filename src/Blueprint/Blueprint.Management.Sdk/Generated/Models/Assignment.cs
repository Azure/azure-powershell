// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a blueprint assignment.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Assignment : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Assignment class.
        /// </summary>
        public Assignment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Assignment class.
        /// </summary>

        /// <param name="id">String Id used to locate any resource on Azure.
        /// </param>

        /// <param name="type">Type of this resource.
        /// </param>

        /// <param name="name">Name of this resource.
        /// </param>

        /// <param name="location">The location of this blueprint assignment.
        /// </param>

        /// <param name="identity">Managed identity for this blueprint assignment.
        /// </param>

        /// <param name="displayName">One-liner string explain this resource.
        /// </param>

        /// <param name="description">Multi-line explain this resource.
        /// </param>

        /// <param name="blueprintId">ID of the published version of a blueprint definition.
        /// </param>

        /// <param name="scope">The target subscription scope of the blueprint assignment (format:
        /// &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments,
        /// the property is required.
        /// </param>

        /// <param name="parameters">Blueprint assignment parameter values.
        /// </param>

        /// <param name="resourceGroups">Names and locations of resource group placeholders.
        /// </param>

        /// <param name="status">Status of blueprint assignment. This field is readonly.
        /// </param>

        /// <param name="locks">Defines how resources deployed by a blueprint assignment are locked.
        /// </param>

        /// <param name="provisioningState">State of the blueprint assignment.
        /// Possible values include: &#39;creating&#39;, &#39;validating&#39;, &#39;waiting&#39;, &#39;deploying&#39;,
        /// &#39;cancelling&#39;, &#39;locking&#39;, &#39;succeeded&#39;, &#39;failed&#39;, &#39;canceled&#39;, &#39;deleting&#39;</param>
        public Assignment(string location, ManagedServiceIdentity identity, System.Collections.Generic.IDictionary<string, ParameterValue> parameters, System.Collections.Generic.IDictionary<string, ResourceGroupValue> resourceGroups, string id = default(string), string type = default(string), string name = default(string), string displayName = default(string), string description = default(string), string blueprintId = default(string), string scope = default(string), AssignmentStatus status = default(AssignmentStatus), AssignmentLockSettings locks = default(AssignmentLockSettings), string provisioningState = default(string))

        : base(location, id, type, name)
        {
            this.Identity = identity;
            this.DisplayName = displayName;
            this.Description = description;
            this.BlueprintId = blueprintId;
            this.Scope = scope;
            this.Parameters = parameters;
            this.ResourceGroups = resourceGroups;
            this.Status = status;
            this.Locks = locks;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets managed identity for this blueprint assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets one-liner string explain this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets multi-line explain this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets iD of the published version of a blueprint definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.blueprintId")]
        public string BlueprintId {get; set; }

        /// <summary>
        /// Gets or sets the target subscription scope of the blueprint assignment
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level
        /// assignments, the property is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public string Scope {get; set; }

        /// <summary>
        /// Gets or sets blueprint assignment parameter values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterValue> Parameters {get; set; }

        /// <summary>
        /// Gets or sets names and locations of resource group placeholders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGroups")]
        public System.Collections.Generic.IDictionary<string, ResourceGroupValue> ResourceGroups {get; set; }

        /// <summary>
        /// Gets status of blueprint assignment. This field is readonly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public AssignmentStatus Status {get; private set; }

        /// <summary>
        /// Gets or sets defines how resources deployed by a blueprint assignment are
        /// locked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.locks")]
        public AssignmentLockSettings Locks {get; set; }

        /// <summary>
        /// Gets state of the blueprint assignment. Possible values include: &#39;creating&#39;, &#39;validating&#39;, &#39;waiting&#39;, &#39;deploying&#39;, &#39;cancelling&#39;, &#39;locking&#39;, &#39;succeeded&#39;, &#39;failed&#39;, &#39;canceled&#39;, &#39;deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Identity == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Identity");
            }
            if (this.Parameters == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Parameters");
            }
            if (this.ResourceGroups == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ResourceGroups");
            }
            if (this.Identity != null)
            {
                this.Identity.Validate();
            }
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 500);
                }
            }


            if (this.Parameters != null)
            {
                foreach (var valueElement in this.Parameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.ResourceGroups != null)
            {
                foreach (var valueElement in this.ResourceGroups.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }



        }
    }
}