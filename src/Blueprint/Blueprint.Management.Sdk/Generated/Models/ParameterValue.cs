// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Value for the specified parameter. Can be either &#39;value&#39; or &#39;reference&#39; but
    /// not both.
    /// </summary>
    public partial class ParameterValue
    {
        /// <summary>
        /// Initializes a new instance of the ParameterValue class.
        /// </summary>
        public ParameterValue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParameterValue class.
        /// </summary>

        /// <param name="value">Parameter value. Any valid JSON value is allowed including objects, arrays,
        /// strings, numbers and booleans.
        /// </param>

        /// <param name="reference">Parameter value as reference type.
        /// </param>
        public ParameterValue(object value = default(object), SecretValueReference reference = default(SecretValueReference))

        {
            this.Value = value;
            this.Reference = reference;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets parameter value. Any valid JSON value is allowed including
        /// objects, arrays, strings, numbers and booleans.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public object Value {get; set; }

        /// <summary>
        /// Gets or sets parameter value as reference type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reference")]
        public SecretValueReference Reference {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Reference != null)
            {
                this.Reference.Validate();
            }
        }
    }
}