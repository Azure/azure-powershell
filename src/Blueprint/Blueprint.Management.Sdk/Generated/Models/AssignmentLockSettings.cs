// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using System.Linq;

    /// <summary>
    /// Defines how resources deployed by a blueprint assignment are locked.
    /// </summary>
    public partial class AssignmentLockSettings
    {
        /// <summary>
        /// Initializes a new instance of the AssignmentLockSettings class.
        /// </summary>
        public AssignmentLockSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AssignmentLockSettings class.
        /// </summary>

        /// <param name="mode">Lock mode.
        /// Possible values include: &#39;None&#39;, &#39;AllResourcesReadOnly&#39;,
        /// &#39;AllResourcesDoNotDelete&#39;</param>

        /// <param name="excludedPrincipals">List of AAD principals excluded from blueprint locks. Up to 5 principals
        /// are permitted.
        /// </param>

        /// <param name="excludedActions">List of management operations that are excluded from blueprint locks. Up to
        /// 200 actions are permitted. If the lock mode is set to
        /// &#39;AllResourcesReadOnly&#39;, then the following actions are automatically
        /// appended to &#39;excludedActions&#39;: &#39;*/read&#39;,
        /// &#39;Microsoft.Network/virtualNetworks/subnets/join/action&#39; and
        /// &#39;Microsoft.Authorization/locks/delete&#39;. If the lock mode is set to
        /// &#39;AllResourcesDoNotDelete&#39;, then the following actions are automatically
        /// appended to &#39;excludedActions&#39;: &#39;Microsoft.Authorization/locks/delete&#39;.
        /// Duplicate actions will get removed.
        /// </param>
        public AssignmentLockSettings(string mode = default(string), System.Collections.Generic.IList<string> excludedPrincipals = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> excludedActions = default(System.Collections.Generic.IList<string>))

        {
            this.Mode = mode;
            this.ExcludedPrincipals = excludedPrincipals;
            this.ExcludedActions = excludedActions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets lock mode. Possible values include: &#39;None&#39;, &#39;AllResourcesReadOnly&#39;, &#39;AllResourcesDoNotDelete&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets list of AAD principals excluded from blueprint locks. Up to 5
        /// principals are permitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedPrincipals")]
        public System.Collections.Generic.IList<string> ExcludedPrincipals {get; set; }

        /// <summary>
        /// Gets or sets list of management operations that are excluded from blueprint
        /// locks. Up to 200 actions are permitted. If the lock mode is set to
        /// &#39;AllResourcesReadOnly&#39;, then the following actions are automatically
        /// appended to &#39;excludedActions&#39;: &#39;*/read&#39;,
        /// &#39;Microsoft.Network/virtualNetworks/subnets/join/action&#39; and
        /// &#39;Microsoft.Authorization/locks/delete&#39;. If the lock mode is set to
        /// &#39;AllResourcesDoNotDelete&#39;, then the following actions are automatically
        /// appended to &#39;excludedActions&#39;: &#39;Microsoft.Authorization/locks/delete&#39;.
        /// Duplicate actions will get removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedActions")]
        public System.Collections.Generic.IList<string> ExcludedActions {get; set; }
    }
}