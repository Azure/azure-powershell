// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Blueprint
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AssignmentsOperations
    /// </summary>
    public static partial class AssignmentsOperationsExtensions
    {
        /// <summary>
        /// Create or update a blueprint assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        public static Assignment CreateOrUpdate(this IAssignmentsOperations operations, string resourceScope, string assignmentName, Assignment assignment)
        {
                return ((IAssignmentsOperations)operations).CreateOrUpdateAsync(resourceScope, assignmentName, assignment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a blueprint assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Assignment> CreateOrUpdateAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, Assignment assignment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceScope, assignmentName, assignment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a blueprint assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        public static Assignment Get(this IAssignmentsOperations operations, string resourceScope, string assignmentName)
        {
                return ((IAssignmentsOperations)operations).GetAsync(resourceScope, assignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a blueprint assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Assignment> GetAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceScope, assignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a blueprint assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        /// <param name='deleteBehavior'>
        /// When deleteBehavior=all, the resources that were created by the blueprint
        /// assignment will be deleted.
        /// </param>
        public static Assignment Delete(this IAssignmentsOperations operations, string resourceScope, string assignmentName, string deleteBehavior = default(string))
        {
                return ((IAssignmentsOperations)operations).DeleteAsync(resourceScope, assignmentName, deleteBehavior).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a blueprint assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        /// <param name='deleteBehavior'>
        /// When deleteBehavior=all, the resources that were created by the blueprint
        /// assignment will be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Assignment> DeleteAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, string deleteBehavior = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceScope, assignmentName, deleteBehavior, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get Blueprints service SPN objectId
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        public static WhoIsBlueprintContract WhoIsBlueprint(this IAssignmentsOperations operations, string resourceScope, string assignmentName)
        {
                return ((IAssignmentsOperations)operations).WhoIsBlueprintAsync(resourceScope, assignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Blueprints service SPN objectId
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='assignmentName'>
        /// Name of the blueprint assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhoIsBlueprintContract> WhoIsBlueprintAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.WhoIsBlueprintWithHttpMessagesAsync(resourceScope, assignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List blueprint assignments within a subscription or a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Assignment> List(this IAssignmentsOperations operations, string resourceScope)
        {
                return ((IAssignmentsOperations)operations).ListAsync(resourceScope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List blueprint assignments within a subscription or a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Assignment>> ListAsync(this IAssignmentsOperations operations, string resourceScope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceScope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List blueprint assignments within a subscription or a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Assignment> ListNext(this IAssignmentsOperations operations, string nextPageLink)
        {
                return ((IAssignmentsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List blueprint assignments within a subscription or a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Assignment>> ListNextAsync(this IAssignmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
