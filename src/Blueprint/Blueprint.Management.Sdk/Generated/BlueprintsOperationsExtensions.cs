// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Blueprint
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for BlueprintsOperations
    /// </summary>
    public static partial class BlueprintsOperationsExtensions
    {
        /// <summary>
        /// Create or update a blueprint definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='blueprintName'>
        /// Name of the blueprint definition.
        /// </param>
        public static BlueprintModel CreateOrUpdate(this IBlueprintsOperations operations, string resourceScope, string blueprintName, BlueprintModel blueprint)
        {
                return ((IBlueprintsOperations)operations).CreateOrUpdateAsync(resourceScope, blueprintName, blueprint).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a blueprint definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='blueprintName'>
        /// Name of the blueprint definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BlueprintModel> CreateOrUpdateAsync(this IBlueprintsOperations operations, string resourceScope, string blueprintName, BlueprintModel blueprint, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceScope, blueprintName, blueprint, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a blueprint definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='blueprintName'>
        /// Name of the blueprint definition.
        /// </param>
        public static BlueprintModel Get(this IBlueprintsOperations operations, string resourceScope, string blueprintName)
        {
                return ((IBlueprintsOperations)operations).GetAsync(resourceScope, blueprintName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a blueprint definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='blueprintName'>
        /// Name of the blueprint definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BlueprintModel> GetAsync(this IBlueprintsOperations operations, string resourceScope, string blueprintName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceScope, blueprintName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a blueprint definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='blueprintName'>
        /// Name of the blueprint definition.
        /// </param>
        public static BlueprintModel Delete(this IBlueprintsOperations operations, string resourceScope, string blueprintName)
        {
                return ((IBlueprintsOperations)operations).DeleteAsync(resourceScope, blueprintName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a blueprint definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='blueprintName'>
        /// Name of the blueprint definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BlueprintModel> DeleteAsync(this IBlueprintsOperations operations, string resourceScope, string blueprintName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceScope, blueprintName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List blueprint definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BlueprintModel> List(this IBlueprintsOperations operations, string resourceScope)
        {
                return ((IBlueprintsOperations)operations).ListAsync(resourceScope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List blueprint definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceScope'>
        /// The scope of the resource. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BlueprintModel>> ListAsync(this IBlueprintsOperations operations, string resourceScope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceScope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List blueprint definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BlueprintModel> ListNext(this IBlueprintsOperations operations, string nextPageLink)
        {
                return ((IBlueprintsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List blueprint definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BlueprintModel>> ListNextAsync(this IBlueprintsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
