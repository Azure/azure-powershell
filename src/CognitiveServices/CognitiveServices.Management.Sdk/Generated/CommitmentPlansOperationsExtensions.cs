// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CognitiveServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CommitmentPlansOperations
    /// </summary>
    public static partial class CommitmentPlansOperationsExtensions
    {
        /// <summary>
        /// Gets the commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlan> List(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName)
        {
                return ((ICommitmentPlansOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlan>> ListAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan Get(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName)
        {
                return ((ICommitmentPlansOperations)operations).GetAsync(resourceGroupName, accountName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> GetAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the state of specified commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan CreateOrUpdate(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName, CommitmentPlan commitmentPlan)
        {
                return ((ICommitmentPlansOperations)operations).CreateOrUpdateAsync(resourceGroupName, accountName, commitmentPlanName, commitmentPlan).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the state of specified commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> CreateOrUpdateAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName, CommitmentPlan commitmentPlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, commitmentPlanName, commitmentPlan, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified commitmentPlan associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static void Delete(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName)
        {
                ((ICommitmentPlansOperations)operations).DeleteAsync(resourceGroupName, accountName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified commitmentPlan associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan CreateOrUpdatePlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, CommitmentPlan commitmentPlan)
        {
                return ((ICommitmentPlansOperations)operations).CreateOrUpdatePlanAsync(resourceGroupName, commitmentPlanName, commitmentPlan).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> CreateOrUpdatePlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, CommitmentPlan commitmentPlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdatePlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlan, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan UpdatePlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku))
        {
                return ((ICommitmentPlansOperations)operations).UpdatePlanAsync(resourceGroupName, commitmentPlanName, tags, sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> UpdatePlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdatePlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, tags, sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Cognitive Services commitment plan from the resource group. 
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlansDeletePlanHeaders DeletePlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName)
        {
                return ((ICommitmentPlansOperations)operations).DeletePlanAsync(resourceGroupName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Cognitive Services commitment plan from the resource group. 
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlansDeletePlanHeaders> DeletePlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeletePlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Returns a Cognitive Services commitment plan specified by the parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan GetPlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName)
        {
                return ((ICommitmentPlansOperations)operations).GetPlanAsync(resourceGroupName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a Cognitive Services commitment plan specified by the parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> GetPlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns all the resources of a particular type belonging to a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlan> ListPlansByResourceGroup(this ICommitmentPlansOperations operations, string resourceGroupName)
        {
                return ((ICommitmentPlansOperations)operations).ListPlansByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns all the resources of a particular type belonging to a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlan>> ListPlansByResourceGroupAsync(this ICommitmentPlansOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPlansByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns all the resources of a particular type belonging to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlan> ListPlansBySubscription(this ICommitmentPlansOperations operations)
        {
                return ((ICommitmentPlansOperations)operations).ListPlansBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns all the resources of a particular type belonging to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlan>> ListPlansBySubscriptionAsync(this ICommitmentPlansOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPlansBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the associations of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlanAccountAssociation> ListAssociations(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName)
        {
                return ((ICommitmentPlansOperations)operations).ListAssociationsAsync(resourceGroupName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the associations of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlanAccountAssociation>> ListAssociationsAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAssociationsWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        public static CommitmentPlanAccountAssociation GetAssociation(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName)
        {
                return ((ICommitmentPlansOperations)operations).GetAssociationAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlanAccountAssociation> GetAssociationAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAssociationWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        public static CommitmentPlanAccountAssociation CreateOrUpdateAssociation(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, string accountId = default(string))
        {
                return ((ICommitmentPlansOperations)operations).CreateOrUpdateAssociationAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, accountId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlanAccountAssociation> CreateOrUpdateAssociationAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, string accountId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAssociationWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, accountId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        public static CommitmentPlansDeleteAssociationHeaders DeleteAssociation(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName)
        {
                return ((ICommitmentPlansOperations)operations).DeleteAssociationAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlansDeleteAssociationHeaders> DeleteAssociationAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAssociationWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Deletes the specified commitmentPlan associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static void BeginDelete(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName)
        {
                ((ICommitmentPlansOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified commitmentPlan associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string accountName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan BeginCreateOrUpdatePlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, CommitmentPlan commitmentPlan)
        {
                return ((ICommitmentPlansOperations)operations).BeginCreateOrUpdatePlanAsync(resourceGroupName, commitmentPlanName, commitmentPlan).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> BeginCreateOrUpdatePlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, CommitmentPlan commitmentPlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdatePlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlan, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlan BeginUpdatePlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku))
        {
                return ((ICommitmentPlansOperations)operations).BeginUpdatePlanAsync(resourceGroupName, commitmentPlanName, tags, sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlan> BeginUpdatePlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdatePlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, tags, sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Cognitive Services commitment plan from the resource group. 
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        public static CommitmentPlansDeletePlanHeaders BeginDeletePlan(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName)
        {
                return ((ICommitmentPlansOperations)operations).BeginDeletePlanAsync(resourceGroupName, commitmentPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Cognitive Services commitment plan from the resource group. 
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlansDeletePlanHeaders> BeginDeletePlanAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeletePlanWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Create or update the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        public static CommitmentPlanAccountAssociation BeginCreateOrUpdateAssociation(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, string accountId = default(string))
        {
                return ((ICommitmentPlansOperations)operations).BeginCreateOrUpdateAssociationAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, accountId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlanAccountAssociation> BeginCreateOrUpdateAssociationAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, string accountId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAssociationWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, accountId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        public static CommitmentPlansDeleteAssociationHeaders BeginDeleteAssociation(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName)
        {
                return ((ICommitmentPlansOperations)operations).BeginDeleteAssociationAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the association of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='commitmentPlanName'>
        /// The name of the commitmentPlan associated with the Cognitive Services Account
        /// </param>
        /// <param name='commitmentPlanAssociationName'>
        /// The name of the commitment plan association with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommitmentPlansDeleteAssociationHeaders> BeginDeleteAssociationAsync(this ICommitmentPlansOperations operations, string resourceGroupName, string commitmentPlanName, string commitmentPlanAssociationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteAssociationWithHttpMessagesAsync(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlan> ListNext(this ICommitmentPlansOperations operations, string nextPageLink)
        {
                return ((ICommitmentPlansOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the commitmentPlans associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlan>> ListNextAsync(this ICommitmentPlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns all the resources of a particular type belonging to a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlan> ListPlansByResourceGroupNext(this ICommitmentPlansOperations operations, string nextPageLink)
        {
                return ((ICommitmentPlansOperations)operations).ListPlansByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns all the resources of a particular type belonging to a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlan>> ListPlansByResourceGroupNextAsync(this ICommitmentPlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPlansByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns all the resources of a particular type belonging to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlan> ListPlansBySubscriptionNext(this ICommitmentPlansOperations operations, string nextPageLink)
        {
                return ((ICommitmentPlansOperations)operations).ListPlansBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns all the resources of a particular type belonging to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlan>> ListPlansBySubscriptionNextAsync(this ICommitmentPlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPlansBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the associations of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CommitmentPlanAccountAssociation> ListAssociationsNext(this ICommitmentPlansOperations operations, string nextPageLink)
        {
                return ((ICommitmentPlansOperations)operations).ListAssociationsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the associations of the Cognitive Services commitment plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CommitmentPlanAccountAssociation>> ListAssociationsNextAsync(this ICommitmentPlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAssociationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
