// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CognitiveServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DefenderForAiSettingsOperations
    /// </summary>
    public static partial class DefenderForAiSettingsOperationsExtensions
    {
        /// <summary>
        /// Lists the Defender for AI settings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DefenderForAISetting> List(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName)
        {
                return ((IDefenderForAiSettingsOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the Defender for AI settings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DefenderForAISetting>> ListAsync(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified Defender for AI setting by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='defenderForAISettingName'>
        /// The name of the defender for AI setting.
        /// </param>
        public static DefenderForAISetting Get(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, string defenderForAISettingName)
        {
                return ((IDefenderForAiSettingsOperations)operations).GetAsync(resourceGroupName, accountName, defenderForAISettingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified Defender for AI setting by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='defenderForAISettingName'>
        /// The name of the defender for AI setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DefenderForAISetting> GetAsync(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, string defenderForAISettingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, defenderForAISettingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or Updates the specified Defender for AI setting.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='defenderForAISettingName'>
        /// The name of the defender for AI setting.
        /// </param>
        public static DefenderForAISetting CreateOrUpdate(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, string defenderForAISettingName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string state = default(string))
        {
                return ((IDefenderForAiSettingsOperations)operations).CreateOrUpdateAsync(resourceGroupName, accountName, defenderForAISettingName, tags, state).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or Updates the specified Defender for AI setting.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='defenderForAISettingName'>
        /// The name of the defender for AI setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DefenderForAISetting> CreateOrUpdateAsync(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, string defenderForAISettingName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string state = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, defenderForAISettingName, tags, state, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the specified Defender for AI setting.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='defenderForAISettingName'>
        /// The name of the defender for AI setting.
        /// </param>
        public static DefenderForAISetting Update(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, string defenderForAISettingName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string state = default(string))
        {
                return ((IDefenderForAiSettingsOperations)operations).UpdateAsync(resourceGroupName, accountName, defenderForAISettingName, tags, state).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the specified Defender for AI setting.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='defenderForAISettingName'>
        /// The name of the defender for AI setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DefenderForAISetting> UpdateAsync(this IDefenderForAiSettingsOperations operations, string resourceGroupName, string accountName, string defenderForAISettingName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string state = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, defenderForAISettingName, tags, state, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the Defender for AI settings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DefenderForAISetting> ListNext(this IDefenderForAiSettingsOperations operations, string nextPageLink)
        {
                return ((IDefenderForAiSettingsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the Defender for AI settings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DefenderForAISetting>> ListNextAsync(this IDefenderForAiSettingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
