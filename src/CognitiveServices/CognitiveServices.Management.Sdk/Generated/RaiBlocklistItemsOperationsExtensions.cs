// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CognitiveServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RaiBlocklistItemsOperations
    /// </summary>
    public static partial class RaiBlocklistItemsOperationsExtensions
    {
        /// <summary>
        /// Gets the blocklist items associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RaiBlocklistItem> List(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName)
        {
                return ((IRaiBlocklistItemsOperations)operations).ListAsync(resourceGroupName, accountName, raiBlocklistName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the blocklist items associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RaiBlocklistItem>> ListAsync(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, raiBlocklistName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified custom blocklist Item associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        public static RaiBlocklistItem Get(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName)
        {
                return ((IRaiBlocklistItemsOperations)operations).GetAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified custom blocklist Item associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RaiBlocklistItem> GetAsync(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the state of specified blocklist item associated with the Azure OpenAI account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        public static RaiBlocklistItem CreateOrUpdate(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), RaiBlocklistItemProperties properties = default(RaiBlocklistItemProperties))
        {
                return ((IRaiBlocklistItemsOperations)operations).CreateOrUpdateAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, tags, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the state of specified blocklist item associated with the Azure OpenAI account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RaiBlocklistItem> CreateOrUpdateAsync(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), RaiBlocklistItemProperties properties = default(RaiBlocklistItemProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, tags, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified blocklist Item associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        public static RaiBlocklistItemsDeleteHeaders Delete(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName)
        {
                return ((IRaiBlocklistItemsOperations)operations).DeleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified blocklist Item associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RaiBlocklistItemsDeleteHeaders> DeleteAsync(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Deletes the specified blocklist Item associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        public static RaiBlocklistItemsDeleteHeaders BeginDelete(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName)
        {
                return ((IRaiBlocklistItemsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified blocklist Item associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='raiBlocklistName'>
        /// The name of the RaiBlocklist associated with the Cognitive Services Account
        /// </param>
        /// <param name='raiBlocklistItemName'>
        /// The name of the RaiBlocklist Item associated with the custom blocklist
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RaiBlocklistItemsDeleteHeaders> BeginDeleteAsync(this IRaiBlocklistItemsOperations operations, string resourceGroupName, string accountName, string raiBlocklistName, string raiBlocklistItemName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the blocklist items associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RaiBlocklistItem> ListNext(this IRaiBlocklistItemsOperations operations, string nextPageLink)
        {
                return ((IRaiBlocklistItemsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the blocklist items associated with the custom blocklist.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RaiBlocklistItem>> ListNextAsync(this IRaiBlocklistItemsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
