// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CognitiveServices.Models
{
    using System.Linq;

    /// <summary>
    /// Azure OpenAI Content Filter Properties.
    /// </summary>
    public partial class RaiContentFilterProperties
    {
        /// <summary>
        /// Initializes a new instance of the RaiContentFilterProperties class.
        /// </summary>
        public RaiContentFilterProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RaiContentFilterProperties class.
        /// </summary>

        /// <param name="name">Name of Content Filter.
        /// </param>

        /// <param name="isMultiLevelFilter">If the Content Filter has multi severity levels(Low, Medium, or High).
        /// </param>

        /// <param name="source">Content source to apply the Content Filters.
        /// Possible values include: &#39;Prompt&#39;, &#39;Completion&#39;</param>
        public RaiContentFilterProperties(string name = default(string), bool? isMultiLevelFilter = default(bool?), string source = default(string))

        {
            this.Name = name;
            this.IsMultiLevelFilter = isMultiLevelFilter;
            this.Source = source;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of Content Filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets if the Content Filter has multi severity levels(Low, Medium,
        /// or High).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isMultiLevelFilter")]
        public bool? IsMultiLevelFilter {get; set; }

        /// <summary>
        /// Gets or sets content source to apply the Content Filters. Possible values include: &#39;Prompt&#39;, &#39;Completion&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public string Source {get; set; }
    }
}