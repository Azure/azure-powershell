// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CognitiveServices.Models
{
    using System.Linq;

    /// <summary>
    /// Azure OpenAI Content Filters properties.
    /// </summary>
    public partial class RaiPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the RaiPolicyProperties class.
        /// </summary>
        public RaiPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RaiPolicyProperties class.
        /// </summary>

        /// <param name="type">Content Filters policy type.
        /// Possible values include: &#39;UserManaged&#39;, &#39;SystemManaged&#39;</param>

        /// <param name="mode">Rai policy mode. The enum value mapping is as below: Default = 0,
        /// Deferred=1, Blocking=2, Asynchronous_filter =3. Please use
        /// &#39;Asynchronous_filter&#39; after 2024-10-01. It is the same as &#39;Deferred&#39; in
        /// previous version.
        /// Possible values include: &#39;Default&#39;, &#39;Deferred&#39;, &#39;Blocking&#39;,
        /// &#39;Asynchronous_filter&#39;</param>

        /// <param name="basePolicyName">Name of Rai policy.
        /// </param>

        /// <param name="contentFilters">The list of Content Filters.
        /// </param>

        /// <param name="customBlocklists">The list of custom Blocklist.
        /// </param>
        public RaiPolicyProperties(string type = default(string), string mode = default(string), string basePolicyName = default(string), System.Collections.Generic.IList<RaiPolicyContentFilter> contentFilters = default(System.Collections.Generic.IList<RaiPolicyContentFilter>), System.Collections.Generic.IList<CustomBlocklistConfig> customBlocklists = default(System.Collections.Generic.IList<CustomBlocklistConfig>))

        {
            this.Type = type;
            this.Mode = mode;
            this.BasePolicyName = basePolicyName;
            this.ContentFilters = contentFilters;
            this.CustomBlocklists = customBlocklists;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets content Filters policy type. Possible values include: &#39;UserManaged&#39;, &#39;SystemManaged&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets rai policy mode. The enum value mapping is as below: Default =
        /// 0, Deferred=1, Blocking=2, Asynchronous_filter =3. Please use
        /// &#39;Asynchronous_filter&#39; after 2024-10-01. It is the same as &#39;Deferred&#39; in
        /// previous version. Possible values include: &#39;Default&#39;, &#39;Deferred&#39;, &#39;Blocking&#39;, &#39;Asynchronous_filter&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets name of Rai policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "basePolicyName")]
        public string BasePolicyName {get; set; }

        /// <summary>
        /// Gets or sets the list of Content Filters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contentFilters")]
        public System.Collections.Generic.IList<RaiPolicyContentFilter> ContentFilters {get; set; }

        /// <summary>
        /// Gets or sets the list of custom Blocklist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customBlocklists")]
        public System.Collections.Generic.IList<CustomBlocklistConfig> CustomBlocklists {get; set; }
    }
}