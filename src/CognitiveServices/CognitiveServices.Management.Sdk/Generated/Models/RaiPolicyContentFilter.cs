// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CognitiveServices.Models
{
    using System.Linq;

    /// <summary>
    /// Azure OpenAI Content Filter.
    /// </summary>
    public partial class RaiPolicyContentFilter
    {
        /// <summary>
        /// Initializes a new instance of the RaiPolicyContentFilter class.
        /// </summary>
        public RaiPolicyContentFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RaiPolicyContentFilter class.
        /// </summary>

        /// <param name="name">Name of ContentFilter.
        /// </param>

        /// <param name="enabled">If the ContentFilter is enabled.
        /// </param>

        /// <param name="allowedContentLevel">Level at which content is filtered.
        /// Possible values include: 'Low', 'Medium', 'High'</param>

        /// <param name="blocking">If blocking would occur.
        /// </param>

        /// <param name="source">Content source to apply the Content Filters.
        /// Possible values include: 'Prompt', 'Completion'</param>
        public RaiPolicyContentFilter(string name = default(string), bool? enabled = default(bool?), string allowedContentLevel = default(string), bool? blocking = default(bool?), string source = default(string))

        {
            this.Name = name;
            this.Enabled = enabled;
            this.AllowedContentLevel = allowedContentLevel;
            this.Blocking = blocking;
            this.Source = source;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of ContentFilter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets if the ContentFilter is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool? Enabled {get; set; }

        /// <summary>
        /// Gets or sets level at which content is filtered. Possible values include: &#39;Low&#39;, &#39;Medium&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedContentLevel")]
        public string AllowedContentLevel {get; set; }

        /// <summary>
        /// Gets or sets if blocking would occur.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blocking")]
        public bool? Blocking {get; set; }

        /// <summary>
        /// Gets or sets content source to apply the Content Filters. Possible values include: &#39;Prompt&#39;, &#39;Completion&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public string Source {get; set; }
    }
}