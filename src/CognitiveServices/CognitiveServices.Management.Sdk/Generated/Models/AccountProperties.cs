// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CognitiveServices.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of Cognitive Services account.
    /// </summary>
    public partial class AccountProperties
    {
        /// <summary>
        /// Initializes a new instance of the AccountProperties class.
        /// </summary>
        public AccountProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AccountProperties class.
        /// </summary>

        /// <param name="provisioningState">Gets the status of the cognitive services account at the time the operation
        /// was called.
        /// Possible values include: 'Accepted', 'Creating', 'Deleting', 'Moving',
        /// 'Failed', 'Succeeded', 'ResolvingDNS'</param>

        /// <param name="endpoint">Endpoint of the created account.
        /// </param>

        /// <param name="internalId">The internal identifier (deprecated, do not use this property).
        /// </param>

        /// <param name="capabilities">Gets the capabilities of the cognitive services account. Each item
        /// indicates the capability of a specific feature. The values are read-only
        /// and for reference only.
        /// </param>

        /// <param name="isMigrated">If the resource is migrated from an existing key.
        /// </param>

        /// <param name="migrationToken">Resource migration token.
        /// </param>

        /// <param name="skuChangeInfo">Sku change info of account.
        /// </param>

        /// <param name="customSubDomainName">Optional subdomain name used for token-based authentication.
        /// </param>

        /// <param name="networkAcls">A collection of rules governing the accessibility from specific network
        /// locations.
        /// </param>

        /// <param name="encryption">The encryption properties for this resource.
        /// </param>

        /// <param name="userOwnedStorage">The storage accounts for this resource.
        /// </param>

        /// <param name="privateEndpointConnections">The private endpoint connection associated with the Cognitive Services
        /// account.
        /// </param>

        /// <param name="publicNetworkAccess">Whether or not public endpoint access is allowed for this account.
        /// Possible values include: 'Enabled', 'Disabled'</param>

        /// <param name="apiProperties">The api properties for special APIs.
        /// </param>

        /// <param name="dateCreated">Gets the date of cognitive services account creation.
        /// </param>

        /// <param name="callRateLimit">The call rate limit Cognitive Services account.
        /// </param>

        /// <param name="dynamicThrottlingEnabled">The flag to enable dynamic throttling.
        /// </param>

        /// <param name="quotaLimit">
        /// </param>

        /// <param name="restrictOutboundNetworkAccess">
        /// </param>

        /// <param name="allowedFqdnList">
        /// </param>

        /// <param name="disableLocalAuth">
        /// </param>

        /// <param name="endpoints">Dictionary of &lt;string&gt;
        /// </param>

        /// <param name="restore">
        /// </param>

        /// <param name="deletionDate">The deletion date, only available for deleted account.
        /// </param>

        /// <param name="scheduledPurgeDate">The scheduled purge date, only available for deleted account.
        /// </param>

        /// <param name="locations">The multiregion settings of Cognitive Services account.
        /// </param>

        /// <param name="commitmentPlanAssociations">The commitment plan associations of Cognitive Services account.
        /// </param>

        /// <param name="abusePenalty">The abuse penalty.
        /// </param>
        public AccountProperties(string provisioningState = default(string), string endpoint = default(string), string internalId = default(string), System.Collections.Generic.IList<SkuCapability> capabilities = default(System.Collections.Generic.IList<SkuCapability>), bool? isMigrated = default(bool?), string migrationToken = default(string), SkuChangeInfo skuChangeInfo = default(SkuChangeInfo), string customSubDomainName = default(string), NetworkRuleSet networkAcls = default(NetworkRuleSet), Encryption encryption = default(Encryption), System.Collections.Generic.IList<UserOwnedStorage> userOwnedStorage = default(System.Collections.Generic.IList<UserOwnedStorage>), System.Collections.Generic.IList<PrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<PrivateEndpointConnection>), string publicNetworkAccess = default(string), ApiProperties apiProperties = default(ApiProperties), string dateCreated = default(string), CallRateLimit callRateLimit = default(CallRateLimit), bool? dynamicThrottlingEnabled = default(bool?), QuotaLimit quotaLimit = default(QuotaLimit), bool? restrictOutboundNetworkAccess = default(bool?), System.Collections.Generic.IList<string> allowedFqdnList = default(System.Collections.Generic.IList<string>), bool? disableLocalAuth = default(bool?), System.Collections.Generic.IDictionary<string, string> endpoints = default(System.Collections.Generic.IDictionary<string, string>), bool? restore = default(bool?), string deletionDate = default(string), string scheduledPurgeDate = default(string), MultiRegionSettings locations = default(MultiRegionSettings), System.Collections.Generic.IList<CommitmentPlanAssociation> commitmentPlanAssociations = default(System.Collections.Generic.IList<CommitmentPlanAssociation>), AbusePenalty abusePenalty = default(AbusePenalty))

        {
            this.ProvisioningState = provisioningState;
            this.Endpoint = endpoint;
            this.InternalId = internalId;
            this.Capabilities = capabilities;
            this.IsMigrated = isMigrated;
            this.MigrationToken = migrationToken;
            this.SkuChangeInfo = skuChangeInfo;
            this.CustomSubDomainName = customSubDomainName;
            this.NetworkAcls = networkAcls;
            this.Encryption = encryption;
            this.UserOwnedStorage = userOwnedStorage;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.ApiProperties = apiProperties;
            this.DateCreated = dateCreated;
            this.CallRateLimit = callRateLimit;
            this.DynamicThrottlingEnabled = dynamicThrottlingEnabled;
            this.QuotaLimit = quotaLimit;
            this.RestrictOutboundNetworkAccess = restrictOutboundNetworkAccess;
            this.AllowedFqdnList = allowedFqdnList;
            this.DisableLocalAuth = disableLocalAuth;
            this.Endpoints = endpoints;
            this.Restore = restore;
            this.DeletionDate = deletionDate;
            this.ScheduledPurgeDate = scheduledPurgeDate;
            this.Locations = locations;
            this.CommitmentPlanAssociations = commitmentPlanAssociations;
            this.AbusePenalty = abusePenalty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets gets the status of the cognitive services account at the time the
        /// operation was called. Possible values include: &#39;Accepted&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;ResolvingDNS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets endpoint of the created account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpoint")]
        public string Endpoint {get; private set; }

        /// <summary>
        /// Gets the internal identifier (deprecated, do not use this property).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "internalId")]
        public string InternalId {get; private set; }

        /// <summary>
        /// Gets gets the capabilities of the cognitive services account. Each item
        /// indicates the capability of a specific feature. The values are read-only
        /// and for reference only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capabilities")]
        public System.Collections.Generic.IList<SkuCapability> Capabilities {get; private set; }

        /// <summary>
        /// Gets if the resource is migrated from an existing key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isMigrated")]
        public bool? IsMigrated {get; private set; }

        /// <summary>
        /// Gets or sets resource migration token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationToken")]
        public string MigrationToken {get; set; }

        /// <summary>
        /// Gets sku change info of account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skuChangeInfo")]
        public SkuChangeInfo SkuChangeInfo {get; private set; }

        /// <summary>
        /// Gets or sets optional subdomain name used for token-based authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customSubDomainName")]
        public string CustomSubDomainName {get; set; }

        /// <summary>
        /// Gets or sets a collection of rules governing the accessibility from
        /// specific network locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkAcls")]
        public NetworkRuleSet NetworkAcls {get; set; }

        /// <summary>
        /// Gets or sets the encryption properties for this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryption")]
        public Encryption Encryption {get; set; }

        /// <summary>
        /// Gets or sets the storage accounts for this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userOwnedStorage")]
        public System.Collections.Generic.IList<UserOwnedStorage> UserOwnedStorage {get; set; }

        /// <summary>
        /// Gets the private endpoint connection associated with the Cognitive Services
        /// account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointConnections")]
        public System.Collections.Generic.IList<PrivateEndpointConnection> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets or sets whether or not public endpoint access is allowed for this
        /// account. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets the api properties for special APIs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiProperties")]
        public ApiProperties ApiProperties {get; set; }

        /// <summary>
        /// Gets gets the date of cognitive services account creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateCreated")]
        public string DateCreated {get; private set; }

        /// <summary>
        /// Gets the call rate limit Cognitive Services account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "callRateLimit")]
        public CallRateLimit CallRateLimit {get; private set; }

        /// <summary>
        /// Gets or sets the flag to enable dynamic throttling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dynamicThrottlingEnabled")]
        public bool? DynamicThrottlingEnabled {get; set; }

        /// <summary>
        /// Gets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "quotaLimit")]
        public QuotaLimit QuotaLimit {get; private set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restrictOutboundNetworkAccess")]
        public bool? RestrictOutboundNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedFqdnList")]
        public System.Collections.Generic.IList<string> AllowedFqdnList {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth {get; set; }

        /// <summary>
        /// Gets dictionary of &lt;string&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpoints")]
        public System.Collections.Generic.IDictionary<string, string> Endpoints {get; private set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restore")]
        public bool? Restore {get; set; }

        /// <summary>
        /// Gets the deletion date, only available for deleted account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deletionDate")]
        public string DeletionDate {get; private set; }

        /// <summary>
        /// Gets the scheduled purge date, only available for deleted account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scheduledPurgeDate")]
        public string ScheduledPurgeDate {get; private set; }

        /// <summary>
        /// Gets or sets the multiregion settings of Cognitive Services account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locations")]
        public MultiRegionSettings Locations {get; set; }

        /// <summary>
        /// Gets the commitment plan associations of Cognitive Services account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commitmentPlanAssociations")]
        public System.Collections.Generic.IList<CommitmentPlanAssociation> CommitmentPlanAssociations {get; private set; }

        /// <summary>
        /// Gets the abuse penalty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "abusePenalty")]
        public AbusePenalty AbusePenalty {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {










            if (this.PrivateEndpointConnections != null)
            {
                foreach (var element in this.PrivateEndpointConnections)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.ApiProperties != null)
            {
                this.ApiProperties.Validate();
            }










        }
    }
}