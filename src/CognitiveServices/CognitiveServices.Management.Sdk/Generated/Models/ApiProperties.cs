// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CognitiveServices.Models
{
    using System.Linq;

    /// <summary>
    /// The api properties for special APIs.
    /// </summary>
    public partial class ApiProperties
    {
        /// <summary>
        /// Initializes a new instance of the ApiProperties class.
        /// </summary>
        public ApiProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiProperties class.
        /// </summary>

        /// <param name="additionalProperties">The api properties for special APIs.
        /// </param>

        /// <param name="qnaRuntimeEndpoint">(QnAMaker Only) The runtime endpoint of QnAMaker.
        /// </param>

        /// <param name="qnaAzureSearchEndpointKey">(QnAMaker Only) The Azure Search endpoint key of QnAMaker.
        /// </param>

        /// <param name="qnaAzureSearchEndpointId">(QnAMaker Only) The Azure Search endpoint id of QnAMaker.
        /// </param>

        /// <param name="statisticsEnabled">(Bing Search Only) The flag to enable statistics of Bing Search.
        /// </param>

        /// <param name="eventHubConnectionString">(Personalization Only) The flag to enable statistics of Bing Search.
        /// </param>

        /// <param name="storageAccountConnectionString">(Personalization Only) The storage account connection string.
        /// </param>

        /// <param name="aadClientId">(Metrics Advisor Only) The Azure AD Client Id (Application Id).
        /// </param>

        /// <param name="aadTenantId">(Metrics Advisor Only) The Azure AD Tenant Id.
        /// </param>

        /// <param name="superUser">(Metrics Advisor Only) The super user of Metrics Advisor.
        /// </param>

        /// <param name="websiteName">(Metrics Advisor Only) The website name of Metrics Advisor.
        /// </param>
        public ApiProperties(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string qnaRuntimeEndpoint = default(string), string qnaAzureSearchEndpointKey = default(string), string qnaAzureSearchEndpointId = default(string), bool? statisticsEnabled = default(bool?), string eventHubConnectionString = default(string), string storageAccountConnectionString = default(string), string aadClientId = default(string), string aadTenantId = default(string), string superUser = default(string), string websiteName = default(string))

        {
            this.AdditionalProperties = additionalProperties;
            this.QnaRuntimeEndpoint = qnaRuntimeEndpoint;
            this.QnaAzureSearchEndpointKey = qnaAzureSearchEndpointKey;
            this.QnaAzureSearchEndpointId = qnaAzureSearchEndpointId;
            this.StatisticsEnabled = statisticsEnabled;
            this.EventHubConnectionString = eventHubConnectionString;
            this.StorageAccountConnectionString = storageAccountConnectionString;
            this.AadClientId = aadClientId;
            this.AadTenantId = aadTenantId;
            this.SuperUser = superUser;
            this.WebsiteName = websiteName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the api properties for special APIs.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets (QnAMaker Only) The runtime endpoint of QnAMaker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "qnaRuntimeEndpoint")]
        public string QnaRuntimeEndpoint {get; set; }

        /// <summary>
        /// Gets or sets (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "qnaAzureSearchEndpointKey")]
        public string QnaAzureSearchEndpointKey {get; set; }

        /// <summary>
        /// Gets or sets (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "qnaAzureSearchEndpointId")]
        public string QnaAzureSearchEndpointId {get; set; }

        /// <summary>
        /// Gets or sets (Bing Search Only) The flag to enable statistics of Bing
        /// Search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statisticsEnabled")]
        public bool? StatisticsEnabled {get; set; }

        /// <summary>
        /// Gets or sets (Personalization Only) The flag to enable statistics of Bing
        /// Search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventHubConnectionString")]
        public string EventHubConnectionString {get; set; }

        /// <summary>
        /// Gets or sets (Personalization Only) The storage account connection string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountConnectionString")]
        public string StorageAccountConnectionString {get; set; }

        /// <summary>
        /// Gets or sets (Metrics Advisor Only) The Azure AD Client Id (Application
        /// Id).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadClientId")]
        public string AadClientId {get; set; }

        /// <summary>
        /// Gets or sets (Metrics Advisor Only) The Azure AD Tenant Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadTenantId")]
        public string AadTenantId {get; set; }

        /// <summary>
        /// Gets or sets (Metrics Advisor Only) The super user of Metrics Advisor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "superUser")]
        public string SuperUser {get; set; }

        /// <summary>
        /// Gets or sets (Metrics Advisor Only) The website name of Metrics Advisor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "websiteName")]
        public string WebsiteName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.EventHubConnectionString != null)
            {
                if (this.EventHubConnectionString.Length > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "EventHubConnectionString", 1000);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.EventHubConnectionString, "^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "EventHubConnectionString", "^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$");
                }
            }
            if (this.StorageAccountConnectionString != null)
            {
                if (this.StorageAccountConnectionString.Length > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "StorageAccountConnectionString", 1000);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.StorageAccountConnectionString, "^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "StorageAccountConnectionString", "^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$");
                }
            }
            if (this.AadClientId != null)
            {
                if (this.AadClientId.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "AadClientId", 500);
                }
            }
            if (this.AadTenantId != null)
            {
                if (this.AadTenantId.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "AadTenantId", 500);
                }
            }
            if (this.SuperUser != null)
            {
                if (this.SuperUser.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "SuperUser", 500);
                }
            }
            if (this.WebsiteName != null)
            {
                if (this.WebsiteName.Length > 500)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "WebsiteName", 500);
                }
            }
        }
    }
}