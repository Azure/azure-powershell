// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CognitiveServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DeploymentsOperations
    /// </summary>
    public static partial class DeploymentsOperationsExtensions
    {
        /// <summary>
        /// Gets the deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Deployment> List(this IDeploymentsOperations operations, string resourceGroupName, string accountName)
        {
                return ((IDeploymentsOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Deployment>> ListAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static Deployment Get(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).GetAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> GetAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the state of specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static Deployment CreateOrUpdate(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment)
        {
                return ((IDeploymentsOperations)operations).CreateOrUpdateAsync(resourceGroupName, accountName, deploymentName, deployment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the state of specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> CreateOrUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, deployment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static Deployment Update(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku))
        {
                return ((IDeploymentsOperations)operations).UpdateAsync(resourceGroupName, accountName, deploymentName, tags, sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> UpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, tags, sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified deployment associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static void Delete(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
        {
                ((IDeploymentsOperations)operations).DeleteAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified deployment associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists the specified deployments skus associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SkuResource> ListSkus(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).ListSkusAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the specified deployments skus associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SkuResource>> ListSkusAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSkusWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the state of specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static Deployment BeginCreateOrUpdate(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment)
        {
                return ((IDeploymentsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, accountName, deploymentName, deployment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the state of specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> BeginCreateOrUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, deployment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static Deployment BeginUpdate(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku))
        {
                return ((IDeploymentsOperations)operations).BeginUpdateAsync(resourceGroupName, accountName, deploymentName, tags, sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update specified deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> BeginUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, tags, sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified deployment associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        public static void BeginDelete(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
        {
                ((IDeploymentsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified deployment associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of Cognitive Services account.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment associated with the Cognitive Services Account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Deployment> ListNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the deployments associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Deployment>> ListNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the specified deployments skus associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SkuResource> ListSkusNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the specified deployments skus associated with the Cognitive Services account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SkuResource>> ListSkusNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
