// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Sync Session status object.
    /// </summary>
    public partial class ServerEndpointSyncActivityStatus
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpointSyncActivityStatus class.
        /// </summary>
        public ServerEndpointSyncActivityStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpointSyncActivityStatus class.
        /// </summary>

        /// <param name="timestamp">Timestamp when properties were updated
        /// </param>

        /// <param name="perItemErrorCount">Per item error count
        /// </param>

        /// <param name="appliedItemCount">Applied item count.
        /// </param>

        /// <param name="totalItemCount">Total item count (if available)
        /// </param>

        /// <param name="appliedBytes">Applied bytes
        /// </param>

        /// <param name="totalBytes">Total bytes (if available)
        /// </param>

        /// <param name="syncMode">Sync mode
        /// Possible values include: &#39;Regular&#39;, &#39;NamespaceDownload&#39;, &#39;InitialUpload&#39;,
        /// &#39;SnapshotUpload&#39;, &#39;InitialFullDownload&#39;</param>

        /// <param name="sessionMinutesRemaining">Session minutes remaining (if available)
        /// </param>
        public ServerEndpointSyncActivityStatus(System.DateTime? timestamp = default(System.DateTime?), long? perItemErrorCount = default(long?), long? appliedItemCount = default(long?), long? totalItemCount = default(long?), long? appliedBytes = default(long?), long? totalBytes = default(long?), string syncMode = default(string), int? sessionMinutesRemaining = default(int?))

        {
            this.Timestamp = timestamp;
            this.PerItemErrorCount = perItemErrorCount;
            this.AppliedItemCount = appliedItemCount;
            this.TotalItemCount = totalItemCount;
            this.AppliedBytes = appliedBytes;
            this.TotalBytes = totalBytes;
            this.SyncMode = syncMode;
            this.SessionMinutesRemaining = sessionMinutesRemaining;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets timestamp when properties were updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp {get; private set; }

        /// <summary>
        /// Gets per item error count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "perItemErrorCount")]
        public long? PerItemErrorCount {get; private set; }

        /// <summary>
        /// Gets applied item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appliedItemCount")]
        public long? AppliedItemCount {get; private set; }

        /// <summary>
        /// Gets total item count (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalItemCount")]
        public long? TotalItemCount {get; private set; }

        /// <summary>
        /// Gets applied bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appliedBytes")]
        public long? AppliedBytes {get; private set; }

        /// <summary>
        /// Gets total bytes (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalBytes")]
        public long? TotalBytes {get; private set; }

        /// <summary>
        /// Gets sync mode Possible values include: &#39;Regular&#39;, &#39;NamespaceDownload&#39;, &#39;InitialUpload&#39;, &#39;SnapshotUpload&#39;, &#39;InitialFullDownload&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncMode")]
        public string SyncMode {get; private set; }

        /// <summary>
        /// Gets session minutes remaining (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sessionMinutesRemaining")]
        public int? SessionMinutesRemaining {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PerItemErrorCount != null)
            {
                if (this.PerItemErrorCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PerItemErrorCount", 0);
                }
            }
            if (this.AppliedItemCount != null)
            {
                if (this.AppliedItemCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "AppliedItemCount", 0);
                }
            }
            if (this.TotalItemCount != null)
            {
                if (this.TotalItemCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalItemCount", 0);
                }
            }
            if (this.AppliedBytes != null)
            {
                if (this.AppliedBytes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "AppliedBytes", 0);
                }
            }
            if (this.TotalBytes != null)
            {
                if (this.TotalBytes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalBytes", 0);
                }
            }

            if (this.SessionMinutesRemaining != null)
            {
                if (this.SessionMinutesRemaining < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "SessionMinutesRemaining", 0);
                }
            }
        }
    }
}