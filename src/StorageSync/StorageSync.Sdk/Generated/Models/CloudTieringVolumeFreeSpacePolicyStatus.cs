// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Status of the volume free space policy
    /// </summary>
    public partial class CloudTieringVolumeFreeSpacePolicyStatus
    {
        /// <summary>
        /// Initializes a new instance of the CloudTieringVolumeFreeSpacePolicyStatus class.
        /// </summary>
        public CloudTieringVolumeFreeSpacePolicyStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CloudTieringVolumeFreeSpacePolicyStatus class.
        /// </summary>

        /// <param name="lastUpdatedTimestamp">Last updated timestamp
        /// </param>

        /// <param name="effectiveVolumeFreeSpacePolicy">In the case where multiple server endpoints are present in a volume, an
        /// effective free space policy is applied.
        /// </param>

        /// <param name="currentVolumeFreeSpacePercent">Current volume free space percentage.
        /// </param>
        public CloudTieringVolumeFreeSpacePolicyStatus(System.DateTime? lastUpdatedTimestamp = default(System.DateTime?), int? effectiveVolumeFreeSpacePolicy = default(int?), int? currentVolumeFreeSpacePercent = default(int?))

        {
            this.LastUpdatedTimestamp = lastUpdatedTimestamp;
            this.EffectiveVolumeFreeSpacePolicy = effectiveVolumeFreeSpacePolicy;
            this.CurrentVolumeFreeSpacePercent = currentVolumeFreeSpacePercent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets last updated timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedTimestamp")]
        public System.DateTime? LastUpdatedTimestamp {get; private set; }

        /// <summary>
        /// Gets in the case where multiple server endpoints are present in a volume,
        /// an effective free space policy is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveVolumeFreeSpacePolicy")]
        public int? EffectiveVolumeFreeSpacePolicy {get; private set; }

        /// <summary>
        /// Gets current volume free space percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentVolumeFreeSpacePercent")]
        public int? CurrentVolumeFreeSpacePercent {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.EffectiveVolumeFreeSpacePolicy != null)
            {
                if (this.EffectiveVolumeFreeSpacePolicy > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "EffectiveVolumeFreeSpacePolicy", 100);
                }
                if (this.EffectiveVolumeFreeSpacePolicy < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "EffectiveVolumeFreeSpacePolicy", 0);
                }
            }
            if (this.CurrentVolumeFreeSpacePercent != null)
            {
                if (this.CurrentVolumeFreeSpacePercent > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "CurrentVolumeFreeSpacePercent", 100);
                }
                if (this.CurrentVolumeFreeSpacePercent < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "CurrentVolumeFreeSpacePercent", 0);
                }
            }
        }
    }
}