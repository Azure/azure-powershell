// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Server Endpoint object.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ServerEndpoint : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpoint class.
        /// </summary>
        public ServerEndpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpoint class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#34;
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="serverLocalPath">Server Local path.
        /// </param>

        /// <param name="cloudTiering">Cloud Tiering.
        /// Possible values include: &#39;on&#39;, &#39;off&#39;</param>

        /// <param name="volumeFreeSpacePercent">Level of free space to be maintained by Cloud Tiering if it is enabled.
        /// </param>

        /// <param name="tierFilesOlderThanDays">Tier files older than days.
        /// </param>

        /// <param name="friendlyName">Friendly Name
        /// </param>

        /// <param name="serverResourceId">Server Resource Id.
        /// </param>

        /// <param name="provisioningState">ServerEndpoint Provisioning State
        /// </param>

        /// <param name="lastWorkflowId">ServerEndpoint lastWorkflowId
        /// </param>

        /// <param name="lastOperationName">Resource Last Operation Name
        /// </param>

        /// <param name="syncStatus">Server Endpoint sync status
        /// </param>

        /// <param name="offlineDataTransfer">Offline data transfer
        /// Possible values include: &#39;on&#39;, &#39;off&#39;</param>

        /// <param name="offlineDataTransferStorageAccountResourceId">Offline data transfer storage account resource ID
        /// </param>

        /// <param name="offlineDataTransferStorageAccountTenantId">Offline data transfer storage account tenant ID
        /// </param>

        /// <param name="offlineDataTransferShareName">Offline data transfer share name
        /// </param>

        /// <param name="cloudTieringStatus">Cloud tiering status. Only populated if cloud tiering is enabled.
        /// </param>

        /// <param name="recallStatus">Recall status. Only populated if cloud tiering is enabled.
        /// </param>

        /// <param name="initialDownloadPolicy">Policy for how namespace and files are recalled during FastDr.
        /// Possible values include: &#39;NamespaceOnly&#39;, &#39;NamespaceThenModifiedFiles&#39;,
        /// &#39;AvoidTieredFiles&#39;</param>

        /// <param name="localCacheMode">Policy for enabling follow-the-sun business models: link local cache to
        /// cloud behavior to pre-populate before local access.
        /// Possible values include: &#39;DownloadNewAndModifiedFiles&#39;,
        /// &#39;UpdateLocallyCachedFiles&#39;</param>

        /// <param name="initialUploadPolicy">Policy for how the initial upload sync session is performed.
        /// Possible values include: &#39;ServerAuthoritative&#39;, &#39;Merge&#39;</param>

        /// <param name="serverName">Server name
        /// </param>

        /// <param name="serverEndpointProvisioningStatus">Server Endpoint provisioning status
        /// </param>
        public ServerEndpoint(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string serverLocalPath = default(string), string cloudTiering = default(string), int? volumeFreeSpacePercent = default(int?), int? tierFilesOlderThanDays = default(int?), string friendlyName = default(string), string serverResourceId = default(string), string provisioningState = default(string), string lastWorkflowId = default(string), string lastOperationName = default(string), ServerEndpointSyncStatus syncStatus = default(ServerEndpointSyncStatus), string offlineDataTransfer = default(string), string offlineDataTransferStorageAccountResourceId = default(string), string offlineDataTransferStorageAccountTenantId = default(string), string offlineDataTransferShareName = default(string), ServerEndpointCloudTieringStatus cloudTieringStatus = default(ServerEndpointCloudTieringStatus), ServerEndpointRecallStatus recallStatus = default(ServerEndpointRecallStatus), string initialDownloadPolicy = default(string), string localCacheMode = default(string), string initialUploadPolicy = default(string), string serverName = default(string), ServerEndpointProvisioningStatus serverEndpointProvisioningStatus = default(ServerEndpointProvisioningStatus))

        : base(id, name, type, systemData)
        {
            this.ServerLocalPath = serverLocalPath;
            this.CloudTiering = cloudTiering;
            this.VolumeFreeSpacePercent = volumeFreeSpacePercent;
            this.TierFilesOlderThanDays = tierFilesOlderThanDays;
            this.FriendlyName = friendlyName;
            this.ServerResourceId = serverResourceId;
            this.ProvisioningState = provisioningState;
            this.LastWorkflowId = lastWorkflowId;
            this.LastOperationName = lastOperationName;
            this.SyncStatus = syncStatus;
            this.OfflineDataTransfer = offlineDataTransfer;
            this.OfflineDataTransferStorageAccountResourceId = offlineDataTransferStorageAccountResourceId;
            this.OfflineDataTransferStorageAccountTenantId = offlineDataTransferStorageAccountTenantId;
            this.OfflineDataTransferShareName = offlineDataTransferShareName;
            this.CloudTieringStatus = cloudTieringStatus;
            this.RecallStatus = recallStatus;
            this.InitialDownloadPolicy = initialDownloadPolicy;
            this.LocalCacheMode = localCacheMode;
            this.InitialUploadPolicy = initialUploadPolicy;
            this.ServerName = serverName;
            this.ServerEndpointProvisioningStatus = serverEndpointProvisioningStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets server Local path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverLocalPath")]
        public string ServerLocalPath {get; set; }

        /// <summary>
        /// Gets or sets cloud Tiering. Possible values include: &#39;on&#39;, &#39;off&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cloudTiering")]
        public string CloudTiering {get; set; }

        /// <summary>
        /// Gets or sets level of free space to be maintained by Cloud Tiering if it is
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.volumeFreeSpacePercent")]
        public int? VolumeFreeSpacePercent {get; set; }

        /// <summary>
        /// Gets or sets tier files older than days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tierFilesOlderThanDays")]
        public int? TierFilesOlderThanDays {get; set; }

        /// <summary>
        /// Gets or sets friendly Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets server Resource Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverResourceId")]
        public string ServerResourceId {get; set; }

        /// <summary>
        /// Gets serverEndpoint Provisioning State
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets serverEndpoint lastWorkflowId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastWorkflowId")]
        public string LastWorkflowId {get; private set; }

        /// <summary>
        /// Gets resource Last Operation Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastOperationName")]
        public string LastOperationName {get; private set; }

        /// <summary>
        /// Gets server Endpoint sync status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.syncStatus")]
        public ServerEndpointSyncStatus SyncStatus {get; private set; }

        /// <summary>
        /// Gets or sets offline data transfer Possible values include: &#39;on&#39;, &#39;off&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.offlineDataTransfer")]
        public string OfflineDataTransfer {get; set; }

        /// <summary>
        /// Gets offline data transfer storage account resource ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.offlineDataTransferStorageAccountResourceId")]
        public string OfflineDataTransferStorageAccountResourceId {get; private set; }

        /// <summary>
        /// Gets offline data transfer storage account tenant ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.offlineDataTransferStorageAccountTenantId")]
        public string OfflineDataTransferStorageAccountTenantId {get; private set; }

        /// <summary>
        /// Gets or sets offline data transfer share name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.offlineDataTransferShareName")]
        public string OfflineDataTransferShareName {get; set; }

        /// <summary>
        /// Gets cloud tiering status. Only populated if cloud tiering is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cloudTieringStatus")]
        public ServerEndpointCloudTieringStatus CloudTieringStatus {get; private set; }

        /// <summary>
        /// Gets recall status. Only populated if cloud tiering is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.recallStatus")]
        public ServerEndpointRecallStatus RecallStatus {get; private set; }

        /// <summary>
        /// Gets or sets policy for how namespace and files are recalled during FastDr. Possible values include: &#39;NamespaceOnly&#39;, &#39;NamespaceThenModifiedFiles&#39;, &#39;AvoidTieredFiles&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.initialDownloadPolicy")]
        public string InitialDownloadPolicy {get; set; }

        /// <summary>
        /// Gets or sets policy for enabling follow-the-sun business models: link local
        /// cache to cloud behavior to pre-populate before local access. Possible values include: &#39;DownloadNewAndModifiedFiles&#39;, &#39;UpdateLocallyCachedFiles&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.localCacheMode")]
        public string LocalCacheMode {get; set; }

        /// <summary>
        /// Gets or sets policy for how the initial upload sync session is performed. Possible values include: &#39;ServerAuthoritative&#39;, &#39;Merge&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.initialUploadPolicy")]
        public string InitialUploadPolicy {get; set; }

        /// <summary>
        /// Gets server name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverName")]
        public string ServerName {get; private set; }

        /// <summary>
        /// Gets or sets server Endpoint provisioning status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverEndpointProvisioningStatus")]
        public ServerEndpointProvisioningStatus ServerEndpointProvisioningStatus {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.VolumeFreeSpacePercent != null)
            {
                if (this.VolumeFreeSpacePercent > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "VolumeFreeSpacePercent", 100);
                }
                if (this.VolumeFreeSpacePercent < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "VolumeFreeSpacePercent", 0);
                }
            }
            if (this.TierFilesOlderThanDays != null)
            {
                if (this.TierFilesOlderThanDays > 2147483647)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TierFilesOlderThanDays", 2147483647);
                }
                if (this.TierFilesOlderThanDays < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TierFilesOlderThanDays", 0);
                }
            }





            if (this.SyncStatus != null)
            {
                this.SyncStatus.Validate();
            }




            if (this.CloudTieringStatus != null)
            {
                this.CloudTieringStatus.Validate();
            }
            if (this.RecallStatus != null)
            {
                this.RecallStatus.Validate();
            }





        }
    }
}