// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// RegisteredServer Create Properties object.
    /// </summary>
    public partial class RegisteredServerCreateParametersProperties
    {
        /// <summary>
        /// Initializes a new instance of the RegisteredServerCreateParametersProperties class.
        /// </summary>
        public RegisteredServerCreateParametersProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegisteredServerCreateParametersProperties class.
        /// </summary>

        /// <param name="serverCertificate">Registered Server Certificate
        /// </param>

        /// <param name="agentVersion">Registered Server Agent Version
        /// </param>

        /// <param name="serverOSVersion">Registered Server OS Version
        /// </param>

        /// <param name="lastHeartBeat">Registered Server last heart beat
        /// </param>

        /// <param name="serverRole">Registered Server serverRole
        /// </param>

        /// <param name="clusterId">Registered Server clusterId
        /// </param>

        /// <param name="clusterName">Registered Server clusterName
        /// </param>

        /// <param name="serverId">Registered Server serverId
        /// </param>

        /// <param name="friendlyName">Friendly Name
        /// </param>

        /// <param name="applicationId">Server ServicePrincipal Id
        /// </param>

        /// <param name="identity">Apply server with newly discovered ApplicationId if available.
        /// </param>
        public RegisteredServerCreateParametersProperties(string serverCertificate = default(string), string agentVersion = default(string), string serverOSVersion = default(string), string lastHeartBeat = default(string), string serverRole = default(string), string clusterId = default(string), string clusterName = default(string), string serverId = default(string), string friendlyName = default(string), string applicationId = default(string), bool? identity = default(bool?))

        {
            this.ServerCertificate = serverCertificate;
            this.AgentVersion = agentVersion;
            this.ServerOSVersion = serverOSVersion;
            this.LastHeartBeat = lastHeartBeat;
            this.ServerRole = serverRole;
            this.ClusterId = clusterId;
            this.ClusterName = clusterName;
            this.ServerId = serverId;
            this.FriendlyName = friendlyName;
            this.ApplicationId = applicationId;
            this.Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets registered Server Certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverCertificate")]
        public string ServerCertificate {get; set; }

        /// <summary>
        /// Gets or sets registered Server Agent Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion {get; set; }

        /// <summary>
        /// Gets or sets registered Server OS Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverOSVersion")]
        public string ServerOSVersion {get; set; }

        /// <summary>
        /// Gets or sets registered Server last heart beat
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartBeat")]
        public string LastHeartBeat {get; set; }

        /// <summary>
        /// Gets or sets registered Server serverRole
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverRole")]
        public string ServerRole {get; set; }

        /// <summary>
        /// Gets or sets registered Server clusterId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterId")]
        public string ClusterId {get; set; }

        /// <summary>
        /// Gets or sets registered Server clusterName
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterName")]
        public string ClusterName {get; set; }

        /// <summary>
        /// Gets or sets registered Server serverId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverId")]
        public string ServerId {get; set; }

        /// <summary>
        /// Gets or sets friendly Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets server ServicePrincipal Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId {get; set; }

        /// <summary>
        /// Gets or sets apply server with newly discovered ApplicationId if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public bool? Identity {get; set; }
    }
}