// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Background data download activity object
    /// </summary>
    public partial class ServerEndpointBackgroundDataDownloadActivity
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpointBackgroundDataDownloadActivity class.
        /// </summary>
        public ServerEndpointBackgroundDataDownloadActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpointBackgroundDataDownloadActivity class.
        /// </summary>

        /// <param name="timestamp">Timestamp when properties were updated
        /// </param>

        /// <param name="startedTimestamp">Timestamp when the operation started
        /// </param>

        /// <param name="percentProgress">Progress percentage
        /// </param>

        /// <param name="downloadedBytes">Running count of bytes downloaded
        /// </param>
        public ServerEndpointBackgroundDataDownloadActivity(System.DateTime? timestamp = default(System.DateTime?), System.DateTime? startedTimestamp = default(System.DateTime?), int? percentProgress = default(int?), long? downloadedBytes = default(long?))

        {
            this.Timestamp = timestamp;
            this.StartedTimestamp = startedTimestamp;
            this.PercentProgress = percentProgress;
            this.DownloadedBytes = downloadedBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets timestamp when properties were updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp {get; private set; }

        /// <summary>
        /// Gets timestamp when the operation started
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startedTimestamp")]
        public System.DateTime? StartedTimestamp {get; private set; }

        /// <summary>
        /// Gets progress percentage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentProgress")]
        public int? PercentProgress {get; private set; }

        /// <summary>
        /// Gets running count of bytes downloaded
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "downloadedBytes")]
        public long? DownloadedBytes {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PercentProgress != null)
            {
                if (this.PercentProgress > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PercentProgress", 100);
                }
                if (this.PercentProgress < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PercentProgress", 0);
                }
            }
            if (this.DownloadedBytes != null)
            {
                if (this.DownloadedBytes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DownloadedBytes", 0);
                }
            }
        }
    }
}