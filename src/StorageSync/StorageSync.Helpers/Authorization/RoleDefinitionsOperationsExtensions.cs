// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Helper.Authorization
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RoleDefinitionsOperations
    /// </summary>
    public static partial class RoleDefinitionsOperationsExtensions
    {
        /// <summary>
        /// Get role definition by name (GUID).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the role definition.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        public static RoleDefinition Get(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId)
        {
                return ((IRoleDefinitionsOperations)operations).GetAsync(scope, roleDefinitionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get role definition by name (GUID).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the role definition.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleDefinition> GetAsync(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleDefinitionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a role definition by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleId'>
        /// The fully qualified role definition ID. Use the format,
        /// /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
        /// for subscription level role definitions, or
        /// /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
        /// tenant level role definitions.
        /// </param>
        public static RoleDefinition GetById(this IRoleDefinitionsOperations operations, string roleId)
        {
                return ((IRoleDefinitionsOperations)operations).GetByIdAsync(roleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a role definition by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleId'>
        /// The fully qualified role definition ID. Use the format,
        /// /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
        /// for subscription level role definitions, or
        /// /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
        /// tenant level role definitions.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleDefinition> GetByIdAsync(this IRoleDefinitionsOperations operations, string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByIdWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
