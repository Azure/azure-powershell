// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Cloud endpoint change enumeration activity object
    /// </summary>
    public partial class CloudEndpointChangeEnumerationActivity
    {
        /// <summary>
        /// Initializes a new instance of the CloudEndpointChangeEnumerationActivity class.
        /// </summary>
        public CloudEndpointChangeEnumerationActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CloudEndpointChangeEnumerationActivity class.
        /// </summary>

        /// <param name="lastUpdatedTimestamp">Last updated timestamp
        /// </param>

        /// <param name="operationState">Change enumeration operation state
        /// Possible values include: &#39;InitialEnumerationInProgress&#39;,
        /// &#39;EnumerationInProgress&#39;</param>

        /// <param name="statusCode">When non-zero, indicates an issue that is delaying change enumeration
        /// </param>

        /// <param name="startedTimestamp">Timestamp when change enumeration started
        /// </param>

        /// <param name="processedFilesCount">Count of files processed
        /// </param>

        /// <param name="processedDirectoriesCount">Count of directories processed
        /// </param>

        /// <param name="totalFilesCount">Total count of files enumerated
        /// </param>

        /// <param name="totalDirectoriesCount">Total count of directories enumerated
        /// </param>

        /// <param name="totalSizeBytes">Total enumerated size in bytes
        /// </param>

        /// <param name="progressPercent">Progress percentage for change enumeration run, excluding processing of
        /// deletes
        /// </param>

        /// <param name="minutesRemaining">Estimate of time remaining for the enumeration run
        /// </param>

        /// <param name="totalCountsState">Change enumeration total counts state
        /// Possible values include: &#39;Calculating&#39;, &#39;Final&#39;</param>

        /// <param name="deletesProgressPercent">Progress percentage for processing deletes. This is done separately from
        /// the rest of the enumeration run
        /// </param>
        public CloudEndpointChangeEnumerationActivity(System.DateTime? lastUpdatedTimestamp = default(System.DateTime?), string operationState = default(string), int? statusCode = default(int?), System.DateTime? startedTimestamp = default(System.DateTime?), long? processedFilesCount = default(long?), long? processedDirectoriesCount = default(long?), long? totalFilesCount = default(long?), long? totalDirectoriesCount = default(long?), long? totalSizeBytes = default(long?), int? progressPercent = default(int?), int? minutesRemaining = default(int?), string totalCountsState = default(string), int? deletesProgressPercent = default(int?))

        {
            this.LastUpdatedTimestamp = lastUpdatedTimestamp;
            this.OperationState = operationState;
            this.StatusCode = statusCode;
            this.StartedTimestamp = startedTimestamp;
            this.ProcessedFilesCount = processedFilesCount;
            this.ProcessedDirectoriesCount = processedDirectoriesCount;
            this.TotalFilesCount = totalFilesCount;
            this.TotalDirectoriesCount = totalDirectoriesCount;
            this.TotalSizeBytes = totalSizeBytes;
            this.ProgressPercent = progressPercent;
            this.MinutesRemaining = minutesRemaining;
            this.TotalCountsState = totalCountsState;
            this.DeletesProgressPercent = deletesProgressPercent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets last updated timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedTimestamp")]
        public System.DateTime? LastUpdatedTimestamp {get; private set; }

        /// <summary>
        /// Gets change enumeration operation state Possible values include: &#39;InitialEnumerationInProgress&#39;, &#39;EnumerationInProgress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operationState")]
        public string OperationState {get; private set; }

        /// <summary>
        /// Gets when non-zero, indicates an issue that is delaying change enumeration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusCode")]
        public int? StatusCode {get; private set; }

        /// <summary>
        /// Gets timestamp when change enumeration started
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startedTimestamp")]
        public System.DateTime? StartedTimestamp {get; private set; }

        /// <summary>
        /// Gets count of files processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processedFilesCount")]
        public long? ProcessedFilesCount {get; private set; }

        /// <summary>
        /// Gets count of directories processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processedDirectoriesCount")]
        public long? ProcessedDirectoriesCount {get; private set; }

        /// <summary>
        /// Gets total count of files enumerated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalFilesCount")]
        public long? TotalFilesCount {get; private set; }

        /// <summary>
        /// Gets total count of directories enumerated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalDirectoriesCount")]
        public long? TotalDirectoriesCount {get; private set; }

        /// <summary>
        /// Gets total enumerated size in bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalSizeBytes")]
        public long? TotalSizeBytes {get; private set; }

        /// <summary>
        /// Gets progress percentage for change enumeration run, excluding processing
        /// of deletes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "progressPercent")]
        public int? ProgressPercent {get; private set; }

        /// <summary>
        /// Gets estimate of time remaining for the enumeration run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minutesRemaining")]
        public int? MinutesRemaining {get; private set; }

        /// <summary>
        /// Gets change enumeration total counts state Possible values include: &#39;Calculating&#39;, &#39;Final&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalCountsState")]
        public string TotalCountsState {get; private set; }

        /// <summary>
        /// Gets progress percentage for processing deletes. This is done separately
        /// from the rest of the enumeration run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deletesProgressPercent")]
        public int? DeletesProgressPercent {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.ProcessedFilesCount != null)
            {
                if (this.ProcessedFilesCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ProcessedFilesCount", 0);
                }
            }
            if (this.ProcessedDirectoriesCount != null)
            {
                if (this.ProcessedDirectoriesCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ProcessedDirectoriesCount", 0);
                }
            }
            if (this.TotalFilesCount != null)
            {
                if (this.TotalFilesCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalFilesCount", 0);
                }
            }
            if (this.TotalDirectoriesCount != null)
            {
                if (this.TotalDirectoriesCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalDirectoriesCount", 0);
                }
            }
            if (this.TotalSizeBytes != null)
            {
                if (this.TotalSizeBytes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalSizeBytes", 0);
                }
            }
            if (this.ProgressPercent != null)
            {
                if (this.ProgressPercent > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ProgressPercent", 100);
                }
                if (this.ProgressPercent < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ProgressPercent", 0);
                }
            }
            if (this.MinutesRemaining != null)
            {
                if (this.MinutesRemaining < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinutesRemaining", 0);
                }
            }

            if (this.DeletesProgressPercent != null)
            {
                if (this.DeletesProgressPercent > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "DeletesProgressPercent", 100);
                }
                if (this.DeletesProgressPercent < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DeletesProgressPercent", 0);
                }
            }
        }
    }
}