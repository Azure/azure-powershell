// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Server endpoint recall status object.
    /// </summary>
    public partial class ServerEndpointRecallStatus
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpointRecallStatus class.
        /// </summary>
        public ServerEndpointRecallStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpointRecallStatus class.
        /// </summary>

        /// <param name="lastUpdatedTimestamp">Last updated timestamp
        /// </param>

        /// <param name="totalRecallErrorsCount">Total count of recall errors.
        /// </param>

        /// <param name="recallErrors">Array of recall errors
        /// </param>
        public ServerEndpointRecallStatus(System.DateTime? lastUpdatedTimestamp = default(System.DateTime?), long? totalRecallErrorsCount = default(long?), System.Collections.Generic.IList<ServerEndpointRecallError> recallErrors = default(System.Collections.Generic.IList<ServerEndpointRecallError>))

        {
            this.LastUpdatedTimestamp = lastUpdatedTimestamp;
            this.TotalRecallErrorsCount = totalRecallErrorsCount;
            this.RecallErrors = recallErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets last updated timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedTimestamp")]
        public System.DateTime? LastUpdatedTimestamp {get; private set; }

        /// <summary>
        /// Gets total count of recall errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalRecallErrorsCount")]
        public long? TotalRecallErrorsCount {get; private set; }

        /// <summary>
        /// Gets array of recall errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recallErrors")]
        public System.Collections.Generic.IList<ServerEndpointRecallError> RecallErrors {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TotalRecallErrorsCount != null)
            {
                if (this.TotalRecallErrorsCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalRecallErrorsCount", 0);
                }
            }
            if (this.RecallErrors != null)
            {
                foreach (var element in this.RecallErrors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}