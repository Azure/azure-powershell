// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// RegisteredServer Properties object.
    /// </summary>
    public partial class RegisteredServerProperties
    {
        /// <summary>
        /// Initializes a new instance of the RegisteredServerProperties class.
        /// </summary>
        public RegisteredServerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegisteredServerProperties class.
        /// </summary>

        /// <param name="serverCertificate">Registered Server Certificate
        /// </param>

        /// <param name="agentVersion">Registered Server Agent Version
        /// </param>

        /// <param name="agentVersionStatus">Registered Server Agent Version Status
        /// Possible values include: &#39;Ok&#39;, &#39;NearExpiry&#39;, &#39;Expired&#39;, &#39;Blocked&#39;</param>

        /// <param name="agentVersionExpirationDate">Registered Server Agent Version Expiration Date
        /// </param>

        /// <param name="serverOSVersion">Registered Server OS Version
        /// </param>

        /// <param name="serverManagementErrorCode">Registered Server Management Error Code
        /// </param>

        /// <param name="lastHeartBeat">Registered Server last heart beat
        /// </param>

        /// <param name="provisioningState">Registered Server Provisioning State
        /// </param>

        /// <param name="serverRole">Registered Server serverRole
        /// </param>

        /// <param name="clusterId">Registered Server clusterId
        /// </param>

        /// <param name="clusterName">Registered Server clusterName
        /// </param>

        /// <param name="serverId">Registered Server serverId
        /// </param>

        /// <param name="storageSyncServiceUid">Registered Server storageSyncServiceUid
        /// </param>

        /// <param name="lastWorkflowId">Registered Server lastWorkflowId
        /// </param>

        /// <param name="lastOperationName">Resource Last Operation Name
        /// </param>

        /// <param name="discoveryEndpointUri">Resource discoveryEndpointUri
        /// </param>

        /// <param name="resourceLocation">Resource Location
        /// </param>

        /// <param name="serviceLocation">Service Location
        /// </param>

        /// <param name="friendlyName">Friendly Name
        /// </param>

        /// <param name="managementEndpointUri">Management Endpoint Uri
        /// </param>

        /// <param name="monitoringEndpointUri">Telemetry Endpoint Uri
        /// </param>

        /// <param name="monitoringConfiguration">Monitoring Configuration
        /// </param>

        /// <param name="serverName">Server name
        /// </param>

        /// <param name="applicationId">Server Application Id
        /// </param>

        /// <param name="identity">Apply server with newly discovered ApplicationId if available.
        /// </param>

        /// <param name="latestApplicationId">Latest Server Application Id discovered from the server. It is not yet
        /// applied.
        /// </param>

        /// <param name="activeAuthType">Server auth type.
        /// Possible values include: &#39;Certificate&#39;, &#39;ManagedIdentity&#39;</param>
        public RegisteredServerProperties(string serverCertificate = default(string), string agentVersion = default(string), string agentVersionStatus = default(string), System.DateTime? agentVersionExpirationDate = default(System.DateTime?), string serverOSVersion = default(string), int? serverManagementErrorCode = default(int?), string lastHeartBeat = default(string), string provisioningState = default(string), string serverRole = default(string), string clusterId = default(string), string clusterName = default(string), string serverId = default(string), string storageSyncServiceUid = default(string), string lastWorkflowId = default(string), string lastOperationName = default(string), string discoveryEndpointUri = default(string), string resourceLocation = default(string), string serviceLocation = default(string), string friendlyName = default(string), string managementEndpointUri = default(string), string monitoringEndpointUri = default(string), string monitoringConfiguration = default(string), string serverName = default(string), string applicationId = default(string), bool? identity = default(bool?), string latestApplicationId = default(string), string activeAuthType = default(string))

        {
            this.ServerCertificate = serverCertificate;
            this.AgentVersion = agentVersion;
            this.AgentVersionStatus = agentVersionStatus;
            this.AgentVersionExpirationDate = agentVersionExpirationDate;
            this.ServerOSVersion = serverOSVersion;
            this.ServerManagementErrorCode = serverManagementErrorCode;
            this.LastHeartBeat = lastHeartBeat;
            this.ProvisioningState = provisioningState;
            this.ServerRole = serverRole;
            this.ClusterId = clusterId;
            this.ClusterName = clusterName;
            this.ServerId = serverId;
            this.StorageSyncServiceUid = storageSyncServiceUid;
            this.LastWorkflowId = lastWorkflowId;
            this.LastOperationName = lastOperationName;
            this.DiscoveryEndpointUri = discoveryEndpointUri;
            this.ResourceLocation = resourceLocation;
            this.ServiceLocation = serviceLocation;
            this.FriendlyName = friendlyName;
            this.ManagementEndpointUri = managementEndpointUri;
            this.MonitoringEndpointUri = monitoringEndpointUri;
            this.MonitoringConfiguration = monitoringConfiguration;
            this.ServerName = serverName;
            this.ApplicationId = applicationId;
            this.Identity = identity;
            this.LatestApplicationId = latestApplicationId;
            this.ActiveAuthType = activeAuthType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets registered Server Certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverCertificate")]
        public string ServerCertificate {get; set; }

        /// <summary>
        /// Gets or sets registered Server Agent Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion {get; set; }

        /// <summary>
        /// Gets registered Server Agent Version Status Possible values include: &#39;Ok&#39;, &#39;NearExpiry&#39;, &#39;Expired&#39;, &#39;Blocked&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersionStatus")]
        public string AgentVersionStatus {get; private set; }

        /// <summary>
        /// Gets registered Server Agent Version Expiration Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersionExpirationDate")]
        public System.DateTime? AgentVersionExpirationDate {get; private set; }

        /// <summary>
        /// Gets or sets registered Server OS Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverOSVersion")]
        public string ServerOSVersion {get; set; }

        /// <summary>
        /// Gets or sets registered Server Management Error Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverManagementErrorCode")]
        public int? ServerManagementErrorCode {get; set; }

        /// <summary>
        /// Gets or sets registered Server last heart beat
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartBeat")]
        public string LastHeartBeat {get; set; }

        /// <summary>
        /// Gets or sets registered Server Provisioning State
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets registered Server serverRole
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverRole")]
        public string ServerRole {get; set; }

        /// <summary>
        /// Gets or sets registered Server clusterId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterId")]
        public string ClusterId {get; set; }

        /// <summary>
        /// Gets or sets registered Server clusterName
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterName")]
        public string ClusterName {get; set; }

        /// <summary>
        /// Gets or sets registered Server serverId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverId")]
        public string ServerId {get; set; }

        /// <summary>
        /// Gets or sets registered Server storageSyncServiceUid
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageSyncServiceUid")]
        public string StorageSyncServiceUid {get; set; }

        /// <summary>
        /// Gets or sets registered Server lastWorkflowId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastWorkflowId")]
        public string LastWorkflowId {get; set; }

        /// <summary>
        /// Gets or sets resource Last Operation Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastOperationName")]
        public string LastOperationName {get; set; }

        /// <summary>
        /// Gets or sets resource discoveryEndpointUri
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "discoveryEndpointUri")]
        public string DiscoveryEndpointUri {get; set; }

        /// <summary>
        /// Gets or sets resource Location
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceLocation")]
        public string ResourceLocation {get; set; }

        /// <summary>
        /// Gets or sets service Location
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceLocation")]
        public string ServiceLocation {get; set; }

        /// <summary>
        /// Gets or sets friendly Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets management Endpoint Uri
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managementEndpointUri")]
        public string ManagementEndpointUri {get; set; }

        /// <summary>
        /// Gets or sets telemetry Endpoint Uri
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitoringEndpointUri")]
        public string MonitoringEndpointUri {get; set; }

        /// <summary>
        /// Gets or sets monitoring Configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitoringConfiguration")]
        public string MonitoringConfiguration {get; set; }

        /// <summary>
        /// Gets server name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; private set; }

        /// <summary>
        /// Gets or sets server Application Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId {get; set; }

        /// <summary>
        /// Gets apply server with newly discovered ApplicationId if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public bool? Identity {get; private set; }

        /// <summary>
        /// Gets or sets latest Server Application Id discovered from the server. It is
        /// not yet applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "latestApplicationId")]
        public string LatestApplicationId {get; set; }

        /// <summary>
        /// Gets server auth type. Possible values include: &#39;Certificate&#39;, &#39;ManagedIdentity&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeAuthType")]
        public string ActiveAuthType {get; private set; }
    }
}