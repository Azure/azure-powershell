// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using System.Linq;

    /// <summary>
    /// Server Endpoint sync status
    /// </summary>
    public partial class ServerEndpointSyncStatus
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpointSyncStatus class.
        /// </summary>
        public ServerEndpointSyncStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpointSyncStatus class.
        /// </summary>

        /// <param name="downloadHealth">Download Health Status.
        /// Possible values include: &#39;Unavailable&#39;, &#39;Healthy&#39;, &#39;Error&#39;</param>

        /// <param name="uploadHealth">Upload Health Status.
        /// Possible values include: &#39;Unavailable&#39;, &#39;Healthy&#39;, &#39;Error&#39;</param>

        /// <param name="combinedHealth">Combined Health Status.
        /// Possible values include: &#39;Unavailable&#39;, &#39;Healthy&#39;, &#39;Error&#39;</param>

        /// <param name="syncActivity">Sync activity
        /// Possible values include: &#39;Upload&#39;, &#39;Download&#39;, &#39;UploadAndDownload&#39;</param>

        /// <param name="totalPersistentFilesNotSyncingCount">Total count of persistent files not syncing (combined upload + download).
        /// </param>

        /// <param name="lastUpdatedTimestamp">Last Updated Timestamp
        /// </param>

        /// <param name="uploadStatus">Upload Status
        /// </param>

        /// <param name="downloadStatus">Download Status
        /// </param>

        /// <param name="uploadActivity">Upload sync activity
        /// </param>

        /// <param name="downloadActivity">Download sync activity
        /// </param>

        /// <param name="offlineDataTransferStatus">Offline Data Transfer State
        /// Possible values include: &#39;InProgress&#39;, &#39;Stopping&#39;, &#39;NotRunning&#39;, &#39;Complete&#39;</param>

        /// <param name="backgroundDataDownloadActivity">Background data download activity
        /// </param>
        public ServerEndpointSyncStatus(string downloadHealth = default(string), string uploadHealth = default(string), string combinedHealth = default(string), string syncActivity = default(string), long? totalPersistentFilesNotSyncingCount = default(long?), System.DateTime? lastUpdatedTimestamp = default(System.DateTime?), ServerEndpointSyncSessionStatus uploadStatus = default(ServerEndpointSyncSessionStatus), ServerEndpointSyncSessionStatus downloadStatus = default(ServerEndpointSyncSessionStatus), ServerEndpointSyncActivityStatus uploadActivity = default(ServerEndpointSyncActivityStatus), ServerEndpointSyncActivityStatus downloadActivity = default(ServerEndpointSyncActivityStatus), string offlineDataTransferStatus = default(string), ServerEndpointBackgroundDataDownloadActivity backgroundDataDownloadActivity = default(ServerEndpointBackgroundDataDownloadActivity))

        {
            this.DownloadHealth = downloadHealth;
            this.UploadHealth = uploadHealth;
            this.CombinedHealth = combinedHealth;
            this.SyncActivity = syncActivity;
            this.TotalPersistentFilesNotSyncingCount = totalPersistentFilesNotSyncingCount;
            this.LastUpdatedTimestamp = lastUpdatedTimestamp;
            this.UploadStatus = uploadStatus;
            this.DownloadStatus = downloadStatus;
            this.UploadActivity = uploadActivity;
            this.DownloadActivity = downloadActivity;
            this.OfflineDataTransferStatus = offlineDataTransferStatus;
            this.BackgroundDataDownloadActivity = backgroundDataDownloadActivity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets download Health Status. Possible values include: &#39;Unavailable&#39;, &#39;Healthy&#39;, &#39;Error&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "downloadHealth")]
        public string DownloadHealth {get; private set; }

        /// <summary>
        /// Gets upload Health Status. Possible values include: &#39;Unavailable&#39;, &#39;Healthy&#39;, &#39;Error&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadHealth")]
        public string UploadHealth {get; private set; }

        /// <summary>
        /// Gets combined Health Status. Possible values include: &#39;Unavailable&#39;, &#39;Healthy&#39;, &#39;Error&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "combinedHealth")]
        public string CombinedHealth {get; private set; }

        /// <summary>
        /// Gets sync activity Possible values include: &#39;Upload&#39;, &#39;Download&#39;, &#39;UploadAndDownload&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncActivity")]
        public string SyncActivity {get; private set; }

        /// <summary>
        /// Gets total count of persistent files not syncing (combined upload +
        /// download).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalPersistentFilesNotSyncingCount")]
        public long? TotalPersistentFilesNotSyncingCount {get; private set; }

        /// <summary>
        /// Gets last Updated Timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedTimestamp")]
        public System.DateTime? LastUpdatedTimestamp {get; private set; }

        /// <summary>
        /// Gets upload Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadStatus")]
        public ServerEndpointSyncSessionStatus UploadStatus {get; private set; }

        /// <summary>
        /// Gets download Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "downloadStatus")]
        public ServerEndpointSyncSessionStatus DownloadStatus {get; private set; }

        /// <summary>
        /// Gets upload sync activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadActivity")]
        public ServerEndpointSyncActivityStatus UploadActivity {get; private set; }

        /// <summary>
        /// Gets download sync activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "downloadActivity")]
        public ServerEndpointSyncActivityStatus DownloadActivity {get; private set; }

        /// <summary>
        /// Gets offline Data Transfer State Possible values include: &#39;InProgress&#39;, &#39;Stopping&#39;, &#39;NotRunning&#39;, &#39;Complete&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "offlineDataTransferStatus")]
        public string OfflineDataTransferStatus {get; private set; }

        /// <summary>
        /// Gets background data download activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backgroundDataDownloadActivity")]
        public ServerEndpointBackgroundDataDownloadActivity BackgroundDataDownloadActivity {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.TotalPersistentFilesNotSyncingCount != null)
            {
                if (this.TotalPersistentFilesNotSyncingCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalPersistentFilesNotSyncingCount", 0);
                }
            }
            if (this.UploadStatus != null)
            {
                this.UploadStatus.Validate();
            }
            if (this.DownloadStatus != null)
            {
                this.DownloadStatus.Validate();
            }
            if (this.UploadActivity != null)
            {
                this.UploadActivity.Validate();
            }
            if (this.DownloadActivity != null)
            {
                this.DownloadActivity.Validate();
            }

            if (this.BackgroundDataDownloadActivity != null)
            {
                this.BackgroundDataDownloadActivity.Validate();
            }
        }
    }
}