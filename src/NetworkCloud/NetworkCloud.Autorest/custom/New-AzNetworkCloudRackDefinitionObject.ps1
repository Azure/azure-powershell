
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for RackDefinition.
.Description
Create an in-memory object for RackDefinition.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.RackDefinition
.Link
https://learn.microsoft.com/powershell/module/Az.NetworkCloud/new-aznetworkcloudrackdefinitionobject
#>
function New-AzNetworkCloudRackDefinitionObject {
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.ModelCmdletAttribute()]
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.RackDefinition')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The zone name used for this rack when created. Availability zones are used for workload placement.")]
        [string]
        $AvailabilityZone,
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.ParameterBreakingChange("BareMetalMachineConfigurationData", "15.0.0", "2.0.0", "2025/11/03", OldParamaterType="Array", NewParameterType="List")]
        [Parameter(HelpMessage="The unordered list of bare metal machine configuration.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.IBareMetalMachineConfigurationData[]]
        $BareMetalMachineConfigurationData,
        [Parameter(Mandatory, HelpMessage="The resource ID of the network rack that matches this rack definition.")]
        [string]
        $NetworkRackId,
        [Parameter(HelpMessage="The free-form description of the rack's location.")]
        [string]
        $RackLocation,
        [Parameter(Mandatory, HelpMessage="The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.")]
        [string]
        $RackSerialNumber,
        [Parameter(Mandatory, HelpMessage="The resource ID of the sku for the rack being added.")]
        [string]
        $RackSkuId,
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.ParameterBreakingChange("StorageApplianceConfigurationData", "15.0.0", "2.0.0", "2025/11/03", OldParamaterType="Array", NewParameterType="List")]
        [Parameter(HelpMessage="The list of storage appliance configuration data for this rack.")]
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.IStorageApplianceConfigurationData[]]
        $StorageApplianceConfigurationData
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.RackDefinition]::New()

        if ($PSBoundParameters.ContainsKey('AvailabilityZone')) {
            $Object.AvailabilityZone = $AvailabilityZone
        }
        if ($PSBoundParameters.ContainsKey('BareMetalMachineConfigurationData')) {
            $Object.BareMetalMachineConfigurationData = $BareMetalMachineConfigurationData
        }
        if ($PSBoundParameters.ContainsKey('NetworkRackId')) {
            $Object.NetworkRackId = $NetworkRackId
        }
        if ($PSBoundParameters.ContainsKey('RackLocation')) {
            $Object.RackLocation = $RackLocation
        }
        if ($PSBoundParameters.ContainsKey('RackSerialNumber')) {
            $Object.RackSerialNumber = $RackSerialNumber
        }
        if ($PSBoundParameters.ContainsKey('RackSkuId')) {
            $Object.RackSkuId = $RackSkuId
        }
        if ($PSBoundParameters.ContainsKey('StorageApplianceConfigurationData')) {
            $Object.StorageApplianceConfigurationData = $StorageApplianceConfigurationData
        }
        return $Object
    }
}

