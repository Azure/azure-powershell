
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for ServiceLoadBalancerBgpPeer.
.Description
Create an in-memory object for ServiceLoadBalancerBgpPeer.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ServiceLoadBalancerBgpPeer
.Link
https://learn.microsoft.com/powershell/module/Az.NetworkCloud/new-AzNetworkCloudServiceLoadBalancerBgpPeerObject
#>
function New-AzNetworkCloudServiceLoadBalancerBgpPeerObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ServiceLoadBalancerBgpPeer')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The indicator of BFD enablement for this BgpPeer.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.BfdEnabled])]
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.BfdEnabled]
        $BfdEnabled,
        [Parameter(HelpMessage="The indicator to enable multi-hop peering support.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.BgpMultiHop])]
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.BgpMultiHop]
        $BgpMultiHop,
        [Parameter(HelpMessage="The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.")]
        [string]
        $HoldTime,
        [Parameter(HelpMessage="The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.")]
        [string]
        $KeepAliveTime,
        [Parameter(HelpMessage="The autonomous system number used for the local end of the BGP session.")]
        [long]
        $MyAsn,
        [Parameter(Mandatory, HelpMessage="The name used to identify this BGP peer for association with a BGP advertisement.")]
        [string]
        $Name,
        [Parameter(HelpMessage="The authentication password for routers enforcing TCP MD5 authenticated sessions.")]
        [string]
        $Password,
        [Parameter(Mandatory, HelpMessage="The IPv4 or IPv6 address used to connect this BGP session.")]
        [string]
        $PeerAddress,
        [Parameter(Mandatory, HelpMessage="The autonomous system number expected from the remote end of the BGP session.")]
        [long]
        $PeerAsn,
        [Parameter(HelpMessage="The port used to connect this BGP session.")]
        [long]
        $PeerPort
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ServiceLoadBalancerBgpPeer]::New()

        if ($PSBoundParameters.ContainsKey('BfdEnabled')) {
            $Object.BfdEnabled = $BfdEnabled
        }
        if ($PSBoundParameters.ContainsKey('BgpMultiHop')) {
            $Object.BgpMultiHop = $BgpMultiHop
        }
        if ($PSBoundParameters.ContainsKey('HoldTime')) {
            $Object.HoldTime = $HoldTime
        }
        if ($PSBoundParameters.ContainsKey('KeepAliveTime')) {
            $Object.KeepAliveTime = $KeepAliveTime
        }
        if ($PSBoundParameters.ContainsKey('MyAsn')) {
            $Object.MyAsn = $MyAsn
        }
        if ($PSBoundParameters.ContainsKey('Name')) {
            $Object.Name = $Name
        }
        if ($PSBoundParameters.ContainsKey('Password')) {
            $Object.Password = $Password
        }
        if ($PSBoundParameters.ContainsKey('PeerAddress')) {
            $Object.PeerAddress = $PeerAddress
        }
        if ($PSBoundParameters.ContainsKey('PeerAsn')) {
            $Object.PeerAsn = $PeerAsn
        }
        if ($PSBoundParameters.ContainsKey('PeerPort')) {
            $Object.PeerPort = $PeerPort
        }
        return $Object
    }
}

