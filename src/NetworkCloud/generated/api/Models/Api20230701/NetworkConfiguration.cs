// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Extensions;

    /// <summary>
    /// NetworkConfiguration specifies the Kubernetes cluster network related configuration.
    /// </summary>
    public partial class NetworkConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.INetworkConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.INetworkConfigurationInternal
    {

        /// <summary>Backing field for <see cref="AttachedNetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfiguration _attachedNetworkConfiguration;

        /// <summary>
        /// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfiguration AttachedNetworkConfiguration { get => (this._attachedNetworkConfiguration = this._attachedNetworkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.AttachedNetworkConfiguration()); set => this._attachedNetworkConfiguration = value; }

        /// <summary>The list of Layer 2 Networks and related configuration for attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL2NetworkAttachmentConfiguration[] AttachedNetworkConfigurationL2Network { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfigurationInternal)AttachedNetworkConfiguration).L2Network; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfigurationInternal)AttachedNetworkConfiguration).L2Network = value ?? null /* arrayOf */; }

        /// <summary>The list of Layer 3 Networks and related configuration for attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL3NetworkAttachmentConfiguration[] AttachedNetworkConfigurationL3Network { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfigurationInternal)AttachedNetworkConfiguration).L3Network; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfigurationInternal)AttachedNetworkConfiguration).L3Network = value ?? null /* arrayOf */; }

        /// <summary>The list of Trunked Networks and related configuration for attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ITrunkedNetworkAttachmentConfiguration[] AttachedNetworkConfigurationTrunkedNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfigurationInternal)AttachedNetworkConfiguration).TrunkedNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfigurationInternal)AttachedNetworkConfiguration).TrunkedNetwork = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="BgpServiceLoadBalancerConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfiguration _bgpServiceLoadBalancerConfiguration;

        /// <summary>The configuration of the BGP service load balancer for this Kubernetes cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfiguration BgpServiceLoadBalancerConfiguration { get => (this._bgpServiceLoadBalancerConfiguration = this._bgpServiceLoadBalancerConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.BgpServiceLoadBalancerConfiguration()); set => this._bgpServiceLoadBalancerConfiguration = value; }

        /// <summary>
        /// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpAdvertisement[] BgpServiceLoadBalancerConfigurationBgpAdvertisement { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).BgpAdvertisement; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).BgpAdvertisement = value ?? null /* arrayOf */; }

        /// <summary>
        /// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IServiceLoadBalancerBgpPeer[] BgpServiceLoadBalancerConfigurationBgpPeer { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).BgpPeer; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).BgpPeer = value ?? null /* arrayOf */; }

        /// <summary>The indicator to specify if the load balancer peers with the network fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled? BgpServiceLoadBalancerConfigurationFabricPeeringEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).FabricPeeringEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).FabricPeeringEnabled = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled)""); }

        /// <summary>
        /// The list of pools of IP addresses that can be allocated to Load Balancer services.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IIPAddressPool[] BgpServiceLoadBalancerConfigurationIPAddressPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).IPAddressPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfigurationInternal)BgpServiceLoadBalancerConfiguration).IPAddressPool = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="CloudServicesNetworkId" /> property.</summary>
        private string _cloudServicesNetworkId;

        /// <summary>The resource ID of the associated Cloud Services network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string CloudServicesNetworkId { get => this._cloudServicesNetworkId; set => this._cloudServicesNetworkId = value; }

        /// <summary>Backing field for <see cref="CniNetworkId" /> property.</summary>
        private string _cniNetworkId;

        /// <summary>
        /// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string CniNetworkId { get => this._cniNetworkId; set => this._cniNetworkId = value; }

        /// <summary>Backing field for <see cref="DnsServiceIP" /> property.</summary>
        private string _dnsServiceIP;

        /// <summary>
        /// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified
        /// in service CIDR.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string DnsServiceIP { get => this._dnsServiceIP; set => this._dnsServiceIP = value; }

        /// <summary>Internal Acessors for AttachedNetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.INetworkConfigurationInternal.AttachedNetworkConfiguration { get => (this._attachedNetworkConfiguration = this._attachedNetworkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.AttachedNetworkConfiguration()); set { {_attachedNetworkConfiguration = value;} } }

        /// <summary>Internal Acessors for BgpServiceLoadBalancerConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfiguration Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.INetworkConfigurationInternal.BgpServiceLoadBalancerConfiguration { get => (this._bgpServiceLoadBalancerConfiguration = this._bgpServiceLoadBalancerConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.BgpServiceLoadBalancerConfiguration()); set { {_bgpServiceLoadBalancerConfiguration = value;} } }

        /// <summary>Backing field for <see cref="PodCidr" /> property.</summary>
        private string[] _podCidr;

        /// <summary>
        /// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs,
        /// one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string[] PodCidr { get => this._podCidr; set => this._podCidr = value; }

        /// <summary>Backing field for <see cref="ServiceCidr" /> property.</summary>
        private string[] _serviceCidr;

        /// <summary>
        /// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two
        /// CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string[] ServiceCidr { get => this._serviceCidr; set => this._serviceCidr = value; }

        /// <summary>Creates an new <see cref="NetworkConfiguration" /> instance.</summary>
        public NetworkConfiguration()
        {

        }
    }
    /// NetworkConfiguration specifies the Kubernetes cluster network related configuration.
    public partial interface INetworkConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.IJsonSerializable
    {
        /// <summary>The list of Layer 2 Networks and related configuration for attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Layer 2 Networks and related configuration for attachment.",
        SerializedName = @"l2Networks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL2NetworkAttachmentConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL2NetworkAttachmentConfiguration[] AttachedNetworkConfigurationL2Network { get; set; }
        /// <summary>The list of Layer 3 Networks and related configuration for attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Layer 3 Networks and related configuration for attachment.",
        SerializedName = @"l3Networks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL3NetworkAttachmentConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL3NetworkAttachmentConfiguration[] AttachedNetworkConfigurationL3Network { get; set; }
        /// <summary>The list of Trunked Networks and related configuration for attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Trunked Networks and related configuration for attachment.",
        SerializedName = @"trunkedNetworks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ITrunkedNetworkAttachmentConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ITrunkedNetworkAttachmentConfiguration[] AttachedNetworkConfigurationTrunkedNetwork { get; set; }
        /// <summary>
        /// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The association of IP address pools to the communities and peers, allowing for announcement of IPs.",
        SerializedName = @"bgpAdvertisements",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpAdvertisement) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpAdvertisement[] BgpServiceLoadBalancerConfigurationBgpAdvertisement { get; set; }
        /// <summary>
        /// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.",
        SerializedName = @"bgpPeers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IServiceLoadBalancerBgpPeer) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IServiceLoadBalancerBgpPeer[] BgpServiceLoadBalancerConfigurationBgpPeer { get; set; }
        /// <summary>The indicator to specify if the load balancer peers with the network fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The indicator to specify if the load balancer peers with the network fabric.",
        SerializedName = @"fabricPeeringEnabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled? BgpServiceLoadBalancerConfigurationFabricPeeringEnabled { get; set; }
        /// <summary>
        /// The list of pools of IP addresses that can be allocated to Load Balancer services.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of pools of IP addresses that can be allocated to Load Balancer services.",
        SerializedName = @"ipAddressPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IIPAddressPool) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IIPAddressPool[] BgpServiceLoadBalancerConfigurationIPAddressPool { get; set; }
        /// <summary>The resource ID of the associated Cloud Services network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The resource ID of the associated Cloud Services network.",
        SerializedName = @"cloudServicesNetworkId",
        PossibleTypes = new [] { typeof(string) })]
        string CloudServicesNetworkId { get; set; }
        /// <summary>
        /// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.",
        SerializedName = @"cniNetworkId",
        PossibleTypes = new [] { typeof(string) })]
        string CniNetworkId { get; set; }
        /// <summary>
        /// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified
        /// in service CIDR.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.",
        SerializedName = @"dnsServiceIp",
        PossibleTypes = new [] { typeof(string) })]
        string DnsServiceIP { get; set; }
        /// <summary>
        /// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs,
        /// one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.",
        SerializedName = @"podCidrs",
        PossibleTypes = new [] { typeof(string) })]
        string[] PodCidr { get; set; }
        /// <summary>
        /// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two
        /// CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.",
        SerializedName = @"serviceCidrs",
        PossibleTypes = new [] { typeof(string) })]
        string[] ServiceCidr { get; set; }

    }
    /// NetworkConfiguration specifies the Kubernetes cluster network related configuration.
    internal partial interface INetworkConfigurationInternal

    {
        /// <summary>
        /// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IAttachedNetworkConfiguration AttachedNetworkConfiguration { get; set; }
        /// <summary>The list of Layer 2 Networks and related configuration for attachment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL2NetworkAttachmentConfiguration[] AttachedNetworkConfigurationL2Network { get; set; }
        /// <summary>The list of Layer 3 Networks and related configuration for attachment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL3NetworkAttachmentConfiguration[] AttachedNetworkConfigurationL3Network { get; set; }
        /// <summary>The list of Trunked Networks and related configuration for attachment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ITrunkedNetworkAttachmentConfiguration[] AttachedNetworkConfigurationTrunkedNetwork { get; set; }
        /// <summary>The configuration of the BGP service load balancer for this Kubernetes cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpServiceLoadBalancerConfiguration BgpServiceLoadBalancerConfiguration { get; set; }
        /// <summary>
        /// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpAdvertisement[] BgpServiceLoadBalancerConfigurationBgpAdvertisement { get; set; }
        /// <summary>
        /// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IServiceLoadBalancerBgpPeer[] BgpServiceLoadBalancerConfigurationBgpPeer { get; set; }
        /// <summary>The indicator to specify if the load balancer peers with the network fabric.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled? BgpServiceLoadBalancerConfigurationFabricPeeringEnabled { get; set; }
        /// <summary>
        /// The list of pools of IP addresses that can be allocated to Load Balancer services.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IIPAddressPool[] BgpServiceLoadBalancerConfigurationIPAddressPool { get; set; }
        /// <summary>The resource ID of the associated Cloud Services network.</summary>
        string CloudServicesNetworkId { get; set; }
        /// <summary>
        /// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
        /// </summary>
        string CniNetworkId { get; set; }
        /// <summary>
        /// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified
        /// in service CIDR.
        /// </summary>
        string DnsServiceIP { get; set; }
        /// <summary>
        /// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs,
        /// one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        string[] PodCidr { get; set; }
        /// <summary>
        /// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two
        /// CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        string[] ServiceCidr { get; set; }

    }
}