// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Extensions;

    /// <summary>Node denotes the list of node that utilizes configuration.</summary>
    public partial class Node :
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INode,
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INodeInternal
    {

        /// <summary>Backing field for <see cref="BareMetalMachineId" /> property.</summary>
        private string _bareMetalMachineId;

        /// <summary>The resource ID of the bare metal machine that hosts this node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string BareMetalMachineId { get => this._bareMetalMachineId; }

        /// <summary>Backing field for <see cref="ImageId" /> property.</summary>
        private string _imageId;

        /// <summary>The machine image last used to deploy this node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string ImageId { get => this._imageId; }

        /// <summary>Internal Acessors for BareMetalMachineId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INodeInternal.BareMetalMachineId { get => this._bareMetalMachineId; set { {_bareMetalMachineId = value;} } }

        /// <summary>Internal Acessors for ImageId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INodeInternal.ImageId { get => this._imageId; set { {_imageId = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INodeInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for NetworkAttachment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INetworkAttachment[] Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INodeInternal.NetworkAttachment { get => this._networkAttachment; set { {_networkAttachment = value;} } }

        /// <summary>Internal Acessors for PowerState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.HybridAksClusterMachinePowerState? Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INodeInternal.PowerState { get => this._powerState; set { {_powerState = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of this node, as realized in the Hybrid AKS cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>Backing field for <see cref="NetworkAttachment" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INetworkAttachment[] _networkAttachment;

        /// <summary>The list of network attachments to the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INetworkAttachment[] NetworkAttachment { get => this._networkAttachment; }

        /// <summary>Backing field for <see cref="PowerState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.HybridAksClusterMachinePowerState? _powerState;

        /// <summary>The power state (On | Off) of the node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.HybridAksClusterMachinePowerState? PowerState { get => this._powerState; }

        /// <summary>Creates an new <see cref="Node" /> instance.</summary>
        public Node()
        {

        }
    }
    /// Node denotes the list of node that utilizes configuration.
    public partial interface INode :
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.IJsonSerializable
    {
        /// <summary>The resource ID of the bare metal machine that hosts this node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The resource ID of the bare metal machine that hosts this node.",
        SerializedName = @"bareMetalMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string BareMetalMachineId { get;  }
        /// <summary>The machine image last used to deploy this node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The machine image last used to deploy this node.",
        SerializedName = @"imageId",
        PossibleTypes = new [] { typeof(string) })]
        string ImageId { get;  }
        /// <summary>The name of this node, as realized in the Hybrid AKS cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The name of this node, as realized in the Hybrid AKS cluster.",
        SerializedName = @"nodeName",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>The list of network attachments to the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of network attachments to the virtual machine.",
        SerializedName = @"networkAttachments",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INetworkAttachment) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INetworkAttachment[] NetworkAttachment { get;  }
        /// <summary>The power state (On | Off) of the node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The power state (On | Off) of the node.",
        SerializedName = @"powerState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.HybridAksClusterMachinePowerState) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.HybridAksClusterMachinePowerState? PowerState { get;  }

    }
    /// Node denotes the list of node that utilizes configuration.
    internal partial interface INodeInternal

    {
        /// <summary>The resource ID of the bare metal machine that hosts this node.</summary>
        string BareMetalMachineId { get; set; }
        /// <summary>The machine image last used to deploy this node.</summary>
        string ImageId { get; set; }
        /// <summary>The name of this node, as realized in the Hybrid AKS cluster.</summary>
        string Name { get; set; }
        /// <summary>The list of network attachments to the virtual machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api202212Preview.INetworkAttachment[] NetworkAttachment { get; set; }
        /// <summary>The power state (On | Off) of the node.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.HybridAksClusterMachinePowerState? PowerState { get; set; }

    }
}