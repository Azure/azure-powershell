// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PolicyStatesOperations
    /// </summary>
    public static partial class PolicyStatesOperationsExtensions
    {
        /// <summary>
        /// Queries policy states for the resources under the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='managementGroupName'>
        /// Management group name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForManagementGroup(this IPolicyStatesOperations operations, string policyStatesResource, string managementGroupName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForManagementGroupAsync(policyStatesResource, managementGroupName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resources under the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='managementGroupName'>
        /// Management group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForManagementGroupAsync(this IPolicyStatesOperations operations, string policyStatesResource, string managementGroupName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForManagementGroupWithHttpMessagesAsync(policyStatesResource, managementGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the resources under the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='managementGroupName'>
        /// Management group name.
        /// </param>
        public static SummarizeResults SummarizeForManagementGroup(this IPolicyStatesOperations operations, string managementGroupName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForManagementGroupAsync(managementGroupName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the resources under the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='managementGroupName'>
        /// Management group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForManagementGroupAsync(this IPolicyStatesOperations operations, string managementGroupName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForManagementGroupWithHttpMessagesAsync(managementGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resources under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForSubscription(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForSubscriptionAsync(policyStatesResource, subscriptionId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resources under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForSubscriptionAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForSubscriptionWithHttpMessagesAsync(policyStatesResource, subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the resources under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        public static SummarizeResults SummarizeForSubscription(this IPolicyStatesOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForSubscriptionAsync(subscriptionId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the resources under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForSubscriptionAsync(this IPolicyStatesOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForSubscriptionWithHttpMessagesAsync(subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resources under the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForResourceGroup(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForResourceGroupAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resources under the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForResourceGroupAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForResourceGroupWithHttpMessagesAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the resources under the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        public static SummarizeResults SummarizeForResourceGroup(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForResourceGroupAsync(subscriptionId, resourceGroupName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the resources under the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForResourceGroupAsync(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForResource(this IPolicyStatesOperations operations, string policyStatesResource, string resourceId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForResourceAsync(policyStatesResource, resourceId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForResourceAsync(this IPolicyStatesOperations operations, string policyStatesResource, string resourceId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForResourceWithHttpMessagesAsync(policyStatesResource, resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        public static SummarizeResults SummarizeForResource(this IPolicyStatesOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForResourceAsync(this IPolicyStatesOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the
        /// subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        public static void TriggerSubscriptionEvaluation(this IPolicyStatesOperations operations, string subscriptionId)
        {
                ((IPolicyStatesOperations)operations).TriggerSubscriptionEvaluationAsync(subscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the
        /// subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task TriggerSubscriptionEvaluationAsync(this IPolicyStatesOperations operations, string subscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.TriggerSubscriptionEvaluationWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        public static void TriggerResourceGroupEvaluation(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName)
        {
                ((IPolicyStatesOperations)operations).TriggerResourceGroupEvaluationAsync(subscriptionId, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task TriggerResourceGroupEvaluationAsync(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.TriggerResourceGroupEvaluationWithHttpMessagesAsync(subscriptionId, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Queries policy states for the subscription level policy set definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// Policy set definition name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForPolicySetDefinition(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForPolicySetDefinitionAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the subscription level policy set definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// Policy set definition name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForPolicySetDefinitionAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForPolicySetDefinitionWithHttpMessagesAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the subscription level policy set definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// Policy set definition name.
        /// </param>
        public static SummarizeResults SummarizeForPolicySetDefinition(this IPolicyStatesOperations operations, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForPolicySetDefinitionAsync(subscriptionId, policySetDefinitionName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the subscription level policy set definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// Policy set definition name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForPolicySetDefinitionAsync(this IPolicyStatesOperations operations, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForPolicySetDefinitionWithHttpMessagesAsync(subscriptionId, policySetDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the subscription level policy definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyDefinitionName'>
        /// Policy definition name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForPolicyDefinition(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForPolicyDefinitionAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the subscription level policy definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyDefinitionName'>
        /// Policy definition name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForPolicyDefinitionAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForPolicyDefinitionWithHttpMessagesAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the subscription level policy definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyDefinitionName'>
        /// Policy definition name.
        /// </param>
        public static SummarizeResults SummarizeForPolicyDefinition(this IPolicyStatesOperations operations, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForPolicyDefinitionAsync(subscriptionId, policyDefinitionName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the subscription level policy definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyDefinitionName'>
        /// Policy definition name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForPolicyDefinitionAsync(this IPolicyStatesOperations operations, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForPolicyDefinitionWithHttpMessagesAsync(subscriptionId, policyDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the subscription level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForSubscriptionLevelPolicyAssignment(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForSubscriptionLevelPolicyAssignmentAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the subscription level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForSubscriptionLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForSubscriptionLevelPolicyAssignmentWithHttpMessagesAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the subscription level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        public static SummarizeResults SummarizeForSubscriptionLevelPolicyAssignment(this IPolicyStatesOperations operations, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForSubscriptionLevelPolicyAssignmentAsync(subscriptionId, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the subscription level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForSubscriptionLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForSubscriptionLevelPolicyAssignmentWithHttpMessagesAsync(subscriptionId, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resource group level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForResourceGroupLevelPolicyAssignment(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForResourceGroupLevelPolicyAssignmentAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resource group level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='policyStatesResource'>
        /// The virtual resource under PolicyStates resource type. In a given time
        /// range, &#39;latest&#39; represents the latest policy state(s), whereas &#39;default&#39;
        /// represents all policy state(s).
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForResourceGroupLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForResourceGroupLevelPolicyAssignmentWithHttpMessagesAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Summarizes policy states for the resource group level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        public static SummarizeResults SummarizeForResourceGroupLevelPolicyAssignment(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IPolicyStatesOperations)operations).SummarizeForResourceGroupLevelPolicyAssignmentAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Summarizes policy states for the resource group level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='policyAssignmentName'>
        /// Policy assignment name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SummarizeResults> SummarizeForResourceGroupLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SummarizeForResourceGroupLevelPolicyAssignmentWithHttpMessagesAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the
        /// subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        public static void BeginTriggerSubscriptionEvaluation(this IPolicyStatesOperations operations, string subscriptionId)
        {
                ((IPolicyStatesOperations)operations).BeginTriggerSubscriptionEvaluationAsync(subscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the
        /// subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginTriggerSubscriptionEvaluationAsync(this IPolicyStatesOperations operations, string subscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginTriggerSubscriptionEvaluationWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        public static void BeginTriggerResourceGroupEvaluation(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName)
        {
                ((IPolicyStatesOperations)operations).BeginTriggerResourceGroupEvaluationAsync(subscriptionId, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Triggers a policy evaluation scan for all the resources under the resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Microsoft Azure subscription ID.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginTriggerResourceGroupEvaluationAsync(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginTriggerResourceGroupEvaluationWithHttpMessagesAsync(subscriptionId, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Queries policy states for the resources under the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForManagementGroupNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resources under the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForManagementGroupNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resources under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForSubscriptionNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resources under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForSubscriptionNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resources under the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForResourceGroupNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resources under the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForResourceGroupNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForResourceNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForResourceNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the subscription level policy set definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForPolicySetDefinitionNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForPolicySetDefinitionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the subscription level policy set definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForPolicySetDefinitionNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForPolicySetDefinitionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the subscription level policy definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForPolicyDefinitionNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForPolicyDefinitionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the subscription level policy definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForPolicyDefinitionNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForPolicyDefinitionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the subscription level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForSubscriptionLevelPolicyAssignmentNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForSubscriptionLevelPolicyAssignmentNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the subscription level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForSubscriptionLevelPolicyAssignmentNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForSubscriptionLevelPolicyAssignmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Queries policy states for the resource group level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyState> ListQueryResultsForResourceGroupLevelPolicyAssignmentNext(this IPolicyStatesOperations operations, string nextPageLink)
        {
                return ((IPolicyStatesOperations)operations).ListQueryResultsForResourceGroupLevelPolicyAssignmentNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Queries policy states for the resource group level policy assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyState>> ListQueryResultsForResourceGroupLevelPolicyAssignmentNextAsync(this IPolicyStatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListQueryResultsForResourceGroupLevelPolicyAssignmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
