// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RemediationsOperations
    /// </summary>
    public static partial class RemediationsOperationsExtensions
    {
        /// <summary>
        /// Gets all deployments for a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtManagementGroupAsync(managementGroupId, remediationName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Cancels a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CancelAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName)
        {
                return ((IRemediationsOperations)operations).CancelAtManagementGroupAsync(managementGroupId, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancels a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CancelAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForManagementGroup(this IRemediationsOperations operations, string managementGroupId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListForManagementGroupAsync(managementGroupId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForManagementGroupWithHttpMessagesAsync(managementGroupId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CreateOrUpdateAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName, Remediation parameters)
        {
                return ((IRemediationsOperations)operations).CreateOrUpdateAtManagementGroupAsync(managementGroupId, remediationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CreateOrUpdateAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, Remediation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation GetAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName)
        {
                return ((IRemediationsOperations)operations).GetAtManagementGroupAsync(managementGroupId, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> GetAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation DeleteAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName)
        {
                return ((IRemediationsOperations)operations).DeleteAtManagementGroupAsync(managementGroupId, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> DeleteAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtSubscription(this IRemediationsOperations operations, string remediationName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtSubscriptionAsync(remediationName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtSubscriptionAsync(this IRemediationsOperations operations, string remediationName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtSubscriptionWithHttpMessagesAsync(remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Cancels a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CancelAtSubscription(this IRemediationsOperations operations, string remediationName)
        {
                return ((IRemediationsOperations)operations).CancelAtSubscriptionAsync(remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancels a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CancelAtSubscriptionAsync(this IRemediationsOperations operations, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelAtSubscriptionWithHttpMessagesAsync(remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForSubscription(this IRemediationsOperations operations, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListForSubscriptionAsync(queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForSubscriptionAsync(this IRemediationsOperations operations, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForSubscriptionWithHttpMessagesAsync(queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CreateOrUpdateAtSubscription(this IRemediationsOperations operations, string remediationName, Remediation parameters)
        {
                return ((IRemediationsOperations)operations).CreateOrUpdateAtSubscriptionAsync(remediationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CreateOrUpdateAtSubscriptionAsync(this IRemediationsOperations operations, string remediationName, Remediation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtSubscriptionWithHttpMessagesAsync(remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation GetAtSubscription(this IRemediationsOperations operations, string remediationName)
        {
                return ((IRemediationsOperations)operations).GetAtSubscriptionAsync(remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> GetAtSubscriptionAsync(this IRemediationsOperations operations, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtSubscriptionWithHttpMessagesAsync(remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation DeleteAtSubscription(this IRemediationsOperations operations, string remediationName)
        {
                return ((IRemediationsOperations)operations).DeleteAtSubscriptionAsync(remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> DeleteAtSubscriptionAsync(this IRemediationsOperations operations, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtSubscriptionWithHttpMessagesAsync(remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtResourceGroup(this IRemediationsOperations operations, string resourceGroupName, string remediationName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtResourceGroupAsync(resourceGroupName, remediationName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtResourceGroupAsync(this IRemediationsOperations operations, string resourceGroupName, string remediationName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtResourceGroupWithHttpMessagesAsync(resourceGroupName, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Cancels a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CancelAtResourceGroup(this IRemediationsOperations operations, string resourceGroupName, string remediationName)
        {
                return ((IRemediationsOperations)operations).CancelAtResourceGroupAsync(resourceGroupName, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancels a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CancelAtResourceGroupAsync(this IRemediationsOperations operations, string resourceGroupName, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelAtResourceGroupWithHttpMessagesAsync(resourceGroupName, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForResourceGroup(this IRemediationsOperations operations, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListForResourceGroupAsync(resourceGroupName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForResourceGroupAsync(this IRemediationsOperations operations, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CreateOrUpdateAtResourceGroup(this IRemediationsOperations operations, string resourceGroupName, string remediationName, Remediation parameters)
        {
                return ((IRemediationsOperations)operations).CreateOrUpdateAtResourceGroupAsync(resourceGroupName, remediationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CreateOrUpdateAtResourceGroupAsync(this IRemediationsOperations operations, string resourceGroupName, string remediationName, Remediation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation GetAtResourceGroup(this IRemediationsOperations operations, string resourceGroupName, string remediationName)
        {
                return ((IRemediationsOperations)operations).GetAtResourceGroupAsync(resourceGroupName, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> GetAtResourceGroupAsync(this IRemediationsOperations operations, string resourceGroupName, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtResourceGroupWithHttpMessagesAsync(resourceGroupName, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation DeleteAtResourceGroup(this IRemediationsOperations operations, string resourceGroupName, string remediationName)
        {
                return ((IRemediationsOperations)operations).DeleteAtResourceGroupAsync(resourceGroupName, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> DeleteAtResourceGroupAsync(this IRemediationsOperations operations, string resourceGroupName, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtResourceGroupWithHttpMessagesAsync(resourceGroupName, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtResource(this IRemediationsOperations operations, string resourceId, string remediationName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtResourceAsync(resourceId, remediationName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtResourceWithHttpMessagesAsync(resourceId, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Cancel a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CancelAtResource(this IRemediationsOperations operations, string resourceId, string remediationName)
        {
                return ((IRemediationsOperations)operations).CancelAtResourceAsync(resourceId, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancel a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CancelAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelAtResourceWithHttpMessagesAsync(resourceId, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForResource(this IRemediationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IRemediationsOperations)operations).ListForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForResourceAsync(this IRemediationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation CreateOrUpdateAtResource(this IRemediationsOperations operations, string resourceId, string remediationName, Remediation parameters)
        {
                return ((IRemediationsOperations)operations).CreateOrUpdateAtResourceAsync(resourceId, remediationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> CreateOrUpdateAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, Remediation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtResourceWithHttpMessagesAsync(resourceId, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation GetAtResource(this IRemediationsOperations operations, string resourceId, string remediationName)
        {
                return ((IRemediationsOperations)operations).GetAtResourceAsync(resourceId, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> GetAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtResourceWithHttpMessagesAsync(resourceId, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing remediation at individual resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        public static Remediation DeleteAtResource(this IRemediationsOperations operations, string resourceId, string remediationName)
        {
                return ((IRemediationsOperations)operations).DeleteAtResourceAsync(resourceId, remediationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing remediation at individual resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='remediationName'>
        /// The name of the remediation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Remediation> DeleteAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtResourceWithHttpMessagesAsync(resourceId, remediationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtManagementGroupNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at management group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtManagementGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForManagementGroupNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForManagementGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtSubscriptionNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtSubscriptionNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForSubscriptionNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForSubscriptionNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtResourceGroupNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtResourceGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForResourceGroupNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForResourceGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all deployments for a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemediationDeployment> ListDeploymentsAtResourceNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListDeploymentsAtResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all deployments for a remediation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemediationDeployment>> ListDeploymentsAtResourceNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsAtResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all remediations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Remediation> ListForResourceNext(this IRemediationsOperations operations, string nextPageLink)
        {
                return ((IRemediationsOperations)operations).ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all remediations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Remediation>> ListForResourceNextAsync(this IRemediationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
