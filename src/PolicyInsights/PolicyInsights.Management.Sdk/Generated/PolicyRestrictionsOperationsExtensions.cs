// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PolicyRestrictionsOperations
    /// </summary>
    public static partial class PolicyRestrictionsOperationsExtensions
    {
        /// <summary>
        /// Checks what restrictions Azure Policy will place on a resource within a
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static CheckRestrictionsResult CheckAtSubscriptionScope(this IPolicyRestrictionsOperations operations, CheckRestrictionsRequest parameters)
        {
                return ((IPolicyRestrictionsOperations)operations).CheckAtSubscriptionScopeAsync(parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks what restrictions Azure Policy will place on a resource within a
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckRestrictionsResult> CheckAtSubscriptionScopeAsync(this IPolicyRestrictionsOperations operations, CheckRestrictionsRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckAtSubscriptionScopeWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks what restrictions Azure Policy will place on a resource within a
        /// resource group. Use this when the resource group the resource will be
        /// created in is already known.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static CheckRestrictionsResult CheckAtResourceGroupScope(this IPolicyRestrictionsOperations operations, string resourceGroupName, CheckRestrictionsRequest parameters)
        {
                return ((IPolicyRestrictionsOperations)operations).CheckAtResourceGroupScopeAsync(resourceGroupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks what restrictions Azure Policy will place on a resource within a
        /// resource group. Use this when the resource group the resource will be
        /// created in is already known.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckRestrictionsResult> CheckAtResourceGroupScopeAsync(this IPolicyRestrictionsOperations operations, string resourceGroupName, CheckRestrictionsRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckAtResourceGroupScopeWithHttpMessagesAsync(resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks what restrictions Azure Policy will place on resources within a
        /// management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        public static CheckRestrictionsResult CheckAtManagementGroupScope(this IPolicyRestrictionsOperations operations, string managementGroupId, CheckManagementGroupRestrictionsRequest parameters)
        {
                return ((IPolicyRestrictionsOperations)operations).CheckAtManagementGroupScopeAsync(managementGroupId, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks what restrictions Azure Policy will place on resources within a
        /// management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management group ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckRestrictionsResult> CheckAtManagementGroupScopeAsync(this IPolicyRestrictionsOperations operations, string managementGroupId, CheckManagementGroupRestrictionsRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckAtManagementGroupScopeWithHttpMessagesAsync(managementGroupId, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
