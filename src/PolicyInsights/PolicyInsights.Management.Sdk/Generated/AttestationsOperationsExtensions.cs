// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AttestationsOperations
    /// </summary>
    public static partial class AttestationsOperationsExtensions
    {
        /// <summary>
        /// Gets all attestations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Attestation> ListForSubscription(this IAttestationsOperations operations, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IAttestationsOperations)operations).ListForSubscriptionAsync(queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all attestations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Attestation>> ListForSubscriptionAsync(this IAttestationsOperations operations, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForSubscriptionWithHttpMessagesAsync(queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation CreateOrUpdateAtSubscription(this IAttestationsOperations operations, string attestationName, Attestation parameters)
        {
                return ((IAttestationsOperations)operations).CreateOrUpdateAtSubscriptionAsync(attestationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> CreateOrUpdateAtSubscriptionAsync(this IAttestationsOperations operations, string attestationName, Attestation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtSubscriptionWithHttpMessagesAsync(attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation GetAtSubscription(this IAttestationsOperations operations, string attestationName)
        {
                return ((IAttestationsOperations)operations).GetAtSubscriptionAsync(attestationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> GetAtSubscriptionAsync(this IAttestationsOperations operations, string attestationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtSubscriptionWithHttpMessagesAsync(attestationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static void DeleteAtSubscription(this IAttestationsOperations operations, string attestationName)
        {
                ((IAttestationsOperations)operations).DeleteAtSubscriptionAsync(attestationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtSubscriptionAsync(this IAttestationsOperations operations, string attestationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtSubscriptionWithHttpMessagesAsync(attestationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets all attestations for the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Attestation> ListForResourceGroup(this IAttestationsOperations operations, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IAttestationsOperations)operations).ListForResourceGroupAsync(resourceGroupName, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all attestations for the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Attestation>> ListForResourceGroupAsync(this IAttestationsOperations operations, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation CreateOrUpdateAtResourceGroup(this IAttestationsOperations operations, string resourceGroupName, string attestationName, Attestation parameters)
        {
                return ((IAttestationsOperations)operations).CreateOrUpdateAtResourceGroupAsync(resourceGroupName, attestationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> CreateOrUpdateAtResourceGroupAsync(this IAttestationsOperations operations, string resourceGroupName, string attestationName, Attestation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation GetAtResourceGroup(this IAttestationsOperations operations, string resourceGroupName, string attestationName)
        {
                return ((IAttestationsOperations)operations).GetAtResourceGroupAsync(resourceGroupName, attestationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> GetAtResourceGroupAsync(this IAttestationsOperations operations, string resourceGroupName, string attestationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtResourceGroupWithHttpMessagesAsync(resourceGroupName, attestationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static void DeleteAtResourceGroup(this IAttestationsOperations operations, string resourceGroupName, string attestationName)
        {
                ((IAttestationsOperations)operations).DeleteAtResourceGroupAsync(resourceGroupName, attestationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtResourceGroupAsync(this IAttestationsOperations operations, string resourceGroupName, string attestationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtResourceGroupWithHttpMessagesAsync(resourceGroupName, attestationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets all attestations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Attestation> ListForResource(this IAttestationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
        {
                return ((IAttestationsOperations)operations).ListForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all attestations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='queryOptions'>
        /// 
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Attestation>> ListForResourceAsync(this IAttestationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an attestation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation CreateOrUpdateAtResource(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters)
        {
                return ((IAttestationsOperations)operations).CreateOrUpdateAtResourceAsync(resourceId, attestationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an attestation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> CreateOrUpdateAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtResourceWithHttpMessagesAsync(resourceId, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an existing attestation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation GetAtResource(this IAttestationsOperations operations, string resourceId, string attestationName)
        {
                return ((IAttestationsOperations)operations).GetAtResourceAsync(resourceId, attestationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an existing attestation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> GetAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtResourceWithHttpMessagesAsync(resourceId, attestationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing attestation at individual resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static void DeleteAtResource(this IAttestationsOperations operations, string resourceId, string attestationName)
        {
                ((IAttestationsOperations)operations).DeleteAtResourceAsync(resourceId, attestationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing attestation at individual resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtResourceWithHttpMessagesAsync(resourceId, attestationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates an attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation BeginCreateOrUpdateAtSubscription(this IAttestationsOperations operations, string attestationName, Attestation parameters)
        {
                return ((IAttestationsOperations)operations).BeginCreateOrUpdateAtSubscriptionAsync(attestationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an attestation at subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> BeginCreateOrUpdateAtSubscriptionAsync(this IAttestationsOperations operations, string attestationName, Attestation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtSubscriptionWithHttpMessagesAsync(attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation BeginCreateOrUpdateAtResourceGroup(this IAttestationsOperations operations, string resourceGroupName, string attestationName, Attestation parameters)
        {
                return ((IAttestationsOperations)operations).BeginCreateOrUpdateAtResourceGroupAsync(resourceGroupName, attestationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an attestation at resource group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> BeginCreateOrUpdateAtResourceGroupAsync(this IAttestationsOperations operations, string resourceGroupName, string attestationName, Attestation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an attestation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        public static Attestation BeginCreateOrUpdateAtResource(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters)
        {
                return ((IAttestationsOperations)operations).BeginCreateOrUpdateAtResourceAsync(resourceId, attestationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an attestation at resource scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceId'>
        /// Resource ID.
        /// </param>
        /// <param name='attestationName'>
        /// The name of the attestation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Attestation> BeginCreateOrUpdateAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtResourceWithHttpMessagesAsync(resourceId, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all attestations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Attestation> ListForSubscriptionNext(this IAttestationsOperations operations, string nextPageLink)
        {
                return ((IAttestationsOperations)operations).ListForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all attestations for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Attestation>> ListForSubscriptionNextAsync(this IAttestationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all attestations for the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Attestation> ListForResourceGroupNext(this IAttestationsOperations operations, string nextPageLink)
        {
                return ((IAttestationsOperations)operations).ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all attestations for the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Attestation>> ListForResourceGroupNextAsync(this IAttestationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all attestations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Attestation> ListForResourceNext(this IAttestationsOperations operations, string nextPageLink)
        {
                return ((IAttestationsOperations)operations).ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all attestations for a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Attestation>> ListForResourceNextAsync(this IAttestationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
