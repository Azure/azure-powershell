// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Policy event record.
    /// </summary>
    public partial class PolicyEvent
    {
        /// <summary>
        /// Initializes a new instance of the PolicyEvent class.
        /// </summary>
        public PolicyEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyEvent class.
        /// </summary>

        /// <param name="additionalProperties">Policy event record.
        /// </param>

        /// <param name="odataId">OData entity ID; always set to null since policy event records do not have
        /// an entity ID.
        /// </param>

        /// <param name="odataContext">OData context string; used by OData clients to resolve type information
        /// based on metadata.
        /// </param>

        /// <param name="timestamp">Timestamp for the policy event record.
        /// </param>

        /// <param name="resourceId">Resource ID.
        /// </param>

        /// <param name="policyAssignmentId">Policy assignment ID.
        /// </param>

        /// <param name="policyDefinitionId">Policy definition ID.
        /// </param>

        /// <param name="effectiveParameters">Effective parameters for the policy assignment.
        /// </param>

        /// <param name="isCompliant">Flag which states whether the resource is compliant against the policy
        /// assignment it was evaluated against.
        /// </param>

        /// <param name="subscriptionId">Subscription ID.
        /// </param>

        /// <param name="resourceType">Resource type.
        /// </param>

        /// <param name="resourceLocation">Resource location.
        /// </param>

        /// <param name="resourceGroup">Resource group name.
        /// </param>

        /// <param name="resourceTags">List of resource tags.
        /// </param>

        /// <param name="policyAssignmentName">Policy assignment name.
        /// </param>

        /// <param name="policyAssignmentOwner">Policy assignment owner.
        /// </param>

        /// <param name="policyAssignmentParameters">Policy assignment parameters.
        /// </param>

        /// <param name="policyAssignmentScope">Policy assignment scope.
        /// </param>

        /// <param name="policyDefinitionName">Policy definition name.
        /// </param>

        /// <param name="policyDefinitionAction">Policy definition action, i.e. effect.
        /// </param>

        /// <param name="policyDefinitionCategory">Policy definition category.
        /// </param>

        /// <param name="policySetDefinitionId">Policy set definition ID, if the policy assignment is for a policy set.
        /// </param>

        /// <param name="policySetDefinitionName">Policy set definition name, if the policy assignment is for a policy set.
        /// </param>

        /// <param name="policySetDefinitionOwner">Policy set definition owner, if the policy assignment is for a policy set.
        /// </param>

        /// <param name="policySetDefinitionCategory">Policy set definition category, if the policy assignment is for a policy
        /// set.
        /// </param>

        /// <param name="policySetDefinitionParameters">Policy set definition parameters, if the policy assignment is for a policy
        /// set.
        /// </param>

        /// <param name="managementGroupIds">Comma separated list of management group IDs, which represent the hierarchy
        /// of the management groups the resource is under.
        /// </param>

        /// <param name="policyDefinitionReferenceId">Reference ID for the policy definition inside the policy set, if the policy
        /// assignment is for a policy set.
        /// </param>

        /// <param name="complianceState">Compliance state of the resource.
        /// </param>

        /// <param name="tenantId">Tenant ID for the policy event record.
        /// </param>

        /// <param name="principalOid">Principal object ID for the user who initiated the resource operation that
        /// triggered the policy event.
        /// </param>

        /// <param name="components">Components events records populated only when URL contains
        /// $expand=components clause.
        /// </param>
        public PolicyEvent(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string odataId = default(string), string odataContext = default(string), System.DateTime? timestamp = default(System.DateTime?), string resourceId = default(string), string policyAssignmentId = default(string), string policyDefinitionId = default(string), string effectiveParameters = default(string), bool? isCompliant = default(bool?), string subscriptionId = default(string), string resourceType = default(string), string resourceLocation = default(string), string resourceGroup = default(string), string resourceTags = default(string), string policyAssignmentName = default(string), string policyAssignmentOwner = default(string), string policyAssignmentParameters = default(string), string policyAssignmentScope = default(string), string policyDefinitionName = default(string), string policyDefinitionAction = default(string), string policyDefinitionCategory = default(string), string policySetDefinitionId = default(string), string policySetDefinitionName = default(string), string policySetDefinitionOwner = default(string), string policySetDefinitionCategory = default(string), string policySetDefinitionParameters = default(string), string managementGroupIds = default(string), string policyDefinitionReferenceId = default(string), string complianceState = default(string), string tenantId = default(string), string principalOid = default(string), System.Collections.Generic.IList<ComponentEventDetails> components = default(System.Collections.Generic.IList<ComponentEventDetails>))

        {
            this.AdditionalProperties = additionalProperties;
            this.OdataId = odataId;
            this.OdataContext = odataContext;
            this.Timestamp = timestamp;
            this.ResourceId = resourceId;
            this.PolicyAssignmentId = policyAssignmentId;
            this.PolicyDefinitionId = policyDefinitionId;
            this.EffectiveParameters = effectiveParameters;
            this.IsCompliant = isCompliant;
            this.SubscriptionId = subscriptionId;
            this.ResourceType = resourceType;
            this.ResourceLocation = resourceLocation;
            this.ResourceGroup = resourceGroup;
            this.ResourceTags = resourceTags;
            this.PolicyAssignmentName = policyAssignmentName;
            this.PolicyAssignmentOwner = policyAssignmentOwner;
            this.PolicyAssignmentParameters = policyAssignmentParameters;
            this.PolicyAssignmentScope = policyAssignmentScope;
            this.PolicyDefinitionName = policyDefinitionName;
            this.PolicyDefinitionAction = policyDefinitionAction;
            this.PolicyDefinitionCategory = policyDefinitionCategory;
            this.PolicySetDefinitionId = policySetDefinitionId;
            this.PolicySetDefinitionName = policySetDefinitionName;
            this.PolicySetDefinitionOwner = policySetDefinitionOwner;
            this.PolicySetDefinitionCategory = policySetDefinitionCategory;
            this.PolicySetDefinitionParameters = policySetDefinitionParameters;
            this.ManagementGroupIds = managementGroupIds;
            this.PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            this.ComplianceState = complianceState;
            this.TenantId = tenantId;
            this.PrincipalOid = principalOid;
            this.Components = components;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets policy event record.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets oData entity ID; always set to null since policy event records
        /// do not have an entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "@odata.id")]
        public string OdataId {get; set; }

        /// <summary>
        /// Gets or sets oData context string; used by OData clients to resolve type
        /// information based on metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "@odata.context")]
        public string OdataContext {get; set; }

        /// <summary>
        /// Gets or sets timestamp for the policy event record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp {get; set; }

        /// <summary>
        /// Gets or sets resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets policy assignment ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentId")]
        public string PolicyAssignmentId {get; set; }

        /// <summary>
        /// Gets or sets policy definition ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionId")]
        public string PolicyDefinitionId {get; set; }

        /// <summary>
        /// Gets or sets effective parameters for the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveParameters")]
        public string EffectiveParameters {get; set; }

        /// <summary>
        /// Gets or sets flag which states whether the resource is compliant against
        /// the policy assignment it was evaluated against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isCompliant")]
        public bool? IsCompliant {get; set; }

        /// <summary>
        /// Gets or sets subscription ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; set; }

        /// <summary>
        /// Gets or sets resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceType")]
        public string ResourceType {get; set; }

        /// <summary>
        /// Gets or sets resource location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceLocation")]
        public string ResourceLocation {get; set; }

        /// <summary>
        /// Gets or sets resource group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup {get; set; }

        /// <summary>
        /// Gets or sets list of resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceTags")]
        public string ResourceTags {get; set; }

        /// <summary>
        /// Gets or sets policy assignment name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentName")]
        public string PolicyAssignmentName {get; set; }

        /// <summary>
        /// Gets or sets policy assignment owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentOwner")]
        public string PolicyAssignmentOwner {get; set; }

        /// <summary>
        /// Gets or sets policy assignment parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentParameters")]
        public string PolicyAssignmentParameters {get; set; }

        /// <summary>
        /// Gets or sets policy assignment scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentScope")]
        public string PolicyAssignmentScope {get; set; }

        /// <summary>
        /// Gets or sets policy definition name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionName")]
        public string PolicyDefinitionName {get; set; }

        /// <summary>
        /// Gets or sets policy definition action, i.e. effect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionAction")]
        public string PolicyDefinitionAction {get; set; }

        /// <summary>
        /// Gets or sets policy definition category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionCategory")]
        public string PolicyDefinitionCategory {get; set; }

        /// <summary>
        /// Gets or sets policy set definition ID, if the policy assignment is for a
        /// policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySetDefinitionId")]
        public string PolicySetDefinitionId {get; set; }

        /// <summary>
        /// Gets or sets policy set definition name, if the policy assignment is for a
        /// policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySetDefinitionName")]
        public string PolicySetDefinitionName {get; set; }

        /// <summary>
        /// Gets or sets policy set definition owner, if the policy assignment is for a
        /// policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySetDefinitionOwner")]
        public string PolicySetDefinitionOwner {get; set; }

        /// <summary>
        /// Gets or sets policy set definition category, if the policy assignment is
        /// for a policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySetDefinitionCategory")]
        public string PolicySetDefinitionCategory {get; set; }

        /// <summary>
        /// Gets or sets policy set definition parameters, if the policy assignment is
        /// for a policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySetDefinitionParameters")]
        public string PolicySetDefinitionParameters {get; set; }

        /// <summary>
        /// Gets or sets comma separated list of management group IDs, which represent
        /// the hierarchy of the management groups the resource is under.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managementGroupIds")]
        public string ManagementGroupIds {get; set; }

        /// <summary>
        /// Gets or sets reference ID for the policy definition inside the policy set,
        /// if the policy assignment is for a policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionReferenceId")]
        public string PolicyDefinitionReferenceId {get; set; }

        /// <summary>
        /// Gets or sets compliance state of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "complianceState")]
        public string ComplianceState {get; set; }

        /// <summary>
        /// Gets or sets tenant ID for the policy event record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; set; }

        /// <summary>
        /// Gets or sets principal object ID for the user who initiated the resource
        /// operation that triggered the policy event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "principalOid")]
        public string PrincipalOid {get; set; }

        /// <summary>
        /// Gets or sets components events records populated only when URL contains
        /// $expand=components clause.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "components")]
        public System.Collections.Generic.IList<ComponentEventDetails> Components {get; set; }
    }
}