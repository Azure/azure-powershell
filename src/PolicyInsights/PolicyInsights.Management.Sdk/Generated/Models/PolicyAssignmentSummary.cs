// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Policy assignment summary.
    /// </summary>
    public partial class PolicyAssignmentSummary
    {
        /// <summary>
        /// Initializes a new instance of the PolicyAssignmentSummary class.
        /// </summary>
        public PolicyAssignmentSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyAssignmentSummary class.
        /// </summary>

        /// <param name="policyAssignmentId">Policy assignment ID.
        /// </param>

        /// <param name="policySetDefinitionId">Policy set definition ID, if the policy assignment is for a policy set.
        /// </param>

        /// <param name="results">Compliance summary for the policy assignment.
        /// </param>

        /// <param name="policyDefinitions">Policy definitions summary.
        /// </param>

        /// <param name="policyGroups">Policy definition group summary.
        /// </param>
        public PolicyAssignmentSummary(string policyAssignmentId = default(string), string policySetDefinitionId = default(string), SummaryResults results = default(SummaryResults), System.Collections.Generic.IList<PolicyDefinitionSummary> policyDefinitions = default(System.Collections.Generic.IList<PolicyDefinitionSummary>), System.Collections.Generic.IList<PolicyGroupSummary> policyGroups = default(System.Collections.Generic.IList<PolicyGroupSummary>))

        {
            this.PolicyAssignmentId = policyAssignmentId;
            this.PolicySetDefinitionId = policySetDefinitionId;
            this.Results = results;
            this.PolicyDefinitions = policyDefinitions;
            this.PolicyGroups = policyGroups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets policy assignment ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentId")]
        public string PolicyAssignmentId {get; set; }

        /// <summary>
        /// Gets or sets policy set definition ID, if the policy assignment is for a
        /// policy set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySetDefinitionId")]
        public string PolicySetDefinitionId {get; set; }

        /// <summary>
        /// Gets or sets compliance summary for the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "results")]
        public SummaryResults Results {get; set; }

        /// <summary>
        /// Gets or sets policy definitions summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitions")]
        public System.Collections.Generic.IList<PolicyDefinitionSummary> PolicyDefinitions {get; set; }

        /// <summary>
        /// Gets or sets policy definition group summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyGroups")]
        public System.Collections.Generic.IList<PolicyGroupSummary> PolicyGroups {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.Results != null)
            {
                this.Results.Validate();
            }
            if (this.PolicyDefinitions != null)
            {
                foreach (var element in this.PolicyDefinitions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.PolicyGroups != null)
            {
                foreach (var element in this.PolicyGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}