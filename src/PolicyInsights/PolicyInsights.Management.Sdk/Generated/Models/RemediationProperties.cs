// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using System.Linq;

    /// <summary>
    /// The remediation properties.
    /// </summary>
    public partial class RemediationProperties
    {
        /// <summary>
        /// Initializes a new instance of the RemediationProperties class.
        /// </summary>
        public RemediationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RemediationProperties class.
        /// </summary>

        /// <param name="policyAssignmentId">The resource ID of the policy assignment that should be remediated.
        /// </param>

        /// <param name="policyDefinitionReferenceId">The policy definition reference ID of the individual definition that should
        /// be remediated. Required when the policy assignment being remediated assigns
        /// a policy set definition.
        /// </param>

        /// <param name="resourceDiscoveryMode">The way resources to remediate are discovered. Defaults to
        /// ExistingNonCompliant if not specified.
        /// Possible values include: &#39;ExistingNonCompliant&#39;, &#39;ReEvaluateCompliance&#39;</param>

        /// <param name="provisioningState">The status of the remediation.
        /// </param>

        /// <param name="createdOn">The time at which the remediation was created.
        /// </param>

        /// <param name="lastUpdatedOn">The time at which the remediation was last updated.
        /// </param>

        /// <param name="filters">The filters that will be applied to determine which resources to remediate.
        /// </param>

        /// <param name="deploymentStatus">The deployment status summary for all deployments created by the
        /// remediation.
        /// </param>

        /// <param name="statusMessage">The remediation status message. Provides additional details regarding the
        /// state of the remediation.
        /// </param>

        /// <param name="correlationId">The remediation correlation Id. Can be used to find events related to the
        /// remediation in the activity log.
        /// </param>

        /// <param name="resourceCount">Determines the max number of resources that can be remediated by the
        /// remediation job. If not provided, the default resource count is used.
        /// </param>

        /// <param name="parallelDeployments">Determines how many resources to remediate at any given time. Can be used
        /// to increase or reduce the pace of the remediation. If not provided, the
        /// default parallel deployments value is used.
        /// </param>

        /// <param name="failureThreshold">The remediation failure threshold settings
        /// </param>
        public RemediationProperties(string policyAssignmentId = default(string), string policyDefinitionReferenceId = default(string), string resourceDiscoveryMode = default(string), string provisioningState = default(string), System.DateTime? createdOn = default(System.DateTime?), System.DateTime? lastUpdatedOn = default(System.DateTime?), RemediationFilters filters = default(RemediationFilters), RemediationDeploymentSummary deploymentStatus = default(RemediationDeploymentSummary), string statusMessage = default(string), string correlationId = default(string), int? resourceCount = default(int?), int? parallelDeployments = default(int?), RemediationPropertiesFailureThreshold failureThreshold = default(RemediationPropertiesFailureThreshold))

        {
            this.PolicyAssignmentId = policyAssignmentId;
            this.PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            this.ResourceDiscoveryMode = resourceDiscoveryMode;
            this.ProvisioningState = provisioningState;
            this.CreatedOn = createdOn;
            this.LastUpdatedOn = lastUpdatedOn;
            this.Filters = filters;
            this.DeploymentStatus = deploymentStatus;
            this.StatusMessage = statusMessage;
            this.CorrelationId = correlationId;
            this.ResourceCount = resourceCount;
            this.ParallelDeployments = parallelDeployments;
            this.FailureThreshold = failureThreshold;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the resource ID of the policy assignment that should be
        /// remediated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentId")]
        public string PolicyAssignmentId {get; set; }

        /// <summary>
        /// Gets or sets the policy definition reference ID of the individual
        /// definition that should be remediated. Required when the policy assignment
        /// being remediated assigns a policy set definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionReferenceId")]
        public string PolicyDefinitionReferenceId {get; set; }

        /// <summary>
        /// Gets or sets the way resources to remediate are discovered. Defaults to
        /// ExistingNonCompliant if not specified. Possible values include: &#39;ExistingNonCompliant&#39;, &#39;ReEvaluateCompliance&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceDiscoveryMode")]
        public string ResourceDiscoveryMode {get; set; }

        /// <summary>
        /// Gets the status of the remediation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the time at which the remediation was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createdOn")]
        public System.DateTime? CreatedOn {get; private set; }

        /// <summary>
        /// Gets the time at which the remediation was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedOn")]
        public System.DateTime? LastUpdatedOn {get; private set; }

        /// <summary>
        /// Gets or sets the filters that will be applied to determine which resources
        /// to remediate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public RemediationFilters Filters {get; set; }

        /// <summary>
        /// Gets the deployment status summary for all deployments created by the
        /// remediation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deploymentStatus")]
        public RemediationDeploymentSummary DeploymentStatus {get; private set; }

        /// <summary>
        /// Gets the remediation status message. Provides additional details regarding
        /// the state of the remediation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusMessage")]
        public string StatusMessage {get; private set; }

        /// <summary>
        /// Gets the remediation correlation Id. Can be used to find events related to
        /// the remediation in the activity log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId {get; private set; }

        /// <summary>
        /// Gets or sets determines the max number of resources that can be remediated
        /// by the remediation job. If not provided, the default resource count is
        /// used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceCount")]
        public int? ResourceCount {get; set; }

        /// <summary>
        /// Gets or sets determines how many resources to remediate at any given time.
        /// Can be used to increase or reduce the pace of the remediation. If not
        /// provided, the default parallel deployments value is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parallelDeployments")]
        public int? ParallelDeployments {get; set; }

        /// <summary>
        /// Gets or sets the remediation failure threshold settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failureThreshold")]
        public RemediationPropertiesFailureThreshold FailureThreshold {get; set; }
    }
}