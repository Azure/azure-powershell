// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using System.Linq;

    /// <summary>
    /// List of available operations.
    /// </summary>
    public partial class OperationsListResults
    {
        /// <summary>
        /// Initializes a new instance of the OperationsListResults class.
        /// </summary>
        public OperationsListResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationsListResults class.
        /// </summary>

        /// <param name="odataCount">OData entity count; represents the number of operations returned.
        /// </param>

        /// <param name="value">List of available operations.
        /// </param>
        public OperationsListResults(int? odataCount = default(int?), System.Collections.Generic.IList<Operation> value = default(System.Collections.Generic.IList<Operation>))

        {
            this.OdataCount = odataCount;
            this.Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets oData entity count; represents the number of operations
        /// returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "@odata.count")]
        public int? OdataCount {get; set; }

        /// <summary>
        /// Gets or sets list of available operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public System.Collections.Generic.IList<Operation> Value {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.OdataCount != null)
            {
                if (this.OdataCount < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "OdataCount", 1);
                }
            }

        }
    }
}