// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Summarize action results.
    /// </summary>
    public partial class SummarizeResults
    {
        /// <summary>
        /// Initializes a new instance of the SummarizeResults class.
        /// </summary>
        public SummarizeResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SummarizeResults class.
        /// </summary>

        /// <param name="odataContext">OData context string; used by OData clients to resolve type information
        /// based on metadata.
        /// </param>

        /// <param name="odataCount">OData entity count; represents the number of summaries returned; always set
        /// to 1.
        /// </param>

        /// <param name="value">Summarize action results.
        /// </param>
        public SummarizeResults(string odataContext = default(string), int? odataCount = default(int?), System.Collections.Generic.IList<Summary> value = default(System.Collections.Generic.IList<Summary>))

        {
            this.OdataContext = odataContext;
            this.OdataCount = odataCount;
            this.Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets oData context string; used by OData clients to resolve type
        /// information based on metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "@odata.context")]
        public string OdataContext {get; set; }

        /// <summary>
        /// Gets or sets oData entity count; represents the number of summaries
        /// returned; always set to 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "@odata.count")]
        public int? OdataCount {get; set; }

        /// <summary>
        /// Gets or sets summarize action results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public System.Collections.Generic.IList<Summary> Value {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.OdataCount != null)
            {
                if (this.OdataCount > 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "OdataCount", 1);
                }
                if (this.OdataCount < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "OdataCount", 1);
                }
            }
            if (this.Value != null)
            {
                foreach (var element in this.Value)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}