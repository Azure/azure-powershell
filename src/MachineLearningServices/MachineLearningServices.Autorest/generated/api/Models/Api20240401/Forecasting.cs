// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Extensions;

    /// <summary>Forecasting task in AutoML Table vertical.</summary>
    public partial class Forecasting :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecasting,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVertical"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVertical __autoMlVertical = new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.AutoMlVertical();

        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVertical"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVertical __tableVertical = new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.TableVertical();

        /// <summary>Columns to use for CVSplit data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string[] CvSplitColumnName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).CvSplitColumnName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).CvSplitColumnName = value ?? null /* arrayOf */; }

        /// <summary>Featurization inputs needed for AutoML job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalFeaturizationSettings FeaturizationSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSetting = value ?? null /* model class */; }

        /// <summary>These transformers shall not be used in featurization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers[] FeaturizationSettingBlockedTransformer { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingBlockedTransformer; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingBlockedTransformer = value ?? null /* arrayOf */; }

        /// <summary>Dictionary of column name and its type (int, float, string, datetime etc).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalFeaturizationSettingsColumnNameAndTypes FeaturizationSettingColumnNameAndType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingColumnNameAndType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingColumnNameAndType = value ?? null /* model class */; }

        /// <summary>Dataset language, useful for the text data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string FeaturizationSettingDatasetLanguage { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingDatasetLanguage; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingDatasetLanguage = value ?? null; }

        /// <summary>Determines whether to use Dnn based featurizers for data featurization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public bool? FeaturizationSettingEnableDnnFeaturization { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingEnableDnnFeaturization; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingEnableDnnFeaturization = value ?? default(bool); }

        /// <summary>
        /// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the
        /// data in featurization phase.
        /// If 'Off' is selected then no featurization is done.
        /// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeaturizationMode? FeaturizationSettingMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeaturizationMode)""); }

        /// <summary>
        /// User can specify additional transformers to be used along with the columns to which it would be applied and parameters
        /// for the transformer constructor.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalFeaturizationSettingsTransformerParams FeaturizationSettingTransformerParam { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingTransformerParam; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).FeaturizationSettingTransformerParam = value ?? null /* model class */; }

        /// <summary>[Required] Set forecast horizon value selection mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode? ForecastHorizonMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).ForecastHorizonMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).ForecastHorizonMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode)""); }

        /// <summary>Execution constraints for AutoMLJob.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalLimitSettings LimitSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSetting = value ?? null /* model class */; }

        /// <summary>
        /// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement
        /// in last 20 iterations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public bool? LimitSettingEnableEarlyTermination { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingEnableEarlyTermination; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingEnableEarlyTermination = value ?? default(bool); }

        /// <summary>Exit score for the AutoML job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public double? LimitSettingExitScore { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingExitScore; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingExitScore = value ?? default(double); }

        /// <summary>Maximum Concurrent iterations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public int? LimitSettingMaxConcurrentTrial { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingMaxConcurrentTrial; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingMaxConcurrentTrial = value ?? default(int); }

        /// <summary>Max cores per iteration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public int? LimitSettingMaxCoresPerTrial { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingMaxCoresPerTrial; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingMaxCoresPerTrial = value ?? default(int); }

        /// <summary>Number of iterations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public int? LimitSettingMaxTrial { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingMaxTrial; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingMaxTrial = value ?? default(int); }

        /// <summary>AutoML job timeout.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public global::System.TimeSpan? LimitSettingTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingTimeout = value ?? default(global::System.TimeSpan); }

        /// <summary>Iteration timeout.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public global::System.TimeSpan? LimitSettingTrialTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingTrialTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).LimitSettingTrialTimeout = value ?? default(global::System.TimeSpan); }

        /// <summary>Log verbosity for the job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LogVerbosity? LogVerbosity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).LogVerbosity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).LogVerbosity = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LogVerbosity)""); }

        /// <summary>Internal Acessors for Setting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.Setting { get => (this._setting = this._setting ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingSettings()); set { {_setting = value;} } }

        /// <summary>Internal Acessors for SettingForecastHorizon</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastHorizon Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.SettingForecastHorizon { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).ForecastHorizon; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).ForecastHorizon = value; }

        /// <summary>Internal Acessors for SettingSeasonality</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ISeasonality Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.SettingSeasonality { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).Seasonality; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).Seasonality = value; }

        /// <summary>Internal Acessors for SettingTargetLag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetLags Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.SettingTargetLag { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetLag; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetLag = value; }

        /// <summary>Internal Acessors for SettingTargetRollingWindowSize</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetRollingWindowSize Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.SettingTargetRollingWindowSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetRollingWindowSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetRollingWindowSize = value; }

        /// <summary>Internal Acessors for TrainingSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettings Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.TrainingSetting { get => (this._trainingSetting = this._trainingSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingTrainingSettings()); set { {_trainingSetting = value;} } }

        /// <summary>Internal Acessors for TrainingSettingStackEnsembleSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IStackEnsembleSettings Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingInternal.TrainingSettingStackEnsembleSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSetting = value; }

        /// <summary>
        /// Number of cross validation folds to be applied on training dataset
        /// when validation dataset is not provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.INCrossValidations NCrossValidation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).NCrossValidation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).NCrossValidation = value ?? null /* model class */; }

        /// <summary>[Required] Mode for determining N-Cross validations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.NCrossValidationsMode? NCrossValidationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).NCrossValidationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).NCrossValidationMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.NCrossValidationsMode)""); }

        /// <summary>Backing field for <see cref="PrimaryMetric" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingPrimaryMetrics? _primaryMetric;

        /// <summary>Primary metric for forecasting task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingPrimaryMetrics? PrimaryMetric { get => this._primaryMetric; set => this._primaryMetric = value; }

        /// <summary>[Required] Seasonality mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode? SeasonalityMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).SeasonalityMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).SeasonalityMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode)""); }

        /// <summary>Backing field for <see cref="Setting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings _setting;

        /// <summary>Forecasting task specific inputs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings Setting { get => (this._setting = this._setting ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingSettings()); set => this._setting = value; }

        /// <summary>
        /// Country or region for holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SettingCountryOrRegionForHoliday { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).CountryOrRegionForHoliday; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).CountryOrRegionForHoliday = value ?? null; }

        /// <summary>
        /// Number of periods between the origin time of one CV fold and the next fold. For
        /// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
        /// three days apart.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public int? SettingCvStepSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).CvStepSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).CvStepSize = value ?? default(int); }

        /// <summary>Flag for generating lags for the numeric features with 'auto' or null.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags? SettingFeatureLag { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).FeatureLag; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).FeatureLag = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags)""); }

        /// <summary>
        /// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly,
        /// yearly, etc. The forecast frequency is dataset frequency by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SettingFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).Frequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).Frequency = value ?? null; }

        /// <summary>The parameter defining how if AutoML should handle short time series.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration? SettingShortSeriesHandlingConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).ShortSeriesHandlingConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).ShortSeriesHandlingConfig = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration)""); }

        /// <summary>
        /// The function to be used to aggregate the time series target column to conform to a user specified frequency.
        /// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible
        /// target aggregation functions are: "sum", "max", "min" and "mean".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction? SettingTargetAggregateFunction { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetAggregateFunction; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetAggregateFunction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction)""); }

        /// <summary>
        /// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data
        /// used for building the time series and inferring its frequency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SettingTimeColumnName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TimeColumnName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TimeColumnName = value ?? null; }

        /// <summary>
        /// The names of columns used to group a timeseries. It can be used to create multiple series.
        /// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string[] SettingTimeSeriesIdColumnName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TimeSeriesIdColumnName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TimeSeriesIdColumnName = value ?? null /* arrayOf */; }

        /// <summary>Configure STL Decomposition of the time-series target column.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl? SettingUseStl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).UseStl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).UseStl = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl)""); }

        /// <summary>
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string TargetColumnName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TargetColumnName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TargetColumnName = value ?? null; }

        /// <summary>[Required] Set target lags mode - Auto/Custom</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode? TargetLagMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetLagMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetLagMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode)""); }

        /// <summary>[Required] TargetRollingWindowSiz detection mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode? TargetRollingWindowSizeMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetRollingWindowSizeMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)Setting).TargetRollingWindowSizeMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode)""); }

        /// <summary>[Required] Task type for AutoMLJob.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType TaskType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TaskType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TaskType = value ; }

        /// <summary>Test data input.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IMlTableJobInput TestData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestData = value ?? null /* model class */; }

        /// <summary>Description for the input.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string TestDataDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataDescription = value ?? null; }

        /// <summary>[Required] Specifies the type of job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.JobInputType? TestDataJobInputType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataJobInputType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataJobInputType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.JobInputType)""); }

        /// <summary>Input Asset Delivery Mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.InputDeliveryMode? TestDataMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.InputDeliveryMode)""); }

        /// <summary>
        /// The fraction of test dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public double? TestDataSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataSize = value ?? default(double); }

        /// <summary>[Required] Input Asset URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string TestDataUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).TestDataUri = value ?? null; }

        /// <summary>[Required] Training data input.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IMlTableJobInput TrainingData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingData = value ; }

        /// <summary>Description for the input.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string TrainingDataDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataDescription = value ?? null; }

        /// <summary>[Required] Specifies the type of job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.JobInputType TrainingDataJobInputType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataJobInputType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataJobInputType = value ; }

        /// <summary>Input Asset Delivery Mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.InputDeliveryMode? TrainingDataMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.InputDeliveryMode)""); }

        /// <summary>[Required] Input Asset URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string TrainingDataUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal)__autoMlVertical).TrainingDataUri = value ; }

        /// <summary>Backing field for <see cref="TrainingSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettings _trainingSetting;

        /// <summary>Inputs for training phase for an AutoML Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettings TrainingSetting { get => (this._trainingSetting = this._trainingSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingTrainingSettings()); set => this._trainingSetting = value; }

        /// <summary>Allowed models for forecasting task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels[] TrainingSettingAllowedTrainingAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettingsInternal)TrainingSetting).AllowedTrainingAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettingsInternal)TrainingSetting).AllowedTrainingAlgorithm = value ?? null /* arrayOf */; }

        /// <summary>Blocked models for forecasting task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels[] TrainingSettingBlockedTrainingAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettingsInternal)TrainingSetting).BlockedTrainingAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettingsInternal)TrainingSetting).BlockedTrainingAlgorithm = value ?? null /* arrayOf */; }

        /// <summary>Enable recommendation of DNN models.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public bool? TrainingSettingEnableDnnTraining { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableDnnTraining; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableDnnTraining = value ?? default(bool); }

        /// <summary>Flag to turn on explainability on best model.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public bool? TrainingSettingEnableModelExplainability { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableModelExplainability; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableModelExplainability = value ?? default(bool); }

        /// <summary>Flag for enabling onnx compatible models.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public bool? TrainingSettingEnableOnnxCompatibleModel { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableOnnxCompatibleModel; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableOnnxCompatibleModel = value ?? default(bool); }

        /// <summary>Enable stack ensemble run.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public bool? TrainingSettingEnableStackEnsemble { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableStackEnsemble; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableStackEnsemble = value ?? default(bool); }

        /// <summary>Enable voting ensemble run.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public bool? TrainingSettingEnableVoteEnsemble { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableVoteEnsemble; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnableVoteEnsemble = value ?? default(bool); }

        /// <summary>
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? TrainingSettingEnsembleModelDownloadTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnsembleModelDownloadTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).EnsembleModelDownloadTimeout = value ?? default(global::System.TimeSpan); }

        /// <summary>Optional parameters to pass to the initializer of the meta-learner.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.IAny TrainingSettingStackEnsembleSettingStackMetaLearnerKWarg { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSettingStackMetaLearnerKWarg; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSettingStackMetaLearnerKWarg = value ?? null /* model class */; }

        /// <summary>
        /// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for
        /// training the meta-learner. Default value is 0.2.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public double? TrainingSettingStackEnsembleSettingStackMetaLearnerTrainPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSettingStackMetaLearnerTrainPercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSettingStackMetaLearnerTrainPercentage = value ?? default(double); }

        /// <summary>
        /// The meta-learner is a model trained on the output of the individual heterogeneous models.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.StackMetaLearnerType? TrainingSettingStackEnsembleSettingStackMetaLearnerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSettingStackMetaLearnerType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITrainingSettingsInternal)TrainingSetting).StackEnsembleSettingStackMetaLearnerType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.StackMetaLearnerType)""); }

        /// <summary>Validation data inputs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IMlTableJobInput ValidationData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationData = value ?? null /* model class */; }

        /// <summary>Description for the input.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string ValidationDataDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataDescription = value ?? null; }

        /// <summary>[Required] Specifies the type of job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.JobInputType? ValidationDataJobInputType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataJobInputType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataJobInputType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.JobInputType)""); }

        /// <summary>Input Asset Delivery Mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.InputDeliveryMode? ValidationDataMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.InputDeliveryMode)""); }

        /// <summary>
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public double? ValidationDataSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataSize = value ?? default(double); }

        /// <summary>[Required] Input Asset URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string ValidationDataUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).ValidationDataUri = value ?? null; }

        /// <summary>
        /// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to
        /// be weighted up or down.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inherited)]
        public string WeightColumnName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).WeightColumnName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal)__tableVertical).WeightColumnName = value ?? null; }

        /// <summary>Creates an new <see cref="Forecasting" /> instance.</summary>
        public Forecasting()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__tableVertical), __tableVertical);
            await eventListener.AssertObjectIsValid(nameof(__tableVertical), __tableVertical);
            await eventListener.AssertNotNull(nameof(__autoMlVertical), __autoMlVertical);
            await eventListener.AssertObjectIsValid(nameof(__autoMlVertical), __autoMlVertical);
        }
    }
    /// Forecasting task in AutoML Table vertical.
    public partial interface IForecasting :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVertical,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVertical
    {
        /// <summary>[Required] Set forecast horizon value selection mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[Required] Set forecast horizon value selection mode.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode? ForecastHorizonMode { get; set; }
        /// <summary>Primary metric for forecasting task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Primary metric for forecasting task.",
        SerializedName = @"primaryMetric",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingPrimaryMetrics) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingPrimaryMetrics? PrimaryMetric { get; set; }
        /// <summary>[Required] Seasonality mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[Required] Seasonality mode.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode? SeasonalityMode { get; set; }
        /// <summary>
        /// Country or region for holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Country or region for holidays for forecasting tasks.
        These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.",
        SerializedName = @"countryOrRegionForHolidays",
        PossibleTypes = new [] { typeof(string) })]
        string SettingCountryOrRegionForHoliday { get; set; }
        /// <summary>
        /// Number of periods between the origin time of one CV fold and the next fold. For
        /// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
        /// three days apart.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of periods between the origin time of one CV fold and the next fold. For
        example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
        three days apart.",
        SerializedName = @"cvStepSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SettingCvStepSize { get; set; }
        /// <summary>Flag for generating lags for the numeric features with 'auto' or null.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for generating lags for the numeric features with 'auto' or null.",
        SerializedName = @"featureLags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags? SettingFeatureLag { get; set; }
        /// <summary>
        /// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly,
        /// yearly, etc. The forecast frequency is dataset frequency by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.",
        SerializedName = @"frequency",
        PossibleTypes = new [] { typeof(string) })]
        string SettingFrequency { get; set; }
        /// <summary>The parameter defining how if AutoML should handle short time series.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The parameter defining how if AutoML should handle short time series.",
        SerializedName = @"shortSeriesHandlingConfig",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration? SettingShortSeriesHandlingConfig { get; set; }
        /// <summary>
        /// The function to be used to aggregate the time series target column to conform to a user specified frequency.
        /// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible
        /// target aggregation functions are: "sum", "max", "min" and "mean".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The function to be used to aggregate the time series target column to conform to a user specified frequency.
        If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: ""sum"", ""max"", ""min"" and ""mean"".",
        SerializedName = @"targetAggregateFunction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction? SettingTargetAggregateFunction { get; set; }
        /// <summary>
        /// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data
        /// used for building the time series and inferring its frequency.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.",
        SerializedName = @"timeColumnName",
        PossibleTypes = new [] { typeof(string) })]
        string SettingTimeColumnName { get; set; }
        /// <summary>
        /// The names of columns used to group a timeseries. It can be used to create multiple series.
        /// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The names of columns used to group a timeseries. It can be used to create multiple series.
        If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.",
        SerializedName = @"timeSeriesIdColumnNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] SettingTimeSeriesIdColumnName { get; set; }
        /// <summary>Configure STL Decomposition of the time-series target column.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configure STL Decomposition of the time-series target column.",
        SerializedName = @"useStl",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl? SettingUseStl { get; set; }
        /// <summary>[Required] Set target lags mode - Auto/Custom</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[Required] Set target lags mode - Auto/Custom",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode? TargetLagMode { get; set; }
        /// <summary>[Required] TargetRollingWindowSiz detection mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[Required] TargetRollingWindowSiz detection mode.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode? TargetRollingWindowSizeMode { get; set; }
        /// <summary>Allowed models for forecasting task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allowed models for forecasting task.",
        SerializedName = @"allowedTrainingAlgorithms",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels[] TrainingSettingAllowedTrainingAlgorithm { get; set; }
        /// <summary>Blocked models for forecasting task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blocked models for forecasting task.",
        SerializedName = @"blockedTrainingAlgorithms",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels[] TrainingSettingBlockedTrainingAlgorithm { get; set; }
        /// <summary>Enable recommendation of DNN models.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable recommendation of DNN models.",
        SerializedName = @"enableDnnTraining",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrainingSettingEnableDnnTraining { get; set; }
        /// <summary>Flag to turn on explainability on best model.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to turn on explainability on best model.",
        SerializedName = @"enableModelExplainability",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrainingSettingEnableModelExplainability { get; set; }
        /// <summary>Flag for enabling onnx compatible models.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag for enabling onnx compatible models.",
        SerializedName = @"enableOnnxCompatibleModels",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrainingSettingEnableOnnxCompatibleModel { get; set; }
        /// <summary>Enable stack ensemble run.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable stack ensemble run.",
        SerializedName = @"enableStackEnsemble",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrainingSettingEnableStackEnsemble { get; set; }
        /// <summary>Enable voting ensemble run.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable voting ensemble run.",
        SerializedName = @"enableVoteEnsemble",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrainingSettingEnableVoteEnsemble { get; set; }
        /// <summary>
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        Configure this parameter with a higher value than 300 secs, if more time is needed.",
        SerializedName = @"ensembleModelDownloadTimeout",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? TrainingSettingEnsembleModelDownloadTimeout { get; set; }
        /// <summary>Optional parameters to pass to the initializer of the meta-learner.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional parameters to pass to the initializer of the meta-learner.",
        SerializedName = @"stackMetaLearnerKWargs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.IAny TrainingSettingStackEnsembleSettingStackMetaLearnerKWarg { get; set; }
        /// <summary>
        /// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for
        /// training the meta-learner. Default value is 0.2.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.",
        SerializedName = @"stackMetaLearnerTrainPercentage",
        PossibleTypes = new [] { typeof(double) })]
        double? TrainingSettingStackEnsembleSettingStackMetaLearnerTrainPercentage { get; set; }
        /// <summary>
        /// The meta-learner is a model trained on the output of the individual heterogeneous models.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The meta-learner is a model trained on the output of the individual heterogeneous models.",
        SerializedName = @"stackMetaLearnerType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.StackMetaLearnerType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.StackMetaLearnerType? TrainingSettingStackEnsembleSettingStackMetaLearnerType { get; set; }

    }
    /// Forecasting task in AutoML Table vertical.
    internal partial interface IForecastingInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITableVerticalInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IAutoMlVerticalInternal
    {
        /// <summary>[Required] Set forecast horizon value selection mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode? ForecastHorizonMode { get; set; }
        /// <summary>Primary metric for forecasting task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingPrimaryMetrics? PrimaryMetric { get; set; }
        /// <summary>[Required] Seasonality mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode? SeasonalityMode { get; set; }
        /// <summary>Forecasting task specific inputs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings Setting { get; set; }
        /// <summary>
        /// Country or region for holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
        /// </summary>
        string SettingCountryOrRegionForHoliday { get; set; }
        /// <summary>
        /// Number of periods between the origin time of one CV fold and the next fold. For
        /// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
        /// three days apart.
        /// </summary>
        int? SettingCvStepSize { get; set; }
        /// <summary>Flag for generating lags for the numeric features with 'auto' or null.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags? SettingFeatureLag { get; set; }
        /// <summary>The desired maximum forecast horizon in units of time-series frequency.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastHorizon SettingForecastHorizon { get; set; }
        /// <summary>
        /// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly,
        /// yearly, etc. The forecast frequency is dataset frequency by default.
        /// </summary>
        string SettingFrequency { get; set; }
        /// <summary>
        /// Set time series seasonality as an integer multiple of the series frequency.
        /// If seasonality is set to 'auto', it will be inferred.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ISeasonality SettingSeasonality { get; set; }
        /// <summary>The parameter defining how if AutoML should handle short time series.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration? SettingShortSeriesHandlingConfig { get; set; }
        /// <summary>
        /// The function to be used to aggregate the time series target column to conform to a user specified frequency.
        /// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible
        /// target aggregation functions are: "sum", "max", "min" and "mean".
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction? SettingTargetAggregateFunction { get; set; }
        /// <summary>The number of past periods to lag from the target column.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetLags SettingTargetLag { get; set; }
        /// <summary>
        /// The number of past periods used to create a rolling window average of the target column.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetRollingWindowSize SettingTargetRollingWindowSize { get; set; }
        /// <summary>
        /// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data
        /// used for building the time series and inferring its frequency.
        /// </summary>
        string SettingTimeColumnName { get; set; }
        /// <summary>
        /// The names of columns used to group a timeseries. It can be used to create multiple series.
        /// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
        /// </summary>
        string[] SettingTimeSeriesIdColumnName { get; set; }
        /// <summary>Configure STL Decomposition of the time-series target column.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl? SettingUseStl { get; set; }
        /// <summary>[Required] Set target lags mode - Auto/Custom</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode? TargetLagMode { get; set; }
        /// <summary>[Required] TargetRollingWindowSiz detection mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode? TargetRollingWindowSizeMode { get; set; }
        /// <summary>Inputs for training phase for an AutoML Job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingTrainingSettings TrainingSetting { get; set; }
        /// <summary>Allowed models for forecasting task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels[] TrainingSettingAllowedTrainingAlgorithm { get; set; }
        /// <summary>Blocked models for forecasting task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModels[] TrainingSettingBlockedTrainingAlgorithm { get; set; }
        /// <summary>Enable recommendation of DNN models.</summary>
        bool? TrainingSettingEnableDnnTraining { get; set; }
        /// <summary>Flag to turn on explainability on best model.</summary>
        bool? TrainingSettingEnableModelExplainability { get; set; }
        /// <summary>Flag for enabling onnx compatible models.</summary>
        bool? TrainingSettingEnableOnnxCompatibleModel { get; set; }
        /// <summary>Enable stack ensemble run.</summary>
        bool? TrainingSettingEnableStackEnsemble { get; set; }
        /// <summary>Enable voting ensemble run.</summary>
        bool? TrainingSettingEnableVoteEnsemble { get; set; }
        /// <summary>
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </summary>
        global::System.TimeSpan? TrainingSettingEnsembleModelDownloadTimeout { get; set; }
        /// <summary>Stack ensemble settings for stack ensemble run.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IStackEnsembleSettings TrainingSettingStackEnsembleSetting { get; set; }
        /// <summary>Optional parameters to pass to the initializer of the meta-learner.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.IAny TrainingSettingStackEnsembleSettingStackMetaLearnerKWarg { get; set; }
        /// <summary>
        /// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for
        /// training the meta-learner. Default value is 0.2.
        /// </summary>
        double? TrainingSettingStackEnsembleSettingStackMetaLearnerTrainPercentage { get; set; }
        /// <summary>
        /// The meta-learner is a model trained on the output of the individual heterogeneous models.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.StackMetaLearnerType? TrainingSettingStackEnsembleSettingStackMetaLearnerType { get; set; }

    }
}