// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401
{
    using Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.PowerShell;

    /// <summary>Forecasting specific parameters.</summary>
    [System.ComponentModel.TypeConverter(typeof(ForecastingSettingsTypeConverter))]
    public partial class ForecastingSettings
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingSettings"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ForecastingSettings(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingSettings"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ForecastingSettings(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingSettings"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ForecastingSettings(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ForecastHorizon"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizon = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastHorizon) content.GetValueForProperty("ForecastHorizon",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizon, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastHorizonTypeConverter.ConvertFrom);
            }
            if (content.Contains("Seasonality"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Seasonality = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ISeasonality) content.GetValueForProperty("Seasonality",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Seasonality, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.SeasonalityTypeConverter.ConvertFrom);
            }
            if (content.Contains("TargetLag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLag = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetLags) content.GetValueForProperty("TargetLag",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLag, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.TargetLagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TargetRollingWindowSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSize = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetRollingWindowSize) content.GetValueForProperty("TargetRollingWindowSize",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSize, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.TargetRollingWindowSizeTypeConverter.ConvertFrom);
            }
            if (content.Contains("CountryOrRegionForHoliday"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CountryOrRegionForHoliday = (string) content.GetValueForProperty("CountryOrRegionForHoliday",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CountryOrRegionForHoliday, global::System.Convert.ToString);
            }
            if (content.Contains("CvStepSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CvStepSize = (int?) content.GetValueForProperty("CvStepSize",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CvStepSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("FeatureLag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).FeatureLag = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags?) content.GetValueForProperty("FeatureLag",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).FeatureLag, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags.CreateFrom);
            }
            if (content.Contains("Frequency"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Frequency = (string) content.GetValueForProperty("Frequency",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Frequency, global::System.Convert.ToString);
            }
            if (content.Contains("ShortSeriesHandlingConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ShortSeriesHandlingConfig = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration?) content.GetValueForProperty("ShortSeriesHandlingConfig",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ShortSeriesHandlingConfig, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration.CreateFrom);
            }
            if (content.Contains("TargetAggregateFunction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetAggregateFunction = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction?) content.GetValueForProperty("TargetAggregateFunction",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetAggregateFunction, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction.CreateFrom);
            }
            if (content.Contains("TimeColumnName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeColumnName = (string) content.GetValueForProperty("TimeColumnName",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeColumnName, global::System.Convert.ToString);
            }
            if (content.Contains("TimeSeriesIdColumnName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeSeriesIdColumnName = (string[]) content.GetValueForProperty("TimeSeriesIdColumnName",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeSeriesIdColumnName, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UseStl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).UseStl = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl?) content.GetValueForProperty("UseStl",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).UseStl, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl.CreateFrom);
            }
            if (content.Contains("ForecastHorizonMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizonMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode) content.GetValueForProperty("ForecastHorizonMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizonMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode.CreateFrom);
            }
            if (content.Contains("SeasonalityMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).SeasonalityMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode) content.GetValueForProperty("SeasonalityMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).SeasonalityMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode.CreateFrom);
            }
            if (content.Contains("TargetLagMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLagMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode) content.GetValueForProperty("TargetLagMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLagMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode.CreateFrom);
            }
            if (content.Contains("TargetRollingWindowSizeMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSizeMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode) content.GetValueForProperty("TargetRollingWindowSizeMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSizeMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode.CreateFrom);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastingSettings"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ForecastingSettings(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ForecastHorizon"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizon = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastHorizon) content.GetValueForProperty("ForecastHorizon",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizon, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ForecastHorizonTypeConverter.ConvertFrom);
            }
            if (content.Contains("Seasonality"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Seasonality = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ISeasonality) content.GetValueForProperty("Seasonality",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Seasonality, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.SeasonalityTypeConverter.ConvertFrom);
            }
            if (content.Contains("TargetLag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLag = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetLags) content.GetValueForProperty("TargetLag",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLag, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.TargetLagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TargetRollingWindowSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSize = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.ITargetRollingWindowSize) content.GetValueForProperty("TargetRollingWindowSize",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSize, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.TargetRollingWindowSizeTypeConverter.ConvertFrom);
            }
            if (content.Contains("CountryOrRegionForHoliday"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CountryOrRegionForHoliday = (string) content.GetValueForProperty("CountryOrRegionForHoliday",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CountryOrRegionForHoliday, global::System.Convert.ToString);
            }
            if (content.Contains("CvStepSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CvStepSize = (int?) content.GetValueForProperty("CvStepSize",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).CvStepSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("FeatureLag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).FeatureLag = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags?) content.GetValueForProperty("FeatureLag",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).FeatureLag, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.FeatureLags.CreateFrom);
            }
            if (content.Contains("Frequency"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Frequency = (string) content.GetValueForProperty("Frequency",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).Frequency, global::System.Convert.ToString);
            }
            if (content.Contains("ShortSeriesHandlingConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ShortSeriesHandlingConfig = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration?) content.GetValueForProperty("ShortSeriesHandlingConfig",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ShortSeriesHandlingConfig, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ShortSeriesHandlingConfiguration.CreateFrom);
            }
            if (content.Contains("TargetAggregateFunction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetAggregateFunction = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction?) content.GetValueForProperty("TargetAggregateFunction",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetAggregateFunction, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetAggregationFunction.CreateFrom);
            }
            if (content.Contains("TimeColumnName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeColumnName = (string) content.GetValueForProperty("TimeColumnName",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeColumnName, global::System.Convert.ToString);
            }
            if (content.Contains("TimeSeriesIdColumnName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeSeriesIdColumnName = (string[]) content.GetValueForProperty("TimeSeriesIdColumnName",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TimeSeriesIdColumnName, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UseStl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).UseStl = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl?) content.GetValueForProperty("UseStl",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).UseStl, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.UseStl.CreateFrom);
            }
            if (content.Contains("ForecastHorizonMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizonMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode) content.GetValueForProperty("ForecastHorizonMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).ForecastHorizonMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastHorizonMode.CreateFrom);
            }
            if (content.Contains("SeasonalityMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).SeasonalityMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode) content.GetValueForProperty("SeasonalityMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).SeasonalityMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SeasonalityMode.CreateFrom);
            }
            if (content.Contains("TargetLagMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLagMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode) content.GetValueForProperty("TargetLagMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetLagMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetLagsMode.CreateFrom);
            }
            if (content.Contains("TargetRollingWindowSizeMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSizeMode = (Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode) content.GetValueForProperty("TargetRollingWindowSizeMode",((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettingsInternal)this).TargetRollingWindowSizeMode, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TargetRollingWindowSizeMode.CreateFrom);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ForecastingSettings" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ForecastingSettings" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IForecastingSettings FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Forecasting specific parameters.
    [System.ComponentModel.TypeConverter(typeof(ForecastingSettingsTypeConverter))]
    public partial interface IForecastingSettings

    {

    }
}