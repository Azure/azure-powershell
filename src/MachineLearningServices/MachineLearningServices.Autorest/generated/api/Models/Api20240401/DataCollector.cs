// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Extensions;

    public partial class DataCollector :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollector,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorInternal
    {

        /// <summary>Backing field for <see cref="Collection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorCollections _collection;

        /// <summary>
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of
        /// collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and
        /// response are reserved for payload logging, others are for custom logging.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorCollections Collection { get => (this._collection = this._collection ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.DataCollectorCollections()); set => this._collection = value; }

        /// <summary>Internal Acessors for RequestLogging</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IRequestLogging Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorInternal.RequestLogging { get => (this._requestLogging = this._requestLogging ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.RequestLogging()); set { {_requestLogging = value;} } }

        /// <summary>Backing field for <see cref="RequestLogging" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IRequestLogging _requestLogging;

        /// <summary>
        /// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IRequestLogging RequestLogging { get => (this._requestLogging = this._requestLogging ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.RequestLogging()); set => this._requestLogging = value; }

        /// <summary>
        /// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they
        /// can set them in captureHeaders so that backend will collect those headers along with payload.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string[] RequestLoggingCaptureHeader { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IRequestLoggingInternal)RequestLogging).CaptureHeader; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IRequestLoggingInternal)RequestLogging).CaptureHeader = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="RollingRate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RollingRateType? _rollingRate;

        /// <summary>
        /// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them
        /// in a single blob file.
        /// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        /// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        /// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RollingRateType? RollingRate { get => this._rollingRate; set => this._rollingRate = value; }

        /// <summary>Creates an new <see cref="DataCollector" /> instance.</summary>
        public DataCollector()
        {

        }
    }
    public partial interface IDataCollector :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IJsonSerializable
    {
        /// <summary>
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of
        /// collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and
        /// response are reserved for payload logging, others are for custom logging.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"[Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
        Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.",
        SerializedName = @"collections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorCollections) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorCollections Collection { get; set; }
        /// <summary>
        /// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they
        /// can set them in captureHeaders so that backend will collect those headers along with payload.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.",
        SerializedName = @"captureHeaders",
        PossibleTypes = new [] { typeof(string) })]
        string[] RequestLoggingCaptureHeader { get; set; }
        /// <summary>
        /// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them
        /// in a single blob file.
        /// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        /// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        /// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
        If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.",
        SerializedName = @"rollingRate",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RollingRateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RollingRateType? RollingRate { get; set; }

    }
    internal partial interface IDataCollectorInternal

    {
        /// <summary>
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of
        /// collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and
        /// response are reserved for payload logging, others are for custom logging.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IDataCollectorCollections Collection { get; set; }
        /// <summary>
        /// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IRequestLogging RequestLogging { get; set; }
        /// <summary>
        /// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they
        /// can set them in captureHeaders so that backend will collect those headers along with payload.
        /// </summary>
        string[] RequestLoggingCaptureHeader { get; set; }
        /// <summary>
        /// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them
        /// in a single blob file.
        /// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        /// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        /// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RollingRateType? RollingRate { get; set; }

    }
}