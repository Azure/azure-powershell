// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Extensions;

    /// <summary>
    /// Distribution expressions to sweep over values of model settings.
    /// <example>
    /// Some examples are:
    /// ```
    /// ModelName = "choice('seresnext', 'resnest50')";
    /// LearningRate = "uniform(0.001, 0.01)";
    /// LayersToFreeze = "choice(0, 2)";
    /// ```</example>
    /// All distributions can be specified as distribution_name(min, max) or choice(val1, val2, ..., valn)
    /// where distribution name can be: uniform, quniform, loguniform, etc
    /// For more details on how to compose distribution expressions please check the documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    /// </summary>
    public partial class ImageModelDistributionSettings :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IImageModelDistributionSettings,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20240401.IImageModelDistributionSettingsInternal
    {

        /// <summary>Backing field for <see cref="AmsGradient" /> property.</summary>
        private string _amsGradient;

        /// <summary>Enable AMSGrad when optimizer is 'adam' or 'adamw'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string AmsGradient { get => this._amsGradient; set => this._amsGradient = value; }

        /// <summary>Backing field for <see cref="Augmentation" /> property.</summary>
        private string _augmentation;

        /// <summary>Settings for using Augmentations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Augmentation { get => this._augmentation; set => this._augmentation = value; }

        /// <summary>Backing field for <see cref="Beta1" /> property.</summary>
        private string _beta1;

        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Beta1 { get => this._beta1; set => this._beta1 = value; }

        /// <summary>Backing field for <see cref="Beta2" /> property.</summary>
        private string _beta2;

        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Beta2 { get => this._beta2; set => this._beta2 = value; }

        /// <summary>Backing field for <see cref="Distributed" /> property.</summary>
        private string _distributed;

        /// <summary>Whether to use distributer training.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Distributed { get => this._distributed; set => this._distributed = value; }

        /// <summary>Backing field for <see cref="EarlyStopping" /> property.</summary>
        private string _earlyStopping;

        /// <summary>Enable early stopping logic during training.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string EarlyStopping { get => this._earlyStopping; set => this._earlyStopping = value; }

        /// <summary>Backing field for <see cref="EarlyStoppingDelay" /> property.</summary>
        private string _earlyStoppingDelay;

        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string EarlyStoppingDelay { get => this._earlyStoppingDelay; set => this._earlyStoppingDelay = value; }

        /// <summary>Backing field for <see cref="EarlyStoppingPatience" /> property.</summary>
        private string _earlyStoppingPatience;

        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string EarlyStoppingPatience { get => this._earlyStoppingPatience; set => this._earlyStoppingPatience = value; }

        /// <summary>Backing field for <see cref="EnableOnnxNormalization" /> property.</summary>
        private string _enableOnnxNormalization;

        /// <summary>Enable normalization when exporting ONNX model.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string EnableOnnxNormalization { get => this._enableOnnxNormalization; set => this._enableOnnxNormalization = value; }

        /// <summary>Backing field for <see cref="EvaluationFrequency" /> property.</summary>
        private string _evaluationFrequency;

        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string EvaluationFrequency { get => this._evaluationFrequency; set => this._evaluationFrequency = value; }

        /// <summary>Backing field for <see cref="GradientAccumulationStep" /> property.</summary>
        private string _gradientAccumulationStep;

        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string GradientAccumulationStep { get => this._gradientAccumulationStep; set => this._gradientAccumulationStep = value; }

        /// <summary>Backing field for <see cref="LayersToFreeze" /> property.</summary>
        private string _layersToFreeze;

        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string LayersToFreeze { get => this._layersToFreeze; set => this._layersToFreeze = value; }

        /// <summary>Backing field for <see cref="LearningRate" /> property.</summary>
        private string _learningRate;

        /// <summary>Initial learning rate. Must be a float in the range [0, 1].</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string LearningRate { get => this._learningRate; set => this._learningRate = value; }

        /// <summary>Backing field for <see cref="LearningRateScheduler" /> property.</summary>
        private string _learningRateScheduler;

        /// <summary>Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string LearningRateScheduler { get => this._learningRateScheduler; set => this._learningRateScheduler = value; }

        /// <summary>Backing field for <see cref="ModelName" /> property.</summary>
        private string _modelName;

        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string ModelName { get => this._modelName; set => this._modelName = value; }

        /// <summary>Backing field for <see cref="Momentum" /> property.</summary>
        private string _momentum;

        /// <summary>Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Momentum { get => this._momentum; set => this._momentum = value; }

        /// <summary>Backing field for <see cref="Nesterov" /> property.</summary>
        private string _nesterov;

        /// <summary>Enable nesterov when optimizer is 'sgd'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Nesterov { get => this._nesterov; set => this._nesterov = value; }

        /// <summary>Backing field for <see cref="NumberOfEpoch" /> property.</summary>
        private string _numberOfEpoch;

        /// <summary>Number of training epochs. Must be a positive integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string NumberOfEpoch { get => this._numberOfEpoch; set => this._numberOfEpoch = value; }

        /// <summary>Backing field for <see cref="NumberOfWorker" /> property.</summary>
        private string _numberOfWorker;

        /// <summary>Number of data loader workers. Must be a non-negative integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string NumberOfWorker { get => this._numberOfWorker; set => this._numberOfWorker = value; }

        /// <summary>Backing field for <see cref="Optimizer" /> property.</summary>
        private string _optimizer;

        /// <summary>Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string Optimizer { get => this._optimizer; set => this._optimizer = value; }

        /// <summary>Backing field for <see cref="RandomSeed" /> property.</summary>
        private string _randomSeed;

        /// <summary>Random seed to be used when using deterministic training.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string RandomSeed { get => this._randomSeed; set => this._randomSeed = value; }

        /// <summary>Backing field for <see cref="StepLrGamma" /> property.</summary>
        private string _stepLrGamma;

        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string StepLrGamma { get => this._stepLrGamma; set => this._stepLrGamma = value; }

        /// <summary>Backing field for <see cref="StepLrStepSize" /> property.</summary>
        private string _stepLrStepSize;

        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string StepLrStepSize { get => this._stepLrStepSize; set => this._stepLrStepSize = value; }

        /// <summary>Backing field for <see cref="TrainingBatchSize" /> property.</summary>
        private string _trainingBatchSize;

        /// <summary>Training batch size. Must be a positive integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string TrainingBatchSize { get => this._trainingBatchSize; set => this._trainingBatchSize = value; }

        /// <summary>Backing field for <see cref="ValidationBatchSize" /> property.</summary>
        private string _validationBatchSize;

        /// <summary>Validation batch size. Must be a positive integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string ValidationBatchSize { get => this._validationBatchSize; set => this._validationBatchSize = value; }

        /// <summary>Backing field for <see cref="WarmupCosineLrCycle" /> property.</summary>
        private string _warmupCosineLrCycle;

        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string WarmupCosineLrCycle { get => this._warmupCosineLrCycle; set => this._warmupCosineLrCycle = value; }

        /// <summary>Backing field for <see cref="WarmupCosineLrWarmupEpoch" /> property.</summary>
        private string _warmupCosineLrWarmupEpoch;

        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string WarmupCosineLrWarmupEpoch { get => this._warmupCosineLrWarmupEpoch; set => this._warmupCosineLrWarmupEpoch = value; }

        /// <summary>Backing field for <see cref="WeightDecay" /> property.</summary>
        private string _weightDecay;

        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        public string WeightDecay { get => this._weightDecay; set => this._weightDecay = value; }

        /// <summary>Creates an new <see cref="ImageModelDistributionSettings" /> instance.</summary>
        public ImageModelDistributionSettings()
        {

        }
    }
    /// Distribution expressions to sweep over values of model settings.
    /// <example>
    /// Some examples are:
    /// ```
    /// ModelName = "choice('seresnext', 'resnest50')";
    /// LearningRate = "uniform(0.001, 0.01)";
    /// LayersToFreeze = "choice(0, 2)";
    /// ```</example>
    /// All distributions can be specified as distribution_name(min, max) or choice(val1, val2, ..., valn)
    /// where distribution name can be: uniform, quniform, loguniform, etc
    /// For more details on how to compose distribution expressions please check the documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    public partial interface IImageModelDistributionSettings :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IJsonSerializable
    {
        /// <summary>Enable AMSGrad when optimizer is 'adam' or 'adamw'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable AMSGrad when optimizer is 'adam' or 'adamw'.",
        SerializedName = @"amsGradient",
        PossibleTypes = new [] { typeof(string) })]
        string AmsGradient { get; set; }
        /// <summary>Settings for using Augmentations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Settings for using Augmentations.",
        SerializedName = @"augmentations",
        PossibleTypes = new [] { typeof(string) })]
        string Augmentation { get; set; }
        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].",
        SerializedName = @"beta1",
        PossibleTypes = new [] { typeof(string) })]
        string Beta1 { get; set; }
        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].",
        SerializedName = @"beta2",
        PossibleTypes = new [] { typeof(string) })]
        string Beta2 { get; set; }
        /// <summary>Whether to use distributer training.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to use distributer training.",
        SerializedName = @"distributed",
        PossibleTypes = new [] { typeof(string) })]
        string Distributed { get; set; }
        /// <summary>Enable early stopping logic during training.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable early stopping logic during training.",
        SerializedName = @"earlyStopping",
        PossibleTypes = new [] { typeof(string) })]
        string EarlyStopping { get; set; }
        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum number of epochs or validation evaluations to wait before primary metric improvement
        is tracked for early stopping. Must be a positive integer.",
        SerializedName = @"earlyStoppingDelay",
        PossibleTypes = new [] { typeof(string) })]
        string EarlyStoppingDelay { get; set; }
        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum number of epochs or validation evaluations with no primary metric improvement before
        the run is stopped. Must be a positive integer.",
        SerializedName = @"earlyStoppingPatience",
        PossibleTypes = new [] { typeof(string) })]
        string EarlyStoppingPatience { get; set; }
        /// <summary>Enable normalization when exporting ONNX model.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable normalization when exporting ONNX model.",
        SerializedName = @"enableOnnxNormalization",
        PossibleTypes = new [] { typeof(string) })]
        string EnableOnnxNormalization { get; set; }
        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.",
        SerializedName = @"evaluationFrequency",
        PossibleTypes = new [] { typeof(string) })]
        string EvaluationFrequency { get; set; }
        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gradient accumulation means running a configured number of ""GradAccumulationStep"" steps without
        updating the model weights while accumulating the gradients of those steps, and then using
        the accumulated gradients to compute the weight updates. Must be a positive integer.",
        SerializedName = @"gradientAccumulationStep",
        PossibleTypes = new [] { typeof(string) })]
        string GradientAccumulationStep { get; set; }
        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of layers to freeze for the model. Must be a positive integer.
        For instance, passing 2 as value for 'seresnext' means
        freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.",
        SerializedName = @"layersToFreeze",
        PossibleTypes = new [] { typeof(string) })]
        string LayersToFreeze { get; set; }
        /// <summary>Initial learning rate. Must be a float in the range [0, 1].</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Initial learning rate. Must be a float in the range [0, 1].",
        SerializedName = @"learningRate",
        PossibleTypes = new [] { typeof(string) })]
        string LearningRate { get; set; }
        /// <summary>Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.",
        SerializedName = @"learningRateScheduler",
        PossibleTypes = new [] { typeof(string) })]
        string LearningRateScheduler { get; set; }
        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the model to use for training.
        For more information on the available models please visit the official documentation:
        https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.",
        SerializedName = @"modelName",
        PossibleTypes = new [] { typeof(string) })]
        string ModelName { get; set; }
        /// <summary>Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].",
        SerializedName = @"momentum",
        PossibleTypes = new [] { typeof(string) })]
        string Momentum { get; set; }
        /// <summary>Enable nesterov when optimizer is 'sgd'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable nesterov when optimizer is 'sgd'.",
        SerializedName = @"nesterov",
        PossibleTypes = new [] { typeof(string) })]
        string Nesterov { get; set; }
        /// <summary>Number of training epochs. Must be a positive integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of training epochs. Must be a positive integer.",
        SerializedName = @"numberOfEpochs",
        PossibleTypes = new [] { typeof(string) })]
        string NumberOfEpoch { get; set; }
        /// <summary>Number of data loader workers. Must be a non-negative integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of data loader workers. Must be a non-negative integer.",
        SerializedName = @"numberOfWorkers",
        PossibleTypes = new [] { typeof(string) })]
        string NumberOfWorker { get; set; }
        /// <summary>Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.",
        SerializedName = @"optimizer",
        PossibleTypes = new [] { typeof(string) })]
        string Optimizer { get; set; }
        /// <summary>Random seed to be used when using deterministic training.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Random seed to be used when using deterministic training.",
        SerializedName = @"randomSeed",
        PossibleTypes = new [] { typeof(string) })]
        string RandomSeed { get; set; }
        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].",
        SerializedName = @"stepLRGamma",
        PossibleTypes = new [] { typeof(string) })]
        string StepLrGamma { get; set; }
        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of step size when learning rate scheduler is 'step'. Must be a positive integer.",
        SerializedName = @"stepLRStepSize",
        PossibleTypes = new [] { typeof(string) })]
        string StepLrStepSize { get; set; }
        /// <summary>Training batch size. Must be a positive integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Training batch size. Must be a positive integer.",
        SerializedName = @"trainingBatchSize",
        PossibleTypes = new [] { typeof(string) })]
        string TrainingBatchSize { get; set; }
        /// <summary>Validation batch size. Must be a positive integer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Validation batch size. Must be a positive integer.",
        SerializedName = @"validationBatchSize",
        PossibleTypes = new [] { typeof(string) })]
        string ValidationBatchSize { get; set; }
        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].",
        SerializedName = @"warmupCosineLRCycles",
        PossibleTypes = new [] { typeof(string) })]
        string WarmupCosineLrCycle { get; set; }
        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.",
        SerializedName = @"warmupCosineLRWarmupEpochs",
        PossibleTypes = new [] { typeof(string) })]
        string WarmupCosineLrWarmupEpoch { get; set; }
        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].",
        SerializedName = @"weightDecay",
        PossibleTypes = new [] { typeof(string) })]
        string WeightDecay { get; set; }

    }
    /// Distribution expressions to sweep over values of model settings.
    /// <example>
    /// Some examples are:
    /// ```
    /// ModelName = "choice('seresnext', 'resnest50')";
    /// LearningRate = "uniform(0.001, 0.01)";
    /// LayersToFreeze = "choice(0, 2)";
    /// ```</example>
    /// All distributions can be specified as distribution_name(min, max) or choice(val1, val2, ..., valn)
    /// where distribution name can be: uniform, quniform, loguniform, etc
    /// For more details on how to compose distribution expressions please check the documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    internal partial interface IImageModelDistributionSettingsInternal

    {
        /// <summary>Enable AMSGrad when optimizer is 'adam' or 'adamw'.</summary>
        string AmsGradient { get; set; }
        /// <summary>Settings for using Augmentations.</summary>
        string Augmentation { get; set; }
        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        string Beta1 { get; set; }
        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        string Beta2 { get; set; }
        /// <summary>Whether to use distributer training.</summary>
        string Distributed { get; set; }
        /// <summary>Enable early stopping logic during training.</summary>
        string EarlyStopping { get; set; }
        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        string EarlyStoppingDelay { get; set; }
        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        string EarlyStoppingPatience { get; set; }
        /// <summary>Enable normalization when exporting ONNX model.</summary>
        string EnableOnnxNormalization { get; set; }
        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        string EvaluationFrequency { get; set; }
        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        string GradientAccumulationStep { get; set; }
        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        string LayersToFreeze { get; set; }
        /// <summary>Initial learning rate. Must be a float in the range [0, 1].</summary>
        string LearningRate { get; set; }
        /// <summary>Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.</summary>
        string LearningRateScheduler { get; set; }
        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        string ModelName { get; set; }
        /// <summary>Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].</summary>
        string Momentum { get; set; }
        /// <summary>Enable nesterov when optimizer is 'sgd'.</summary>
        string Nesterov { get; set; }
        /// <summary>Number of training epochs. Must be a positive integer.</summary>
        string NumberOfEpoch { get; set; }
        /// <summary>Number of data loader workers. Must be a non-negative integer.</summary>
        string NumberOfWorker { get; set; }
        /// <summary>Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.</summary>
        string Optimizer { get; set; }
        /// <summary>Random seed to be used when using deterministic training.</summary>
        string RandomSeed { get; set; }
        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        string StepLrGamma { get; set; }
        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        string StepLrStepSize { get; set; }
        /// <summary>Training batch size. Must be a positive integer.</summary>
        string TrainingBatchSize { get; set; }
        /// <summary>Validation batch size. Must be a positive integer.</summary>
        string ValidationBatchSize { get; set; }
        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        string WarmupCosineLrCycle { get; set; }
        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        string WarmupCosineLrWarmupEpoch { get; set; }
        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        string WeightDecay { get; set; }

    }
}