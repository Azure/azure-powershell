// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support
{

    /// <summary>AutoMLJob Task type.</summary>
    public partial struct TaskType :
        System.IEquatable<TaskType>
    {
        /// <summary>
        /// Classification in machine learning and statistics is a supervised learning approach in which
        /// the computer program learns from the data given to it and make new observations or classifications.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType Classification = @"Classification";

        /// <summary>
        /// Forecasting is a special kind of regression task that deals with time-series data and creates forecasting model
        /// that can be used to predict the near future values based on the inputs.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType Forecasting = @"Forecasting";

        /// <summary>
        /// Image Classification. Multi-class image classification is used when an image is classified with only a single label
        /// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType ImageClassification = @"ImageClassification";

        /// <summary>
        /// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
        /// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType ImageClassificationMultilabel = @"ImageClassificationMultilabel";

        /// <summary>
        /// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
        /// drawing a polygon around each object in the image.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType ImageInstanceSegmentation = @"ImageInstanceSegmentation";

        /// <summary>
        /// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
        /// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType ImageObjectDetection = @"ImageObjectDetection";

        /// <summary>
        /// Regression means to predict the value using the input data. Regression models are used to predict a continuous value.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType Regression = @"Regression";

        /// <summary>
        /// Text classification (also known as text tagging or text categorization) is the process of sorting texts into categories.
        /// Categories are mutually exclusive.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType TextClassification = @"TextClassification";

        /// <summary>
        /// Multilabel classification task assigns each sample to a group (zero or more) of target labels.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType TextClassificationMultilabel = @"TextClassificationMultilabel";

        /// <summary>
        /// Text Named Entity Recognition a.k.a. TextNER.
        /// Named Entity Recognition (NER) is the ability to take free-form text and identify the occurrences of entities such as
        /// people, locations, organizations, and more.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType TextNer = @"TextNER";

        /// <summary>the value for an instance of the <see cref="TaskType" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to TaskType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="TaskType" />.</param>
        internal static object CreateFrom(object value)
        {
            return new TaskType(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type TaskType</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type TaskType (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is TaskType && Equals((TaskType)obj);
        }

        /// <summary>Returns hashCode for enum TaskType</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="TaskType"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private TaskType(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for TaskType</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to TaskType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="TaskType" />.</param>

        public static implicit operator TaskType(string value)
        {
            return new TaskType(value);
        }

        /// <summary>Implicit operator to convert TaskType to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="TaskType" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum TaskType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum TaskType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.TaskType e2)
        {
            return e2.Equals(e1);
        }
    }
}