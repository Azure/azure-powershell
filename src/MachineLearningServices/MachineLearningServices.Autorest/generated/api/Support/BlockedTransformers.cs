// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support
{

    /// <summary>Enum for all classification models supported by AutoML.</summary>
    public partial struct BlockedTransformers :
        System.IEquatable<BlockedTransformers>
    {
        /// <summary>Target encoding for categorical data.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers CatTargetEncoder = @"CatTargetEncoder";

        /// <summary>
        /// Count Vectorizer converts a collection of text documents to a matrix of token counts.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers CountVectorizer = @"CountVectorizer";

        /// <summary>
        /// Hashing One Hot Encoder can turn categorical variables into a limited number of new features. This is often used for high-cardinality
        /// categorical features.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers HashOneHotEncoder = @"HashOneHotEncoder";

        /// <summary>Label encoder converts labels/categorical variables in a numerical form.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers LabelEncoder = @"LabelEncoder";

        /// <summary>
        /// Naive Bayes is a classified that is used for classification of discrete features that are categorically distributed.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers NaiveBayes = @"NaiveBayes";

        /// <summary>Ohe hot encoding creates a binary feature transformation.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers OneHotEncoder = @"OneHotEncoder";

        /// <summary>Target encoding for text data.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers TextTargetEncoder = @"TextTargetEncoder";

        /// <summary>
        /// Tf-Idf stands for, term-frequency times inverse document-frequency. This is a common term weighting scheme for identifying
        /// information from documents.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers TfIdf = @"TfIdf";

        /// <summary>
        /// Weight of Evidence encoding is a technique used to encode categorical variables. It uses the natural log of the P(1)/P(0)
        /// to create weights.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers WoETargetEncoder = @"WoETargetEncoder";

        /// <summary>
        /// Word embedding helps represents words or phrases as a vector, or a series of numbers.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers WordEmbedding = @"WordEmbedding";

        /// <summary>the value for an instance of the <see cref="BlockedTransformers" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Creates an instance of the <see cref="BlockedTransformers"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private BlockedTransformers(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Conversion from arbitrary object to BlockedTransformers</summary>
        /// <param name="value">the value to convert to an instance of <see cref="BlockedTransformers" />.</param>
        internal static object CreateFrom(object value)
        {
            return new BlockedTransformers(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type BlockedTransformers</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type BlockedTransformers (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is BlockedTransformers && Equals((BlockedTransformers)obj);
        }

        /// <summary>Returns hashCode for enum BlockedTransformers</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for BlockedTransformers</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to BlockedTransformers</summary>
        /// <param name="value">the value to convert to an instance of <see cref="BlockedTransformers" />.</param>

        public static implicit operator BlockedTransformers(string value)
        {
            return new BlockedTransformers(value);
        }

        /// <summary>Implicit operator to convert BlockedTransformers to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="BlockedTransformers" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum BlockedTransformers</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum BlockedTransformers</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.BlockedTransformers e2)
        {
            return e2.Equals(e1);
        }
    }
}