// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Extensions;

    public partial class AksSchema :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchema,
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaInternal
    {

        /// <summary>Number of agents</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public int? AgentCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AgentCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AgentCount = value ?? default(int); }

        /// <summary>Agent virtual machine size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string AgentVMSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AgentVMSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AgentVMSize = value ?? null; }

        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified
        /// in serviceCidr.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string AkNetworkingConfigurationDnsServiceIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationDnsServiceIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationDnsServiceIP = value ?? null; }

        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes
        /// service address range.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string AkNetworkingConfigurationDockerBridgeCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationDockerBridgeCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationDockerBridgeCidr = value ?? null; }

        /// <summary>
        /// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string AkNetworkingConfigurationServiceCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationServiceCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationServiceCidr = value ?? null; }

        /// <summary>Virtual network subnet resource ID the compute nodes belong to</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string AkNetworkingConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AkNetworkingConfigurationSubnetId = value ?? null; }

        /// <summary>Cluster full qualified domain name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string ClusterFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).ClusterFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).ClusterFqdn = value ?? null; }

        /// <summary>Intended usage of the cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClusterPurpose? ClusterPurpose { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).ClusterPurpose; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).ClusterPurpose = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClusterPurpose)""); }

        /// <summary>Load Balancer Subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string LoadBalancerSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).LoadBalancerSubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).LoadBalancerSubnet = value ?? null; }

        /// <summary>Load Balancer Type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LoadBalancerType? LoadBalancerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).LoadBalancerType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).LoadBalancerType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LoadBalancerType)""); }

        /// <summary>Internal Acessors for NetworkingConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksNetworkingConfiguration Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaInternal.NetworkingConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AksNetworkingConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).AksNetworkingConfiguration = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaProperties Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.AksSchemaProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for SslConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISslConfiguration Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaInternal.SslConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfiguration = value; }

        /// <summary>Internal Acessors for SystemService</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISystemService[] Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaInternal.SystemService { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SystemService; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SystemService = value; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaProperties _property;

        /// <summary>AKS properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.AksSchemaProperties()); set => this._property = value; }

        /// <summary>Cert data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SslConfigurationCert { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationCert; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationCert = value ?? null; }

        /// <summary>CNAME of the cert</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SslConfigurationCname { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationCname; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationCname = value ?? null; }

        /// <summary>Key data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SslConfigurationKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationKey = value ?? null; }

        /// <summary>Leaf domain label of public endpoint</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public string SslConfigurationLeafDomainLabel { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationLeafDomainLabel; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationLeafDomainLabel = value ?? null; }

        /// <summary>Indicates whether to overwrite existing domain label.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public bool? SslConfigurationOverwriteExistingDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationOverwriteExistingDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationOverwriteExistingDomain = value ?? default(bool); }

        /// <summary>Enable or disable ssl for scoring</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SslConfigStatus? SslConfigurationStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SslConfigurationStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SslConfigStatus)""); }

        /// <summary>System services</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISystemService[] SystemService { get => ((Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaPropertiesInternal)Property).SystemService; }

        /// <summary>Creates an new <see cref="AksSchema" /> instance.</summary>
        public AksSchema()
        {

        }
    }
    public partial interface IAksSchema :
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.IJsonSerializable
    {
        /// <summary>Number of agents</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of agents",
        SerializedName = @"agentCount",
        PossibleTypes = new [] { typeof(int) })]
        int? AgentCount { get; set; }
        /// <summary>Agent virtual machine size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Agent virtual machine size",
        SerializedName = @"agentVmSize",
        PossibleTypes = new [] { typeof(string) })]
        string AgentVMSize { get; set; }
        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified
        /// in serviceCidr.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.",
        SerializedName = @"dnsServiceIP",
        PossibleTypes = new [] { typeof(string) })]
        string AkNetworkingConfigurationDnsServiceIP { get; set; }
        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes
        /// service address range.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.",
        SerializedName = @"dockerBridgeCidr",
        PossibleTypes = new [] { typeof(string) })]
        string AkNetworkingConfigurationDockerBridgeCidr { get; set; }
        /// <summary>
        /// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.",
        SerializedName = @"serviceCidr",
        PossibleTypes = new [] { typeof(string) })]
        string AkNetworkingConfigurationServiceCidr { get; set; }
        /// <summary>Virtual network subnet resource ID the compute nodes belong to</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual network subnet resource ID the compute nodes belong to",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string AkNetworkingConfigurationSubnetId { get; set; }
        /// <summary>Cluster full qualified domain name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cluster full qualified domain name",
        SerializedName = @"clusterFqdn",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterFqdn { get; set; }
        /// <summary>Intended usage of the cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Intended usage of the cluster",
        SerializedName = @"clusterPurpose",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClusterPurpose) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClusterPurpose? ClusterPurpose { get; set; }
        /// <summary>Load Balancer Subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load Balancer Subnet",
        SerializedName = @"loadBalancerSubnet",
        PossibleTypes = new [] { typeof(string) })]
        string LoadBalancerSubnet { get; set; }
        /// <summary>Load Balancer Type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load Balancer Type",
        SerializedName = @"loadBalancerType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LoadBalancerType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LoadBalancerType? LoadBalancerType { get; set; }
        /// <summary>Cert data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cert data",
        SerializedName = @"cert",
        PossibleTypes = new [] { typeof(string) })]
        string SslConfigurationCert { get; set; }
        /// <summary>CNAME of the cert</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CNAME of the cert",
        SerializedName = @"cname",
        PossibleTypes = new [] { typeof(string) })]
        string SslConfigurationCname { get; set; }
        /// <summary>Key data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key data",
        SerializedName = @"key",
        PossibleTypes = new [] { typeof(string) })]
        string SslConfigurationKey { get; set; }
        /// <summary>Leaf domain label of public endpoint</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Leaf domain label of public endpoint",
        SerializedName = @"leafDomainLabel",
        PossibleTypes = new [] { typeof(string) })]
        string SslConfigurationLeafDomainLabel { get; set; }
        /// <summary>Indicates whether to overwrite existing domain label.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to overwrite existing domain label.",
        SerializedName = @"overwriteExistingDomain",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SslConfigurationOverwriteExistingDomain { get; set; }
        /// <summary>Enable or disable ssl for scoring</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable ssl for scoring",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SslConfigStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SslConfigStatus? SslConfigurationStatus { get; set; }
        /// <summary>System services</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"System services",
        SerializedName = @"systemServices",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISystemService) })]
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISystemService[] SystemService { get;  }

    }
    internal partial interface IAksSchemaInternal

    {
        /// <summary>Number of agents</summary>
        int? AgentCount { get; set; }
        /// <summary>Agent virtual machine size</summary>
        string AgentVMSize { get; set; }
        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified
        /// in serviceCidr.
        /// </summary>
        string AkNetworkingConfigurationDnsServiceIP { get; set; }
        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes
        /// service address range.
        /// </summary>
        string AkNetworkingConfigurationDockerBridgeCidr { get; set; }
        /// <summary>
        /// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        string AkNetworkingConfigurationServiceCidr { get; set; }
        /// <summary>Virtual network subnet resource ID the compute nodes belong to</summary>
        string AkNetworkingConfigurationSubnetId { get; set; }
        /// <summary>Cluster full qualified domain name</summary>
        string ClusterFqdn { get; set; }
        /// <summary>Intended usage of the cluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClusterPurpose? ClusterPurpose { get; set; }
        /// <summary>Load Balancer Subnet</summary>
        string LoadBalancerSubnet { get; set; }
        /// <summary>Load Balancer Type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.LoadBalancerType? LoadBalancerType { get; set; }
        /// <summary>AKS networking configuration for vnet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksNetworkingConfiguration NetworkingConfiguration { get; set; }
        /// <summary>AKS properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IAksSchemaProperties Property { get; set; }
        /// <summary>SSL configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISslConfiguration SslConfiguration { get; set; }
        /// <summary>Cert data</summary>
        string SslConfigurationCert { get; set; }
        /// <summary>CNAME of the cert</summary>
        string SslConfigurationCname { get; set; }
        /// <summary>Key data</summary>
        string SslConfigurationKey { get; set; }
        /// <summary>Leaf domain label of public endpoint</summary>
        string SslConfigurationLeafDomainLabel { get; set; }
        /// <summary>Indicates whether to overwrite existing domain label.</summary>
        bool? SslConfigurationOverwriteExistingDomain { get; set; }
        /// <summary>Enable or disable ssl for scoring</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SslConfigStatus? SslConfigurationStatus { get; set; }
        /// <summary>System services</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ISystemService[] SystemService { get; set; }

    }
}