
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for ComputeInstance.
.Description
Create an in-memory object for ComputeInstance.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ComputeInstance
.Link
https://learn.microsoft.com/powershell/module/az.MachineLearningServices/new-AzMLWorkspaceComputeInstanceObject
#>
function New-AzMLWorkspaceComputeInstanceObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ComputeInstance')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The description of the Machine Learning compute.")]
        [string]
        $Description,
        [Parameter(HelpMessage="Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.")]
        [bool]
        $DisableLocalAuth,
        [Parameter(HelpMessage="ARM resource id of the underlying compute.")]
        [string]
        $ResourceId,
        [Parameter(HelpMessage="Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ApplicationSharingPolicy])]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ApplicationSharingPolicy]
        $ApplicationSharingPolicy,
        [Parameter(HelpMessage="User’s AAD Object Id.")]
        [string]
        $AssignedUserObjectId,
        [Parameter(HelpMessage="User’s AAD Tenant Id.")]
        [string]
        $AssignedUserTenantId,
        [Parameter(HelpMessage="The Compute Instance Authorization type. Available values are personal (default).")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ComputeInstanceAuthorizationType])]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ComputeInstanceAuthorizationType]
        $AuthorizationType,
        [Parameter(HelpMessage="Optional command line arguments passed to the script to run.")]
        [string]
        $CreationScriptArgument,
        [Parameter(HelpMessage="The location of scripts in the mounted volume.")]
        [string]
        $CreationScriptData,
        [Parameter(HelpMessage="The storage source of the script: inline, workspace.")]
        [string]
        $CreationScriptSource,
        [Parameter(HelpMessage="Optional time period passed to timeout command.")]
        [string]
        $CreationScriptTimeout,
        [Parameter(HelpMessage="Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.")]
        [bool]
        $EnableNodePublicIP,
        [Parameter(HelpMessage="Name of the last operation.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.OperationName])]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.OperationName]
        $LastOperationName,
        [Parameter(HelpMessage="Operation status.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.OperationStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.OperationStatus]
        $LastOperationStatus,
        [Parameter(HelpMessage="Time of the last operation.")]
        [System.DateTime]
        $LastOperationTime,
        [Parameter(HelpMessage="Trigger of operation.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.OperationTrigger])]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.OperationTrigger]
        $LastOperationTrigger,
        [Parameter(HelpMessage="The list of compute start stop schedules to be applied.")]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.IComputeStartStopSchedule[]]
        $ScheduleComputeStartStop,
        [Parameter(HelpMessage="Specifies the SSH rsa public key file as a string. Use `"ssh-keygen -t rsa -b 2048`" to generate your SSH key pairs.")]
        [string]
        $SshSettingAdminPublicKey,
        [Parameter(HelpMessage="State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SshPublicAccess])]
        [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.SshPublicAccess]
        $SshSettingSshPublicAccess,
        [Parameter(HelpMessage="Optional command line arguments passed to the script to run.")]
        [string]
        $StartupScriptArgument,
        [Parameter(HelpMessage="The location of scripts in the mounted volume.")]
        [string]
        $StartupScriptData,
        [Parameter(HelpMessage="The storage source of the script: inline, workspace.")]
        [string]
        $StartupScriptSource,
        [Parameter(HelpMessage="Optional time period passed to timeout command.")]
        [string]
        $StartupScriptTimeout,
        [Parameter(HelpMessage="The ID of the resource.")]
        [string]
        $SubnetId,
        [Parameter(HelpMessage="Virtual Machine Size.")]
        [string]
        $VMSize,
        [Parameter(HelpMessage="Runtime of compute instance.")]
        [string]
        $VersionRuntime
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Models.Api20220501.ComputeInstance]::New()
        $Object.Type = 'ComputeInstance'

        if ($PSBoundParameters.ContainsKey('Description')) {
            $Object.Description = $Description
        }
        if ($PSBoundParameters.ContainsKey('DisableLocalAuth')) {
            $Object.DisableLocalAuth = $DisableLocalAuth
        }
        if ($PSBoundParameters.ContainsKey('ResourceId')) {
            $Object.ResourceId = $ResourceId
        }
        if ($PSBoundParameters.ContainsKey('ApplicationSharingPolicy')) {
            $Object.ApplicationSharingPolicy = $ApplicationSharingPolicy
        }
        if ($PSBoundParameters.ContainsKey('AssignedUserObjectId')) {
            $Object.AssignedUserObjectId = $AssignedUserObjectId
        }
        if ($PSBoundParameters.ContainsKey('AssignedUserTenantId')) {
            $Object.AssignedUserTenantId = $AssignedUserTenantId
        }
        if ($PSBoundParameters.ContainsKey('AuthorizationType')) {
            $Object.AuthorizationType = $AuthorizationType
        }
        if ($PSBoundParameters.ContainsKey('CreationScriptArgument')) {
            $Object.CreationScriptArgument = $CreationScriptArgument
        }
        if ($PSBoundParameters.ContainsKey('CreationScriptData')) {
            $Object.CreationScriptData = $CreationScriptData
        }
        if ($PSBoundParameters.ContainsKey('CreationScriptSource')) {
            $Object.CreationScriptSource = $CreationScriptSource
        }
        if ($PSBoundParameters.ContainsKey('CreationScriptTimeout')) {
            $Object.CreationScriptTimeout = $CreationScriptTimeout
        }
        if ($PSBoundParameters.ContainsKey('EnableNodePublicIP')) {
            $Object.EnableNodePublicIP = $EnableNodePublicIP
        }
        if ($PSBoundParameters.ContainsKey('LastOperationName')) {
            $Object.LastOperationName = $LastOperationName
        }
        if ($PSBoundParameters.ContainsKey('LastOperationStatus')) {
            $Object.LastOperationStatus = $LastOperationStatus
        }
        if ($PSBoundParameters.ContainsKey('LastOperationTime')) {
            $Object.LastOperationTime = $LastOperationTime
        }
        if ($PSBoundParameters.ContainsKey('LastOperationTrigger')) {
            $Object.LastOperationTrigger = $LastOperationTrigger
        }
        if ($PSBoundParameters.ContainsKey('ScheduleComputeStartStop')) {
            $Object.ScheduleComputeStartStop = $ScheduleComputeStartStop
        }
        if ($PSBoundParameters.ContainsKey('SshSettingAdminPublicKey')) {
            $Object.SshSettingAdminPublicKey = $SshSettingAdminPublicKey
        }
        if ($PSBoundParameters.ContainsKey('SshSettingSshPublicAccess')) {
            $Object.SshSettingSshPublicAccess = $SshSettingSshPublicAccess
        }
        if ($PSBoundParameters.ContainsKey('StartupScriptArgument')) {
            $Object.StartupScriptArgument = $StartupScriptArgument
        }
        if ($PSBoundParameters.ContainsKey('StartupScriptData')) {
            $Object.StartupScriptData = $StartupScriptData
        }
        if ($PSBoundParameters.ContainsKey('StartupScriptSource')) {
            $Object.StartupScriptSource = $StartupScriptSource
        }
        if ($PSBoundParameters.ContainsKey('StartupScriptTimeout')) {
            $Object.StartupScriptTimeout = $StartupScriptTimeout
        }
        if ($PSBoundParameters.ContainsKey('SubnetId')) {
            $Object.SubnetId = $SubnetId
        }
        if ($PSBoundParameters.ContainsKey('VMSize')) {
            $Object.VMSize = $VMSize
        }
        if ($PSBoundParameters.ContainsKey('VersionRuntime')) {
            $Object.VersionRuntime = $VersionRuntime
        }
        return $Object
    }
}

