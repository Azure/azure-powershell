// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Support
{

    /// <summary>SCM type.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ScmTypeTypeConverter))]
    public partial struct ScmType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "None".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("None", "None", global::System.Management.Automation.CompletionResultType.ParameterValue, "None");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Dropbox".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Dropbox", "Dropbox", global::System.Management.Automation.CompletionResultType.ParameterValue, "Dropbox");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Tfs".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Tfs", "Tfs", global::System.Management.Automation.CompletionResultType.ParameterValue, "Tfs");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LocalGit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("LocalGit", "LocalGit", global::System.Management.Automation.CompletionResultType.ParameterValue, "LocalGit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GitHub".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("GitHub", "GitHub", global::System.Management.Automation.CompletionResultType.ParameterValue, "GitHub");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CodePlexGit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CodePlexGit", "CodePlexGit", global::System.Management.Automation.CompletionResultType.ParameterValue, "CodePlexGit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CodePlexHg".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("CodePlexHg", "CodePlexHg", global::System.Management.Automation.CompletionResultType.ParameterValue, "CodePlexHg");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BitbucketGit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("BitbucketGit", "BitbucketGit", global::System.Management.Automation.CompletionResultType.ParameterValue, "BitbucketGit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BitbucketHg".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("BitbucketHg", "BitbucketHg", global::System.Management.Automation.CompletionResultType.ParameterValue, "BitbucketHg");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ExternalGit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("ExternalGit", "ExternalGit", global::System.Management.Automation.CompletionResultType.ParameterValue, "ExternalGit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ExternalHg".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("ExternalHg", "ExternalHg", global::System.Management.Automation.CompletionResultType.ParameterValue, "ExternalHg");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "OneDrive".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("OneDrive", "OneDrive", global::System.Management.Automation.CompletionResultType.ParameterValue, "OneDrive");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VSO".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("VSO", "VSO", global::System.Management.Automation.CompletionResultType.ParameterValue, "VSO");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VSTSRM".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("VSTSRM", "VSTSRM", global::System.Management.Automation.CompletionResultType.ParameterValue, "VSTSRM");
            }
        }
    }
}