// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;
    using System;

    /// <summary>Updates the configuration of an app.</summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdateConfiguration=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
    /// </remarks>
    [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.InternalExport]
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Set, @"AzWebAppConfiguration_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Description(@"Updates the configuration of an app.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web", ApiVersion = "2019-08-01")]
    public partial class SetAzWebAppConfiguration_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Web app configuration ARM resource.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource _siteConfigBody = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.SiteConfigResource();

        /// <summary>Flag to use Managed Identity Creds for ACR pull</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to use Managed Identity Creds for ACR pull")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to use Managed Identity Creds for ACR pull",
        SerializedName = @"acrUseManagedIdentityCreds",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AcrUseManagedIdentityCred { get => _siteConfigBody.AcrUseManagedIdentityCred ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.AcrUseManagedIdentityCred = value; }

        /// <summary>If using user managed identity, the user managed identity ClientId</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If using user managed identity, the user managed identity ClientId")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If using user managed identity, the user managed identity ClientId",
        SerializedName = @"acrUserManagedIdentityID",
        PossibleTypes = new [] { typeof(string) })]
        public string AcrUserManagedIdentityId { get => _siteConfigBody.AcrUserManagedIdentityId ?? null; set => _siteConfigBody.AcrUserManagedIdentityId = value; }

        /// <summary>Minimum time the process must executebefore taking the action</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Minimum time the process must executebefore taking the action")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum time the process must executebefore taking the action",
        SerializedName = @"minProcessExecutionTime",
        PossibleTypes = new [] { typeof(string) })]
        public string ActionMinProcessExecutionTime { get => _siteConfigBody.ActionMinProcessExecutionTime ?? null; set => _siteConfigBody.ActionMinProcessExecutionTime = value; }

        /// <summary>Predefined action to be taken.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Predefined action to be taken.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Predefined action to be taken.",
        SerializedName = @"actionType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AutoHealActionType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AutoHealActionType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AutoHealActionType ActionType { get => _siteConfigBody.ActionType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AutoHealActionType)""); set => _siteConfigBody.ActionType = value; }

        /// <summary><code>true</code> if Always On is enabled; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
        SerializedName = @"alwaysOn",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AlwaysOn { get => _siteConfigBody.AlwaysOn ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.AlwaysOn = value; }

        /// <summary>The URL of the API definition.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The URL of the API definition.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the API definition.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        public string ApiDefinitionUrl { get => _siteConfigBody.ApiDefinitionUrl ?? null; set => _siteConfigBody.ApiDefinitionUrl = value; }

        /// <summary>APIM-Api Identifier.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "APIM-Api Identifier.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"APIM-Api Identifier.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string ApiManagementConfigId { get => _siteConfigBody.ApiManagementConfigId ?? null; set => _siteConfigBody.ApiManagementConfigId = value; }

        /// <summary>App command line to launch.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "App command line to launch.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"App command line to launch.",
        SerializedName = @"appCommandLine",
        PossibleTypes = new [] { typeof(string) })]
        public string AppCommandLine { get => _siteConfigBody.AppCommandLine ?? null; set => _siteConfigBody.AppCommandLine = value; }

        /// <summary>Application settings.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Application settings.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Application settings.",
        SerializedName = @"appSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.INameValuePair) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.INameValuePair[] AppSetting { get => _siteConfigBody.AppSetting ?? null /* arrayOf */; set => _siteConfigBody.AppSetting = value; }

        /// <summary><code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
        SerializedName = @"autoHealEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutoHealEnabled { get => _siteConfigBody.AutoHealEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.AutoHealEnabled = value; }

        /// <summary>Auto-swap slot name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Auto-swap slot name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Auto-swap slot name.",
        SerializedName = @"autoSwapSlotName",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoSwapSlotName { get => _siteConfigBody.AutoSwapSlotName ?? null; set => _siteConfigBody.AutoSwapSlotName = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Functions Client => Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.ClientAPI;

        /// <summary>Connection strings.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Connection strings.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Connection strings.",
        SerializedName = @"connectionStrings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IConnStringInfo) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IConnStringInfo[] ConnectionString { get => _siteConfigBody.ConnectionString ?? null /* arrayOf */; set => _siteConfigBody.ConnectionString = value; }

        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origincalls (for example: http://example.com:12345).
        /// Use "*" to allow all.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the list of origins that should be allowed to make cross-origincalls (for example: http://example.com:12345). Use \"*\" to allow all.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of origins that should be allowed to make cross-origincalls (for example: http://example.com:12345). Use ""*"" to allow all.",
        SerializedName = @"allowedOrigins",
        PossibleTypes = new [] { typeof(string) })]
        public string[] CorAllowedOrigin { get => _siteConfigBody.CorAllowedOrigin ?? null /* arrayOf */; set => _siteConfigBody.CorAllowedOrigin = value; }

        /// <summary>
        /// Gets or sets whether CORS requests with credentials are allowed. See https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentialsfor
        /// more details.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets whether CORS requests with credentials are allowed. See https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentialsfor more details.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets whether CORS requests with credentials are allowed. See https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentialsfor more details.",
        SerializedName = @"supportCredentials",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CorSupportCredentials { get => _siteConfigBody.CorSupportCredentials ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.CorSupportCredentials = value; }

        /// <summary>Executable to be run.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Executable to be run.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Executable to be run.",
        SerializedName = @"exe",
        PossibleTypes = new [] { typeof(string) })]
        public string CustomActionExe { get => _siteConfigBody.CustomActionExe ?? null; set => _siteConfigBody.CustomActionExe = value; }

        /// <summary>Parameters for the executable.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameters for the executable.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameters for the executable.",
        SerializedName = @"parameters",
        PossibleTypes = new [] { typeof(string) })]
        public string CustomActionParameter { get => _siteConfigBody.CustomActionParameter ?? null; set => _siteConfigBody.CustomActionParameter = value; }

        /// <summary>Default documents.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Default documents.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default documents.",
        SerializedName = @"defaultDocuments",
        PossibleTypes = new [] { typeof(string) })]
        public string[] DefaultDocument { get => _siteConfigBody.DefaultDocument ?? null /* arrayOf */; set => _siteConfigBody.DefaultDocument = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
        SerializedName = @"detailedErrorLoggingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DetailedErrorLoggingEnabled { get => _siteConfigBody.DetailedErrorLoggingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.DetailedErrorLoggingEnabled = value; }

        /// <summary>Document root.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Document root.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Document root.",
        SerializedName = @"documentRoot",
        PossibleTypes = new [] { typeof(string) })]
        public string DocumentRoot { get => _siteConfigBody.DocumentRoot ?? null; set => _siteConfigBody.DocumentRoot = value; }

        /// <summary>
        /// Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration
        /// endpoint.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.",
        SerializedName = @"dynamicTagsJson",
        PossibleTypes = new [] { typeof(string) })]
        public string DynamicTagsJson { get => _siteConfigBody.DynamicTagsJson ?? null; set => _siteConfigBody.DynamicTagsJson = value; }

        /// <summary>List of ramp-up rules.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of ramp-up rules.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of ramp-up rules.",
        SerializedName = @"rampUpRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IRampUpRule) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IRampUpRule[] ExperimentRampUpRule { get => _siteConfigBody.ExperimentRampUpRule ?? null /* arrayOf */; set => _siteConfigBody.ExperimentRampUpRule = value; }

        /// <summary>State of FTP / FTPS service</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "State of FTP / FTPS service")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"State of FTP / FTPS service",
        SerializedName = @"ftpsState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.FtpsState) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.FtpsState))]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.FtpsState FtpsState { get => _siteConfigBody.FtpsState ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.FtpsState)""); set => _siteConfigBody.FtpsState = value; }

        /// <summary>Handler mappings.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Handler mappings.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Handler mappings.",
        SerializedName = @"handlerMappings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IHandlerMapping) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IHandlerMapping[] HandlerMapping { get => _siteConfigBody.HandlerMapping ?? null /* arrayOf */; set => _siteConfigBody.HandlerMapping = value; }

        /// <summary>Health check path</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Health check path")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Health check path",
        SerializedName = @"healthCheckPath",
        PossibleTypes = new [] { typeof(string) })]
        public string HealthCheckPath { get => _siteConfigBody.HealthCheckPath ?? null; set => _siteConfigBody.HealthCheckPath = value; }

        /// <summary>Http20Enabled: configures a web site to allow clients to connect over http2.0</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Http20Enabled: configures a web site to allow clients to connect over http2.0")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Http20Enabled: configures a web site to allow clients to connect over http2.0",
        SerializedName = @"http20Enabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Http20Enabled { get => _siteConfigBody.Http20Enabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.Http20Enabled = value; }

        /// <summary><code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
        SerializedName = @"httpLoggingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter HttpLoggingEnabled { get => _siteConfigBody.HttpLoggingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.HttpLoggingEnabled = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>IP security restrictions for main.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IP security restrictions for main.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP security restrictions for main.",
        SerializedName = @"ipSecurityRestrictions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IIPSecurityRestriction) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IIPSecurityRestriction[] IPSecurityRestriction { get => _siteConfigBody.IPSecurityRestriction ?? null /* arrayOf */; set => _siteConfigBody.IPSecurityRestriction = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Gets or sets a flag indicating whether the Push endpoint is enabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets a flag indicating whether the Push endpoint is enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a flag indicating whether the Push endpoint is enabled.",
        SerializedName = @"isPushEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsPushEnabled { get => _siteConfigBody.IsPushEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.IsPushEnabled = value; }

        /// <summary>Java container.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Java container.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Java container.",
        SerializedName = @"javaContainer",
        PossibleTypes = new [] { typeof(string) })]
        public string JavaContainer { get => _siteConfigBody.JavaContainer ?? null; set => _siteConfigBody.JavaContainer = value; }

        /// <summary>Java container version.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Java container version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Java container version.",
        SerializedName = @"javaContainerVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string JavaContainerVersion { get => _siteConfigBody.JavaContainerVersion ?? null; set => _siteConfigBody.JavaContainerVersion = value; }

        /// <summary>Java version.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Java version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Java version.",
        SerializedName = @"javaVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string JavaVersion { get => _siteConfigBody.JavaVersion ?? null; set => _siteConfigBody.JavaVersion = value; }

        /// <summary>Kind of resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Kind of resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Kind of resource.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        public string Kind { get => _siteConfigBody.Kind ?? null; set => _siteConfigBody.Kind = value; }

        /// <summary>Maximum allowed disk size usage in MB.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum allowed disk size usage in MB.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum allowed disk size usage in MB.",
        SerializedName = @"maxDiskSizeInMb",
        PossibleTypes = new [] { typeof(long) })]
        public long LimitMaxDiskSizeInMb { get => _siteConfigBody.LimitMaxDiskSizeInMb ?? default(long); set => _siteConfigBody.LimitMaxDiskSizeInMb = value; }

        /// <summary>Maximum allowed memory usage in MB.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum allowed memory usage in MB.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum allowed memory usage in MB.",
        SerializedName = @"maxMemoryInMb",
        PossibleTypes = new [] { typeof(long) })]
        public long LimitMaxMemoryInMb { get => _siteConfigBody.LimitMaxMemoryInMb ?? default(long); set => _siteConfigBody.LimitMaxMemoryInMb = value; }

        /// <summary>Maximum allowed CPU usage percentage.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum allowed CPU usage percentage.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum allowed CPU usage percentage.",
        SerializedName = @"maxPercentageCpu",
        PossibleTypes = new [] { typeof(double) })]
        public double LimitMaxPercentageCpu { get => _siteConfigBody.LimitMaxPercentageCpu ?? default(double); set => _siteConfigBody.LimitMaxPercentageCpu = value; }

        /// <summary>Linux App Framework and version</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Linux App Framework and version")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Linux App Framework and version",
        SerializedName = @"linuxFxVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string LinuxFxVersion { get => _siteConfigBody.LinuxFxVersion ?? null; set => _siteConfigBody.LinuxFxVersion = value; }

        /// <summary>Site load balancing.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Site load balancing.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Site load balancing.",
        SerializedName = @"loadBalancing",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SiteLoadBalancing) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SiteLoadBalancing))]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SiteLoadBalancing LoadBalancing { get => _siteConfigBody.LoadBalancing ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SiteLoadBalancing)""); set => _siteConfigBody.LoadBalancing = value; }

        /// <summary><code>true</code> to enable local MySQL; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
        SerializedName = @"localMySqlEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LocalMySqlEnabled { get => _siteConfigBody.LocalMySqlEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.LocalMySqlEnabled = value; }

        /// <summary>HTTP logs directory size limit.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "HTTP logs directory size limit.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"HTTP logs directory size limit.",
        SerializedName = @"logsDirectorySizeLimit",
        PossibleTypes = new [] { typeof(int) })]
        public int LogsDirectorySizeLimit { get => _siteConfigBody.LogsDirectorySizeLimit ?? default(int); set => _siteConfigBody.LogsDirectorySizeLimit = value; }

        /// <summary>Managed pipeline mode.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Managed pipeline mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Managed pipeline mode.",
        SerializedName = @"managedPipelineMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ManagedPipelineMode) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ManagedPipelineMode))]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ManagedPipelineMode ManagedPipelineMode { get => _siteConfigBody.ManagedPipelineMode ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ManagedPipelineMode)""); set => _siteConfigBody.ManagedPipelineMode = value; }

        /// <summary>Managed Service Identity Id</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Managed Service Identity Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Managed Service Identity Id",
        SerializedName = @"managedServiceIdentityId",
        PossibleTypes = new [] { typeof(int) })]
        public int ManagedServiceIdentityId { get => _siteConfigBody.ManagedServiceIdentityId ?? default(int); set => _siteConfigBody.ManagedServiceIdentityId = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>MinTlsVersion: configures the minimum version of TLS required for SSL requests</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "MinTlsVersion: configures the minimum version of TLS required for SSL requests")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"MinTlsVersion: configures the minimum version of TLS required for SSL requests",
        SerializedName = @"minTlsVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SupportedTlsVersions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SupportedTlsVersions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SupportedTlsVersions MinTlsVersion { get => _siteConfigBody.MinTlsVersion ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.SupportedTlsVersions)""); set => _siteConfigBody.MinTlsVersion = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the app.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Name of the app.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the app.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>.NET Framework version.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".NET Framework version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".NET Framework version.",
        SerializedName = @"netFrameworkVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string NetFrameworkVersion { get => _siteConfigBody.NetFrameworkVersion ?? null; set => _siteConfigBody.NetFrameworkVersion = value; }

        /// <summary>Version of Node.js.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Version of Node.js.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of Node.js.",
        SerializedName = @"nodeVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string NodeVersion { get => _siteConfigBody.NodeVersion ?? null; set => _siteConfigBody.NodeVersion = value; }

        /// <summary>Number of workers.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of workers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of workers.",
        SerializedName = @"numberOfWorkers",
        PossibleTypes = new [] { typeof(int) })]
        public int NumberOfWorker { get => _siteConfigBody.NumberOfWorker ?? default(int); set => _siteConfigBody.NumberOfWorker = value; }

        /// <summary>Version of PHP.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Version of PHP.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of PHP.",
        SerializedName = @"phpVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string PhpVersion { get => _siteConfigBody.PhpVersion ?? null; set => _siteConfigBody.PhpVersion = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Version of PowerShell.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Version of PowerShell.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of PowerShell.",
        SerializedName = @"powerShellVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string PowerShellVersion { get => _siteConfigBody.PowerShellVersion ?? null; set => _siteConfigBody.PowerShellVersion = value; }

        /// <summary>
        /// Number of preWarmed instances.This setting only applies to the Consumption and Elastic Plans
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of preWarmed instances.This setting only applies to the Consumption and Elastic Plans")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of preWarmed instances.This setting only applies to the Consumption and Elastic Plans",
        SerializedName = @"preWarmedInstanceCount",
        PossibleTypes = new [] { typeof(int) })]
        public int PreWarmedInstanceCount { get => _siteConfigBody.PreWarmedInstanceCount ?? default(int); set => _siteConfigBody.PreWarmedInstanceCount = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Publishing user name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Publishing user name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Publishing user name.",
        SerializedName = @"publishingUsername",
        PossibleTypes = new [] { typeof(string) })]
        public string PublishingUsername { get => _siteConfigBody.PublishingUsername ?? null; set => _siteConfigBody.PublishingUsername = value; }

        /// <summary>Kind of resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Kind of resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Kind of resource.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        public string PushKind { get => _siteConfigBody.PushKind ?? null; set => _siteConfigBody.PushKind = value; }

        /// <summary>Version of Python.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Version of Python.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of Python.",
        SerializedName = @"pythonVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string PythonVersion { get => _siteConfigBody.PythonVersion ?? null; set => _siteConfigBody.PythonVersion = value; }

        /// <summary>
        /// <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
        SerializedName = @"remoteDebuggingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter RemoteDebuggingEnabled { get => _siteConfigBody.RemoteDebuggingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.RemoteDebuggingEnabled = value; }

        /// <summary>Remote debugging version.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Remote debugging version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Remote debugging version.",
        SerializedName = @"remoteDebuggingVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string RemoteDebuggingVersion { get => _siteConfigBody.RemoteDebuggingVersion ?? null; set => _siteConfigBody.RemoteDebuggingVersion = value; }

        /// <summary>Request Count.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Request Count.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Request Count.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(int) })]
        public int RequestCount { get => _siteConfigBody.RequestCount ?? default(int); set => _siteConfigBody.RequestCount = value; }

        /// <summary>Time interval.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time interval.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time interval.",
        SerializedName = @"timeInterval",
        PossibleTypes = new [] { typeof(string) })]
        public string RequestTimeInterval { get => _siteConfigBody.RequestTimeInterval ?? null; set => _siteConfigBody.RequestTimeInterval = value; }

        /// <summary><code>true</code> if request tracing is enabled; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
        SerializedName = @"requestTracingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter RequestTracingEnabled { get => _siteConfigBody.RequestTracingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.RequestTracingEnabled = value; }

        /// <summary>Request tracing expiration time.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Request tracing expiration time.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Request tracing expiration time.",
        SerializedName = @"requestTracingExpirationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime RequestTracingExpirationTime { get => _siteConfigBody.RequestTracingExpirationTime ?? default(global::System.DateTime); set => _siteConfigBody.RequestTracingExpirationTime = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>Name of the resource group to which the resource belongs.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Name of the resource group to which the resource belongs.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the resource group to which the resource belongs.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>IP security restrictions for scm.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IP security restrictions for scm.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP security restrictions for scm.",
        SerializedName = @"scmIpSecurityRestrictions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IIPSecurityRestriction) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IIPSecurityRestriction[] ScmIPSecurityRestriction { get => _siteConfigBody.ScmIPSecurityRestriction ?? null /* arrayOf */; set => _siteConfigBody.ScmIPSecurityRestriction = value; }

        /// <summary>IP security restrictions for scm to use main.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IP security restrictions for scm to use main.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP security restrictions for scm to use main.",
        SerializedName = @"scmIpSecurityRestrictionsUseMain",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter ScmIPSecurityRestrictionsUseMain { get => _siteConfigBody.ScmIPSecurityRestrictionsUseMain ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.ScmIPSecurityRestrictionsUseMain = value; }

        /// <summary>SCM type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "SCM type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SCM type.",
        SerializedName = @"scmType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ScmType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ScmType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ScmType ScmType { get => _siteConfigBody.ScmType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ScmType)""); set => _siteConfigBody.ScmType = value; }

        /// <summary>Request Count.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Request Count.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Request Count.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(int) })]
        public int SlowRequestCount { get => _siteConfigBody.SlowRequestCount ?? default(int); set => _siteConfigBody.SlowRequestCount = value; }

        /// <summary>Time interval.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time interval.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time interval.",
        SerializedName = @"timeInterval",
        PossibleTypes = new [] { typeof(string) })]
        public string SlowRequestTimeInterval { get => _siteConfigBody.SlowRequestTimeInterval ?? null; set => _siteConfigBody.SlowRequestTimeInterval = value; }

        /// <summary>Time taken.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time taken.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time taken.",
        SerializedName = @"timeTaken",
        PossibleTypes = new [] { typeof(string) })]
        public string SlowRequestTimeTaken { get => _siteConfigBody.SlowRequestTimeTaken ?? null; set => _siteConfigBody.SlowRequestTimeTaken = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>
        /// Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).")]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// Gets or sets a JSON string containing a list of tags that are in the allowed list for use by the push registration endpoint.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets a JSON string containing a list of tags that are in the allowed list for use by the push registration endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a JSON string containing a list of tags that are in the allowed list for use by the push registration endpoint.",
        SerializedName = @"tagWhitelistJson",
        PossibleTypes = new [] { typeof(string) })]
        public string TagWhitelistJson { get => _siteConfigBody.TagWhitelistJson ?? null; set => _siteConfigBody.TagWhitelistJson = value; }

        /// <summary>
        /// Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration
        /// endpoint.Tags can consist of alphanumeric characters and the following:'_', '@', '#', '.', ':', '-'. Validation should
        /// be performed at the PushRequestHandler.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.Tags can consist of alphanumeric characters and the following:'_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.Tags can consist of alphanumeric characters and the following:'_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler.",
        SerializedName = @"tagsRequiringAuth",
        PossibleTypes = new [] { typeof(string) })]
        public string TagsRequiringAuth { get => _siteConfigBody.TagsRequiringAuth ?? null; set => _siteConfigBody.TagsRequiringAuth = value; }

        /// <summary>Tracing options.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tracing options.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tracing options.",
        SerializedName = @"tracingOptions",
        PossibleTypes = new [] { typeof(string) })]
        public string TracingOption { get => _siteConfigBody.TracingOption ?? null; set => _siteConfigBody.TracingOption = value; }

        /// <summary>A rule based on private bytes.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A rule based on private bytes.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A rule based on private bytes.",
        SerializedName = @"privateBytesInKB",
        PossibleTypes = new [] { typeof(int) })]
        public int TriggerPrivateBytesInKb { get => _siteConfigBody.TriggerPrivateBytesInKb ?? default(int); set => _siteConfigBody.TriggerPrivateBytesInKb = value; }

        /// <summary>A rule based on status codes.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A rule based on status codes.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A rule based on status codes.",
        SerializedName = @"statusCodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IStatusCodesBasedTrigger) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IStatusCodesBasedTrigger[] TriggerStatusCode { get => _siteConfigBody.TriggerStatusCode ?? null /* arrayOf */; set => _siteConfigBody.TriggerStatusCode = value; }

        /// <summary><code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
        SerializedName = @"use32BitWorkerProcess",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Use32BitWorkerProcess { get => _siteConfigBody.Use32BitWorkerProcess ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.Use32BitWorkerProcess = value; }

        /// <summary>Virtual applications.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Virtual applications.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual applications.",
        SerializedName = @"virtualApplications",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IVirtualApplication) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IVirtualApplication[] VirtualApplication { get => _siteConfigBody.VirtualApplication ?? null /* arrayOf */; set => _siteConfigBody.VirtualApplication = value; }

        /// <summary>Virtual Network name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Virtual Network name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual Network name.",
        SerializedName = @"vnetName",
        PossibleTypes = new [] { typeof(string) })]
        public string VnetName { get => _siteConfigBody.VnetName ?? null; set => _siteConfigBody.VnetName = value; }

        /// <summary><code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
        SerializedName = @"webSocketsEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter WebSocketsEnabled { get => _siteConfigBody.WebSocketsEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _siteConfigBody.WebSocketsEnabled = value; }

        /// <summary>Xenon App Framework and version</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Xenon App Framework and version")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Xenon App Framework and version",
        SerializedName = @"windowsFxVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string WindowsFxVersion { get => _siteConfigBody.WindowsFxVersion ?? null; set => _siteConfigBody.WindowsFxVersion = value; }

        /// <summary>Explicit Managed Service Identity Id</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Explicit Managed Service Identity Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Functions.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Functions.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Explicit Managed Service Identity Id",
        SerializedName = @"xManagedServiceIdentityId",
        PossibleTypes = new [] { typeof(int) })]
        public int XManagedServiceIdentityId { get => _siteConfigBody.XManagedServiceIdentityId ?? default(int); set => _siteConfigBody.XManagedServiceIdentityId = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource">Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'WebAppsCreateOrUpdateConfiguration' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.WebAppsCreateOrUpdateConfiguration(ResourceGroupName, Name, SubscriptionId, _siteConfigBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  ResourceGroupName=ResourceGroupName,Name=Name,SubscriptionId=SubscriptionId,body=_siteConfigBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="SetAzWebAppConfiguration_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public SetAzWebAppConfiguration_UpdateExpanded()
        {

        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Functions.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.IDefaultErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceGroupName=ResourceGroupName, Name=Name, SubscriptionId=SubscriptionId, body=_siteConfigBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceGroupName=ResourceGroupName, Name=Name, SubscriptionId=SubscriptionId, body=_siteConfigBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource">Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20190801.ISiteConfigResource
                WriteObject((await response));
            }
        }
    }
}