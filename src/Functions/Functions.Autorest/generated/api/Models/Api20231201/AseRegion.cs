// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>ASE region.</summary>
    public partial class AseRegion :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegion,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource __proxyOnlyResource = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ProxyOnlyResource();

        /// <summary>Available OSs in region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] AvailableOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).AvailableOS; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).AvailableOS = value ?? null /* arrayOf */; }

        /// <summary>Available Skus in region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] AvailableSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).AvailableSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).AvailableSku = value ?? null /* arrayOf */; }

        /// <summary>Dedicated host enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? DedicatedHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).DedicatedHost; }

        /// <summary>Display name for region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).DisplayName; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; }

        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind = value ?? null; }

        /// <summary>Internal Acessors for DedicatedHost</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionInternal.DedicatedHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).DedicatedHost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).DedicatedHost = value; }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionInternal.DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).DisplayName = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionProperties Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.AseRegionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Standard</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionInternal.Standard { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).Standard; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).Standard = value; }

        /// <summary>Internal Acessors for ZoneRedundant</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionInternal.ZoneRedundant { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).ZoneRedundant; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).ZoneRedundant = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type = value; }

        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionProperties _property;

        /// <summary>ASE region resource specific properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.AseRegionProperties()); set => this._property = value; }

        /// <summary>Is region standard.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? Standard { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).Standard; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; }

        /// <summary>Zone redundant deployment enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? ZoneRedundant { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionPropertiesInternal)Property).ZoneRedundant; }

        /// <summary>Creates an new <see cref="AseRegion" /> instance.</summary>
        public AseRegion()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyOnlyResource), __proxyOnlyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyOnlyResource), __proxyOnlyResource);
        }
    }
    /// ASE region.
    public partial interface IAseRegion :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource
    {
        /// <summary>Available OSs in region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Available OSs in region.",
        SerializedName = @"availableOS",
        PossibleTypes = new [] { typeof(string) })]
        string[] AvailableOS { get; set; }
        /// <summary>Available Skus in region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Available Skus in region.",
        SerializedName = @"availableSku",
        PossibleTypes = new [] { typeof(string) })]
        string[] AvailableSku { get; set; }
        /// <summary>Dedicated host enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Dedicated host enabled.",
        SerializedName = @"dedicatedHost",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DedicatedHost { get;  }
        /// <summary>Display name for region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Display name for region.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>Is region standard.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Is region standard.",
        SerializedName = @"standard",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Standard { get;  }
        /// <summary>Zone redundant deployment enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Zone redundant deployment enabled.",
        SerializedName = @"zoneRedundant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ZoneRedundant { get;  }

    }
    /// ASE region.
    internal partial interface IAseRegionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal
    {
        /// <summary>Available OSs in region.</summary>
        string[] AvailableOS { get; set; }
        /// <summary>Available Skus in region.</summary>
        string[] AvailableSku { get; set; }
        /// <summary>Dedicated host enabled.</summary>
        bool? DedicatedHost { get; set; }
        /// <summary>Display name for region.</summary>
        string DisplayName { get; set; }
        /// <summary>ASE region resource specific properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseRegionProperties Property { get; set; }
        /// <summary>Is region standard.</summary>
        bool? Standard { get; set; }
        /// <summary>Zone redundant deployment enabled.</summary>
        bool? ZoneRedundant { get; set; }

    }
}