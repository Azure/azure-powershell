// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>Full view of the custom domain suffix configuration for ASEv3.</summary>
    public partial class CustomDnsSuffixConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource __proxyOnlyResource = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ProxyOnlyResource();

        /// <summary>
        /// The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for
        /// sites with the custom domain suffix.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CertificateUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).CertificateUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).CertificateUrl = value ?? null; }

        /// <summary>The default custom domain suffix to use for all sites deployed on the ASE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string DnsSuffix { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).DnsSuffix; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).DnsSuffix = value ?? null; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; }

        /// <summary>
        /// The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned
        /// ASE identity will be used if available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string KeyVaultReferenceIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).KeyVaultReferenceIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).KeyVaultReferenceIdentity = value ?? null; }

        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind = value ?? null; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationProperties Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.CustomDnsSuffixConfigurationProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningDetail</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationInternal.ProvisioningDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).ProvisioningDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).ProvisioningDetail = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type = value; }

        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationProperties _property;

        /// <summary>CustomDnsSuffixConfiguration resource specific properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.CustomDnsSuffixConfigurationProperties()); set => this._property = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string ProvisioningDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).ProvisioningDetail; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; }

        /// <summary>Creates an new <see cref="CustomDnsSuffixConfiguration" /> instance.</summary>
        public CustomDnsSuffixConfiguration()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyOnlyResource), __proxyOnlyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyOnlyResource), __proxyOnlyResource);
        }
    }
    /// Full view of the custom domain suffix configuration for ASEv3.
    public partial interface ICustomDnsSuffixConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource
    {
        /// <summary>
        /// The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for
        /// sites with the custom domain suffix.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix.",
        SerializedName = @"certificateUrl",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateUrl { get; set; }
        /// <summary>The default custom domain suffix to use for all sites deployed on the ASE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default custom domain suffix to use for all sites deployed on the ASE.",
        SerializedName = @"dnsSuffix",
        PossibleTypes = new [] { typeof(string) })]
        string DnsSuffix { get; set; }
        /// <summary>
        /// The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned
        /// ASE identity will be used if available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available.",
        SerializedName = @"keyVaultReferenceIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultReferenceIdentity { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"provisioningDetails",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningDetail { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? ProvisioningState { get;  }

    }
    /// Full view of the custom domain suffix configuration for ASEv3.
    internal partial interface ICustomDnsSuffixConfigurationInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal
    {
        /// <summary>
        /// The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for
        /// sites with the custom domain suffix.
        /// </summary>
        string CertificateUrl { get; set; }
        /// <summary>The default custom domain suffix to use for all sites deployed on the ASE.</summary>
        string DnsSuffix { get; set; }
        /// <summary>
        /// The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned
        /// ASE identity will be used if available.
        /// </summary>
        string KeyVaultReferenceIdentity { get; set; }
        /// <summary>CustomDnsSuffixConfiguration resource specific properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationProperties Property { get; set; }

        string ProvisioningDetail { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? ProvisioningState { get; set; }

    }
}