// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>ARM resource for a app service environment.</summary>
    public partial class AppServiceEnvironmentPatchResource :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResource,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource __proxyOnlyResource = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ProxyOnlyResource();

        /// <summary>Property to enable and disable new private endpoint connection creation on ASE</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? AllowNewPrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).AllowNewPrivateEndpointConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).AllowNewPrivateEndpointConnection = value ?? default(bool); }

        /// <summary>
        /// The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for
        /// sites with the custom domain suffix.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CertificateUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CertificateUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CertificateUrl = value ?? null; }

        /// <summary>Custom settings for changing the behavior of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.INameValuePair[] ClusterSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ClusterSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ClusterSetting = value ?? null /* arrayOf */; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CustomDnsSuffixConfigurationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationId; }

        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CustomDnsSuffixConfigurationKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationKind = value ?? null; }

        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CustomDnsSuffixConfigurationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationName; }

        /// <summary>The default custom domain suffix to use for all sites deployed on the ASE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CustomDnsSuffixConfigurationPropertiesDnsSuffix { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationPropertiesDnsSuffix; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationPropertiesDnsSuffix = value ?? null; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? CustomDnsSuffixConfigurationPropertiesProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationPropertiesProvisioningState; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string CustomDnsSuffixConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationType; }

        /// <summary>Dedicated Host Count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public int? DedicatedHostCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).DedicatedHostCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).DedicatedHostCount = value ?? default(int); }

        /// <summary>DNS suffix of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string DnsSuffix { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).DnsSuffix; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).DnsSuffix = value ?? null; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] ExternalInboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ExternalInboundIPAddress; }

        /// <summary>Scale factor for front-ends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public int? FrontEndScaleFactor { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).FrontEndScaleFactor; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).FrontEndScaleFactor = value ?? default(int); }

        /// <summary>Property to enable and disable FTP on ASEV3</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? FtpEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).FtpEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).FtpEnabled = value ?? default(bool); }

        /// <summary>Flag that displays whether an ASE has linux workers or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? HasLinuxWorker { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).HasLinuxWorker; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; }

        /// <summary>Customer provided Inbound IP Address. Only able to be set on Ase create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string InboundIPAddressOverride { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InboundIPAddressOverride; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InboundIPAddressOverride = value ?? null; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] InternalInboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InternalInboundIPAddress; }

        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.LoadBalancingMode? InternalLoadBalancingMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InternalLoadBalancingMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InternalLoadBalancingMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.LoadBalancingMode)""); }

        /// <summary>Number of IP SSL addresses reserved for the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public int? IpsslAddressCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).IpsslAddressCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).IpsslAddressCount = value ?? default(int); }

        /// <summary>
        /// The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned
        /// ASE identity will be used if available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string KeyVaultReferenceIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).KeyVaultReferenceIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).KeyVaultReferenceIdentity = value ?? null; }

        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind = value ?? null; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] LinuxOutboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).LinuxOutboundIPAddress; }

        /// <summary>Maximum number of VMs in the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public int? MaximumNumberOfMachine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MaximumNumberOfMachine; }

        /// <summary>Internal Acessors for CustomDnsSuffixConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfiguration Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.CustomDnsSuffixConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfiguration = value; }

        /// <summary>Internal Acessors for CustomDnsSuffixConfigurationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.CustomDnsSuffixConfigurationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationId = value; }

        /// <summary>Internal Acessors for CustomDnsSuffixConfigurationName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.CustomDnsSuffixConfigurationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationName = value; }

        /// <summary>Internal Acessors for CustomDnsSuffixConfigurationPropertiesProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.CustomDnsSuffixConfigurationPropertiesProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationPropertiesProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationPropertiesProvisioningState = value; }

        /// <summary>Internal Acessors for CustomDnsSuffixConfigurationProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationProperties Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.CustomDnsSuffixConfigurationProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationProperty = value; }

        /// <summary>Internal Acessors for CustomDnsSuffixConfigurationType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.CustomDnsSuffixConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).CustomDnsSuffixConfigurationType = value; }

        /// <summary>Internal Acessors for ExternalInboundIPAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.ExternalInboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ExternalInboundIPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ExternalInboundIPAddress = value; }

        /// <summary>Internal Acessors for HasLinuxWorker</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.HasLinuxWorker { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).HasLinuxWorker; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).HasLinuxWorker = value; }

        /// <summary>Internal Acessors for InternalInboundIPAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.InternalInboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InternalInboundIPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).InternalInboundIPAddress = value; }

        /// <summary>Internal Acessors for LinuxOutboundIPAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.LinuxOutboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).LinuxOutboundIPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).LinuxOutboundIPAddress = value; }

        /// <summary>Internal Acessors for MaximumNumberOfMachine</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.MaximumNumberOfMachine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MaximumNumberOfMachine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MaximumNumberOfMachine = value; }

        /// <summary>Internal Acessors for MultiRoleCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.MultiRoleCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MultiRoleCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MultiRoleCount = value; }

        /// <summary>Internal Acessors for NetworkingConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseV3NetworkingConfiguration Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.NetworkingConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfiguration = value; }

        /// <summary>Internal Acessors for NetworkingConfigurationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.NetworkingConfigurationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationId = value; }

        /// <summary>Internal Acessors for NetworkingConfigurationName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.NetworkingConfigurationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationName = value; }

        /// <summary>Internal Acessors for NetworkingConfigurationProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseV3NetworkingConfigurationProperties Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.NetworkingConfigurationProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationProperty = value; }

        /// <summary>Internal Acessors for NetworkingConfigurationType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.NetworkingConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationType = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironment Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.AppServiceEnvironment()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningDetail</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.ProvisioningDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ProvisioningDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ProvisioningDetail = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.HostingEnvironmentStatus? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).Status = value; }

        /// <summary>Internal Acessors for Suspended</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.Suspended { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).Suspended; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).Suspended = value; }

        /// <summary>Internal Acessors for UpgradeAvailability</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradeAvailability? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.UpgradeAvailability { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UpgradeAvailability; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UpgradeAvailability = value; }

        /// <summary>Internal Acessors for VirtualNetwork</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVirtualNetworkProfile Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.VirtualNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetwork = value; }

        /// <summary>Internal Acessors for VirtualNetworkName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.VirtualNetworkName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkName = value; }

        /// <summary>Internal Acessors for VirtualNetworkType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.VirtualNetworkType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkType = value; }

        /// <summary>Internal Acessors for WindowsOutboundIPAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentPatchResourceInternal.WindowsOutboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).WindowsOutboundIPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).WindowsOutboundIPAddress = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type = value; }

        /// <summary>Number of front-end instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public int? MultiRoleCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MultiRoleCount; }

        /// <summary>Front-end VM size, e.g. "Medium", "Large".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string MultiSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MultiSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).MultiSize = value ?? null; }

        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string NetworkingConfigurationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationId; }

        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string NetworkingConfigurationKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationKind = value ?? null; }

        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string NetworkingConfigurationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationName; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string NetworkingConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).NetworkingConfigurationType; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironment _property;

        /// <summary>Core resource properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironment Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.AppServiceEnvironment()); set => this._property = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string ProvisioningDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ProvisioningDetail; }

        /// <summary>Provisioning state of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ProvisioningState; }

        /// <summary>Property to enable and disable Remote Debug on ASEV3</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? RemoteDebugEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).RemoteDebugEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).RemoteDebugEnabled = value ?? default(bool); }

        /// <summary>Current status of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.HostingEnvironmentStatus? Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).Status; }

        /// <summary>
        /// <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended,
        /// e.g. when the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? Suspended { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).Suspended; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; }

        /// <summary>Whether an upgrade is available for this App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradeAvailability? UpgradeAvailability { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UpgradeAvailability; }

        /// <summary>Upgrade Preference</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradePreference? UpgradePreference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UpgradePreference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UpgradePreference = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradePreference)""); }

        /// <summary>User added ip ranges to whitelist on ASE db</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] UserWhitelistedIPRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UserWhitelistedIPRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).UserWhitelistedIPRange = value ?? null /* arrayOf */; }

        /// <summary>Resource id of the Virtual Network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string VirtualNetworkId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkId = value ?? null; }

        /// <summary>Name of the Virtual Network (read-only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string VirtualNetworkName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkName; }

        /// <summary>Subnet within the Virtual Network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string VirtualNetworkSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkSubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkSubnet = value ?? null; }

        /// <summary>Resource type of the Virtual Network (read-only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string VirtualNetworkType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).VirtualNetworkType; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] WindowsOutboundIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).WindowsOutboundIPAddress; }

        /// <summary>Whether or not this App Service Environment is zone-redundant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? ZoneRedundant { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ZoneRedundant; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironmentInternal)Property).ZoneRedundant = value ?? default(bool); }

        /// <summary>Creates an new <see cref="AppServiceEnvironmentPatchResource" /> instance.</summary>
        public AppServiceEnvironmentPatchResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyOnlyResource), __proxyOnlyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyOnlyResource), __proxyOnlyResource);
        }
    }
    /// ARM resource for a app service environment.
    public partial interface IAppServiceEnvironmentPatchResource :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource
    {
        /// <summary>Property to enable and disable new private endpoint connection creation on ASE</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property to enable and disable new private endpoint connection creation on ASE",
        SerializedName = @"allowNewPrivateEndpointConnections",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowNewPrivateEndpointConnection { get; set; }
        /// <summary>
        /// The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for
        /// sites with the custom domain suffix.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix.",
        SerializedName = @"certificateUrl",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateUrl { get; set; }
        /// <summary>Custom settings for changing the behavior of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom settings for changing the behavior of the App Service Environment.",
        SerializedName = @"clusterSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.INameValuePair) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.INameValuePair[] ClusterSetting { get; set; }
        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource Id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDnsSuffixConfigurationId { get;  }
        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Kind of resource.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDnsSuffixConfigurationKind { get; set; }
        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource Name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDnsSuffixConfigurationName { get;  }
        /// <summary>The default custom domain suffix to use for all sites deployed on the ASE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default custom domain suffix to use for all sites deployed on the ASE.",
        SerializedName = @"dnsSuffix",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDnsSuffixConfigurationPropertiesDnsSuffix { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? CustomDnsSuffixConfigurationPropertiesProvisioningState { get;  }
        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDnsSuffixConfigurationType { get;  }
        /// <summary>Dedicated Host Count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dedicated Host Count",
        SerializedName = @"dedicatedHostCount",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedHostCount { get; set; }
        /// <summary>DNS suffix of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS suffix of the App Service Environment.",
        SerializedName = @"dnsSuffix",
        PossibleTypes = new [] { typeof(string) })]
        string DnsSuffix { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"externalInboundIpAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] ExternalInboundIPAddress { get;  }
        /// <summary>Scale factor for front-ends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Scale factor for front-ends.",
        SerializedName = @"frontEndScaleFactor",
        PossibleTypes = new [] { typeof(int) })]
        int? FrontEndScaleFactor { get; set; }
        /// <summary>Property to enable and disable FTP on ASEV3</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property to enable and disable FTP on ASEV3",
        SerializedName = @"ftpEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FtpEnabled { get; set; }
        /// <summary>Flag that displays whether an ASE has linux workers or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Flag that displays whether an ASE has linux workers or not",
        SerializedName = @"hasLinuxWorkers",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasLinuxWorker { get;  }
        /// <summary>Customer provided Inbound IP Address. Only able to be set on Ase create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Customer provided Inbound IP Address. Only able to be set on Ase create.",
        SerializedName = @"inboundIpAddressOverride",
        PossibleTypes = new [] { typeof(string) })]
        string InboundIPAddressOverride { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"internalInboundIpAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] InternalInboundIPAddress { get;  }
        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.",
        SerializedName = @"internalLoadBalancingMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.LoadBalancingMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.LoadBalancingMode? InternalLoadBalancingMode { get; set; }
        /// <summary>Number of IP SSL addresses reserved for the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of IP SSL addresses reserved for the App Service Environment.",
        SerializedName = @"ipsslAddressCount",
        PossibleTypes = new [] { typeof(int) })]
        int? IpsslAddressCount { get; set; }
        /// <summary>
        /// The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned
        /// ASE identity will be used if available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available.",
        SerializedName = @"keyVaultReferenceIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultReferenceIdentity { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"linuxOutboundIpAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] LinuxOutboundIPAddress { get;  }
        /// <summary>Maximum number of VMs in the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Maximum number of VMs in the App Service Environment.",
        SerializedName = @"maximumNumberOfMachines",
        PossibleTypes = new [] { typeof(int) })]
        int? MaximumNumberOfMachine { get;  }
        /// <summary>Number of front-end instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of front-end instances.",
        SerializedName = @"multiRoleCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MultiRoleCount { get;  }
        /// <summary>Front-end VM size, e.g. "Medium", "Large".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Front-end VM size, e.g. ""Medium"", ""Large"".",
        SerializedName = @"multiSize",
        PossibleTypes = new [] { typeof(string) })]
        string MultiSize { get; set; }
        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource Id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkingConfigurationId { get;  }
        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Kind of resource.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkingConfigurationKind { get; set; }
        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource Name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkingConfigurationName { get;  }
        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkingConfigurationType { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"provisioningDetails",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningDetail { get;  }
        /// <summary>Provisioning state of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the App Service Environment.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Property to enable and disable Remote Debug on ASEV3</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property to enable and disable Remote Debug on ASEV3",
        SerializedName = @"remoteDebugEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RemoteDebugEnabled { get; set; }
        /// <summary>Current status of the App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Current status of the App Service Environment.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.HostingEnvironmentStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.HostingEnvironmentStatus? Status { get;  }
        /// <summary>
        /// <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended,
        /// e.g. when the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
         (most likely because NSG blocked the incoming traffic).",
        SerializedName = @"suspended",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Suspended { get;  }
        /// <summary>Whether an upgrade is available for this App Service Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Whether an upgrade is available for this App Service Environment.",
        SerializedName = @"upgradeAvailability",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradeAvailability) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradeAvailability? UpgradeAvailability { get;  }
        /// <summary>Upgrade Preference</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Upgrade Preference",
        SerializedName = @"upgradePreference",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradePreference) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradePreference? UpgradePreference { get; set; }
        /// <summary>User added ip ranges to whitelist on ASE db</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User added ip ranges to whitelist on ASE db",
        SerializedName = @"userWhitelistedIpRanges",
        PossibleTypes = new [] { typeof(string) })]
        string[] UserWhitelistedIPRange { get; set; }
        /// <summary>Resource id of the Virtual Network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource id of the Virtual Network.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkId { get; set; }
        /// <summary>Name of the Virtual Network (read-only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the Virtual Network (read-only).",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkName { get;  }
        /// <summary>Subnet within the Virtual Network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subnet within the Virtual Network.",
        SerializedName = @"subnet",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkSubnet { get; set; }
        /// <summary>Resource type of the Virtual Network (read-only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type of the Virtual Network (read-only).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkType { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"windowsOutboundIpAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowsOutboundIPAddress { get;  }
        /// <summary>Whether or not this App Service Environment is zone-redundant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not this App Service Environment is zone-redundant.",
        SerializedName = @"zoneRedundant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ZoneRedundant { get; set; }

    }
    /// ARM resource for a app service environment.
    internal partial interface IAppServiceEnvironmentPatchResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal
    {
        /// <summary>Property to enable and disable new private endpoint connection creation on ASE</summary>
        bool? AllowNewPrivateEndpointConnection { get; set; }
        /// <summary>
        /// The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for
        /// sites with the custom domain suffix.
        /// </summary>
        string CertificateUrl { get; set; }
        /// <summary>Custom settings for changing the behavior of the App Service Environment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.INameValuePair[] ClusterSetting { get; set; }
        /// <summary>Full view of the custom domain suffix configuration for ASEv3.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfiguration CustomDnsSuffixConfiguration { get; set; }
        /// <summary>Resource Id.</summary>
        string CustomDnsSuffixConfigurationId { get; set; }
        /// <summary>Kind of resource.</summary>
        string CustomDnsSuffixConfigurationKind { get; set; }
        /// <summary>Resource Name.</summary>
        string CustomDnsSuffixConfigurationName { get; set; }
        /// <summary>The default custom domain suffix to use for all sites deployed on the ASE.</summary>
        string CustomDnsSuffixConfigurationPropertiesDnsSuffix { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.CustomDnsSuffixProvisioningState? CustomDnsSuffixConfigurationPropertiesProvisioningState { get; set; }
        /// <summary>CustomDnsSuffixConfiguration resource specific properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ICustomDnsSuffixConfigurationProperties CustomDnsSuffixConfigurationProperty { get; set; }
        /// <summary>Resource type.</summary>
        string CustomDnsSuffixConfigurationType { get; set; }
        /// <summary>Dedicated Host Count</summary>
        int? DedicatedHostCount { get; set; }
        /// <summary>DNS suffix of the App Service Environment.</summary>
        string DnsSuffix { get; set; }

        string[] ExternalInboundIPAddress { get; set; }
        /// <summary>Scale factor for front-ends.</summary>
        int? FrontEndScaleFactor { get; set; }
        /// <summary>Property to enable and disable FTP on ASEV3</summary>
        bool? FtpEnabled { get; set; }
        /// <summary>Flag that displays whether an ASE has linux workers or not</summary>
        bool? HasLinuxWorker { get; set; }
        /// <summary>Customer provided Inbound IP Address. Only able to be set on Ase create.</summary>
        string InboundIPAddressOverride { get; set; }

        string[] InternalInboundIPAddress { get; set; }
        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.LoadBalancingMode? InternalLoadBalancingMode { get; set; }
        /// <summary>Number of IP SSL addresses reserved for the App Service Environment.</summary>
        int? IpsslAddressCount { get; set; }
        /// <summary>
        /// The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned
        /// ASE identity will be used if available.
        /// </summary>
        string KeyVaultReferenceIdentity { get; set; }

        string[] LinuxOutboundIPAddress { get; set; }
        /// <summary>Maximum number of VMs in the App Service Environment.</summary>
        int? MaximumNumberOfMachine { get; set; }
        /// <summary>Number of front-end instances.</summary>
        int? MultiRoleCount { get; set; }
        /// <summary>Front-end VM size, e.g. "Medium", "Large".</summary>
        string MultiSize { get; set; }
        /// <summary>Full view of networking configuration for an ASE.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseV3NetworkingConfiguration NetworkingConfiguration { get; set; }
        /// <summary>Resource Id.</summary>
        string NetworkingConfigurationId { get; set; }
        /// <summary>Kind of resource.</summary>
        string NetworkingConfigurationKind { get; set; }
        /// <summary>Resource Name.</summary>
        string NetworkingConfigurationName { get; set; }
        /// <summary>AseV3NetworkingConfiguration resource specific properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAseV3NetworkingConfigurationProperties NetworkingConfigurationProperty { get; set; }
        /// <summary>Resource type.</summary>
        string NetworkingConfigurationType { get; set; }
        /// <summary>Core resource properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppServiceEnvironment Property { get; set; }

        string ProvisioningDetail { get; set; }
        /// <summary>Provisioning state of the App Service Environment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Property to enable and disable Remote Debug on ASEV3</summary>
        bool? RemoteDebugEnabled { get; set; }
        /// <summary>Current status of the App Service Environment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.HostingEnvironmentStatus? Status { get; set; }
        /// <summary>
        /// <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended,
        /// e.g. when the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </summary>
        bool? Suspended { get; set; }
        /// <summary>Whether an upgrade is available for this App Service Environment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradeAvailability? UpgradeAvailability { get; set; }
        /// <summary>Upgrade Preference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.UpgradePreference? UpgradePreference { get; set; }
        /// <summary>User added ip ranges to whitelist on ASE db</summary>
        string[] UserWhitelistedIPRange { get; set; }
        /// <summary>Description of the Virtual Network.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVirtualNetworkProfile VirtualNetwork { get; set; }
        /// <summary>Resource id of the Virtual Network.</summary>
        string VirtualNetworkId { get; set; }
        /// <summary>Name of the Virtual Network (read-only).</summary>
        string VirtualNetworkName { get; set; }
        /// <summary>Subnet within the Virtual Network.</summary>
        string VirtualNetworkSubnet { get; set; }
        /// <summary>Resource type of the Virtual Network (read-only).</summary>
        string VirtualNetworkType { get; set; }

        string[] WindowsOutboundIPAddress { get; set; }
        /// <summary>Whether or not this App Service Environment is zone-redundant.</summary>
        bool? ZoneRedundant { get; set; }

    }
}