// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>Github access token for Appservice CLI github integration.</summary>
    public partial class AppserviceGithubToken :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppserviceGithubToken,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppserviceGithubTokenInternal
    {

        /// <summary>Backing field for <see cref="AccessToken" /> property.</summary>
        private string _accessToken;

        /// <summary>Github access token for Appservice CLI github integration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string AccessToken { get => this._accessToken; set => this._accessToken = value; }

        /// <summary>Backing field for <see cref="ErrorMessage" /> property.</summary>
        private string _errorMessage;

        /// <summary>Error message if unable to get token</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string ErrorMessage { get => this._errorMessage; set => this._errorMessage = value; }

        /// <summary>Backing field for <see cref="GotToken" /> property.</summary>
        private bool? _gotToken;

        /// <summary>True if valid github token received, False otherwise</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public bool? GotToken { get => this._gotToken; set => this._gotToken = value; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>Scope of the github access token</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="TokenType" /> property.</summary>
        private string _tokenType;

        /// <summary>token type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string TokenType { get => this._tokenType; set => this._tokenType = value; }

        /// <summary>Creates an new <see cref="AppserviceGithubToken" /> instance.</summary>
        public AppserviceGithubToken()
        {

        }
    }
    /// Github access token for Appservice CLI github integration.
    public partial interface IAppserviceGithubToken :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable
    {
        /// <summary>Github access token for Appservice CLI github integration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Github access token for Appservice CLI github integration",
        SerializedName = @"accessToken",
        PossibleTypes = new [] { typeof(string) })]
        string AccessToken { get; set; }
        /// <summary>Error message if unable to get token</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Error message if unable to get token",
        SerializedName = @"errorMessage",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorMessage { get; set; }
        /// <summary>True if valid github token received, False otherwise</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if valid github token received, False otherwise",
        SerializedName = @"gotToken",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GotToken { get; set; }
        /// <summary>Scope of the github access token</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Scope of the github access token",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>token type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"token type",
        SerializedName = @"tokenType",
        PossibleTypes = new [] { typeof(string) })]
        string TokenType { get; set; }

    }
    /// Github access token for Appservice CLI github integration.
    internal partial interface IAppserviceGithubTokenInternal

    {
        /// <summary>Github access token for Appservice CLI github integration</summary>
        string AccessToken { get; set; }
        /// <summary>Error message if unable to get token</summary>
        string ErrorMessage { get; set; }
        /// <summary>True if valid github token received, False otherwise</summary>
        bool? GotToken { get; set; }
        /// <summary>Scope of the github access token</summary>
        string Scope { get; set; }
        /// <summary>token type</summary>
        string TokenType { get; set; }

    }
}