// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EdgeOrder.Support
{

    /// <summary>Reason why the product is disabled.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.EdgeOrder.Support.DisabledReasonTypeConverter))]
    public partial struct DisabledReason :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "None".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'None'", "None", global::System.Management.Automation.CompletionResultType.ParameterValue, "None");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Country".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Country'", "Country", global::System.Management.Automation.CompletionResultType.ParameterValue, "Country");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Region".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Region'", "Region", global::System.Management.Automation.CompletionResultType.ParameterValue, "Region");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Feature".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Feature'", "Feature", global::System.Management.Automation.CompletionResultType.ParameterValue, "Feature");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "OfferType".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'OfferType'", "OfferType", global::System.Management.Automation.CompletionResultType.ParameterValue, "OfferType");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NoSubscriptionInfo".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NoSubscriptionInfo'", "NoSubscriptionInfo", global::System.Management.Automation.CompletionResultType.ParameterValue, "NoSubscriptionInfo");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NotAvailable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NotAvailable'", "NotAvailable", global::System.Management.Automation.CompletionResultType.ParameterValue, "NotAvailable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "OutOfStock".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'OutOfStock'", "OutOfStock", global::System.Management.Automation.CompletionResultType.ParameterValue, "OutOfStock");
            }
        }
    }
}