// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for InvoicesOperations
    /// </summary>
    public static partial class InvoicesOperationsExtensions
    {
        /// <summary>
        /// Lists the invoices for a billing account for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='periodStartDate'>
        /// The start date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        /// <param name='periodEndDate'>
        /// The end date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invoice> ListByBillingAccount(this IInvoicesOperations operations, string billingAccountName, string periodStartDate, string periodEndDate)
        {
                return ((IInvoicesOperations)operations).ListByBillingAccountAsync(billingAccountName, periodStartDate, periodEndDate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the invoices for a billing account for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='periodStartDate'>
        /// The start date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        /// <param name='periodEndDate'>
        /// The end date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invoice>> ListByBillingAccountAsync(this IInvoicesOperations operations, string billingAccountName, string periodStartDate, string periodEndDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingAccountWithHttpMessagesAsync(billingAccountName, periodStartDate, periodEndDate, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the invoices for a billing profile for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        /// <param name='periodStartDate'>
        /// The start date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        /// <param name='periodEndDate'>
        /// The end date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invoice> ListByBillingProfile(this IInvoicesOperations operations, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate)
        {
                return ((IInvoicesOperations)operations).ListByBillingProfileAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the invoices for a billing profile for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        /// <param name='periodStartDate'>
        /// The start date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        /// <param name='periodEndDate'>
        /// The end date to fetch the invoices. The date should be specified in
        /// MM-DD-YYYY format.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invoice>> ListByBillingProfileAsync(this IInvoicesOperations operations, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingProfileWithHttpMessagesAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an invoice by billing account name and ID. The operation is supported
        /// for billing accounts with agreement type Microsoft Partner Agreement or
        /// Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        public static Invoice Get(this IInvoicesOperations operations, string billingAccountName, string invoiceName)
        {
                return ((IInvoicesOperations)operations).GetAsync(billingAccountName, invoiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an invoice by billing account name and ID. The operation is supported
        /// for billing accounts with agreement type Microsoft Partner Agreement or
        /// Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Invoice> GetAsync(this IInvoicesOperations operations, string billingAccountName, string invoiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(billingAccountName, invoiceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an invoice by ID. The operation is supported for billing accounts with
        /// agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        public static Invoice GetById(this IInvoicesOperations operations, string invoiceName)
        {
                return ((IInvoicesOperations)operations).GetByIdAsync(invoiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an invoice by ID. The operation is supported for billing accounts with
        /// agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Invoice> GetByIdAsync(this IInvoicesOperations operations, string invoiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByIdWithHttpMessagesAsync(invoiceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a URL to download an invoice. The operation is supported for billing
        /// accounts with agreement type Microsoft Partner Agreement or Microsoft
        /// Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        public static DownloadUrl DownloadInvoice(this IInvoicesOperations operations, string billingAccountName, string invoiceName, string downloadToken)
        {
                return ((IInvoicesOperations)operations).DownloadInvoiceAsync(billingAccountName, invoiceName, downloadToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a URL to download an invoice. The operation is supported for billing
        /// accounts with agreement type Microsoft Partner Agreement or Microsoft
        /// Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DownloadUrl> DownloadInvoiceAsync(this IInvoicesOperations operations, string billingAccountName, string invoiceName, string downloadToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DownloadInvoiceWithHttpMessagesAsync(billingAccountName, invoiceName, downloadToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the invoices for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='periodStartDate'>
        /// Invoice period start date.
        /// </param>
        /// <param name='periodEndDate'>
        /// Invoice period end date.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invoice> ListByBillingSubscription(this IInvoicesOperations operations, string periodStartDate, string periodEndDate)
        {
                return ((IInvoicesOperations)operations).ListByBillingSubscriptionAsync(periodStartDate, periodEndDate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the invoices for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='periodStartDate'>
        /// Invoice period start date.
        /// </param>
        /// <param name='periodEndDate'>
        /// Invoice period end date.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invoice>> ListByBillingSubscriptionAsync(this IInvoicesOperations operations, string periodStartDate, string periodEndDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingSubscriptionWithHttpMessagesAsync(periodStartDate, periodEndDate, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an invoice by subscription ID and invoice ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        public static Invoice GetBySubscriptionAndInvoiceId(this IInvoicesOperations operations, string invoiceName)
        {
                return ((IInvoicesOperations)operations).GetBySubscriptionAndInvoiceIdAsync(invoiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an invoice by subscription ID and invoice ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Invoice> GetBySubscriptionAndInvoiceIdAsync(this IInvoicesOperations operations, string invoiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBySubscriptionAndInvoiceIdWithHttpMessagesAsync(invoiceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a URL to download an invoice.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        public static DownloadUrl DownloadBillingSubscriptionInvoice(this IInvoicesOperations operations, string invoiceName, string downloadToken)
        {
                return ((IInvoicesOperations)operations).DownloadBillingSubscriptionInvoiceAsync(invoiceName, downloadToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a URL to download an invoice.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DownloadUrl> DownloadBillingSubscriptionInvoiceAsync(this IInvoicesOperations operations, string invoiceName, string downloadToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DownloadBillingSubscriptionInvoiceWithHttpMessagesAsync(invoiceName, downloadToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a URL to download an invoice. The operation is supported for billing
        /// accounts with agreement type Microsoft Partner Agreement or Microsoft
        /// Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        public static DownloadUrl BeginDownloadInvoice(this IInvoicesOperations operations, string billingAccountName, string invoiceName, string downloadToken)
        {
                return ((IInvoicesOperations)operations).BeginDownloadInvoiceAsync(billingAccountName, invoiceName, downloadToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a URL to download an invoice. The operation is supported for billing
        /// accounts with agreement type Microsoft Partner Agreement or Microsoft
        /// Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DownloadUrl> BeginDownloadInvoiceAsync(this IInvoicesOperations operations, string billingAccountName, string invoiceName, string downloadToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDownloadInvoiceWithHttpMessagesAsync(billingAccountName, invoiceName, downloadToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a URL to download an invoice.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        public static DownloadUrl BeginDownloadBillingSubscriptionInvoice(this IInvoicesOperations operations, string invoiceName, string downloadToken)
        {
                return ((IInvoicesOperations)operations).BeginDownloadBillingSubscriptionInvoiceAsync(invoiceName, downloadToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a URL to download an invoice.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='invoiceName'>
        /// The ID that uniquely identifies an invoice.
        /// </param>
        /// <param name='downloadToken'>
        /// Download token with document source and document ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DownloadUrl> BeginDownloadBillingSubscriptionInvoiceAsync(this IInvoicesOperations operations, string invoiceName, string downloadToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDownloadBillingSubscriptionInvoiceWithHttpMessagesAsync(invoiceName, downloadToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the invoices for a billing account for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invoice> ListByBillingAccountNext(this IInvoicesOperations operations, string nextPageLink)
        {
                return ((IInvoicesOperations)operations).ListByBillingAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the invoices for a billing account for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invoice>> ListByBillingAccountNextAsync(this IInvoicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the invoices for a billing profile for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invoice> ListByBillingProfileNext(this IInvoicesOperations operations, string nextPageLink)
        {
                return ((IInvoicesOperations)operations).ListByBillingProfileNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the invoices for a billing profile for a given start date and end
        /// date. The operation is supported for billing accounts with agreement type
        /// Microsoft Partner Agreement or Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invoice>> ListByBillingProfileNextAsync(this IInvoicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingProfileNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the invoices for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Invoice> ListByBillingSubscriptionNext(this IInvoicesOperations operations, string nextPageLink)
        {
                return ((IInvoicesOperations)operations).ListByBillingSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the invoices for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Invoice>> ListByBillingSubscriptionNextAsync(this IInvoicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
