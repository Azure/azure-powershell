// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Billing.Models
{
    using System.Linq;

    /// <summary>
    /// A billing profile.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BillingProfile : Resource
    {
        /// <summary>
        /// Initializes a new instance of the BillingProfile class.
        /// </summary>
        public BillingProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BillingProfile class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="spendingLimit">The billing profile spending limit.
        /// Possible values include: &#39;Off&#39;, &#39;On&#39;</param>

        /// <param name="displayName">The name of the billing profile.
        /// </param>

        /// <param name="poNumber">The purchase order name that will appear on the invoices generated for the
        /// billing profile.
        /// </param>

        /// <param name="billTo">Billing address.
        /// </param>

        /// <param name="invoiceEmailOptIn">Flag controlling whether the invoices for the billing profile are sent
        /// through email.
        /// </param>

        /// <param name="invoiceDay">The day of the month when the invoice for the billing profile is generated.
        /// </param>

        /// <param name="currency">The currency in which the charges for the billing profile are billed.
        /// </param>

        /// <param name="enabledAzurePlans">Information about the enabled azure plans.
        /// </param>

        /// <param name="invoiceSections">The invoice sections associated to the billing profile. By default this is
        /// not populated, unless it&#39;s specified in $expand.
        /// </param>

        /// <param name="hasReadAccess">Indicates whether user has read access to the billing profile.
        /// </param>

        /// <param name="systemId">The system generated unique identifier for a billing profile.
        /// </param>

        /// <param name="status">The status of the billing profile.
        /// Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Warned&#39;</param>

        /// <param name="statusReasonCode">Reason for the specified billing profile status.
        /// Possible values include: &#39;PastDue&#39;, &#39;SpendingLimitReached&#39;,
        /// &#39;SpendingLimitExpired&#39;</param>
        public BillingProfile(string id = default(string), string name = default(string), string type = default(string), string spendingLimit = default(string), string displayName = default(string), string poNumber = default(string), AddressDetails billTo = default(AddressDetails), bool? invoiceEmailOptIn = default(bool?), int? invoiceDay = default(int?), string currency = default(string), System.Collections.Generic.IList<AzurePlan> enabledAzurePlans = default(System.Collections.Generic.IList<AzurePlan>), InvoiceSectionsOnExpand invoiceSections = default(InvoiceSectionsOnExpand), bool? hasReadAccess = default(bool?), string systemId = default(string), string status = default(string), string statusReasonCode = default(string))

        : base(id, name, type)
        {
            this.SpendingLimit = spendingLimit;
            this.DisplayName = displayName;
            this.PoNumber = poNumber;
            this.BillTo = billTo;
            this.InvoiceEmailOptIn = invoiceEmailOptIn;
            this.InvoiceDay = invoiceDay;
            this.Currency = currency;
            this.EnabledAzurePlans = enabledAzurePlans;
            this.InvoiceSections = invoiceSections;
            this.HasReadAccess = hasReadAccess;
            this.SystemId = systemId;
            this.Status = status;
            this.StatusReasonCode = statusReasonCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the billing profile spending limit. Possible values include: &#39;Off&#39;, &#39;On&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.spendingLimit")]
        public string SpendingLimit {get; private set; }

        /// <summary>
        /// Gets or sets the name of the billing profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the purchase order name that will appear on the invoices
        /// generated for the billing profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.poNumber")]
        public string PoNumber {get; set; }

        /// <summary>
        /// Gets or sets billing address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.billTo")]
        public AddressDetails BillTo {get; set; }

        /// <summary>
        /// Gets or sets flag controlling whether the invoices for the billing profile
        /// are sent through email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.invoiceEmailOptIn")]
        public bool? InvoiceEmailOptIn {get; set; }

        /// <summary>
        /// Gets the day of the month when the invoice for the billing profile is
        /// generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.invoiceDay")]
        public int? InvoiceDay {get; private set; }

        /// <summary>
        /// Gets the currency in which the charges for the billing profile are billed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currency")]
        public string Currency {get; private set; }

        /// <summary>
        /// Gets or sets information about the enabled azure plans.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabledAzurePlans")]
        public System.Collections.Generic.IList<AzurePlan> EnabledAzurePlans {get; set; }

        /// <summary>
        /// Gets or sets the invoice sections associated to the billing profile. By
        /// default this is not populated, unless it&#39;s specified in $expand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.invoiceSections")]
        public InvoiceSectionsOnExpand InvoiceSections {get; set; }

        /// <summary>
        /// Gets indicates whether user has read access to the billing profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hasReadAccess")]
        public bool? HasReadAccess {get; private set; }

        /// <summary>
        /// Gets the system generated unique identifier for a billing profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.systemId")]
        public string SystemId {get; private set; }

        /// <summary>
        /// Gets the status of the billing profile. Possible values include: &#39;Active&#39;, &#39;Disabled&#39;, &#39;Warned&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets reason for the specified billing profile status. Possible values include: &#39;PastDue&#39;, &#39;SpendingLimitReached&#39;, &#39;SpendingLimitExpired&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.statusReasonCode")]
        public string StatusReasonCode {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.BillTo != null)
            {
                this.BillTo.Validate();
            }






        }
    }
}