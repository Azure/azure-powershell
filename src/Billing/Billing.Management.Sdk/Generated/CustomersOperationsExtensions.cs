// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CustomersOperations
    /// </summary>
    public static partial class CustomersOperationsExtensions
    {
        /// <summary>
        /// Lists the customers that are billed to a billing profile. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        /// <param name='search'>
        /// Used for searching customers by their name. Any customer with name
        /// containing the search text will be included in the response
        /// </param>
        /// <param name='filter'>
        /// May be used to filter the list of customers.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Customer> ListByBillingProfile(this ICustomersOperations operations, string billingAccountName, string billingProfileName, string search = default(string), string filter = default(string))
        {
                return ((ICustomersOperations)operations).ListByBillingProfileAsync(billingAccountName, billingProfileName, search, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the customers that are billed to a billing profile. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        /// <param name='search'>
        /// Used for searching customers by their name. Any customer with name
        /// containing the search text will be included in the response
        /// </param>
        /// <param name='filter'>
        /// May be used to filter the list of customers.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Customer>> ListByBillingProfileAsync(this ICustomersOperations operations, string billingAccountName, string billingProfileName, string search = default(string), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingProfileWithHttpMessagesAsync(billingAccountName, billingProfileName, search, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the customers that are billed to a billing account. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='search'>
        /// Used for searching customers by their name. Any customer with name
        /// containing the search text will be included in the response
        /// </param>
        /// <param name='filter'>
        /// May be used to filter the list of customers.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Customer> ListByBillingAccount(this ICustomersOperations operations, string billingAccountName, string search = default(string), string filter = default(string))
        {
                return ((ICustomersOperations)operations).ListByBillingAccountAsync(billingAccountName, search, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the customers that are billed to a billing account. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='search'>
        /// Used for searching customers by their name. Any customer with name
        /// containing the search text will be included in the response
        /// </param>
        /// <param name='filter'>
        /// May be used to filter the list of customers.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Customer>> ListByBillingAccountAsync(this ICustomersOperations operations, string billingAccountName, string search = default(string), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingAccountWithHttpMessagesAsync(billingAccountName, search, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a customer by its ID. The operation is supported only for billing
        /// accounts with agreement type Microsoft Partner Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='customerName'>
        /// The ID that uniquely identifies a customer.
        /// </param>
        /// <param name='expand'>
        /// May be used to expand enabledAzurePlans and resellers
        /// </param>
        public static Customer Get(this ICustomersOperations operations, string billingAccountName, string customerName, string expand = default(string))
        {
                return ((ICustomersOperations)operations).GetAsync(billingAccountName, customerName, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a customer by its ID. The operation is supported only for billing
        /// accounts with agreement type Microsoft Partner Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='customerName'>
        /// The ID that uniquely identifies a customer.
        /// </param>
        /// <param name='expand'>
        /// May be used to expand enabledAzurePlans and resellers
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Customer> GetAsync(this ICustomersOperations operations, string billingAccountName, string customerName, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(billingAccountName, customerName, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the customers that are billed to a billing profile. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Customer> ListByBillingProfileNext(this ICustomersOperations operations, string nextPageLink)
        {
                return ((ICustomersOperations)operations).ListByBillingProfileNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the customers that are billed to a billing profile. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Customer>> ListByBillingProfileNextAsync(this ICustomersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingProfileNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the customers that are billed to a billing account. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Customer> ListByBillingAccountNext(this ICustomersOperations operations, string nextPageLink)
        {
                return ((ICustomersOperations)operations).ListByBillingAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the customers that are billed to a billing account. The operation is
        /// supported only for billing accounts with agreement type Microsoft Partner
        /// Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Customer>> ListByBillingAccountNextAsync(this ICustomersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBillingAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
