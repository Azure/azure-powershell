// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PoliciesOperations
    /// </summary>
    public static partial class PoliciesOperationsExtensions
    {
        /// <summary>
        /// Lists the policies for a billing profile. This operation is supported only
        /// for billing accounts with agreement type Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        public static Policy GetByBillingProfile(this IPoliciesOperations operations, string billingAccountName, string billingProfileName)
        {
                return ((IPoliciesOperations)operations).GetByBillingProfileAsync(billingAccountName, billingProfileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the policies for a billing profile. This operation is supported only
        /// for billing accounts with agreement type Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> GetByBillingProfileAsync(this IPoliciesOperations operations, string billingAccountName, string billingProfileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByBillingProfileWithHttpMessagesAsync(billingAccountName, billingProfileName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the policies for a billing profile. This operation is supported
        /// only for billing accounts with agreement type Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        public static Policy Update(this IPoliciesOperations operations, string billingAccountName, string billingProfileName, Policy parameters)
        {
                return ((IPoliciesOperations)operations).UpdateAsync(billingAccountName, billingProfileName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the policies for a billing profile. This operation is supported
        /// only for billing accounts with agreement type Microsoft Customer Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='billingProfileName'>
        /// The ID that uniquely identifies a billing profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> UpdateAsync(this IPoliciesOperations operations, string billingAccountName, string billingProfileName, Policy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(billingAccountName, billingProfileName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the policies for a customer. This operation is supported only for
        /// billing accounts with agreement type Microsoft Partner Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='customerName'>
        /// The ID that uniquely identifies a customer.
        /// </param>
        public static CustomerPolicy GetByCustomer(this IPoliciesOperations operations, string billingAccountName, string customerName)
        {
                return ((IPoliciesOperations)operations).GetByCustomerAsync(billingAccountName, customerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the policies for a customer. This operation is supported only for
        /// billing accounts with agreement type Microsoft Partner Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='customerName'>
        /// The ID that uniquely identifies a customer.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomerPolicy> GetByCustomerAsync(this IPoliciesOperations operations, string billingAccountName, string customerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByCustomerWithHttpMessagesAsync(billingAccountName, customerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the policies for a customer. This operation is supported only for
        /// billing accounts with agreement type Microsoft Partner Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='customerName'>
        /// The ID that uniquely identifies a customer.
        /// </param>
        public static CustomerPolicy UpdateCustomer(this IPoliciesOperations operations, string billingAccountName, string customerName, string viewCharges = default(string))
        {
                return ((IPoliciesOperations)operations).UpdateCustomerAsync(billingAccountName, customerName, viewCharges).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the policies for a customer. This operation is supported only for
        /// billing accounts with agreement type Microsoft Partner Agreement.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingAccountName'>
        /// The ID that uniquely identifies a billing account.
        /// </param>
        /// <param name='customerName'>
        /// The ID that uniquely identifies a customer.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomerPolicy> UpdateCustomerAsync(this IPoliciesOperations operations, string billingAccountName, string customerName, string viewCharges = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateCustomerWithHttpMessagesAsync(billingAccountName, customerName, viewCharges, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
