// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for BillingPeriodsOperations
    /// </summary>
    public static partial class BillingPeriodsOperationsExtensions
    {
        /// <summary>
        /// Lists the available billing periods for a subscription in reverse
        /// chronological order. This is only supported for Azure Web-Direct
        /// subscriptions. Other subscription types which were not purchased directly
        /// through the Azure web portal are not supported through this preview API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// May be used to filter billing periods by billingPeriodEndDate. The filter
        /// supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently
        /// support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;.
        /// </param>
        /// <param name='skiptoken'>
        /// Skiptoken is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the
        /// nextLink element will include a skiptoken parameter that specifies a
        /// starting point to use for subsequent calls.
        /// </param>
        /// <param name='top'>
        /// May be used to limit the number of results to the most recent N billing
        /// periods.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BillingPeriod> List(this IBillingPeriodsOperations operations, string filter = default(string), string skiptoken = default(string), int? top = default(int?))
        {
                return ((IBillingPeriodsOperations)operations).ListAsync(filter, skiptoken, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the available billing periods for a subscription in reverse
        /// chronological order. This is only supported for Azure Web-Direct
        /// subscriptions. Other subscription types which were not purchased directly
        /// through the Azure web portal are not supported through this preview API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// May be used to filter billing periods by billingPeriodEndDate. The filter
        /// supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently
        /// support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;.
        /// </param>
        /// <param name='skiptoken'>
        /// Skiptoken is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the
        /// nextLink element will include a skiptoken parameter that specifies a
        /// starting point to use for subsequent calls.
        /// </param>
        /// <param name='top'>
        /// May be used to limit the number of results to the most recent N billing
        /// periods.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BillingPeriod>> ListAsync(this IBillingPeriodsOperations operations, string filter = default(string), string skiptoken = default(string), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(filter, skiptoken, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a named billing period.  This is only supported for Azure Web-Direct
        /// subscriptions. Other subscription types which were not purchased directly
        /// through the Azure web portal are not supported through this preview API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingPeriodName'>
        /// The name of a BillingPeriod resource.
        /// </param>
        public static BillingPeriod Get(this IBillingPeriodsOperations operations, string billingPeriodName)
        {
                return ((IBillingPeriodsOperations)operations).GetAsync(billingPeriodName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a named billing period.  This is only supported for Azure Web-Direct
        /// subscriptions. Other subscription types which were not purchased directly
        /// through the Azure web portal are not supported through this preview API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='billingPeriodName'>
        /// The name of a BillingPeriod resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BillingPeriod> GetAsync(this IBillingPeriodsOperations operations, string billingPeriodName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(billingPeriodName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the available billing periods for a subscription in reverse
        /// chronological order. This is only supported for Azure Web-Direct
        /// subscriptions. Other subscription types which were not purchased directly
        /// through the Azure web portal are not supported through this preview API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BillingPeriod> ListNext(this IBillingPeriodsOperations operations, string nextPageLink)
        {
                return ((IBillingPeriodsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the available billing periods for a subscription in reverse
        /// chronological order. This is only supported for Azure Web-Direct
        /// subscriptions. Other subscription types which were not purchased directly
        /// through the Azure web portal are not supported through this preview API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BillingPeriod>> ListNextAsync(this IBillingPeriodsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
