// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Input for InstallPatches on a Windows VM, as directly received by the API
    /// </summary>
    public partial class WindowsParameters
    {
        /// <summary>
        /// Initializes a new instance of the WindowsParameters class.
        /// </summary>
        public WindowsParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WindowsParameters class.
        /// </summary>

        /// <param name="classificationsToInclude">The update classifications to select when installing patches for Windows.
        /// </param>

        /// <param name="kbNumbersToInclude">Kbs to include in the patch operation
        /// </param>

        /// <param name="kbNumbersToExclude">Kbs to exclude in the patch operation
        /// </param>

        /// <param name="excludeKbsRequiringReboot">Filters out Kbs that don&#39;t have an InstallationRebootBehavior of
        /// &#39;NeverReboots&#39; when this is set to true.
        /// </param>

        /// <param name="maxPatchPublishDate">This is used to install patches that were published on or before this given
        /// max published date.
        /// </param>
        public WindowsParameters(System.Collections.Generic.IList<string> classificationsToInclude = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> kbNumbersToInclude = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> kbNumbersToExclude = default(System.Collections.Generic.IList<string>), bool? excludeKbsRequiringReboot = default(bool?), System.DateTime? maxPatchPublishDate = default(System.DateTime?))

        {
            this.ClassificationsToInclude = classificationsToInclude;
            this.KbNumbersToInclude = kbNumbersToInclude;
            this.KbNumbersToExclude = kbNumbersToExclude;
            this.ExcludeKbsRequiringReboot = excludeKbsRequiringReboot;
            this.MaxPatchPublishDate = maxPatchPublishDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the update classifications to select when installing patches
        /// for Windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "classificationsToInclude")]
        public System.Collections.Generic.IList<string> ClassificationsToInclude {get; set; }

        /// <summary>
        /// Gets or sets kbs to include in the patch operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kbNumbersToInclude")]
        public System.Collections.Generic.IList<string> KbNumbersToInclude {get; set; }

        /// <summary>
        /// Gets or sets kbs to exclude in the patch operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kbNumbersToExclude")]
        public System.Collections.Generic.IList<string> KbNumbersToExclude {get; set; }

        /// <summary>
        /// Gets or sets filters out Kbs that don&#39;t have an InstallationRebootBehavior
        /// of &#39;NeverReboots&#39; when this is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludeKbsRequiringReboot")]
        public bool? ExcludeKbsRequiringReboot {get; set; }

        /// <summary>
        /// Gets or sets this is used to install patches that were published on or
        /// before this given max published date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxPatchPublishDate")]
        public System.DateTime? MaxPatchPublishDate {get; set; }
    }
}