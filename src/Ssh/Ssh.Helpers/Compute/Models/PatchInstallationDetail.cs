// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Information about a specific patch that was encountered during an
    /// installation action.
    /// </summary>
    public partial class PatchInstallationDetail
    {
        /// <summary>
        /// Initializes a new instance of the PatchInstallationDetail class.
        /// </summary>
        public PatchInstallationDetail()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PatchInstallationDetail class.
        /// </summary>

        /// <param name="patchId">A unique identifier for the patch.
        /// </param>

        /// <param name="name">The friendly name of the patch.
        /// </param>

        /// <param name="version">The version string of the package. It may conform to Semantic Versioning.
        /// Only applies to Linux.
        /// </param>

        /// <param name="kbId">The KBID of the patch. Only applies to Windows patches.
        /// </param>

        /// <param name="classifications">The classification(s) of the patch as provided by the patch publisher.
        /// </param>

        /// <param name="installationState">The state of the patch after the installation operation completed.
        /// Possible values include: &#39;Unknown&#39;, &#39;Installed&#39;, &#39;Failed&#39;, &#39;Excluded&#39;,
        /// &#39;NotSelected&#39;, &#39;Pending&#39;</param>
        public PatchInstallationDetail(string patchId = default(string), string name = default(string), string version = default(string), string kbId = default(string), System.Collections.Generic.IList<string> classifications = default(System.Collections.Generic.IList<string>), string installationState = default(string))

        {
            this.PatchId = patchId;
            this.Name = name;
            this.Version = version;
            this.KbId = kbId;
            this.Classifications = classifications;
            this.InstallationState = installationState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique identifier for the patch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "patchId")]
        public string PatchId {get; private set; }

        /// <summary>
        /// Gets the friendly name of the patch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the version string of the package. It may conform to Semantic
        /// Versioning. Only applies to Linux.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets the KBID of the patch. Only applies to Windows patches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kbId")]
        public string KbId {get; private set; }

        /// <summary>
        /// Gets the classification(s) of the patch as provided by the patch publisher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "classifications")]
        public System.Collections.Generic.IList<string> Classifications {get; private set; }

        /// <summary>
        /// Gets the state of the patch after the installation operation completed. Possible values include: &#39;Unknown&#39;, &#39;Installed&#39;, &#39;Failed&#39;, &#39;Excluded&#39;, &#39;NotSelected&#39;, &#39;Pending&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "installationState")]
        public string InstallationState {get; private set; }
    }
}