// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies the storage settings for the virtual machine disks.
    /// </summary>
    public partial class StorageProfile
    {
        /// <summary>
        /// Initializes a new instance of the StorageProfile class.
        /// </summary>
        public StorageProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageProfile class.
        /// </summary>

        /// <param name="imageReference">Specifies information about the image to use. You can specify information
        /// about platform images, marketplace images, or virtual machine images. This
        /// element is required when you want to use a platform image, marketplace
        /// image, or virtual machine image, but is not used in other creation
        /// operations.
        /// </param>

        /// <param name="osDisk">Specifies information about the operating system disk used by the virtual
        /// machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and
        /// VHDs for Azure virtual
        /// machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </param>

        /// <param name="dataDisks">Specifies the parameters that are used to add a data disk to a virtual
        /// machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and
        /// VHDs for Azure virtual
        /// machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </param>

        /// <param name="diskControllerType">Specifies the disk controller type configured for the VM. &lt;br&gt;&lt;br&gt;NOTE:
        /// This property will be set to the default disk controller type if not
        /// specified provided virtual machine is being created as a hyperVGeneration:
        /// V2 based on the capabilities of the operating system disk and VM size from
        /// the the specified minimum api version. &lt;br&gt;You need to deallocate the VM
        /// before updating its disk controller type unless you are updating the VM
        /// size in the VM configuration which implicitly deallocates and reallocates
        /// the VM. &lt;br&gt;&lt;br&gt; Minimum api-version: 2022-08-01
        /// Possible values include: &#39;SCSI&#39;, &#39;NVMe&#39;</param>
        public StorageProfile(ImageReference imageReference = default(ImageReference), OSDisk osDisk = default(OSDisk), System.Collections.Generic.IList<DataDisk> dataDisks = default(System.Collections.Generic.IList<DataDisk>), string diskControllerType = default(string))

        {
            this.ImageReference = imageReference;
            this.OSDisk = osDisk;
            this.DataDisks = dataDisks;
            this.DiskControllerType = diskControllerType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies information about the image to use. You can specify
        /// information about platform images, marketplace images, or virtual machine
        /// images. This element is required when you want to use a platform image,
        /// marketplace image, or virtual machine image, but is not used in other
        /// creation operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "imageReference")]
        public ImageReference ImageReference {get; set; }

        /// <summary>
        /// Gets or sets specifies information about the operating system disk used by
        /// the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About
        /// disks and VHDs for Azure virtual
        /// machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osDisk")]
        public OSDisk OSDisk {get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters that are used to add a data disk to a
        /// virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About
        /// disks and VHDs for Azure virtual
        /// machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDisks")]
        public System.Collections.Generic.IList<DataDisk> DataDisks {get; set; }

        /// <summary>
        /// Gets or sets specifies the disk controller type configured for the VM.
        /// &lt;br&gt;&lt;br&gt;NOTE: This property will be set to the default disk controller type
        /// if not specified provided virtual machine is being created as a
        /// hyperVGeneration: V2 based on the capabilities of the operating system disk
        /// and VM size from the the specified minimum api version. &lt;br&gt;You need to
        /// deallocate the VM before updating its disk controller type unless you are
        /// updating the VM size in the VM configuration which implicitly deallocates
        /// and reallocates the VM. &lt;br&gt;&lt;br&gt; Minimum api-version: 2022-08-01 Possible values include: &#39;SCSI&#39;, &#39;NVMe&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskControllerType")]
        public string DiskControllerType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.OSDisk != null)
            {
                this.OSDisk.Validate();
            }
            if (this.DataDisks != null)
            {
                foreach (var element in this.DataDisks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}