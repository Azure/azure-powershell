// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// The instance view of a virtual machine.
    /// </summary>
    public partial class VirtualMachineInstanceView
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineInstanceView class.
        /// </summary>
        public VirtualMachineInstanceView()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineInstanceView class.
        /// </summary>

        /// <param name="platformUpdateDomain">Specifies the update domain of the virtual machine.
        /// </param>

        /// <param name="platformFaultDomain">Specifies the fault domain of the virtual machine.
        /// </param>

        /// <param name="computerName">The computer name assigned to the virtual machine.
        /// </param>

        /// <param name="osName">The Operating System running on the virtual machine.
        /// </param>

        /// <param name="osVersion">The version of Operating System running on the virtual machine.
        /// </param>

        /// <param name="hyperVGeneration">Specifies the HyperVGeneration Type associated with a resource
        /// Possible values include: &#39;V1&#39;, &#39;V2&#39;</param>

        /// <param name="rdpThumbPrint">The Remote desktop certificate thumbprint.
        /// </param>

        /// <param name="vmAgent">The VM Agent running on the virtual machine.
        /// </param>

        /// <param name="maintenanceRedeployStatus">The Maintenance Operation status on the virtual machine.
        /// </param>

        /// <param name="disks">The virtual machine disk information.
        /// </param>

        /// <param name="extensions">The extensions information.
        /// </param>

        /// <param name="vmHealth">The health status for the VM.
        /// </param>

        /// <param name="bootDiagnostics">Boot Diagnostics is a debugging feature which allows you to view Console
        /// Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view
        /// the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a
        /// screenshot of the VM from the hypervisor.
        /// </param>

        /// <param name="assignedHost">Resource id of the dedicated host, on which the virtual machine is
        /// allocated through automatic placement, when the virtual machine is
        /// associated with a dedicated host group that has automatic placement
        /// enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
        /// </param>

        /// <param name="statuses">The resource status information.
        /// </param>

        /// <param name="patchStatus">[Preview Feature] The status of virtual machine patch operations.
        /// </param>
        public VirtualMachineInstanceView(int? platformUpdateDomain = default(int?), int? platformFaultDomain = default(int?), string computerName = default(string), string osName = default(string), string osVersion = default(string), string hyperVGeneration = default(string), string rdpThumbPrint = default(string), VirtualMachineAgentInstanceView vmAgent = default(VirtualMachineAgentInstanceView), MaintenanceRedeployStatus maintenanceRedeployStatus = default(MaintenanceRedeployStatus), System.Collections.Generic.IList<DiskInstanceView> disks = default(System.Collections.Generic.IList<DiskInstanceView>), System.Collections.Generic.IList<VirtualMachineExtensionInstanceView> extensions = default(System.Collections.Generic.IList<VirtualMachineExtensionInstanceView>), VirtualMachineHealthStatus vmHealth = default(VirtualMachineHealthStatus), BootDiagnosticsInstanceView bootDiagnostics = default(BootDiagnosticsInstanceView), string assignedHost = default(string), System.Collections.Generic.IList<InstanceViewStatus> statuses = default(System.Collections.Generic.IList<InstanceViewStatus>), VirtualMachinePatchStatus patchStatus = default(VirtualMachinePatchStatus))

        {
            this.PlatformUpdateDomain = platformUpdateDomain;
            this.PlatformFaultDomain = platformFaultDomain;
            this.ComputerName = computerName;
            this.OSName = osName;
            this.OSVersion = osVersion;
            this.HyperVGeneration = hyperVGeneration;
            this.RdpThumbPrint = rdpThumbPrint;
            this.VMAgent = vmAgent;
            this.MaintenanceRedeployStatus = maintenanceRedeployStatus;
            this.Disks = disks;
            this.Extensions = extensions;
            this.VMHealth = vmHealth;
            this.BootDiagnostics = bootDiagnostics;
            this.AssignedHost = assignedHost;
            this.Statuses = statuses;
            this.PatchStatus = patchStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the update domain of the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platformUpdateDomain")]
        public int? PlatformUpdateDomain {get; set; }

        /// <summary>
        /// Gets or sets specifies the fault domain of the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platformFaultDomain")]
        public int? PlatformFaultDomain {get; set; }

        /// <summary>
        /// Gets or sets the computer name assigned to the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "computerName")]
        public string ComputerName {get; set; }

        /// <summary>
        /// Gets or sets the Operating System running on the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osName")]
        public string OSName {get; set; }

        /// <summary>
        /// Gets or sets the version of Operating System running on the virtual
        /// machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osVersion")]
        public string OSVersion {get; set; }

        /// <summary>
        /// Gets or sets specifies the HyperVGeneration Type associated with a resource Possible values include: &#39;V1&#39;, &#39;V2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hyperVGeneration")]
        public string HyperVGeneration {get; set; }

        /// <summary>
        /// Gets or sets the Remote desktop certificate thumbprint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rdpThumbPrint")]
        public string RdpThumbPrint {get; set; }

        /// <summary>
        /// Gets or sets the VM Agent running on the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmAgent")]
        public VirtualMachineAgentInstanceView VMAgent {get; set; }

        /// <summary>
        /// Gets or sets the Maintenance Operation status on the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maintenanceRedeployStatus")]
        public MaintenanceRedeployStatus MaintenanceRedeployStatus {get; set; }

        /// <summary>
        /// Gets or sets the virtual machine disk information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disks")]
        public System.Collections.Generic.IList<DiskInstanceView> Disks {get; set; }

        /// <summary>
        /// Gets or sets the extensions information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extensions")]
        public System.Collections.Generic.IList<VirtualMachineExtensionInstanceView> Extensions {get; set; }

        /// <summary>
        /// Gets the health status for the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmHealth")]
        public VirtualMachineHealthStatus VMHealth {get; private set; }

        /// <summary>
        /// Gets or sets boot Diagnostics is a debugging feature which allows you to
        /// view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can
        /// easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you
        /// to see a screenshot of the VM from the hypervisor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bootDiagnostics")]
        public BootDiagnosticsInstanceView BootDiagnostics {get; set; }

        /// <summary>
        /// Gets resource id of the dedicated host, on which the virtual machine is
        /// allocated through automatic placement, when the virtual machine is
        /// associated with a dedicated host group that has automatic placement
        /// enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assignedHost")]
        public string AssignedHost {get; private set; }

        /// <summary>
        /// Gets or sets the resource status information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statuses")]
        public System.Collections.Generic.IList<InstanceViewStatus> Statuses {get; set; }

        /// <summary>
        /// Gets or sets [Preview Feature] The status of virtual machine patch
        /// operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "patchStatus")]
        public VirtualMachinePatchStatus PatchStatus {get; set; }
    }
}