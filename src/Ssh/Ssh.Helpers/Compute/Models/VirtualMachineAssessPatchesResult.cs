// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of an AssessPatches result.
    /// </summary>
    public partial class VirtualMachineAssessPatchesResult
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineAssessPatchesResult class.
        /// </summary>
        public VirtualMachineAssessPatchesResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineAssessPatchesResult class.
        /// </summary>

        /// <param name="status">The overall success or failure status of the operation. It remains
        /// &#34;InProgress&#34; until the operation completes. At that point it will become
        /// &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
        /// Possible values include: &#39;Unknown&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;,
        /// &#39;CompletedWithWarnings&#39;</param>

        /// <param name="assessmentActivityId">The activity ID of the operation that produced this result. It is used to
        /// correlate across CRP and extension logs.
        /// </param>

        /// <param name="rebootPending">The overall reboot status of the VM. It will be true when partially
        /// installed patches require a reboot to complete installation but the reboot
        /// has not yet occurred.
        /// </param>

        /// <param name="criticalAndSecurityPatchCount">The number of critical or security patches that have been detected as
        /// available and not yet installed.
        /// </param>

        /// <param name="otherPatchCount">The number of all available patches excluding critical and security.
        /// </param>

        /// <param name="startDateTime">The UTC timestamp when the operation began.
        /// </param>

        /// <param name="availablePatches">The list of patches that have been detected as available for installation.
        /// </param>

        /// <param name="error">The errors that were encountered during execution of the operation. The
        /// details array contains the list of them.
        /// </param>
        public VirtualMachineAssessPatchesResult(string status = default(string), string assessmentActivityId = default(string), bool? rebootPending = default(bool?), int? criticalAndSecurityPatchCount = default(int?), int? otherPatchCount = default(int?), System.DateTime? startDateTime = default(System.DateTime?), System.Collections.Generic.IList<VirtualMachineSoftwarePatchProperties> availablePatches = default(System.Collections.Generic.IList<VirtualMachineSoftwarePatchProperties>), ApiError error = default(ApiError))

        {
            this.Status = status;
            this.AssessmentActivityId = assessmentActivityId;
            this.RebootPending = rebootPending;
            this.CriticalAndSecurityPatchCount = criticalAndSecurityPatchCount;
            this.OtherPatchCount = otherPatchCount;
            this.StartDateTime = startDateTime;
            this.AvailablePatches = availablePatches;
            this.Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the overall success or failure status of the operation. It remains
        /// &#34;InProgress&#34; until the operation completes. At that point it will become
        /// &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34; Possible values include: &#39;Unknown&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;CompletedWithWarnings&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the activity ID of the operation that produced this result. It is used
        /// to correlate across CRP and extension logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assessmentActivityId")]
        public string AssessmentActivityId {get; private set; }

        /// <summary>
        /// Gets the overall reboot status of the VM. It will be true when partially
        /// installed patches require a reboot to complete installation but the reboot
        /// has not yet occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootPending")]
        public bool? RebootPending {get; private set; }

        /// <summary>
        /// Gets the number of critical or security patches that have been detected as
        /// available and not yet installed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "criticalAndSecurityPatchCount")]
        public int? CriticalAndSecurityPatchCount {get; private set; }

        /// <summary>
        /// Gets the number of all available patches excluding critical and security.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "otherPatchCount")]
        public int? OtherPatchCount {get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the operation began.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime {get; private set; }

        /// <summary>
        /// Gets the list of patches that have been detected as available for
        /// installation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availablePatches")]
        public System.Collections.Generic.IList<VirtualMachineSoftwarePatchProperties> AvailablePatches {get; private set; }

        /// <summary>
        /// Gets the errors that were encountered during execution of the operation.
        /// The details array contains the list of them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public ApiError Error {get; private set; }
    }
}