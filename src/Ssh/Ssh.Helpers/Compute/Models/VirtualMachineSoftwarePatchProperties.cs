// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Virtual Machine software patch.
    /// </summary>
    public partial class VirtualMachineSoftwarePatchProperties
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineSoftwarePatchProperties class.
        /// </summary>
        public VirtualMachineSoftwarePatchProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineSoftwarePatchProperties class.
        /// </summary>

        /// <param name="patchId">A unique identifier for the patch.
        /// </param>

        /// <param name="name">The friendly name of the patch.
        /// </param>

        /// <param name="version">The version number of the patch. This property applies only to Linux
        /// patches.
        /// </param>

        /// <param name="kbId">The KBID of the patch. Only applies to Windows patches.
        /// </param>

        /// <param name="classifications">The classification(s) of the patch as provided by the patch publisher.
        /// </param>

        /// <param name="rebootBehavior">Describes the reboot requirements of the patch.
        /// Possible values include: &#39;Unknown&#39;, &#39;NeverReboots&#39;, &#39;AlwaysRequiresReboot&#39;,
        /// &#39;CanRequestReboot&#39;</param>

        /// <param name="activityId">The activity ID of the operation that produced this result. It is used to
        /// correlate across CRP and extension logs.
        /// </param>

        /// <param name="publishedDate">The UTC timestamp when the repository published this patch.
        /// </param>

        /// <param name="lastModifiedDateTime">The UTC timestamp of the last update to this patch record.
        /// </param>

        /// <param name="assessmentState">Describes the availability of a given patch.
        /// Possible values include: &#39;Unknown&#39;, &#39;Available&#39;</param>
        public VirtualMachineSoftwarePatchProperties(string patchId = default(string), string name = default(string), string version = default(string), string kbId = default(string), System.Collections.Generic.IList<string> classifications = default(System.Collections.Generic.IList<string>), string rebootBehavior = default(string), string activityId = default(string), System.DateTime? publishedDate = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string assessmentState = default(string))

        {
            this.PatchId = patchId;
            this.Name = name;
            this.Version = version;
            this.KbId = kbId;
            this.Classifications = classifications;
            this.RebootBehavior = rebootBehavior;
            this.ActivityId = activityId;
            this.PublishedDate = publishedDate;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.AssessmentState = assessmentState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique identifier for the patch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "patchId")]
        public string PatchId {get; private set; }

        /// <summary>
        /// Gets the friendly name of the patch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the version number of the patch. This property applies only to Linux
        /// patches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets the KBID of the patch. Only applies to Windows patches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kbId")]
        public string KbId {get; private set; }

        /// <summary>
        /// Gets the classification(s) of the patch as provided by the patch publisher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "classifications")]
        public System.Collections.Generic.IList<string> Classifications {get; private set; }

        /// <summary>
        /// Gets describes the reboot requirements of the patch. Possible values include: &#39;Unknown&#39;, &#39;NeverReboots&#39;, &#39;AlwaysRequiresReboot&#39;, &#39;CanRequestReboot&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootBehavior")]
        public string RebootBehavior {get; private set; }

        /// <summary>
        /// Gets the activity ID of the operation that produced this result. It is used
        /// to correlate across CRP and extension logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activityId")]
        public string ActivityId {get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the repository published this patch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publishedDate")]
        public System.DateTime? PublishedDate {get; private set; }

        /// <summary>
        /// Gets the UTC timestamp of the last update to this patch record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime {get; private set; }

        /// <summary>
        /// Gets describes the availability of a given patch. Possible values include: &#39;Unknown&#39;, &#39;Available&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assessmentState")]
        public string AssessmentState {get; private set; }
    }
}