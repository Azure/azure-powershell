// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridConnectivity
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceConfigurationsOperations.
    /// </summary>
    public static partial class ServiceConfigurationsOperationsExtensions
    {
            /// <summary>
            /// Gets the details about the service to the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='serviceConfigurationName'>
            /// The service name.
            /// </param>
            public static ServiceConfigurationResource Get(this IServiceConfigurationsOperations operations, string resourceUri, string endpointName, string serviceConfigurationName)
            {
                return operations.GetAsync(resourceUri, endpointName, serviceConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details about the service to the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='serviceConfigurationName'>
            /// The service name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceConfigurationResource> GetAsync(this IServiceConfigurationsOperations operations, string resourceUri, string endpointName, string serviceConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, endpointName, serviceConfigurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a service in serviceConfiguration for the endpoint
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='serviceConfigurationName'>
            /// The service name.
            /// </param>
            /// <param name='serviceConfigurationResource'>
            /// Service details
            /// </param>
            public static ServiceConfigurationResource CreateOrupdate(this IServiceConfigurationsOperations operations, string resourceUri, string endpointName, string serviceConfigurationName, ServiceConfigurationResource serviceConfigurationResource)
            {
                return operations.CreateOrupdateAsync(resourceUri, endpointName, serviceConfigurationName, serviceConfigurationResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a service in serviceConfiguration for the endpoint
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='serviceConfigurationName'>
            /// The service name.
            /// </param>
            /// <param name='serviceConfigurationResource'>
            /// Service details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceConfigurationResource> CreateOrupdateAsync(this IServiceConfigurationsOperations operations, string resourceUri, string endpointName, string serviceConfigurationName, ServiceConfigurationResource serviceConfigurationResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrupdateWithHttpMessagesAsync(resourceUri, endpointName, serviceConfigurationName, serviceConfigurationResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
