// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridConnectivity.Models
{
    using System.Linq;

    /// <summary>
    /// The ingress gateway access credentials
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class IngressGatewayResource
    {
        /// <summary>
        /// Initializes a new instance of the IngressGatewayResource class.
        /// </summary>
        public IngressGatewayResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IngressGatewayResource class.
        /// </summary>

        /// <param name="namespaceName">The namespace name.
        /// </param>

        /// <param name="namespaceNameSuffix">The suffix domain name of relay namespace.
        /// </param>

        /// <param name="hybridConnectionName">Azure Relay hybrid connection name for the resource.
        /// </param>

        /// <param name="accessKey">Access key for hybrid connection.
        /// </param>

        /// <param name="expiresOn">The expiration of access key in unix time.
        /// </param>

        /// <param name="serviceConfigurationToken">The token to access the enabled service.
        /// </param>

        /// <param name="hostname">The ingress hostname.
        /// </param>

        /// <param name="serverId">The arc ingress gateway server app id.
        /// </param>

        /// <param name="tenantId">The target resource home tenant id.
        /// </param>
        public IngressGatewayResource(string namespaceName = default(string), string namespaceNameSuffix = default(string), string hybridConnectionName = default(string), string accessKey = default(string), long? expiresOn = default(long?), string serviceConfigurationToken = default(string), string hostname = default(string), string serverId = default(string), string tenantId = default(string))

        {
            this.NamespaceName = namespaceName;
            this.NamespaceNameSuffix = namespaceNameSuffix;
            this.HybridConnectionName = hybridConnectionName;
            this.AccessKey = accessKey;
            this.ExpiresOn = expiresOn;
            this.ServiceConfigurationToken = serviceConfigurationToken;
            this.Hostname = hostname;
            this.ServerId = serverId;
            this.TenantId = tenantId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the namespace name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relay.namespaceName")]
        public string NamespaceName {get; set; }

        /// <summary>
        /// Gets or sets the suffix domain name of relay namespace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relay.namespaceNameSuffix")]
        public string NamespaceNameSuffix {get; set; }

        /// <summary>
        /// Gets or sets azure Relay hybrid connection name for the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relay.hybridConnectionName")]
        public string HybridConnectionName {get; set; }

        /// <summary>
        /// Gets access key for hybrid connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relay.accessKey")]
        public string AccessKey {get; private set; }

        /// <summary>
        /// Gets or sets the expiration of access key in unix time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relay.expiresOn")]
        public long? ExpiresOn {get; set; }

        /// <summary>
        /// Gets or sets the token to access the enabled service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relay.serviceConfigurationToken")]
        public string ServiceConfigurationToken {get; set; }

        /// <summary>
        /// Gets or sets the ingress hostname.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingress.hostname")]
        public string Hostname {get; set; }

        /// <summary>
        /// Gets or sets the arc ingress gateway server app id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingress.aadProfile.serverId")]
        public string ServerId {get; set; }

        /// <summary>
        /// Gets or sets the target resource home tenant id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingress.aadProfile.tenantId")]
        public string TenantId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.NamespaceName != null)
            {
                if (this.NamespaceName.Length > 200)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "NamespaceName", 200);
                }
                if (this.NamespaceName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "NamespaceName", 1);
                }
            }
            if (this.NamespaceNameSuffix != null)
            {
                if (this.NamespaceNameSuffix.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "NamespaceNameSuffix", 100);
                }
                if (this.NamespaceNameSuffix.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "NamespaceNameSuffix", 1);
                }
            }






        }
    }
}