// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridConnectivity.Models
{
    using System.Linq;

    /// <summary>
    /// The service configuration details associated with the target resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ServiceConfigurationResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServiceConfigurationResource class.
        /// </summary>
        public ServiceConfigurationResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceConfigurationResource class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#34;
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="serviceName">Name of the service.
        /// Possible values include: &#39;SSH&#39;, &#39;WAC&#39;</param>

        /// <param name="provisioningState">The resource provisioning state.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Failed&#39;,
        /// &#39;Canceled&#39;</param>

        /// <param name="resourceId">The resource Id of the connectivity endpoint (optional).
        /// </param>

        /// <param name="port">The port on which service is enabled.
        /// </param>
        public ServiceConfigurationResource(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string serviceName = default(string), string provisioningState = default(string), string resourceId = default(string), long? port = default(long?))

        : base(id, name, type, systemData)
        {
            this.ServiceName = serviceName;
            this.ProvisioningState = provisioningState;
            this.ResourceId = resourceId;
            this.Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the service. Possible values include: &#39;SSH&#39;, &#39;WAC&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceName")]
        public string ServiceName {get; set; }

        /// <summary>
        /// Gets the resource provisioning state. Possible values include: &#39;Succeeded&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the resource Id of the connectivity endpoint (optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets the port on which service is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.port")]
        public long? Port {get; set; }
    }
}