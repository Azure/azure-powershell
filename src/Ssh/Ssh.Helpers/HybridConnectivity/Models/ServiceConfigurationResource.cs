// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridConnectivity.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The service configuration details associated with the target resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServiceConfigurationResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServiceConfigurationResource
        /// class.
        /// </summary>
        public ServiceConfigurationResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceConfigurationResource
        /// class.
        /// </summary>
        /// <param name="serviceName">Name of the service. Possible values
        /// include: 'SSH', 'WAC'</param>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="resourceId">The resource Id of the connectivity
        /// endpoint (optional).</param>
        /// <param name="port">The port on which service is enabled.</param>
        /// <param name="provisioningState">The resource provisioning state.
        /// Possible values include: 'Succeeded', 'Creating', 'Updating',
        /// 'Failed', 'Canceled'</param>
        public ServiceConfigurationResource(string serviceName, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string resourceId = default(string), long? port = default(long?), string provisioningState = default(string))
            : base(id, name, type, systemData)
        {
            ServiceName = serviceName;
            ResourceId = resourceId;
            Port = port;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the service. Possible values include: 'SSH',
        /// 'WAC'
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or sets the resource Id of the connectivity endpoint
        /// (optional).
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the port on which service is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.port")]
        public long? Port { get; set; }

        /// <summary>
        /// Gets the resource provisioning state. Possible values include:
        /// 'Succeeded', 'Creating', 'Updating', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ServiceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServiceName");
            }
        }
    }
}
