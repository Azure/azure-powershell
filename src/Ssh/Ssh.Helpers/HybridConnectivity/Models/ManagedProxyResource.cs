// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridConnectivity.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Managed Proxy
    /// </summary>
    public partial class ManagedProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ManagedProxyResource class.
        /// </summary>
        public ManagedProxyResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedProxyResource class.
        /// </summary>
        /// <param name="proxy">The short lived proxy name.</param>
        /// <param name="expiresOn">The expiration time of short lived proxy
        /// name in unix epoch.</param>
        public ManagedProxyResource(string proxy, long expiresOn)
        {
            Proxy = proxy;
            ExpiresOn = expiresOn;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the short lived proxy name.
        /// </summary>
        [JsonProperty(PropertyName = "proxy")]
        public string Proxy { get; set; }

        /// <summary>
        /// Gets or sets the expiration time of short lived proxy name in unix
        /// epoch.
        /// </summary>
        [JsonProperty(PropertyName = "expiresOn")]
        public long ExpiresOn { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Proxy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Proxy");
            }
        }
    }
}
