// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridCompute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Machine Extension.
    /// </summary>
    public partial class MachineExtensionUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the MachineExtensionUpdateProperties class.
        /// </summary>
        public MachineExtensionUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MachineExtensionUpdateProperties class.
        /// </summary>

        /// <param name="forceUpdateTag">How the extension handler should be forced to update even if the extension
        /// configuration has not changed.
        /// </param>

        /// <param name="publisher">The name of the extension handler publisher.
        /// </param>

        /// <param name="type">Specifies the type of the extension; an example is &#34;CustomScriptExtension&#34;.
        /// </param>

        /// <param name="typeHandlerVersion">Specifies the version of the script handler.
        /// </param>

        /// <param name="enableAutomaticUpgrade">Indicates whether the extension should be automatically upgraded by the
        /// platform if there is a newer version available.
        /// </param>

        /// <param name="autoUpgradeMinorVersion">Indicates whether the extension should use a newer minor version if one is
        /// available at deployment time. Once deployed, however, the extension will
        /// not upgrade minor versions unless redeployed, even with this property set
        /// to true.
        /// </param>

        /// <param name="settings">Json formatted public settings for the extension.
        /// </param>

        /// <param name="protectedSettings">The extension can contain either protectedSettings or
        /// protectedSettingsFromKeyVault or no protected settings at all.
        /// </param>
        public MachineExtensionUpdateProperties(string forceUpdateTag = default(string), string publisher = default(string), string type = default(string), string typeHandlerVersion = default(string), bool? enableAutomaticUpgrade = default(bool?), bool? autoUpgradeMinorVersion = default(bool?), System.Collections.Generic.IDictionary<string, object> settings = default(System.Collections.Generic.IDictionary<string, object>), System.Collections.Generic.IDictionary<string, object> protectedSettings = default(System.Collections.Generic.IDictionary<string, object>))

        {
            this.ForceUpdateTag = forceUpdateTag;
            this.Publisher = publisher;
            this.Type = type;
            this.TypeHandlerVersion = typeHandlerVersion;
            this.EnableAutomaticUpgrade = enableAutomaticUpgrade;
            this.AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            this.Settings = settings;
            this.ProtectedSettings = protectedSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets how the extension handler should be forced to update even if
        /// the extension configuration has not changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "forceUpdateTag")]
        public string ForceUpdateTag {get; set; }

        /// <summary>
        /// Gets or sets the name of the extension handler publisher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publisher")]
        public string Publisher {get; set; }

        /// <summary>
        /// Gets or sets specifies the type of the extension; an example is
        /// &#34;CustomScriptExtension&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets specifies the version of the script handler.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeHandlerVersion")]
        public string TypeHandlerVersion {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the extension should be automatically
        /// upgraded by the platform if there is a newer version available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAutomaticUpgrade")]
        public bool? EnableAutomaticUpgrade {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the extension should use a newer minor
        /// version if one is available at deployment time. Once deployed, however, the
        /// extension will not upgrade minor versions unless redeployed, even with this
        /// property set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoUpgradeMinorVersion")]
        public bool? AutoUpgradeMinorVersion {get; set; }

        /// <summary>
        /// Gets or sets json formatted public settings for the extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "settings")]
        public System.Collections.Generic.IDictionary<string, object> Settings {get; set; }

        /// <summary>
        /// Gets or sets the extension can contain either protectedSettings or
        /// protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedSettings")]
        public System.Collections.Generic.IDictionary<string, object> ProtectedSettings {get; set; }
    }
}