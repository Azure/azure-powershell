// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridCompute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Configurable properties that the user can set locally via the azcmagent
    /// config command, or remotely via ARM.
    /// </summary>
    public partial class AgentConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the AgentConfiguration class.
        /// </summary>
        public AgentConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AgentConfiguration class.
        /// </summary>
        /// <param name="proxyUrl">Specifies the URL of the proxy to be
        /// used.</param>
        /// <param name="incomingConnectionsPorts">Specifies the list of ports
        /// that the agent will be able to listen on.</param>
        /// <param name="extensionsAllowList">Array of extensions that are
        /// allowed to be installed or updated.</param>
        /// <param name="extensionsBlockList">Array of extensions that are
        /// blocked (cannot be installed or updated)</param>
        /// <param name="proxyBypass">List of service names which should not
        /// use the specified proxy server.</param>
        /// <param name="extensionsEnabled">Specifies whether the extension
        /// service is enabled or disabled.</param>
        /// <param name="guestConfigurationEnabled">Specified whether the guest
        /// configuration service is enabled or disabled.</param>
        /// <param name="configMode">Name of configuration mode to use. Modes
        /// are pre-defined configurations of security controls, extension
        /// allowlists and guest configuration, maintained by Microsoft.
        /// Possible values include: 'full', 'monitor'</param>
        public AgentConfiguration(string proxyUrl = default(string), IList<string> incomingConnectionsPorts = default(IList<string>), IList<ConfigurationExtension> extensionsAllowList = default(IList<ConfigurationExtension>), IList<ConfigurationExtension> extensionsBlockList = default(IList<ConfigurationExtension>), IList<string> proxyBypass = default(IList<string>), string extensionsEnabled = default(string), string guestConfigurationEnabled = default(string), string configMode = default(string))
        {
            ProxyUrl = proxyUrl;
            IncomingConnectionsPorts = incomingConnectionsPorts;
            ExtensionsAllowList = extensionsAllowList;
            ExtensionsBlockList = extensionsBlockList;
            ProxyBypass = proxyBypass;
            ExtensionsEnabled = extensionsEnabled;
            GuestConfigurationEnabled = guestConfigurationEnabled;
            ConfigMode = configMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets specifies the URL of the proxy to be used.
        /// </summary>
        [JsonProperty(PropertyName = "proxyUrl")]
        public string ProxyUrl { get; private set; }

        /// <summary>
        /// Gets specifies the list of ports that the agent will be able to
        /// listen on.
        /// </summary>
        [JsonProperty(PropertyName = "incomingConnectionsPorts")]
        public IList<string> IncomingConnectionsPorts { get; private set; }

        /// <summary>
        /// Gets array of extensions that are allowed to be installed or
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "extensionsAllowList")]
        public IList<ConfigurationExtension> ExtensionsAllowList { get; private set; }

        /// <summary>
        /// Gets array of extensions that are blocked (cannot be installed or
        /// updated)
        /// </summary>
        [JsonProperty(PropertyName = "extensionsBlockList")]
        public IList<ConfigurationExtension> ExtensionsBlockList { get; private set; }

        /// <summary>
        /// Gets list of service names which should not use the specified proxy
        /// server.
        /// </summary>
        [JsonProperty(PropertyName = "proxyBypass")]
        public IList<string> ProxyBypass { get; private set; }

        /// <summary>
        /// Gets specifies whether the extension service is enabled or
        /// disabled.
        /// </summary>
        [JsonProperty(PropertyName = "extensionsEnabled")]
        public string ExtensionsEnabled { get; private set; }

        /// <summary>
        /// Gets specified whether the guest configuration service is enabled
        /// or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "guestConfigurationEnabled")]
        public string GuestConfigurationEnabled { get; private set; }

        /// <summary>
        /// Gets name of configuration mode to use. Modes are pre-defined
        /// configurations of security controls, extension allowlists and guest
        /// configuration, maintained by Microsoft. Possible values include:
        /// 'full', 'monitor'
        /// </summary>
        [JsonProperty(PropertyName = "configMode")]
        public string ConfigMode { get; private set; }

    }
}
