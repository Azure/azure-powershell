// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridCompute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the ARM updatable properties of a hybrid machine.
    /// </summary>
    public partial class MachineUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the MachineUpdateProperties class.
        /// </summary>
        public MachineUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MachineUpdateProperties class.
        /// </summary>

        /// <param name="locationData">Metadata pertaining to the geographic location of the resource.
        /// </param>

        /// <param name="osProfile">Specifies the operating system settings for the hybrid machine.
        /// </param>

        /// <param name="cloudMetadata">The metadata of the cloud environment (Azure/GCP/AWS/OCI...).
        /// </param>

        /// <param name="parentClusterResourceId">The resource id of the parent cluster (Azure HCI) this machine is assigned
        /// to, if any.
        /// </param>

        /// <param name="privateLinkScopeResourceId">The resource id of the private link scope this machine is assigned to, if
        /// any.
        /// </param>
        public MachineUpdateProperties(LocationData locationData = default(LocationData), OSProfile osProfile = default(OSProfile), CloudMetadata cloudMetadata = default(CloudMetadata), string parentClusterResourceId = default(string), string privateLinkScopeResourceId = default(string))

        {
            this.LocationData = locationData;
            this.OSProfile = osProfile;
            this.CloudMetadata = cloudMetadata;
            this.ParentClusterResourceId = parentClusterResourceId;
            this.PrivateLinkScopeResourceId = privateLinkScopeResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets metadata pertaining to the geographic location of the
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locationData")]
        public LocationData LocationData {get; set; }

        /// <summary>
        /// Gets or sets specifies the operating system settings for the hybrid
        /// machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osProfile")]
        public OSProfile OSProfile {get; set; }

        /// <summary>
        /// Gets or sets the metadata of the cloud environment (Azure/GCP/AWS/OCI...).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cloudMetadata")]
        public CloudMetadata CloudMetadata {get; set; }

        /// <summary>
        /// Gets or sets the resource id of the parent cluster (Azure HCI) this machine
        /// is assigned to, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parentClusterResourceId")]
        public string ParentClusterResourceId {get; set; }

        /// <summary>
        /// Gets or sets the resource id of the private link scope this machine is
        /// assigned to, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkScopeResourceId")]
        public string PrivateLinkScopeResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.LocationData != null)
            {
                this.LocationData.Validate();
            }




        }
    }
}