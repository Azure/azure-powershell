// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Ssh.Helpers.HybridCompute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a hybrid machine.
    /// </summary>
    public partial class MachineProperties
    {
        /// <summary>
        /// Initializes a new instance of the MachineProperties class.
        /// </summary>
        public MachineProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MachineProperties class.
        /// </summary>

        /// <param name="locationData">Metadata pertaining to the geographic location of the resource.
        /// </param>

        /// <param name="agentConfiguration">Configurable properties that the user can set locally via the azcmagent
        /// config command, or remotely via ARM.
        /// </param>

        /// <param name="serviceStatuses">Statuses of dependent services that are reported back to ARM.
        /// </param>

        /// <param name="cloudMetadata">The metadata of the cloud environment (Azure/GCP/AWS/OCI...).
        /// </param>

        /// <param name="osProfile">Specifies the operating system settings for the hybrid machine.
        /// </param>

        /// <param name="provisioningState">The provisioning state, which only appears in the response.
        /// </param>

        /// <param name="status">The status of the hybrid machine agent.
        /// Possible values include: &#39;Connected&#39;, &#39;Disconnected&#39;, &#39;Error&#39;</param>

        /// <param name="lastStatusChange">The time of the last status change.
        /// </param>

        /// <param name="errorDetails">Details about the error state.
        /// </param>

        /// <param name="agentVersion">The hybrid machine agent full version.
        /// </param>

        /// <param name="vmId">Specifies the hybrid machine unique ID.
        /// </param>

        /// <param name="displayName">Specifies the hybrid machine display name.
        /// </param>

        /// <param name="machineFqdn">Specifies the hybrid machine FQDN.
        /// </param>

        /// <param name="clientPublicKey">Public Key that the client provides to be used during initial resource
        /// onboarding
        /// </param>

        /// <param name="osName">The Operating System running on the hybrid machine.
        /// </param>

        /// <param name="osVersion">The version of Operating System running on the hybrid machine.
        /// </param>

        /// <param name="osType">The type of Operating System (windows/linux).
        /// </param>

        /// <param name="vmUuid">Specifies the Arc Machine&#39;s unique SMBIOS ID
        /// </param>

        /// <param name="extensions">Machine Extensions information (deprecated field)
        /// </param>

        /// <param name="osSku">Specifies the Operating System product SKU.
        /// </param>

        /// <param name="domainName">Specifies the Windows domain name.
        /// </param>

        /// <param name="adFqdn">Specifies the AD fully qualified display name.
        /// </param>

        /// <param name="dnsFqdn">Specifies the DNS fully qualified display name.
        /// </param>

        /// <param name="privateLinkScopeResourceId">The resource id of the private link scope this machine is assigned to, if
        /// any.
        /// </param>

        /// <param name="parentClusterResourceId">The resource id of the parent cluster (Azure HCI) this machine is assigned
        /// to, if any.
        /// </param>

        /// <param name="mssqlDiscovered">Specifies whether any MS SQL instance is discovered on the machine.
        /// </param>

        /// <param name="detectedProperties">Detected properties from the machine.
        /// </param>
        public MachineProperties(LocationData locationData = default(LocationData), AgentConfiguration agentConfiguration = default(AgentConfiguration), ServiceStatuses serviceStatuses = default(ServiceStatuses), CloudMetadata cloudMetadata = default(CloudMetadata), OSProfile osProfile = default(OSProfile), string provisioningState = default(string), string status = default(string), System.DateTime? lastStatusChange = default(System.DateTime?), System.Collections.Generic.IList<ErrorDetail> errorDetails = default(System.Collections.Generic.IList<ErrorDetail>), string agentVersion = default(string), string vmId = default(string), string displayName = default(string), string machineFqdn = default(string), string clientPublicKey = default(string), string osName = default(string), string osVersion = default(string), string osType = default(string), string vmUuid = default(string), System.Collections.Generic.IList<MachineExtensionInstanceView> extensions = default(System.Collections.Generic.IList<MachineExtensionInstanceView>), string osSku = default(string), string domainName = default(string), string adFqdn = default(string), string dnsFqdn = default(string), string privateLinkScopeResourceId = default(string), string parentClusterResourceId = default(string), string mssqlDiscovered = default(string), System.Collections.Generic.IDictionary<string, string> detectedProperties = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.LocationData = locationData;
            this.AgentConfiguration = agentConfiguration;
            this.ServiceStatuses = serviceStatuses;
            this.CloudMetadata = cloudMetadata;
            this.OSProfile = osProfile;
            this.ProvisioningState = provisioningState;
            this.Status = status;
            this.LastStatusChange = lastStatusChange;
            this.ErrorDetails = errorDetails;
            this.AgentVersion = agentVersion;
            this.VMId = vmId;
            this.DisplayName = displayName;
            this.MachineFqdn = machineFqdn;
            this.ClientPublicKey = clientPublicKey;
            this.OSName = osName;
            this.OSVersion = osVersion;
            this.OSType = osType;
            this.VMUuid = vmUuid;
            this.Extensions = extensions;
            this.OSSku = osSku;
            this.DomainName = domainName;
            this.AdFqdn = adFqdn;
            this.DnsFqdn = dnsFqdn;
            this.PrivateLinkScopeResourceId = privateLinkScopeResourceId;
            this.ParentClusterResourceId = parentClusterResourceId;
            this.MssqlDiscovered = mssqlDiscovered;
            this.DetectedProperties = detectedProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets metadata pertaining to the geographic location of the
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locationData")]
        public LocationData LocationData {get; set; }

        /// <summary>
        /// Gets configurable properties that the user can set locally via the
        /// azcmagent config command, or remotely via ARM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentConfiguration")]
        public AgentConfiguration AgentConfiguration {get; private set; }

        /// <summary>
        /// Gets or sets statuses of dependent services that are reported back to ARM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceStatuses")]
        public ServiceStatuses ServiceStatuses {get; set; }

        /// <summary>
        /// Gets or sets the metadata of the cloud environment (Azure/GCP/AWS/OCI...).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cloudMetadata")]
        public CloudMetadata CloudMetadata {get; set; }

        /// <summary>
        /// Gets or sets specifies the operating system settings for the hybrid
        /// machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osProfile")]
        public OSProfile OSProfile {get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the status of the hybrid machine agent. Possible values include: &#39;Connected&#39;, &#39;Disconnected&#39;, &#39;Error&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the time of the last status change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastStatusChange")]
        public System.DateTime? LastStatusChange {get; private set; }

        /// <summary>
        /// Gets details about the error state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorDetails")]
        public System.Collections.Generic.IList<ErrorDetail> ErrorDetails {get; private set; }

        /// <summary>
        /// Gets the hybrid machine agent full version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion {get; private set; }

        /// <summary>
        /// Gets or sets specifies the hybrid machine unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmId")]
        public string VMId {get; set; }

        /// <summary>
        /// Gets specifies the hybrid machine display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; private set; }

        /// <summary>
        /// Gets specifies the hybrid machine FQDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "machineFqdn")]
        public string MachineFqdn {get; private set; }

        /// <summary>
        /// Gets or sets public Key that the client provides to be used during initial
        /// resource onboarding
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientPublicKey")]
        public string ClientPublicKey {get; set; }

        /// <summary>
        /// Gets the Operating System running on the hybrid machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osName")]
        public string OSName {get; private set; }

        /// <summary>
        /// Gets the version of Operating System running on the hybrid machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osVersion")]
        public string OSVersion {get; private set; }

        /// <summary>
        /// Gets or sets the type of Operating System (windows/linux).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; set; }

        /// <summary>
        /// Gets specifies the Arc Machine&#39;s unique SMBIOS ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmUuid")]
        public string VMUuid {get; private set; }

        /// <summary>
        /// Gets or sets machine Extensions information (deprecated field)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extensions")]
        public System.Collections.Generic.IList<MachineExtensionInstanceView> Extensions {get; set; }

        /// <summary>
        /// Gets specifies the Operating System product SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osSku")]
        public string OSSku {get; private set; }

        /// <summary>
        /// Gets specifies the Windows domain name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domainName")]
        public string DomainName {get; private set; }

        /// <summary>
        /// Gets specifies the AD fully qualified display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "adFqdn")]
        public string AdFqdn {get; private set; }

        /// <summary>
        /// Gets specifies the DNS fully qualified display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsFqdn")]
        public string DnsFqdn {get; private set; }

        /// <summary>
        /// Gets or sets the resource id of the private link scope this machine is
        /// assigned to, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkScopeResourceId")]
        public string PrivateLinkScopeResourceId {get; set; }

        /// <summary>
        /// Gets or sets the resource id of the parent cluster (Azure HCI) this machine
        /// is assigned to, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parentClusterResourceId")]
        public string ParentClusterResourceId {get; set; }

        /// <summary>
        /// Gets or sets specifies whether any MS SQL instance is discovered on the
        /// machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mssqlDiscovered")]
        public string MssqlDiscovered {get; set; }

        /// <summary>
        /// Gets detected properties from the machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "detectedProperties")]
        public System.Collections.Generic.IDictionary<string, string> DetectedProperties {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.LocationData != null)
            {
                this.LocationData.Validate();
            }

























        }
    }
}