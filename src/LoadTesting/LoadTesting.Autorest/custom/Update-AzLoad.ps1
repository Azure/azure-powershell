
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update LoadTest resource.
.Description
Update LoadTest resource.
.Example
$tag = @{"key0" = "value0"}
Update-AzLoad -Name sampleres -ResourceGroupName sample-rg -Tag $tag
.Example
Update-AzLoad -Name sampleres -ResourceGroupName sample-rg -IdentityType "SystemAssigned" -EncryptionIdentity "SystemAssigned" -EncryptionKey "https://sample-akv.vault.azure.net/keys/cmk/2d1ccd5c50234ea2a0858fe148b69cde"
.Example
$userAssigned = @{"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1" = @{}; "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2" = $null}

Update-AzLoad -Name sampleres -ResourceGroupName sample-rg -IdentityType "SystemAssigned,UserAssigned" -IdentityUserAssigned $userAssigned

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.ILoadTestResource
.Link
https://learn.microsoft.com/powershell/module/az.loadtesting/update-azload
#>
function Update-AzLoad {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.ILoadTestResource])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('LoadTestName')]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Path')]
    [System.String]
    # Load Test name.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
    [System.Nullable[System.Boolean]]
    # Determines whether to enable a system-assigned identity for the resource.
    ${EnableSystemAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
    [System.String]
    # The managed identity for Customer-managed key settings defining which identity should be used to authenticate to Key Vault. 
    # Ex: 'SystemAssigned' uses system-assigned managed identity, whereas '/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId' uses the given user-assigned managed identity.
    ${EncryptionIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
    [System.String]
    # key encryption key Url, versioned.
    # Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
    ${EncryptionKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
    [System.String[]]
    # The array of user assigned identities associated with the resource.
    # The elements in array will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.'
    ${UserAssignedIdentity},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

    
    process {
        try {
            # if encryption identity has a value, populate the encryption identity type and encryption identity resource id
            # if encryption identity has value SystemAssigned, populate the encryption identity type as SystemAssigned and encryption identity resource id as null
            # else populate the encryption identity type as UserAssigned and encryption identity resource id as the value of encryption identity
            if ($PSBoundParameters.ContainsKey('EncryptionIdentity')) {
                if($PSBoundParameters['EncryptionIdentity'].ToLower() -eq 'systemassigned') {
                    $null = $PSBoundParameters.Add("EncryptionIdentityType", 'SystemAssigned')

                    # For SystemAssigned encryption identity, we should NOT include EncryptionIdentityResourceId
                    # Remove it if it exists in the parameters
                    if($PSBoundParameters.ContainsKey('EncryptionIdentityResourceId')) {
                        $null = $PSBoundParameters.Remove('EncryptionIdentityResourceId')
                    }
                    
                    # CRITICAL: Explicitly set to empty string to prevent AutoRest from inferring from UserAssignedIdentity
                    # This ensures the AfterToJson method will completely remove the resourceId field
                    $null = $PSBoundParameters.Add('EncryptionIdentityResourceId', '')
                    
                    # Update the identity type only if the input does not contain the encryption identity type
                    # Update EnableSystemAssignedIdentity to enable system assigned identity
                    # For user assigned identity, it will pass the value automatically if exist
                    $PSBoundParameters['EnableSystemAssignedIdentity'] = $true
                }
                else {
                    $null = $PSBoundParameters.Add("EncryptionIdentityResourceId", $PSBoundParameters['EncryptionIdentity'])
                    $null = $PSBoundParameters.Add("EncryptionIdentityType", 'UserAssigned')  

                    # Update the identity type only if the input does not contain the encryption identity type
                    $encryptionIdentityResourceId = $PSBoundParameters['EncryptionIdentity']
                    if ($PSBoundParameters.ContainsKey('UserAssignedIdentity')) {
                        if ($null -eq $PSBoundParameters['UserAssignedIdentity']){
                            $PSBoundParameters['UserAssignedIdentity'] = @()
                        }

                        $currentIdentities = $PSBoundParameters['UserAssignedIdentity']
                        if ($encryptionIdentityResourceId -notin $currentIdentities) {
                            $PSBoundParameters['UserAssignedIdentity'] = $currentIdentities + @($encryptionIdentityResourceId)
                        }
                    } else {
                        $null = $PSBoundParameters.Add('UserAssignedIdentity', @($encryptionIdentityResourceId))
                    }
                }
                $null = $PSBoundParameters.Remove('EncryptionIdentity')
            }
            Az.LoadTesting.internal\Update-AzLoad @PSBoundParameters
        }
        catch {
            throw
        }
    }
}
    