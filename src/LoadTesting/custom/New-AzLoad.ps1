
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new Azure Load Testing resource.
.Description
Creates a new Azure Load Testing resource in the resource group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.Api20221201.ILoadTestResource
.Link
https://learn.microsoft.com/powershell/module/az.loadtesting/new-azload
#>
function New-AzLoad {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.Api20221201.ILoadTestResource])]
    [CmdletBinding(PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter(Mandatory)]
        [Alias('LoadTestName')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Path')]
        [System.String]
        # Name of the new Azure Load Testing resource.
        ${Name},
    
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Path')]
        [System.String]
        # Name of the resource group.
        ${ResourceGroupName},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the subscription.
        ${SubscriptionId},
    
        [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
        [System.String]
        # Location where the Azure Load Testing resource needs to be created.
        ${Location},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
        [System.String]
        # The managed identity for Customer-managed key settings defining which identity should be used to authenticate to Key Vault.
        # Ex: '/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId' uses the given user-assigned managed identity.
        ${EncryptionIdentity},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
        [System.String]
        # Encryption key URL, versioned.
        # Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78.
        ${EncryptionKey},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Support.ManagedServiceIdentityType])]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Support.ManagedServiceIdentityType]
        # Type of managed identity.
        ${IdentityType},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.Api50.IUserAssignedIdentities]))]
        [System.Collections.Hashtable]
        # The list of user assigned identities associated with the resource. The user identity will be ARM resource ids.
        # The User Assigned Identity is a hashtable with keys in the form of an ARM resource id '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        # The values of the keys are empty objects ({}) in requests.
        ${IdentityUserAssigned},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Models.Api30.ITrackedResourceTags]))]
        [System.Collections.Hashtable]
        # Key-value pairs in the form of a hash table set as tags on the server. For example: @{key0="value0";key1=$null;key2="value2"}. 
        ${Tag},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The credentials, account, tenant, and subscription used for communication with Azure.
        ${DefaultProfile},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},
    
        [Parameter(ParameterSetName='CreateExpanded', DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(ParameterSetName='CreateExpanded', DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(ParameterSetName='CreateExpanded', DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},
    
        [Parameter(ParameterSetName='CreateExpanded', DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(ParameterSetName='CreateExpanded', DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(ParameterSetName='CreateExpanded', DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.LoadTesting.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        try {
            # if encyyption identity has a value, populate the encryption identity type and encryption identity resource id
            # add the managed identity to the list of user assigned identities
            if ($PSBoundParameters.ContainsKey('EncryptionIdentity')) {
                $null = $PSBoundParameters.Add("EncryptionIdentityResourceId", $PSBoundParameters['EncryptionIdentity'])
                $null = $PSBoundParameters.Add("EncryptionIdentityType", 'UserAssigned')
                $null = $PSBoundParameters.Remove('EncryptionIdentity')
                
                # Update the identity type
                if($PSBoundParameters.ContainsKey('IdentityType')) {
                    if($PSBoundParameters['IdentityType'].ToString().ToLower() -eq 'none') {
                        $null = $PSBoundParameters.Add("IdentityType", 'UserAssigned')
                    }
                    elseif($PSBoundParameters['IdentityType'].ToString().ToLower() -eq 'systemassigned') {
                        $null = $PSBoundParameters.Add("IdentityType", 'SystemAssigned,UserAssigned')
                    }
                }
                else {
                    $null = $PSBoundParameters.Add("IdentityType", 'UserAssigned')
                }

                # Update the User Assigned Identities
                if ($PSBoundParameters.ContainsKey('IdentityUserAssigned')) {
                    if ($null -eq $PSBoundParameters['IdentityUserAssigned']){
                        $PSBoundParameters['IdentityUserAssigned'] = @{}
                    }
                    $PSBoundParameters['IdentityUserAssigned'][$PSBoundParameters['EncryptionIdentityResourceId']] = @{}
                }
                else {
                    $null = $PSBoundParameters.Add("IdentityUserAssigned", @{ $PSBoundParameters['EncryptionIdentityResourceId'] = @{} })
                }
            }
            Az.LoadTesting.internal\New-AzLoad @PSBoundParameters
        }
        catch {
            throw
        }
    }
}