// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support
{

    public partial struct StoragePermissions :
        System.IEquatable<StoragePermissions>
    {
        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Backup = @"backup";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Delete = @"delete";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Deletesas = @"deletesas";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Get = @"get";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Getsas = @"getsas";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions List = @"list";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Listsas = @"listsas";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Purge = @"purge";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Recover = @"recover";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Regeneratekey = @"regeneratekey";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Restore = @"restore";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Set = @"set";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Setsas = @"setsas";

        public static Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions Update = @"update";

        /// <summary>the value for an instance of the <see cref="StoragePermissions" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to StoragePermissions</summary>
        /// <param name="value">the value to convert to an instance of <see cref="StoragePermissions" />.</param>
        internal static object CreateFrom(object value)
        {
            return new StoragePermissions(System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type StoragePermissions</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type StoragePermissions (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is StoragePermissions && Equals((StoragePermissions)obj);
        }

        /// <summary>Returns hashCode for enum StoragePermissions</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="StoragePermissions" Enum class./></summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private StoragePermissions(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for StoragePermissions</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to StoragePermissions</summary>
        /// <param name="value">the value to convert to an instance of <see cref="StoragePermissions" />.</param>

        public static implicit operator StoragePermissions(string value)
        {
            return new StoragePermissions(value);
        }

        /// <summary>Implicit operator to convert StoragePermissions to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="StoragePermissions" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum StoragePermissions</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions e1, Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum StoragePermissions</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions e1, Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Support.StoragePermissions e2)
        {
            return e2.Equals(e1);
        }
    }
}