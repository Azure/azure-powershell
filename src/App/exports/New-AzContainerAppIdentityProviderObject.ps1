
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for IdentityProviders.
.Description
Create an in-memory object for IdentityProviders.
.Example
New-AzContainerAppIdentityProviderObject -RegistrationAppId xxxxxx@xxx.com -RegistrationAppSecretSettingName facebook-secret

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.IdentityProviders
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CUSTOMOPENIDCONNECTPROVIDER <IIdentityProvidersCustomOpenIdConnectProviders>: The map of the name of the alias of each custom Open ID Connect provider to the         configuration settings of the custom Open ID Connect provider.
  [(Any) <ICustomOpenIdConnectProvider>]: This indicates any property can be added to this object.
.Link
https://docs.microsoft.com/powershell/module/az./new-azcontainerappidentityproviderobject
#>
function New-AzContainerAppIdentityProviderObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.IdentityProviders])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The list of the allowed groups.
    ${AllowedPrincipalGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The list of the allowed identities.
    ${AllowedPrincipalIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${AppleEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # A list of the scopes that should be requested while authenticating.
    ${AppleLoginScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The Client ID of the app used for login.
    ${AppleRegistrationClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The app setting name that contains the client secret.
    ${AppleRegistrationClientSecretSettingName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${AzureActiveDirectoryEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
    #         This is an internal flag primarily intended to support the Azure Management Portal.
    # Users should not
    #         read or write to this property.
    ${AzureActiveDirectoryIsAutoProvisioned},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The Client ID of this relying party application, known as the client_id.
    #         This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
    #         other 3rd party OpenID Connect providers.
    #         More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html.
    ${AzureActiveDirectoryRegistrationClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The app setting name that contains the client secret of the relying party application.
    ${AzureActiveDirectoryRegistrationClientSecretSettingName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The list of audiences that can make successful authentication/authorization requests.
    ${AzureActiveDirectoryValidationAllowedAudience},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${AzureStaticWebAppEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The Client ID of the app used for login.
    ${AzureStaticWebAppsRegistrationClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.IIdentityProvidersCustomOpenIdConnectProviders]
    # The map of the name of the alias of each custom Open ID Connect provider to the
    #         configuration settings of the custom Open ID Connect provider.
    # To construct, see NOTES section for CUSTOMOPENIDCONNECTPROVIDER properties and create a hash table.
    ${CustomOpenIdConnectProvider},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The configuration settings of the Azure Active Directory allowed applications.
    ${DefaultAuthorizationPolicyAllowedApplication},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${FacebookEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The version of the Facebook api to be used while logging in.
    ${FacebookGraphApiVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # A list of the scopes that should be requested while authenticating.
    ${FacebookLoginScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${GitHubEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # A list of the scopes that should be requested while authenticating.
    ${GitHubLoginScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The Client ID of the app used for login.
    ${GitHubRegistrationClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The app setting name that contains the client secret.
    ${GitHubRegistrationClientSecretSettingName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${GoogleEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # A list of the scopes that should be requested while authenticating.
    ${GoogleLoginScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The Client ID of the app used for login.
    ${GoogleRegistrationClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The app setting name that contains the client secret.
    ${GoogleRegistrationClientSecretSettingName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The configuration settings of the allowed list of audiences from which to validate the JWT token.
    ${GoogleValidationAllowedAudience},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The list of the allowed client applications.
    ${JwtClaimCheckAllowedClientApplication},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # The list of the allowed groups.
    ${JwtClaimCheckAllowedGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
    ${LoginDisableWwwAuthenticate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # Login parameters to send to the OpenID Connect authorization endpoint when
    #         a user logs in.
    # Each parameter must be in the form "key=value".
    ${LoginParameter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The App ID of the app used for login.
    ${RegistrationAppId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The app setting name that contains the app secret.
    ${RegistrationAppSecretSettingName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes.
    # This property acts as
    #         a replacement for the Client Secret Certificate Thumbprint.
    # It is also optional.
    ${RegistrationClientSecretCertificateIssuer},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes.
    # This property acts as
    #         a replacement for the Client Secret Certificate Thumbprint.
    # It is also optional.
    ${RegistrationClientSecretCertificateSubjectAlternativeName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes.
    # This property acts as
    #         a replacement for the Client Secret.
    # It is also optional.
    ${RegistrationClientSecretCertificateThumbprint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The OAuth 1.0a consumer key of the Twitter application used for sign-in.
    #         This setting is required for enabling Twitter Sign-In.
    #         Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in.
    ${RegistrationConsumerKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
    #         application used for sign-in.
    ${RegistrationConsumerSecretSettingName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
    #         When using Azure Active Directory, this value is the URI of the directory tenant, e.g.
    # https://login.microsoftonline.com/v2.0/{tenant-guid}/.
    #         This URI is a case-sensitive identifier for the token issuer.
    #         More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html.
    ${RegistrationOpenIdIssuer},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
    ${TwitterEnabled}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.App.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.App.custom\New-AzContainerAppIdentityProviderObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.App.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
