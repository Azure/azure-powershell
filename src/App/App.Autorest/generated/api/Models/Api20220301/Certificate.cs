// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Extensions;

    /// <summary>
    /// Certificate used for Custom Domain bindings of Container Apps in a Managed Environment
    /// </summary>
    public partial class Certificate :
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificate,
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal,
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.TrackedResource();

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public global::System.DateTime? ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).ExpirationDate; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Id; }

        /// <summary>Certificate issue Date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public global::System.DateTime? IssueDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).IssueDate; }

        /// <summary>Certificate issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 2)]
        public string Issuer { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Issuer; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 1)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for ExpirationDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).ExpirationDate = value; }

        /// <summary>Internal Acessors for IssueDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.IssueDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).IssueDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).IssueDate = value; }

        /// <summary>Internal Acessors for Issuer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.Issuer { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Issuer; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Issuer = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateProperties Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.CertificateProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Support.CertificateProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for PublicKeyHash</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.PublicKeyHash { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).PublicKeyHash; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).PublicKeyHash = value; }

        /// <summary>Internal Acessors for SubjectName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.SubjectName { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).SubjectName; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).SubjectName = value; }

        /// <summary>Internal Acessors for Thumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.Thumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Thumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Thumbprint = value; }

        /// <summary>Internal Acessors for Valid</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateInternal.Valid { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Valid; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Valid = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 0)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Name; }

        /// <summary>Certificate password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public System.Security.SecureString Password { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Password = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateProperties _property;

        /// <summary>Certificate resource specific properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.CertificateProperties()); set => this._property = value; }

        /// <summary>Provisioning state of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 3)]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Support.CertificateProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).ProvisioningState; }

        /// <summary>Public key hash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public string PublicKeyHash { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).PublicKeyHash; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 6)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 4)]
        public string SubjectName { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).SubjectName; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.App.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.App.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.FormatTable(Index = 5)]
        public string Thumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Thumbprint; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.IResourceInternal)__trackedResource).Type; }

        /// <summary>Is the certificate valid?.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public bool? Valid { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Valid; }

        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.DoNotFormat]
        public byte[] Value { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificatePropertiesInternal)Property).Value = value ?? null /* byte array */; }

        /// <summary>Creates an new <see cref="Certificate" /> instance.</summary>
        public Certificate()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// Certificate used for Custom Domain bindings of Container Apps in a Managed Environment
    public partial interface ICertificate :
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResource
    {
        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate expiration date.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get;  }
        /// <summary>Certificate issue Date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate issue Date.",
        SerializedName = @"issueDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? IssueDate { get;  }
        /// <summary>Certificate issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate issuer.",
        SerializedName = @"issuer",
        PossibleTypes = new [] { typeof(string) })]
        string Issuer { get;  }
        /// <summary>Certificate password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate password.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString Password { get; set; }
        /// <summary>Provisioning state of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the certificate.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.App.Support.CertificateProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.App.Support.CertificateProvisioningState? ProvisioningState { get;  }
        /// <summary>Public key hash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Public key hash.",
        SerializedName = @"publicKeyHash",
        PossibleTypes = new [] { typeof(string) })]
        string PublicKeyHash { get;  }
        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Subject name of the certificate.",
        SerializedName = @"subjectName",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectName { get;  }
        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate thumbprint.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get;  }
        /// <summary>Is the certificate valid?.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Is the certificate valid?.",
        SerializedName = @"valid",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Valid { get;  }
        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"PFX or PEM blob",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] Value { get; set; }

    }
    /// Certificate used for Custom Domain bindings of Container Apps in a Managed Environment
    internal partial interface ICertificateInternal :
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api30.ITrackedResourceInternal
    {
        /// <summary>Certificate expiration date.</summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>Certificate issue Date.</summary>
        global::System.DateTime? IssueDate { get; set; }
        /// <summary>Certificate issuer.</summary>
        string Issuer { get; set; }
        /// <summary>Certificate password.</summary>
        System.Security.SecureString Password { get; set; }
        /// <summary>Certificate resource specific properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.ICertificateProperties Property { get; set; }
        /// <summary>Provisioning state of the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Support.CertificateProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public key hash.</summary>
        string PublicKeyHash { get; set; }
        /// <summary>Subject name of the certificate.</summary>
        string SubjectName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        string Thumbprint { get; set; }
        /// <summary>Is the certificate valid?.</summary>
        bool? Valid { get; set; }
        /// <summary>PFX or PEM blob</summary>
        byte[] Value { get; set; }

    }
}