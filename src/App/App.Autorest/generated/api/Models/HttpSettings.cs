// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.App.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Extensions;

    /// <summary>
    /// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp
    /// Service Authentication/Authorization.
    /// </summary>
    public partial class HttpSettings :
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettings,
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsInternal
    {

        /// <summary>Backing field for <see cref="ForwardProxy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxy _forwardProxy;

        /// <summary>The configuration settings of a forward proxy used to make the requests.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxy ForwardProxy { get => (this._forwardProxy = this._forwardProxy ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.ForwardProxy()); set => this._forwardProxy = value; }

        /// <summary>The convention used to determine the url of the request made.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string ForwardProxyConvention { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxyInternal)ForwardProxy).Convention; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxyInternal)ForwardProxy).Convention = value ?? null; }

        /// <summary>The name of the header containing the host of the request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string ForwardProxyCustomHostHeaderName { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxyInternal)ForwardProxy).CustomHostHeaderName; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxyInternal)ForwardProxy).CustomHostHeaderName = value ?? null; }

        /// <summary>The name of the header containing the scheme of the request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string ForwardProxyCustomProtoHeaderName { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxyInternal)ForwardProxy).CustomProtoHeaderName; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxyInternal)ForwardProxy).CustomProtoHeaderName = value ?? null; }

        /// <summary>Internal Acessors for ForwardProxy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxy Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsInternal.ForwardProxy { get => (this._forwardProxy = this._forwardProxy ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.ForwardProxy()); set { {_forwardProxy = value;} } }

        /// <summary>Internal Acessors for Route</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsRoutes Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsInternal.Route { get => (this._route = this._route ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.HttpSettingsRoutes()); set { {_route = value;} } }

        /// <summary>Backing field for <see cref="RequireHttps" /> property.</summary>
        private bool? _requireHttps;

        /// <summary>
        /// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise,
        /// <code>true</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public bool? RequireHttps { get => this._requireHttps; set => this._requireHttps = value; }

        /// <summary>Backing field for <see cref="Route" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsRoutes _route;

        /// <summary>The configuration settings of the paths HTTP requests.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsRoutes Route { get => (this._route = this._route ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.HttpSettingsRoutes()); set => this._route = value; }

        /// <summary>The prefix that should precede all the authentication/authorization paths.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string RouteApiPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsRoutesInternal)Route).ApiPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsRoutesInternal)Route).ApiPrefix = value ?? null; }

        /// <summary>Creates an new <see cref="HttpSettings" /> instance.</summary>
        public HttpSettings()
        {

        }
    }
    /// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp
    /// Service Authentication/Authorization.
    public partial interface IHttpSettings :
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IJsonSerializable
    {
        /// <summary>The convention used to determine the url of the request made.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The convention used to determine the url of the request made.",
        SerializedName = @"convention",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("NoProxy", "Standard", "Custom")]
        string ForwardProxyConvention { get; set; }
        /// <summary>The name of the header containing the host of the request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the header containing the host of the request.",
        SerializedName = @"customHostHeaderName",
        PossibleTypes = new [] { typeof(string) })]
        string ForwardProxyCustomHostHeaderName { get; set; }
        /// <summary>The name of the header containing the scheme of the request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the header containing the scheme of the request.",
        SerializedName = @"customProtoHeaderName",
        PossibleTypes = new [] { typeof(string) })]
        string ForwardProxyCustomProtoHeaderName { get; set; }
        /// <summary>
        /// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise,
        /// <code>true</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"<code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.",
        SerializedName = @"requireHttps",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RequireHttps { get; set; }
        /// <summary>The prefix that should precede all the authentication/authorization paths.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The prefix that should precede all the authentication/authorization paths.",
        SerializedName = @"apiPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string RouteApiPrefix { get; set; }

    }
    /// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp
    /// Service Authentication/Authorization.
    internal partial interface IHttpSettingsInternal

    {
        /// <summary>The configuration settings of a forward proxy used to make the requests.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IForwardProxy ForwardProxy { get; set; }
        /// <summary>The convention used to determine the url of the request made.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("NoProxy", "Standard", "Custom")]
        string ForwardProxyConvention { get; set; }
        /// <summary>The name of the header containing the host of the request.</summary>
        string ForwardProxyCustomHostHeaderName { get; set; }
        /// <summary>The name of the header containing the scheme of the request.</summary>
        string ForwardProxyCustomProtoHeaderName { get; set; }
        /// <summary>
        /// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise,
        /// <code>true</code>.
        /// </summary>
        bool? RequireHttps { get; set; }
        /// <summary>The configuration settings of the paths HTTP requests.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IHttpSettingsRoutes Route { get; set; }
        /// <summary>The prefix that should precede all the authentication/authorization paths.</summary>
        string RouteApiPrefix { get; set; }

    }
}