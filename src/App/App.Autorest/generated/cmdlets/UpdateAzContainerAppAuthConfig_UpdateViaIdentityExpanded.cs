// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.App.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Cmdlets;
    using System;

    /// <summary>Create the AuthConfig for a Container App.</summary>
    /// <remarks>
    /// [OpenAPI] Get=>GET:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/authConfigs/{authConfigName}"
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/authConfigs/{authConfigName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzContainerAppAuthConfig_UpdateViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.App.Description(@"Create the AuthConfig for a Container App.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.App.Generated]
    public partial class UpdateAzContainerAppAuthConfig_UpdateViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// Configuration settings for the Azure ContainerApp Service Authentication / Authorization feature.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig _authConfigEnvelopeBody = new Microsoft.Azure.PowerShell.Cmdlets.App.Models.AuthConfig();

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.App.App Client => Microsoft.Azure.PowerShell.Cmdlets.App.Module.Instance.ClientAPI;

        /// <summary>The convention used when determining the session cookie's expiration.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The convention used when determining the session cookie's expiration.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The convention used when determining the session cookie's expiration.",
        SerializedName = @"convention",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("FixedTime", "IdentityProviderDerived")]
        public string CookieExpirationConvention { get => _authConfigEnvelopeBody.CookieExpirationConvention ?? null; set => _authConfigEnvelopeBody.CookieExpirationConvention = value; }

        /// <summary>The time after the request is made when the session cookie should expire.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time after the request is made when the session cookie should expire.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time after the request is made when the session cookie should expire.",
        SerializedName = @"timeToExpiration",
        PossibleTypes = new [] { typeof(string) })]
        public string CookieExpirationTimeToExpiration { get => _authConfigEnvelopeBody.CookieExpirationTimeToExpiration ?? null; set => _authConfigEnvelopeBody.CookieExpirationTimeToExpiration = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>The convention used to determine the url of the request made.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The convention used to determine the url of the request made.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The convention used to determine the url of the request made.",
        SerializedName = @"convention",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("NoProxy", "Standard", "Custom")]
        public string ForwardProxyConvention { get => _authConfigEnvelopeBody.ForwardProxyConvention ?? null; set => _authConfigEnvelopeBody.ForwardProxyConvention = value; }

        /// <summary>The name of the header containing the host of the request.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the header containing the host of the request.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the header containing the host of the request.",
        SerializedName = @"customHostHeaderName",
        PossibleTypes = new [] { typeof(string) })]
        public string ForwardProxyCustomHostHeaderName { get => _authConfigEnvelopeBody.ForwardProxyCustomHostHeaderName ?? null; set => _authConfigEnvelopeBody.ForwardProxyCustomHostHeaderName = value; }

        /// <summary>The name of the header containing the scheme of the request.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the header containing the scheme of the request.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the header containing the scheme of the request.",
        SerializedName = @"customProtoHeaderName",
        PossibleTypes = new [] { typeof(string) })]
        public string ForwardProxyCustomProtoHeaderName { get => _authConfigEnvelopeBody.ForwardProxyCustomProtoHeaderName ?? null; set => _authConfigEnvelopeBody.ForwardProxyCustomProtoHeaderName = value; }

        /// <summary>
        /// The paths for which unauthenticated flow would not be redirected to the login page.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The paths for which unauthenticated flow would not be redirected to the login page.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The paths for which unauthenticated flow would not be redirected to the login page.",
        SerializedName = @"excludedPaths",
        PossibleTypes = new [] { typeof(string) })]
        public string[] GlobalValidationExcludedPath { get => _authConfigEnvelopeBody.GlobalValidationExcludedPath?.ToArray() ?? null /* fixedArrayOf */; set => _authConfigEnvelopeBody.GlobalValidationExcludedPath = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>
        /// The default authentication provider to use when multiple providers are configured.This setting is only needed if multiple
        /// providers are configured and the unauthenticated clientaction is set to "RedirectToLoginPage".
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default authentication provider to use when multiple providers are configured.This setting is only needed if multiple providers are configured and the unauthenticated clientaction is set to \"RedirectToLoginPage\".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default authentication provider to use when multiple providers are configured.This setting is only needed if multiple providers are configured and the unauthenticated clientaction is set to ""RedirectToLoginPage"".",
        SerializedName = @"redirectToProvider",
        PossibleTypes = new [] { typeof(string) })]
        public string GlobalValidationRedirectToProvider { get => _authConfigEnvelopeBody.GlobalValidationRedirectToProvider ?? null; set => _authConfigEnvelopeBody.GlobalValidationRedirectToProvider = value; }

        /// <summary>The action to take when an unauthenticated client attempts to access the app.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The action to take when an unauthenticated client attempts to access the app.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The action to take when an unauthenticated client attempts to access the app.",
        SerializedName = @"unauthenticatedClientAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("RedirectToLoginPage", "AllowAnonymous", "Return401", "Return403")]
        public string GlobalValidationUnauthenticatedClientAction { get => _authConfigEnvelopeBody.GlobalValidationUnauthenticatedClientAction ?? null; set => _authConfigEnvelopeBody.GlobalValidationUnauthenticatedClientAction = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise,
        /// <code>true</code>.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.",
        SerializedName = @"requireHttps",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter HttpSettingRequireHttps { get => _authConfigEnvelopeBody.HttpSettingRequireHttps ?? default(global::System.Management.Automation.SwitchParameter); set => _authConfigEnvelopeBody.HttpSettingRequireHttps = value; }

        /// <summary>
        /// The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.",
        SerializedName = @"identityProviders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.App.Models.IIdentityProviders) })]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Models.IIdentityProviders IdentityProvider { get => _authConfigEnvelopeBody.IdentityProvider ?? null /* object */; set => _authConfigEnvelopeBody.IdentityProvider = value; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part
        /// of the URL is ignored.This is an advanced setting typically only needed by Windows Store application backends.Note that
        /// URLs within the current domain are always implicitly allowed.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.This is an advanced setting typically only needed by Windows Store application backends.Note that URLs within the current domain are always implicitly allowed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.This is an advanced setting typically only needed by Windows Store application backends.Note that URLs within the current domain are always implicitly allowed.",
        SerializedName = @"allowedExternalRedirectUrls",
        PossibleTypes = new [] { typeof(string) })]
        public string[] LoginAllowedExternalRedirectUrl { get => _authConfigEnvelopeBody.LoginAllowedExternalRedirectUrl?.ToArray() ?? null /* fixedArrayOf */; set => _authConfigEnvelopeBody.LoginAllowedExternalRedirectUrl = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>
        /// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.",
        SerializedName = @"preserveUrlFragmentsForLogins",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LoginPreserveUrlFragmentsForLogin { get => _authConfigEnvelopeBody.LoginPreserveUrlFragmentsForLogin ?? default(global::System.Management.Automation.SwitchParameter); set => _authConfigEnvelopeBody.LoginPreserveUrlFragmentsForLogin = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>The time after the request is made when the nonce should expire.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time after the request is made when the nonce should expire.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time after the request is made when the nonce should expire.",
        SerializedName = @"nonceExpirationInterval",
        PossibleTypes = new [] { typeof(string) })]
        public string NonceExpirationInterval { get => _authConfigEnvelopeBody.NonceExpirationInterval ?? null; set => _authConfigEnvelopeBody.NonceExpirationInterval = value; }

        /// <summary>
        /// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.",
        SerializedName = @"validateNonce",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NonceValidateNonce { get => _authConfigEnvelopeBody.NonceValidateNonce ?? default(global::System.Management.Automation.SwitchParameter); set => _authConfigEnvelopeBody.NonceValidateNonce = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "<code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter PlatformEnabled { get => _authConfigEnvelopeBody.PlatformEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _authConfigEnvelopeBody.PlatformEnabled = value; }

        /// <summary>
        /// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.The setting in this value
        /// can control the behavior of certain features in the Authentication / Authorization module.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The RuntimeVersion of the Authentication / Authorization feature in use for the current app.The setting in this value can control the behavior of certain features in the Authentication / Authorization module.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The RuntimeVersion of the Authentication / Authorization feature in use for the current app.The setting in this value can control the behavior of certain features in the Authentication / Authorization module.",
        SerializedName = @"runtimeVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string PlatformRuntimeVersion { get => _authConfigEnvelopeBody.PlatformRuntimeVersion ?? null; set => _authConfigEnvelopeBody.PlatformRuntimeVersion = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The prefix that should precede all the authentication/authorization paths.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The prefix that should precede all the authentication/authorization paths.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The prefix that should precede all the authentication/authorization paths.",
        SerializedName = @"apiPrefix",
        PossibleTypes = new [] { typeof(string) })]
        public string RouteApiPrefix { get => _authConfigEnvelopeBody.RouteApiPrefix ?? null; set => _authConfigEnvelopeBody.RouteApiPrefix = value; }

        /// <summary>The endpoint at which a logout request should be made.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The endpoint at which a logout request should be made.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.Category(global::Microsoft.Azure.PowerShell.Cmdlets.App.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The endpoint at which a logout request should be made.",
        SerializedName = @"logoutEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        public string RouteLogoutEndpoint { get => _authConfigEnvelopeBody.RouteLogoutEndpoint ?? null; set => _authConfigEnvelopeBody.RouteLogoutEndpoint = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig">Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.App.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.App.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ContainerAppsAuthConfigsCreateOrUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.App.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        _authConfigEnvelopeBody = await this.Client.ContainerAppsAuthConfigsGetViaIdentityWithResult(InputObject.Id, this, Pipeline);
                        this.Update_authConfigEnvelopeBody();
                        await this.Client.ContainerAppsAuthConfigsCreateOrUpdateViaIdentity(InputObject.Id, _authConfigEnvelopeBody, onOk, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ContainerAppName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ContainerAppName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.AuthConfigName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.AuthConfigName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        _authConfigEnvelopeBody = await this.Client.ContainerAppsAuthConfigsGetWithResult(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.ContainerAppName ?? null, InputObject.AuthConfigName ?? null, this, Pipeline);
                        this.Update_authConfigEnvelopeBody();
                        await this.Client.ContainerAppsAuthConfigsCreateOrUpdate(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.ContainerAppName ?? null, InputObject.AuthConfigName ?? null, _authConfigEnvelopeBody, onOk, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAzContainerAppAuthConfig_UpdateViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzContainerAppAuthConfig_UpdateViaIdentityExpanded()
        {

        }

        private void Update_authConfigEnvelopeBody()
        {
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("IdentityProvider")))
            {
                this.IdentityProvider = (Microsoft.Azure.PowerShell.Cmdlets.App.Models.IIdentityProviders)(this.MyInvocation?.BoundParameters["IdentityProvider"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("GlobalValidationExcludedPath")))
            {
                this.GlobalValidationExcludedPath = (string[])(this.MyInvocation?.BoundParameters["GlobalValidationExcludedPath"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("PlatformEnabled")))
            {
                this.PlatformEnabled = (global::System.Management.Automation.SwitchParameter)(this.MyInvocation?.BoundParameters["PlatformEnabled"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("PlatformRuntimeVersion")))
            {
                this.PlatformRuntimeVersion = (string)(this.MyInvocation?.BoundParameters["PlatformRuntimeVersion"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("GlobalValidationUnauthenticatedClientAction")))
            {
                this.GlobalValidationUnauthenticatedClientAction = (string)(this.MyInvocation?.BoundParameters["GlobalValidationUnauthenticatedClientAction"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("GlobalValidationRedirectToProvider")))
            {
                this.GlobalValidationRedirectToProvider = (string)(this.MyInvocation?.BoundParameters["GlobalValidationRedirectToProvider"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("LoginPreserveUrlFragmentsForLogin")))
            {
                this.LoginPreserveUrlFragmentsForLogin = (global::System.Management.Automation.SwitchParameter)(this.MyInvocation?.BoundParameters["LoginPreserveUrlFragmentsForLogin"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("LoginAllowedExternalRedirectUrl")))
            {
                this.LoginAllowedExternalRedirectUrl = (string[])(this.MyInvocation?.BoundParameters["LoginAllowedExternalRedirectUrl"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("CookieExpirationConvention")))
            {
                this.CookieExpirationConvention = (string)(this.MyInvocation?.BoundParameters["CookieExpirationConvention"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RouteLogoutEndpoint")))
            {
                this.RouteLogoutEndpoint = (string)(this.MyInvocation?.BoundParameters["RouteLogoutEndpoint"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("HttpSettingRequireHttps")))
            {
                this.HttpSettingRequireHttps = (global::System.Management.Automation.SwitchParameter)(this.MyInvocation?.BoundParameters["HttpSettingRequireHttps"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ForwardProxyConvention")))
            {
                this.ForwardProxyConvention = (string)(this.MyInvocation?.BoundParameters["ForwardProxyConvention"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RouteApiPrefix")))
            {
                this.RouteApiPrefix = (string)(this.MyInvocation?.BoundParameters["RouteApiPrefix"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("CookieExpirationTimeToExpiration")))
            {
                this.CookieExpirationTimeToExpiration = (string)(this.MyInvocation?.BoundParameters["CookieExpirationTimeToExpiration"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NonceValidateNonce")))
            {
                this.NonceValidateNonce = (global::System.Management.Automation.SwitchParameter)(this.MyInvocation?.BoundParameters["NonceValidateNonce"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NonceExpirationInterval")))
            {
                this.NonceExpirationInterval = (string)(this.MyInvocation?.BoundParameters["NonceExpirationInterval"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ForwardProxyCustomHostHeaderName")))
            {
                this.ForwardProxyCustomHostHeaderName = (string)(this.MyInvocation?.BoundParameters["ForwardProxyCustomHostHeaderName"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ForwardProxyCustomProtoHeaderName")))
            {
                this.ForwardProxyCustomProtoHeaderName = (string)(this.MyInvocation?.BoundParameters["ForwardProxyCustomProtoHeaderName"]);
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDefaultErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig">Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAuthConfig
                var result = (await response);
                WriteObject(result, false);
            }
        }
    }
}