
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Configuration.
.Description
Create an in-memory object for Configuration.
.Example
$customDomain = New-AzContainerAppCustomDomainObject -Name "www.my-name.com" -BindingType "SniEnabled" -CertificateId "/subscriptions/{subId}/resourceGroups/azps_test_group_app/providers/Microsoft.App/managedEnvironments/{manageEnvName}/certificates/{testcert}"
$trafficWeight = New-AzContainerAppTrafficWeightObject -Label "production" -RevisionName "testcontainerApp0-ab1234" -Weight 100
$iPSecurityRestrictionRule = New-AzContainerAppIPSecurityRestrictionRuleObject -Action "Allow" -IPAddressRange "192.168.1.1/32" -Name "Allow work IP A subnet"

New-AzContainerAppConfigurationObject -IngressCustomDomain $customDomain -IngressIPSecurityRestriction $iPSecurityRestrictionRule -IngressTraffic $trafficWeight -IngressExternal:$True -IngressTargetPort 3000 -IngressClientCertificateMode "accept" -CorPolicyAllowedOrigin "https://a.test.com","https://b.test.com" -CorPolicyAllowedMethod "GET","POST" -CorPolicyAllowedHeader "HEADER1","HEADER2" -CorPolicyExposeHeader "HEADER3","HEADER4" -CorPolicyMaxAge 1234 -CorPolicyAllowCredentials:$True -DaprEnabled:$True -DaprAppPort 3000 -DaprAppProtocol "http" -DaprHttpReadBufferSize 30 -DaprHttpMaxRequestSize 10 -DaprLogLevel "debug" -DaprEnableApiLogging:$True -MaxInactiveRevision 10 -ServiceType "redis" -IngressTransport "http"

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.App.Models.Configuration
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INGRESSCUSTOMDOMAIN <ICustomDomain[]>: custom domain bindings for Container Apps' hostnames.
  Name <String>: Hostname.
  [BindingType <String>]: Custom Domain binding type.
  [CertificateId <String>]: Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.

INGRESSIPSECURITYRESTRICTION <IIPSecurityRestrictionRule[]>: Rules to restrict incoming IP address.
  Action <String>: Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
  IPAddressRange <String>: CIDR notation to match incoming IP address
  Name <String>: Name for the IP restriction rule.
  [Description <String>]: Describe the IP restriction rule that is being sent to the container-app. This is an optional field.

INGRESSTRAFFIC <ITrafficWeight[]>: Traffic weights for app's revisions.
  [Label <String>]: Associates a traffic label with a revision
  [LatestRevision <Boolean?>]: Indicates that the traffic weight belongs to a latest stable revision
  [RevisionName <String>]: Name of a revision
  [Weight <Int32?>]: Traffic weight assigned to a revision

REGISTRY <IRegistryCredentials[]>: Collection of private container registry credentials for containers used by the Container app.
  [Identity <String>]: A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'
  [PasswordSecretRef <String>]: The name of the Secret that contains the registry login password
  [Server <String>]: Container Registry Server
  [Username <String>]: Container Registry Username

SECRET <ISecret[]>: Collection of secrets used by a Container app.
  [Identity <String>]: Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
  [KeyVaultUrl <String>]: Azure Key Vault URL pointing to the secret referenced by the container app.
  [Name <String>]: Secret Name.
  [Value <String>]: Secret Value.
.Link
https://learn.microsoft.com/powershell/module/Az.App/new-azcontainerappconfigurationobject
#>
function New-AzContainerAppConfigurationObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.App.Models.Configuration])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("Multiple", "Single")]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # ActiveRevisionsMode controls how active revisions are handled for the Container app:
    #         <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time.
    # Revision weights can not be used in this mode.
    # If no value if provided, this is the default.</item></list>.
    ${ActiveRevisionsMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # Specifies whether the resource allows credentials.
    ${CorPolicyAllowCredentials},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # Specifies the content for the access-control-allow-headers header.
    ${CorPolicyAllowedHeader},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # Specifies the content for the access-control-allow-methods header.
    ${CorPolicyAllowedMethod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # Specifies the content for the access-control-allow-origins header.
    ${CorPolicyAllowedOrigin},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String[]]
    # Specifies the content for the access-control-expose-headers header .
    ${CorPolicyExposeHeader},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Specifies the content for the access-control-max-age header.
    ${CorPolicyMaxAge},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Dapr application identifier.
    ${DaprAppId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Tells Dapr which port your application is listening on.
    ${DaprAppPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("http", "grpc")]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Tells Dapr which protocol your application is using.
    # Valid options are http and grpc.
    # Default is http.
    ${DaprAppProtocol},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # Enables API logging for the Dapr sidecar.
    ${DaprEnableApiLogging},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # Boolean indicating if the Dapr side car is enabled.
    ${DaprEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files.
    # Default is 4 MB.
    ${DaprHttpMaxRequestSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Dapr max size of http header read buffer in KB to handle when sending multi-KB headers.
    # Default is 65KB.
    ${DaprHttpReadBufferSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("info", "debug", "warn", "error")]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Sets the log level for the Dapr sidecar.
    # Allowed values are debug, info, warn, error.
    # Default is info.
    ${DaprLogLevel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # Bool indicating if HTTP connections to is allowed.
    # If set to false HTTP connections are automatically redirected to HTTPS connections.
    ${IngressAllowInsecure},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("ignore", "accept", "require")]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Client certificate mode for mTLS authentication.
    # Ignore indicates server drops client certificate on forwarding.
    # Accept indicates server forwards client certificate but does not require a client certificate.
    # Require indicates server requires a client certificate.
    ${IngressClientCertificateMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomain[]]
    # custom domain bindings for Container Apps' hostnames.
    # To construct, see NOTES section for INGRESSCUSTOMDOMAIN properties and create a hash table.
    ${IngressCustomDomain},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Exposed Port in containers for TCP traffic from ingress.
    ${IngressExposedPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Boolean]
    # Bool indicating if app exposes an external http endpoint.
    ${IngressExternal},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Models.IIPSecurityRestrictionRule[]]
    # Rules to restrict incoming IP address.
    # To construct, see NOTES section for INGRESSIPSECURITYRESTRICTION properties and create a hash table.
    ${IngressIPSecurityRestriction},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Target Port in containers for traffic from ingress.
    ${IngressTargetPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Models.ITrafficWeight[]]
    # Traffic weights for app's revisions.
    # To construct, see NOTES section for INGRESSTRAFFIC properties and create a hash table.
    ${IngressTraffic},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("auto", "http", "http2", "tcp")]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Ingress transport protocol.
    ${IngressTransport},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.Int32]
    # Optional.
    # Max inactive revisions a Container App can have.
    ${MaxInactiveRevision},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Models.IRegistryCredentials[]]
    # Collection of private container registry credentials for containers used by the Container app.
    # To construct, see NOTES section for REGISTRY properties and create a hash table.
    ${Registry},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Models.ISecret[]]
    # Collection of secrets used by a Container app.
    # To construct, see NOTES section for SECRET properties and create a hash table.
    ${Secret},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Dev ContainerApp service type.
    ${ServiceType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("sticky", "none")]
    [Microsoft.Azure.PowerShell.Cmdlets.App.Category('Body')]
    [System.String]
    # Sticky Session Affinity.
    ${StickySessionAffinity}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.App.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.App.custom\New-AzContainerAppConfigurationObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.App.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
