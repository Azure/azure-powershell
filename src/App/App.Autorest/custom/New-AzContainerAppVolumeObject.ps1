
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Volume.
.Description
Create an in-memory object for Volume.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.Volume
#>
function New-AzContainerAppVolumeObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.Volume')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Volume name.")]
        [string]
        $Name,
        [Parameter(HelpMessage="Name of storage resource. No need to provide for EmptyDir.")]
        [string]
        $StorageName,
        [Parameter(HelpMessage="Storage type for the volume. If not provided, use EmptyDir.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.App.Support.StorageType])]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Support.StorageType]
        $StorageType
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.App.Models.Api20220301.Volume]::New()

        if ($PSBoundParameters.ContainsKey('Name')) {
            $Object.Name = $Name
        }
        if ($PSBoundParameters.ContainsKey('StorageName')) {
            $Object.StorageName = $StorageName
        }
        if ($PSBoundParameters.ContainsKey('StorageType')) {
            $Object.StorageType = $StorageType
        }
        return $Object
    }
}

