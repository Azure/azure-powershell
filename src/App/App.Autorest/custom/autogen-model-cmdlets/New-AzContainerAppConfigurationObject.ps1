
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Configuration.
.Description
Create an in-memory object for Configuration.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.App.Models.Configuration
.Link
https://learn.microsoft.com/powershell/module/Az.App/new-azcontainerappconfigurationobject
#>
function New-AzContainerAppConfigurationObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.App.Models.Configuration')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="ActiveRevisionsMode controls how active revisions are handled for the Container app:
        <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("Multiple", "Single")]
        [string]
        $ActiveRevisionsMode,
        [Parameter(HelpMessage="Specifies whether the resource allows credentials.")]
        [bool]
        $CorPolicyAllowCredentials,
        [Parameter(HelpMessage="Specifies the content for the access-control-allow-headers header.")]
        [string[]]
        $CorPolicyAllowedHeader,
        [Parameter(HelpMessage="Specifies the content for the access-control-allow-methods header.")]
        [string[]]
        $CorPolicyAllowedMethod,
        [Parameter(HelpMessage="Specifies the content for the access-control-allow-origins header.")]
        [string[]]
        $CorPolicyAllowedOrigin,
        [Parameter(HelpMessage="Specifies the content for the access-control-expose-headers header .")]
        [string[]]
        $CorPolicyExposeHeader,
        [Parameter(HelpMessage="Specifies the content for the access-control-max-age header.")]
        [int]
        $CorPolicyMaxAge,
        [Parameter(HelpMessage="Dapr application identifier.")]
        [string]
        $DaprAppId,
        [Parameter(HelpMessage="Tells Dapr which port your application is listening on.")]
        [int]
        $DaprAppPort,
        [Parameter(HelpMessage="Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("http", "grpc")]
        [string]
        $DaprAppProtocol,
        [Parameter(HelpMessage="Enables API logging for the Dapr sidecar.")]
        [bool]
        $DaprEnableApiLogging,
        [Parameter(HelpMessage="Boolean indicating if the Dapr side car is enabled.")]
        [bool]
        $DaprEnabled,
        [Parameter(HelpMessage="Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.")]
        [int]
        $DaprHttpMaxRequestSize,
        [Parameter(HelpMessage="Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.")]
        [int]
        $DaprHttpReadBufferSize,
        [Parameter(HelpMessage="Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("info", "debug", "warn", "error")]
        [string]
        $DaprLogLevel,
        [Parameter(HelpMessage="Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections.")]
        [bool]
        $IngressAllowInsecure,
        [Parameter(HelpMessage="Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("ignore", "accept", "require")]
        [string]
        $IngressClientCertificateMode,
        [Parameter(HelpMessage="custom domain bindings for Container Apps' hostnames.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomain[]]
        $IngressCustomDomain,
        [Parameter(HelpMessage="Exposed Port in containers for TCP traffic from ingress.")]
        [int]
        $IngressExposedPort,
        [Parameter(HelpMessage="Bool indicating if app exposes an external http endpoint.")]
        [bool]
        $IngressExternal,
        [Parameter(HelpMessage="Rules to restrict incoming IP address.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Models.IIPSecurityRestrictionRule[]]
        $IngressIPSecurityRestriction,
        [Parameter(HelpMessage="Target Port in containers for traffic from ingress.")]
        [int]
        $IngressTargetPort,
        [Parameter(HelpMessage="Traffic weights for app's revisions.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Models.ITrafficWeight[]]
        $IngressTraffic,
        [Parameter(HelpMessage="Ingress transport protocol.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("auto", "http", "http2", "tcp")]
        [string]
        $IngressTransport,
        [Parameter(HelpMessage="Optional. Max inactive revisions a Container App can have.")]
        [int]
        $MaxInactiveRevision,
        [Parameter(HelpMessage="Collection of private container registry credentials for containers used by the Container app.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Models.IRegistryCredentials[]]
        $Registry,
        [Parameter(HelpMessage="Collection of secrets used by a Container app.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.Models.ISecret[]]
        $Secret,
        [Parameter(HelpMessage="Dev ContainerApp service type.")]
        [string]
        $ServiceType,
        [Parameter(HelpMessage="Sticky Session Affinity.")]
        [Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("sticky", "none")]
        [string]
        $StickySessionAffinity
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.App.Models.Configuration]::New()

        if ($PSBoundParameters.ContainsKey('ActiveRevisionsMode')) {
            $Object.ActiveRevisionsMode = $ActiveRevisionsMode
        }
        if ($PSBoundParameters.ContainsKey('CorPolicyAllowCredentials')) {
            $Object.CorPolicyAllowCredentials = $CorPolicyAllowCredentials
        }
        if ($PSBoundParameters.ContainsKey('CorPolicyAllowedHeader')) {
            $Object.CorPolicyAllowedHeader = $CorPolicyAllowedHeader
        }
        if ($PSBoundParameters.ContainsKey('CorPolicyAllowedMethod')) {
            $Object.CorPolicyAllowedMethod = $CorPolicyAllowedMethod
        }
        if ($PSBoundParameters.ContainsKey('CorPolicyAllowedOrigin')) {
            $Object.CorPolicyAllowedOrigin = $CorPolicyAllowedOrigin
        }
        if ($PSBoundParameters.ContainsKey('CorPolicyExposeHeader')) {
            $Object.CorPolicyExposeHeader = $CorPolicyExposeHeader
        }
        if ($PSBoundParameters.ContainsKey('CorPolicyMaxAge')) {
            $Object.CorPolicyMaxAge = $CorPolicyMaxAge
        }
        if ($PSBoundParameters.ContainsKey('DaprAppId')) {
            $Object.DaprAppId = $DaprAppId
        }
        if ($PSBoundParameters.ContainsKey('DaprAppPort')) {
            $Object.DaprAppPort = $DaprAppPort
        }
        if ($PSBoundParameters.ContainsKey('DaprAppProtocol')) {
            $Object.DaprAppProtocol = $DaprAppProtocol
        }
        if ($PSBoundParameters.ContainsKey('DaprEnableApiLogging')) {
            $Object.DaprEnableApiLogging = $DaprEnableApiLogging
        }
        if ($PSBoundParameters.ContainsKey('DaprEnabled')) {
            $Object.DaprEnabled = $DaprEnabled
        }
        if ($PSBoundParameters.ContainsKey('DaprHttpMaxRequestSize')) {
            $Object.DaprHttpMaxRequestSize = $DaprHttpMaxRequestSize
        }
        if ($PSBoundParameters.ContainsKey('DaprHttpReadBufferSize')) {
            $Object.DaprHttpReadBufferSize = $DaprHttpReadBufferSize
        }
        if ($PSBoundParameters.ContainsKey('DaprLogLevel')) {
            $Object.DaprLogLevel = $DaprLogLevel
        }
        if ($PSBoundParameters.ContainsKey('IngressAllowInsecure')) {
            $Object.IngressAllowInsecure = $IngressAllowInsecure
        }
        if ($PSBoundParameters.ContainsKey('IngressClientCertificateMode')) {
            $Object.IngressClientCertificateMode = $IngressClientCertificateMode
        }
        if ($PSBoundParameters.ContainsKey('IngressCustomDomain')) {
            $Object.IngressCustomDomain = $IngressCustomDomain
        }
        if ($PSBoundParameters.ContainsKey('IngressExposedPort')) {
            $Object.IngressExposedPort = $IngressExposedPort
        }
        if ($PSBoundParameters.ContainsKey('IngressExternal')) {
            $Object.IngressExternal = $IngressExternal
        }
        if ($PSBoundParameters.ContainsKey('IngressIPSecurityRestriction')) {
            $Object.IngressIPSecurityRestriction = $IngressIPSecurityRestriction
        }
        if ($PSBoundParameters.ContainsKey('IngressTargetPort')) {
            $Object.IngressTargetPort = $IngressTargetPort
        }
        if ($PSBoundParameters.ContainsKey('IngressTraffic')) {
            $Object.IngressTraffic = $IngressTraffic
        }
        if ($PSBoundParameters.ContainsKey('IngressTransport')) {
            $Object.IngressTransport = $IngressTransport
        }
        if ($PSBoundParameters.ContainsKey('MaxInactiveRevision')) {
            $Object.MaxInactiveRevision = $MaxInactiveRevision
        }
        if ($PSBoundParameters.ContainsKey('Registry')) {
            $Object.Registry = $Registry
        }
        if ($PSBoundParameters.ContainsKey('Secret')) {
            $Object.Secret = $Secret
        }
        if ($PSBoundParameters.ContainsKey('ServiceType')) {
            $Object.ServiceType = $ServiceType
        }
        if ($PSBoundParameters.ContainsKey('StickySessionAffinity')) {
            $Object.StickySessionAffinity = $StickySessionAffinity
        }
        return $Object
    }
}

