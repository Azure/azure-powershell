
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for AppIdentity.
.Description
Create an in-memory object for AppIdentity.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.App.Models.AppIdentity
.Link
https://docs.microsoft.com/powershell/module/az./new-AzAppIdentity
#>
function New-AzAppIdentity {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.App.Models.AppIdentity')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Name of the Container App AuthConfig.")]
        [string]
        $AuthConfigName,
        [Parameter(HelpMessage="Name of the Certificate.")]
        [string]
        $CertificateName,
        [Parameter(HelpMessage="Name of the Dapr Component.")]
        [string]
        $ComponentName,
        [Parameter(HelpMessage="Name of the Container App.")]
        [string]
        $ContainerAppName,
        [Parameter(HelpMessage="Name of the Managed Environment.")]
        [string]
        $EnvironmentName,
        [Parameter(HelpMessage="Resource identity path.")]
        [string]
        $Id,
        [Parameter(HelpMessage="Name of the Container App Revision Replica.")]
        [string]
        $ReplicaName,
        [Parameter(HelpMessage="The name of the resource group. The name is case insensitive.")]
        [string]
        $ResourceGroupName,
        [Parameter(HelpMessage="Name of the Container App Revision.")]
        [string]
        $RevisionName,
        [Parameter(HelpMessage="Name of the Container App SourceControl.")]
        [string]
        $SourceControlName,
        [Parameter(HelpMessage="Name of the storage.")]
        [string]
        $StorageName,
        [Parameter(HelpMessage="The ID of the target subscription.")]
        [string]
        $SubscriptionId
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.App.Models.AppIdentity]::New()

        if ($PSBoundParameters.ContainsKey('AuthConfigName')) {
            $Object.AuthConfigName = $AuthConfigName
        }
        if ($PSBoundParameters.ContainsKey('CertificateName')) {
            $Object.CertificateName = $CertificateName
        }
        if ($PSBoundParameters.ContainsKey('ComponentName')) {
            $Object.ComponentName = $ComponentName
        }
        if ($PSBoundParameters.ContainsKey('ContainerAppName')) {
            $Object.ContainerAppName = $ContainerAppName
        }
        if ($PSBoundParameters.ContainsKey('EnvironmentName')) {
            $Object.EnvironmentName = $EnvironmentName
        }
        if ($PSBoundParameters.ContainsKey('Id')) {
            $Object.Id = $Id
        }
        if ($PSBoundParameters.ContainsKey('ReplicaName')) {
            $Object.ReplicaName = $ReplicaName
        }
        if ($PSBoundParameters.ContainsKey('ResourceGroupName')) {
            $Object.ResourceGroupName = $ResourceGroupName
        }
        if ($PSBoundParameters.ContainsKey('RevisionName')) {
            $Object.RevisionName = $RevisionName
        }
        if ($PSBoundParameters.ContainsKey('SourceControlName')) {
            $Object.SourceControlName = $SourceControlName
        }
        if ($PSBoundParameters.ContainsKey('StorageName')) {
            $Object.StorageName = $StorageName
        }
        if ($PSBoundParameters.ContainsKey('SubscriptionId')) {
            $Object.SubscriptionId = $SubscriptionId
        }
        return $Object
    }
}

