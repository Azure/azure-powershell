
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for LogSettings.
.Description
Create an in-memory object for LogSettings.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.Api20220829.LogSettings
.Link
https://learn.microsoft.com/powershell/module/Az.PaloAltoNetworks/new-AzPaloAltoNetworksLogSettingsObject
#>
function New-AzPaloAltoNetworksLogSettingsObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.Api20220829.LogSettings')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Resource id for Application Insights.")]
        [string]
        $ApplicationInsightId,
        [Parameter(HelpMessage="Application Insights key.")]
        [string]
        $ApplicationInsightKey,
        [Parameter(HelpMessage="Resource ID of EventHub.")]
        [string]
        $CommonDestinationEventHubConfigurationsId,
        [Parameter(HelpMessage="EventHub name.")]
        [string]
        $CommonDestinationEventHubConfigurationsName,
        [Parameter(HelpMessage="EventHub namespace.")]
        [string]
        $CommonDestinationEventHubConfigurationsNameSpace,
        [Parameter(HelpMessage="EventHub policy name.")]
        [string]
        $CommonDestinationEventHubConfigurationsPolicyName,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $CommonDestinationEventHubConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Resource ID of MonitorLog.")]
        [string]
        $CommonDestinationMonitorConfigurationsId,
        [Parameter(HelpMessage="Primary Key value for Monitor.")]
        [string]
        $CommonDestinationMonitorConfigurationsPrimaryKey,
        [Parameter(HelpMessage="Secondary Key value for Monitor.")]
        [string]
        $CommonDestinationMonitorConfigurationsSecondaryKey,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $CommonDestinationMonitorConfigurationsSubscriptionId,
        [Parameter(HelpMessage="MonitorLog workspace.")]
        [string]
        $CommonDestinationMonitorConfigurationsWorkspace,
        [Parameter(HelpMessage="Storage account name.")]
        [string]
        $CommonDestinationStorageConfigurationsAccountName,
        [Parameter(HelpMessage="Resource ID of storage account.")]
        [string]
        $CommonDestinationStorageConfigurationsId,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $CommonDestinationStorageConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Resource ID of EventHub.")]
        [string]
        $DecryptLogDestinationEventHubConfigurationsId,
        [Parameter(HelpMessage="EventHub name.")]
        [string]
        $DecryptLogDestinationEventHubConfigurationsName,
        [Parameter(HelpMessage="EventHub namespace.")]
        [string]
        $DecryptLogDestinationEventHubConfigurationsNameSpace,
        [Parameter(HelpMessage="EventHub policy name.")]
        [string]
        $DecryptLogDestinationEventHubConfigurationsPolicyName,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $DecryptLogDestinationEventHubConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Resource ID of MonitorLog.")]
        [string]
        $DecryptLogDestinationMonitorConfigurationsId,
        [Parameter(HelpMessage="Primary Key value for Monitor.")]
        [string]
        $DecryptLogDestinationMonitorConfigurationsPrimaryKey,
        [Parameter(HelpMessage="Secondary Key value for Monitor.")]
        [string]
        $DecryptLogDestinationMonitorConfigurationsSecondaryKey,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $DecryptLogDestinationMonitorConfigurationsSubscriptionId,
        [Parameter(HelpMessage="MonitorLog workspace.")]
        [string]
        $DecryptLogDestinationMonitorConfigurationsWorkspace,
        [Parameter(HelpMessage="Storage account name.")]
        [string]
        $DecryptLogDestinationStorageConfigurationsAccountName,
        [Parameter(HelpMessage="Resource ID of storage account.")]
        [string]
        $DecryptLogDestinationStorageConfigurationsId,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $DecryptLogDestinationStorageConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Log option SAME/INDIVIDUAL.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Support.LogOption])]
        [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Support.LogOption]
        $LogOption,
        [Parameter(HelpMessage="One of possible log type.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Support.LogType])]
        [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Support.LogType]
        $LogType,
        [Parameter(HelpMessage="Resource ID of EventHub.")]
        [string]
        $ThreatLogDestinationEventHubConfigurationsId,
        [Parameter(HelpMessage="EventHub name.")]
        [string]
        $ThreatLogDestinationEventHubConfigurationsName,
        [Parameter(HelpMessage="EventHub namespace.")]
        [string]
        $ThreatLogDestinationEventHubConfigurationsNameSpace,
        [Parameter(HelpMessage="EventHub policy name.")]
        [string]
        $ThreatLogDestinationEventHubConfigurationsPolicyName,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $ThreatLogDestinationEventHubConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Resource ID of MonitorLog.")]
        [string]
        $ThreatLogDestinationMonitorConfigurationsId,
        [Parameter(HelpMessage="Primary Key value for Monitor.")]
        [string]
        $ThreatLogDestinationMonitorConfigurationsPrimaryKey,
        [Parameter(HelpMessage="Secondary Key value for Monitor.")]
        [string]
        $ThreatLogDestinationMonitorConfigurationsSecondaryKey,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $ThreatLogDestinationMonitorConfigurationsSubscriptionId,
        [Parameter(HelpMessage="MonitorLog workspace.")]
        [string]
        $ThreatLogDestinationMonitorConfigurationsWorkspace,
        [Parameter(HelpMessage="Storage account name.")]
        [string]
        $ThreatLogDestinationStorageConfigurationsAccountName,
        [Parameter(HelpMessage="Resource ID of storage account.")]
        [string]
        $ThreatLogDestinationStorageConfigurationsId,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $ThreatLogDestinationStorageConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Resource ID of EventHub.")]
        [string]
        $TrafficLogDestinationEventHubConfigurationsId,
        [Parameter(HelpMessage="EventHub name.")]
        [string]
        $TrafficLogDestinationEventHubConfigurationsName,
        [Parameter(HelpMessage="EventHub namespace.")]
        [string]
        $TrafficLogDestinationEventHubConfigurationsNameSpace,
        [Parameter(HelpMessage="EventHub policy name.")]
        [string]
        $TrafficLogDestinationEventHubConfigurationsPolicyName,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $TrafficLogDestinationEventHubConfigurationsSubscriptionId,
        [Parameter(HelpMessage="Resource ID of MonitorLog.")]
        [string]
        $TrafficLogDestinationMonitorConfigurationsId,
        [Parameter(HelpMessage="Primary Key value for Monitor.")]
        [string]
        $TrafficLogDestinationMonitorConfigurationsPrimaryKey,
        [Parameter(HelpMessage="Secondary Key value for Monitor.")]
        [string]
        $TrafficLogDestinationMonitorConfigurationsSecondaryKey,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $TrafficLogDestinationMonitorConfigurationsSubscriptionId,
        [Parameter(HelpMessage="MonitorLog workspace.")]
        [string]
        $TrafficLogDestinationMonitorConfigurationsWorkspace,
        [Parameter(HelpMessage="Storage account name.")]
        [string]
        $TrafficLogDestinationStorageConfigurationsAccountName,
        [Parameter(HelpMessage="Resource ID of storage account.")]
        [string]
        $TrafficLogDestinationStorageConfigurationsId,
        [Parameter(HelpMessage="Subscription Id.")]
        [string]
        $TrafficLogDestinationStorageConfigurationsSubscriptionId
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.Api20220829.LogSettings]::New()

        if ($PSBoundParameters.ContainsKey('ApplicationInsightId')) {
            $Object.ApplicationInsightId = $ApplicationInsightId
        }
        if ($PSBoundParameters.ContainsKey('ApplicationInsightKey')) {
            $Object.ApplicationInsightKey = $ApplicationInsightKey
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationEventHubConfigurationsId')) {
            $Object.CommonDestinationEventHubConfigurationsId = $CommonDestinationEventHubConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationEventHubConfigurationsName')) {
            $Object.CommonDestinationEventHubConfigurationsName = $CommonDestinationEventHubConfigurationsName
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationEventHubConfigurationsNameSpace')) {
            $Object.CommonDestinationEventHubConfigurationsNameSpace = $CommonDestinationEventHubConfigurationsNameSpace
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationEventHubConfigurationsPolicyName')) {
            $Object.CommonDestinationEventHubConfigurationsPolicyName = $CommonDestinationEventHubConfigurationsPolicyName
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationEventHubConfigurationsSubscriptionId')) {
            $Object.CommonDestinationEventHubConfigurationsSubscriptionId = $CommonDestinationEventHubConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationMonitorConfigurationsId')) {
            $Object.CommonDestinationMonitorConfigurationsId = $CommonDestinationMonitorConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationMonitorConfigurationsPrimaryKey')) {
            $Object.CommonDestinationMonitorConfigurationsPrimaryKey = $CommonDestinationMonitorConfigurationsPrimaryKey
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationMonitorConfigurationsSecondaryKey')) {
            $Object.CommonDestinationMonitorConfigurationsSecondaryKey = $CommonDestinationMonitorConfigurationsSecondaryKey
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationMonitorConfigurationsSubscriptionId')) {
            $Object.CommonDestinationMonitorConfigurationsSubscriptionId = $CommonDestinationMonitorConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationMonitorConfigurationsWorkspace')) {
            $Object.CommonDestinationMonitorConfigurationsWorkspace = $CommonDestinationMonitorConfigurationsWorkspace
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationStorageConfigurationsAccountName')) {
            $Object.CommonDestinationStorageConfigurationsAccountName = $CommonDestinationStorageConfigurationsAccountName
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationStorageConfigurationsId')) {
            $Object.CommonDestinationStorageConfigurationsId = $CommonDestinationStorageConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('CommonDestinationStorageConfigurationsSubscriptionId')) {
            $Object.CommonDestinationStorageConfigurationsSubscriptionId = $CommonDestinationStorageConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationEventHubConfigurationsId')) {
            $Object.DecryptLogDestinationEventHubConfigurationsId = $DecryptLogDestinationEventHubConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationEventHubConfigurationsName')) {
            $Object.DecryptLogDestinationEventHubConfigurationsName = $DecryptLogDestinationEventHubConfigurationsName
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationEventHubConfigurationsNameSpace')) {
            $Object.DecryptLogDestinationEventHubConfigurationsNameSpace = $DecryptLogDestinationEventHubConfigurationsNameSpace
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationEventHubConfigurationsPolicyName')) {
            $Object.DecryptLogDestinationEventHubConfigurationsPolicyName = $DecryptLogDestinationEventHubConfigurationsPolicyName
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationEventHubConfigurationsSubscriptionId')) {
            $Object.DecryptLogDestinationEventHubConfigurationsSubscriptionId = $DecryptLogDestinationEventHubConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationMonitorConfigurationsId')) {
            $Object.DecryptLogDestinationMonitorConfigurationsId = $DecryptLogDestinationMonitorConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationMonitorConfigurationsPrimaryKey')) {
            $Object.DecryptLogDestinationMonitorConfigurationsPrimaryKey = $DecryptLogDestinationMonitorConfigurationsPrimaryKey
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationMonitorConfigurationsSecondaryKey')) {
            $Object.DecryptLogDestinationMonitorConfigurationsSecondaryKey = $DecryptLogDestinationMonitorConfigurationsSecondaryKey
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationMonitorConfigurationsSubscriptionId')) {
            $Object.DecryptLogDestinationMonitorConfigurationsSubscriptionId = $DecryptLogDestinationMonitorConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationMonitorConfigurationsWorkspace')) {
            $Object.DecryptLogDestinationMonitorConfigurationsWorkspace = $DecryptLogDestinationMonitorConfigurationsWorkspace
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationStorageConfigurationsAccountName')) {
            $Object.DecryptLogDestinationStorageConfigurationsAccountName = $DecryptLogDestinationStorageConfigurationsAccountName
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationStorageConfigurationsId')) {
            $Object.DecryptLogDestinationStorageConfigurationsId = $DecryptLogDestinationStorageConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('DecryptLogDestinationStorageConfigurationsSubscriptionId')) {
            $Object.DecryptLogDestinationStorageConfigurationsSubscriptionId = $DecryptLogDestinationStorageConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('LogOption')) {
            $Object.LogOption = $LogOption
        }
        if ($PSBoundParameters.ContainsKey('LogType')) {
            $Object.LogType = $LogType
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationEventHubConfigurationsId')) {
            $Object.ThreatLogDestinationEventHubConfigurationsId = $ThreatLogDestinationEventHubConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationEventHubConfigurationsName')) {
            $Object.ThreatLogDestinationEventHubConfigurationsName = $ThreatLogDestinationEventHubConfigurationsName
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationEventHubConfigurationsNameSpace')) {
            $Object.ThreatLogDestinationEventHubConfigurationsNameSpace = $ThreatLogDestinationEventHubConfigurationsNameSpace
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationEventHubConfigurationsPolicyName')) {
            $Object.ThreatLogDestinationEventHubConfigurationsPolicyName = $ThreatLogDestinationEventHubConfigurationsPolicyName
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationEventHubConfigurationsSubscriptionId')) {
            $Object.ThreatLogDestinationEventHubConfigurationsSubscriptionId = $ThreatLogDestinationEventHubConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationMonitorConfigurationsId')) {
            $Object.ThreatLogDestinationMonitorConfigurationsId = $ThreatLogDestinationMonitorConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationMonitorConfigurationsPrimaryKey')) {
            $Object.ThreatLogDestinationMonitorConfigurationsPrimaryKey = $ThreatLogDestinationMonitorConfigurationsPrimaryKey
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationMonitorConfigurationsSecondaryKey')) {
            $Object.ThreatLogDestinationMonitorConfigurationsSecondaryKey = $ThreatLogDestinationMonitorConfigurationsSecondaryKey
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationMonitorConfigurationsSubscriptionId')) {
            $Object.ThreatLogDestinationMonitorConfigurationsSubscriptionId = $ThreatLogDestinationMonitorConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationMonitorConfigurationsWorkspace')) {
            $Object.ThreatLogDestinationMonitorConfigurationsWorkspace = $ThreatLogDestinationMonitorConfigurationsWorkspace
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationStorageConfigurationsAccountName')) {
            $Object.ThreatLogDestinationStorageConfigurationsAccountName = $ThreatLogDestinationStorageConfigurationsAccountName
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationStorageConfigurationsId')) {
            $Object.ThreatLogDestinationStorageConfigurationsId = $ThreatLogDestinationStorageConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('ThreatLogDestinationStorageConfigurationsSubscriptionId')) {
            $Object.ThreatLogDestinationStorageConfigurationsSubscriptionId = $ThreatLogDestinationStorageConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationEventHubConfigurationsId')) {
            $Object.TrafficLogDestinationEventHubConfigurationsId = $TrafficLogDestinationEventHubConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationEventHubConfigurationsName')) {
            $Object.TrafficLogDestinationEventHubConfigurationsName = $TrafficLogDestinationEventHubConfigurationsName
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationEventHubConfigurationsNameSpace')) {
            $Object.TrafficLogDestinationEventHubConfigurationsNameSpace = $TrafficLogDestinationEventHubConfigurationsNameSpace
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationEventHubConfigurationsPolicyName')) {
            $Object.TrafficLogDestinationEventHubConfigurationsPolicyName = $TrafficLogDestinationEventHubConfigurationsPolicyName
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationEventHubConfigurationsSubscriptionId')) {
            $Object.TrafficLogDestinationEventHubConfigurationsSubscriptionId = $TrafficLogDestinationEventHubConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationMonitorConfigurationsId')) {
            $Object.TrafficLogDestinationMonitorConfigurationsId = $TrafficLogDestinationMonitorConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationMonitorConfigurationsPrimaryKey')) {
            $Object.TrafficLogDestinationMonitorConfigurationsPrimaryKey = $TrafficLogDestinationMonitorConfigurationsPrimaryKey
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationMonitorConfigurationsSecondaryKey')) {
            $Object.TrafficLogDestinationMonitorConfigurationsSecondaryKey = $TrafficLogDestinationMonitorConfigurationsSecondaryKey
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationMonitorConfigurationsSubscriptionId')) {
            $Object.TrafficLogDestinationMonitorConfigurationsSubscriptionId = $TrafficLogDestinationMonitorConfigurationsSubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationMonitorConfigurationsWorkspace')) {
            $Object.TrafficLogDestinationMonitorConfigurationsWorkspace = $TrafficLogDestinationMonitorConfigurationsWorkspace
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationStorageConfigurationsAccountName')) {
            $Object.TrafficLogDestinationStorageConfigurationsAccountName = $TrafficLogDestinationStorageConfigurationsAccountName
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationStorageConfigurationsId')) {
            $Object.TrafficLogDestinationStorageConfigurationsId = $TrafficLogDestinationStorageConfigurationsId
        }
        if ($PSBoundParameters.ContainsKey('TrafficLogDestinationStorageConfigurationsSubscriptionId')) {
            $Object.TrafficLogDestinationStorageConfigurationsSubscriptionId = $TrafficLogDestinationStorageConfigurationsSubscriptionId
        }
        return $Object
    }
}

