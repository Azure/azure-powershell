
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for NetworkProfile.
.Description
Create an in-memory object for NetworkProfile.
.Example
$publicIP = New-AzPaloAltoNetworksIPAddressObject -ResourceId /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/azps_test_group_pan/providers/Microsoft.Network/publicIPAddresses/azps-network-publicipaddresses

New-AzPaloAltoNetworksProfileObject -EnableEgressNat DISABLED -PublicIP $publicIP -NetworkType VNET -VnetConfigurationIPOfTrustSubnetForUdrAddress 10.1.1.0/24 -VnetConfigurationTrustSubnetResourceId /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/azps_test_group_pan/providers/Microsoft.Network/virtualNetworks/azps-network/subnets/default -VnetConfigurationUnTrustSubnetResourceId /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/azps_test_group_pan/providers/Microsoft.Network/virtualNetworks/azps-network/subnets/default2 -VnetResourceId /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/azps_test_group_pan/providers/Microsoft.Network/virtualNetworks/azps-network

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.NetworkProfile
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

EGRESSNATIP <IIPAddress[]>: Egress nat IP to use.
  [Address <String>]: Address value
  [ResourceId <String>]: Resource Id

PUBLICIP <IIPAddress[]>: List of IPs associated with the Firewall.
  [Address <String>]: Address value
  [ResourceId <String>]: Resource Id
.Link
https://learn.microsoft.com/powershell/module/Az.PaloAltoNetworks/new-azpaloaltonetworksprofileobject
#>
function New-AzPaloAltoNetworksProfileObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.NetworkProfile])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.PSArgumentCompleterAttribute("DISABLED", "ENABLED")]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Enable egress NAT, enabled by default.
    ${EnableEgressNat},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.PSArgumentCompleterAttribute("VNET", "VWAN")]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # vnet or vwan, cannot be updated.
    ${NetworkType},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.IIPAddress[]]
    # List of IPs associated with the Firewall.
    ${PublicIP},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Models.IIPAddress[]]
    # Egress nat IP to use.
    ${EgressNatIP},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address Space.
    ${VHubAddressSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VHubResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address Space.
    ${VnetAddressSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address value.
    ${VnetConfigurationIPOfTrustSubnetForUdrAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VnetConfigurationIPOfTrustSubnetForUdrResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address Space.
    ${VnetConfigurationTrustSubnetAddressSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VnetConfigurationTrustSubnetResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address Space.
    ${VnetConfigurationUnTrustSubnetAddressSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VnetConfigurationUnTrustSubnetResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VnetResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address value.
    ${VwanConfigurationIPOfTrustSubnetForUdrAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VwanConfigurationIPOfTrustSubnetForUdrResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Network Virtual Appliance resource ID .
    ${VwanConfigurationNetworkVirtualApplianceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address Space.
    ${VwanConfigurationTrustSubnetAddressSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VwanConfigurationTrustSubnetResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Address Space.
    ${VwanConfigurationUnTrustSubnetAddressSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Category('Body')]
    [System.String]
    # Resource Id.
    ${VwanConfigurationUnTrustSubnetResourceId}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.PaloAltoNetworks.custom\New-AzPaloAltoNetworksProfileObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PaloAltoNetworks.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
