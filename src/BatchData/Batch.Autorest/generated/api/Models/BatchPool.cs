// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>A Pool in the Azure Batch service.</summary>
    public partial class BatchPool :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPool,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="AllocationState" /> property.</summary>
        private string _allocationState;

        /// <summary>Whether the Pool is resizing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string AllocationState { get => this._allocationState; }

        /// <summary>Backing field for <see cref="AllocationStateTransitionTime" /> property.</summary>
        private global::System.DateTime? _allocationStateTransitionTime;

        /// <summary>The time at which the Pool entered its current allocation state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? AllocationStateTransitionTime { get => this._allocationStateTransitionTime; }

        /// <summary>Backing field for <see cref="ApplicationPackageReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> _applicationPackageReference;

        /// <summary>
        /// The list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes
        /// joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There
        /// is a maximum of 10 Package references on any given Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get => this._applicationPackageReference; }

        /// <summary>Backing field for <see cref="AutoScaleEvaluationInterval" /> property.</summary>
        private global::System.TimeSpan? _autoScaleEvaluationInterval;

        /// <summary>
        /// The time interval at which to automatically adjust the Pool size according to the autoscale formula. This property is
        /// set only if the Pool automatically scales, i.e. enableAutoScale is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? AutoScaleEvaluationInterval { get => this._autoScaleEvaluationInterval; }

        /// <summary>Backing field for <see cref="AutoScaleFormula" /> property.</summary>
        private string _autoScaleFormula;

        /// <summary>
        /// A formula for the desired number of Compute Nodes in the Pool. This property is set only if the Pool automatically scales,
        /// i.e. enableAutoScale is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string AutoScaleFormula { get => this._autoScaleFormula; }

        /// <summary>Backing field for <see cref="AutoScaleRun" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRun _autoScaleRun;

        /// <summary>
        /// The results and errors from the last execution of the autoscale formula. This property is set only if the Pool automatically
        /// scales, i.e. enableAutoScale is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRun AutoScaleRun { get => (this._autoScaleRun = this._autoScaleRun ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoScaleRun()); }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunClientRequestId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).ClientRequestId; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunDataServiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).DataServiceId; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunETag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).ETag; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunLastModified { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).LastModified; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunRequestId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).RequestId; }

        /// <summary>
        /// The final values of all variables used in the evaluation of the autoscale formula. Each variable value is returned in
        /// the form $variable=value, and variables are separated by semicolons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoScaleRunResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Result; }

        /// <summary>The time at which the autoscale formula was last evaluated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? AutoScaleRunTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Timestamp; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserScope = value ?? null; }

        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyDisableAutomaticRollback; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyDisableAutomaticRollback = value ?? default(bool); }

        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = value ?? default(bool); }

        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = value ?? default(bool); }

        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyUseRollingUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicyUseRollingUpgradePolicy = value ?? default(bool); }

        /// <summary>Backing field for <see cref="CertificateReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> _certificateReference;

        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get => this._certificateReference; }

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>
        /// An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Code; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingWorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="CreationTime" /> property.</summary>
        private global::System.DateTime? _creationTime;

        /// <summary>The creation time of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? CreationTime { get => this._creationTime; }

        /// <summary>Backing field for <see cref="CurrentDedicatedNode" /> property.</summary>
        private int? _currentDedicatedNode;

        /// <summary>The number of dedicated Compute Nodes currently in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? CurrentDedicatedNode { get => this._currentDedicatedNode; }

        /// <summary>Backing field for <see cref="CurrentLowPriorityNode" /> property.</summary>
        private int? _currentLowPriorityNode;

        /// <summary>
        /// The number of Spot/Low-priority Compute Nodes currently in the Pool. Spot/Low-priority Compute Nodes which have been preempted
        /// are included in this count.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? CurrentLowPriorityNode { get => this._currentLowPriorityNode; }

        /// <summary>Backing field for <see cref="CurrentNodeCommunicationMode" /> property.</summary>
        private string _currentNodeCommunicationMode;

        /// <summary>The current state of the pool communication mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CurrentNodeCommunicationMode { get => this._currentNodeCommunicationMode; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        /// <summary>
        /// The ETag of the Pool. This is an opaque string. You can use it to detect whether the Pool has changed between requests.
        /// In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody
        /// else has modified the Pool in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; }

        /// <summary>Backing field for <see cref="ETag1" /> property.</summary>
        private string _eTag1;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag1 { get => this._eTag1; set => this._eTag1 = value; }

        /// <summary>Backing field for <see cref="EnableAutoScale" /> property.</summary>
        private bool? _enableAutoScale;

        /// <summary>
        /// Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes
        /// must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to
        /// the formula. The default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? EnableAutoScale { get => this._enableAutoScale; }

        /// <summary>Backing field for <see cref="EnableInterNodeCommunication" /> property.</summary>
        private bool? _enableInterNodeCommunication;

        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. This imposes restrictions on which Compute Nodes
        /// can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be
        /// allocated in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? EnableInterNodeCommunication { get => this._enableInterNodeCommunication; }

        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EndpointConfigurationInboundNatPool; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within an Account that differ only by case).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentity _identity;

        /// <summary>
        /// The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity
        /// dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolIdentity()); }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).IdentityReferenceResourceId = value ?? null; }

        /// <summary>
        /// The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity
        /// dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentityInternal)Identity).Type; }

        /// <summary>
        /// The list of user identities associated with the Batch account. The user identity dictionary key references will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity> IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentityInternal)Identity).UserAssignedIdentity; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private global::System.DateTime? _lastModified;

        /// <summary>
        /// The last modified time of the Pool. This is the last time at which the Pool level data, such as the targetDedicatedNodes
        /// or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? LastModified { get => this._lastModified; }

        /// <summary>Backing field for <see cref="LastModified1" /> property.</summary>
        private string _lastModified1;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified1 { get => this._lastModified1; set => this._lastModified1 = value; }

        /// <summary>
        /// A message describing the autoscale error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Message; }

        /// <summary>Backing field for <see cref="Metadata" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> _metadata;

        /// <summary>A list of name-value pairs associated with the Pool as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get => this._metadata; }

        /// <summary>Internal Acessors for AllocationState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AllocationState { get => this._allocationState; set { {_allocationState = value;} } }

        /// <summary>Internal Acessors for AllocationStateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AllocationStateTransitionTime { get => this._allocationStateTransitionTime; set { {_allocationStateTransitionTime = value;} } }

        /// <summary>Internal Acessors for ApplicationPackageReference</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ApplicationPackageReference { get => this._applicationPackageReference; set { {_applicationPackageReference = value;} } }

        /// <summary>Internal Acessors for AutoScaleEvaluationInterval</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleEvaluationInterval { get => this._autoScaleEvaluationInterval; set { {_autoScaleEvaluationInterval = value;} } }

        /// <summary>Internal Acessors for AutoScaleFormula</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleFormula { get => this._autoScaleFormula; set { {_autoScaleFormula = value;} } }

        /// <summary>Internal Acessors for AutoScaleRun</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRun Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRun { get => (this._autoScaleRun = this._autoScaleRun ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoScaleRun()); set { {_autoScaleRun = value;} } }

        /// <summary>Internal Acessors for AutoScaleRunClientRequestId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunClientRequestId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).ClientRequestId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).ClientRequestId = value ?? null; }

        /// <summary>Internal Acessors for AutoScaleRunDataServiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunDataServiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).DataServiceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).DataServiceId = value ?? null; }

        /// <summary>Internal Acessors for AutoScaleRunETag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunETag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).ETag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).ETag = value ?? null; }

        /// <summary>Internal Acessors for AutoScaleRunError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunError Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Error; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Error = value ?? null /* model class */; }

        /// <summary>Internal Acessors for AutoScaleRunLastModified</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunLastModified { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).LastModified; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).LastModified = value ?? null; }

        /// <summary>Internal Acessors for AutoScaleRunRequestId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunRequestId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).RequestId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).RequestId = value ?? null; }

        /// <summary>Internal Acessors for AutoScaleRunResult</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Result = value ?? null; }

        /// <summary>Internal Acessors for AutoScaleRunTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.AutoScaleRunTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Timestamp = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for CertificateReference</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.CertificateReference { get => this._certificateReference; set { {_certificateReference = value;} } }

        /// <summary>Internal Acessors for Code</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Code = value ?? null; }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingRegistry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.CreationTime { get => this._creationTime; set { {_creationTime = value;} } }

        /// <summary>Internal Acessors for CurrentDedicatedNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.CurrentDedicatedNode { get => this._currentDedicatedNode; set { {_currentDedicatedNode = value;} } }

        /// <summary>Internal Acessors for CurrentLowPriorityNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.CurrentLowPriorityNode { get => this._currentLowPriorityNode; set { {_currentLowPriorityNode = value;} } }

        /// <summary>Internal Acessors for CurrentNodeCommunicationMode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.CurrentNodeCommunicationMode { get => this._currentNodeCommunicationMode; set { {_currentNodeCommunicationMode = value;} } }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.DisplayName { get => this._displayName; set { {_displayName = value;} } }

        /// <summary>Internal Acessors for ETag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ETag { get => this._eTag; set { {_eTag = value;} } }

        /// <summary>Internal Acessors for EnableAutoScale</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.EnableAutoScale { get => this._enableAutoScale; set { {_enableAutoScale = value;} } }

        /// <summary>Internal Acessors for EnableInterNodeCommunication</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.EnableInterNodeCommunication { get => this._enableInterNodeCommunication; set { {_enableInterNodeCommunication = value;} } }

        /// <summary>Internal Acessors for EndpointConfigurationInboundNatPool</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.EndpointConfigurationInboundNatPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EndpointConfigurationInboundNatPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EndpointConfigurationInboundNatPool = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>Internal Acessors for IdentityUserAssignedIdentity</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for LastModified</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.LastModified { get => this._lastModified; set { {_lastModified = value;} } }

        /// <summary>Internal Acessors for Message</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Message = value ?? null; }

        /// <summary>Internal Acessors for Metadata</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Metadata { get => this._metadata; set { {_metadata = value;} } }

        /// <summary>Internal Acessors for MountConfiguration</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.MountConfiguration { get => this._mountConfiguration; set { {_mountConfiguration = value;} } }

        /// <summary>Internal Acessors for NetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfiguration()); set { {_networkConfiguration = value;} } }

        /// <summary>Internal Acessors for NetworkConfigurationDynamicVnetAssignmentScope</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.NetworkConfigurationDynamicVnetAssignmentScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).DynamicVnetAssignmentScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).DynamicVnetAssignmentScope = value ?? null; }

        /// <summary>Internal Acessors for NetworkConfigurationEnableAcceleratedNetworking</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.NetworkConfigurationEnableAcceleratedNetworking { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EnableAcceleratedNetworking; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EnableAcceleratedNetworking = value ?? default(bool); }

        /// <summary>Internal Acessors for NetworkConfigurationEndpointConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.NetworkConfigurationEndpointConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EndpointConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EndpointConfiguration = value ?? null /* model class */; }

        /// <summary>Internal Acessors for NetworkConfigurationPublicIPAddressConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.NetworkConfigurationPublicIPAddressConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfiguration = value ?? null /* model class */; }

        /// <summary>Internal Acessors for NetworkConfigurationSubnetId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).SubnetId = value ?? null; }

        /// <summary>Internal Acessors for PoolStatistics</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatistics Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PoolStatistics { get => (this._poolStatistics = this._poolStatistics ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolStatistics()); set { {_poolStatistics = value;} } }

        /// <summary>Internal Acessors for PoolStatisticsLastUpdateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PoolStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).LastUpdateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).LastUpdateTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for PoolStatisticsResourceStatistics</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceStatistics Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PoolStatisticsResourceStatistics { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatistics; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatistics = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PoolStatisticsStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PoolStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for PoolStatisticsUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PoolStatisticsUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).Url = value ?? null; }

        /// <summary>Internal Acessors for PoolStatisticsUsageStatistics</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUsageStatistics Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PoolStatisticsUsageStatistics { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatistics; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatistics = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PublicIPAddressConfigurationIpaddressId</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PublicIPAddressConfigurationIpaddressId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressId = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for PublicIPAddressConfigurationIpaddressProvisioningType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.PublicIPAddressConfigurationIpaddressProvisioningType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressProvisioningType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressProvisioningType = value ?? null; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ResizeError</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResizeError { get => this._resizeError; set { {_resizeError = value;} } }

        /// <summary>Internal Acessors for ResizeTimeout</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResizeTimeout { get => this._resizeTimeout; set { {_resizeTimeout = value;} } }

        /// <summary>Internal Acessors for ResourceStatisticsAvgCpuPercentage</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsAvgCpuPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgCpuPercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgCpuPercentage = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsAvgDiskGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsAvgDiskGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgDiskGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgDiskGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsAvgMemoryGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsAvgMemoryGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgMemoryGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgMemoryGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsDiskReadGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsDiskReadGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskReadGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskReadGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsDiskReadIop</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsDiskReadIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskReadIop; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskReadIop = value ?? null; }

        /// <summary>Internal Acessors for ResourceStatisticsDiskWriteGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsDiskWriteGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskWriteGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskWriteGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsDiskWriteIop</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsDiskWriteIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskWriteIop; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskWriteIop = value ?? null; }

        /// <summary>Internal Acessors for ResourceStatisticsLastUpdateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsLastUpdateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsLastUpdateTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ResourceStatisticsNetworkReadGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsNetworkReadGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsNetworkReadGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsNetworkReadGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsNetworkWriteGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsNetworkWriteGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsNetworkWriteGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsNetworkWriteGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsPeakDiskGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsPeakDiskGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsPeakDiskGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsPeakDiskGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsPeakMemoryGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsPeakMemoryGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsPeakMemoryGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsPeakMemoryGiB = value ?? default(float); }

        /// <summary>Internal Acessors for ResourceStatisticsStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsStartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ResourceTag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.ResourceTag { get => (this._resourceTag = this._resourceTag ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolResourceTags()); set { {_resourceTag = value;} } }

        /// <summary>Internal Acessors for StartTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.StartTask { get => (this._startTask = this._startTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTask()); set { {_startTask = value;} } }

        /// <summary>Internal Acessors for StartTaskContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.StartTaskContainerSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTaskUserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.StartTaskUserIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for StateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.StateTransitionTime { get => this._stateTransitionTime; set { {_stateTransitionTime = value;} } }

        /// <summary>Internal Acessors for TargetDedicatedNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.TargetDedicatedNode { get => this._targetDedicatedNode; set { {_targetDedicatedNode = value;} } }

        /// <summary>Internal Acessors for TargetLowPriorityNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.TargetLowPriorityNode { get => this._targetLowPriorityNode; set { {_targetLowPriorityNode = value;} } }

        /// <summary>Internal Acessors for TaskSchedulingPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.TaskSchedulingPolicy { get => (this._taskSchedulingPolicy = this._taskSchedulingPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicy()); set { {_taskSchedulingPolicy = value;} } }

        /// <summary>Internal Acessors for TaskSchedulingPolicyNodeFillType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.TaskSchedulingPolicyNodeFillType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyInternal)TaskSchedulingPolicy).NodeFillType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyInternal)TaskSchedulingPolicy).NodeFillType = value ?? null; }

        /// <summary>Internal Acessors for TaskSlotsPerNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.TaskSlotsPerNode { get => this._taskSlotsPerNode; set { {_taskSlotsPerNode = value;} } }

        /// <summary>Internal Acessors for UpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UpgradePolicy { get => (this._upgradePolicy = this._upgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicy()); set { {_upgradePolicy = value;} } }

        /// <summary>Internal Acessors for UpgradePolicyAutomaticOSUpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UpgradePolicyAutomaticOSUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).AutomaticOSUpgradePolicy = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UpgradePolicyRollingUpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UpgradePolicyRollingUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicy = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Url</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Url { get => this._url; set { {_url = value;} } }

        /// <summary>Internal Acessors for UsageStatisticsDedicatedCoreTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UsageStatisticsDedicatedCoreTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsDedicatedCoreTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsDedicatedCoreTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for UsageStatisticsLastUpdateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UsageStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsLastUpdateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsLastUpdateTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for UsageStatisticsStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UsageStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsStartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for UserAccount</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UserAccount { get => this._userAccount; set { {_userAccount = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityAutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityAutoUser = value ?? null /* model class */; }

        /// <summary>Internal Acessors for VMSize</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.VMSize { get => this._vMSize; set { {_vMSize = value;} } }

        /// <summary>Internal Acessors for Value</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.Value { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Value = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for VirtualMachineConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal.VirtualMachineConfiguration { get => (this._virtualMachineConfiguration = this._virtualMachineConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfiguration()); set { {_virtualMachineConfiguration = value;} } }

        /// <summary>Backing field for <see cref="MountConfiguration" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> _mountConfiguration;

        /// <summary>
        /// A list of file systems to mount on each node in the pool. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> MountConfiguration { get => this._mountConfiguration; }

        /// <summary>Backing field for <see cref="NetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfiguration _networkConfiguration;

        /// <summary>The network configuration for the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfiguration NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfiguration()); }

        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationDynamicVnetAssignmentScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).DynamicVnetAssignmentScope; }

        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? NetworkConfigurationEnableAcceleratedNetworking { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).EnableAcceleratedNetworking; }

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).SubnetId; }

        /// <summary>Backing field for <see cref="PoolStatistics" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatistics _poolStatistics;

        /// <summary>
        /// Utilization and resource usage statistics for the entire lifetime of the Pool. This property is populated only if the
        /// BatchPool was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may
        /// not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30
        /// minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatistics PoolStatistics { get => (this._poolStatistics = this._poolStatistics ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolStatistics()); }

        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? PoolStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).LastUpdateTime; }

        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? PoolStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).StartTime; }

        /// <summary>The URL for the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PoolStatisticsUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).Url; }

        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressId; }

        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PublicIPAddressConfigurationIpaddressProvisioningType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressProvisioningType; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Backing field for <see cref="ResizeError" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError> _resizeError;

        /// <summary>
        /// A list of errors encountered while performing the last resize on the Pool. This property is set only if one or more errors
        /// occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError> ResizeError { get => this._resizeError; }

        /// <summary>Backing field for <see cref="ResizeTimeout" /> property.</summary>
        private global::System.TimeSpan? _resizeTimeout;

        /// <summary>
        /// The timeout for allocation of Compute Nodes to the Pool. This is the timeout for the most recent resize operation. (The
        /// initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? ResizeTimeout { get => this._resizeTimeout; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsAvgCpuPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgCpuPercentage; }

        /// <summary>The average used disk space in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsAvgDiskGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgDiskGiB; }

        /// <summary>The average memory usage in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsAvgMemoryGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsAvgMemoryGiB; }

        /// <summary>
        /// The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsDiskReadGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskReadGiB; }

        /// <summary>The total number of disk read operations across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ResourceStatisticsDiskReadIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskReadIop; }

        /// <summary>
        /// The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsDiskWriteGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskWriteGiB; }

        /// <summary>The total number of disk write operations across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ResourceStatisticsDiskWriteIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsDiskWriteIop; }

        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ResourceStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsLastUpdateTime; }

        /// <summary>
        /// The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsNetworkReadGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsNetworkReadGiB; }

        /// <summary>
        /// The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsNetworkWriteGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsNetworkWriteGiB; }

        /// <summary>The peak used disk space in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsPeakDiskGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsPeakDiskGiB; }

        /// <summary>The peak memory usage in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? ResourceStatisticsPeakMemoryGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsPeakMemoryGiB; }

        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ResourceStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).ResourceStatisticsStartTime; }

        /// <summary>Backing field for <see cref="ResourceTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags _resourceTag;

        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags ResourceTag { get => (this._resourceTag = this._resourceTag ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolResourceTags()); }

        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyEnableCrossZoneUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyEnableCrossZoneUpgrade = value ?? default(bool); }

        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxBatchInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyMaxBatchInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyMaxBatchInstancePercent = value ?? default(int); }

        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyInstancePercent = value ?? default(int); }

        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = value ?? default(int); }

        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? RollingUpgradePolicyPauseTimeBetweenBatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyPauseTimeBetweenBatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyPauseTimeBetweenBatch = value ?? default(global::System.TimeSpan); }

        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyPrioritizeUnhealthyInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyPrioritizeUnhealthyInstance = value ?? default(bool); }

        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = value ?? default(bool); }

        /// <summary>Backing field for <see cref="StartTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask _startTask;

        /// <summary>A Task specified to run on each Compute Node as it joins the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask StartTask { get => (this._startTask = this._startTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTask()); set => this._startTask = value; }

        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string StartTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).CommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).CommandLine = value ?? null; }

        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).EnvironmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).EnvironmentSetting = value ?? null /* arrayOf */; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? StartTaskMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ResourceFile = value ?? null /* arrayOf */; }

        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? StartTaskWaitForSuccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).WaitForSuccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).WaitForSuccess = value ?? default(bool); }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The current state of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Backing field for <see cref="StateTransitionTime" /> property.</summary>
        private global::System.DateTime? _stateTransitionTime;

        /// <summary>The time at which the Pool entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StateTransitionTime { get => this._stateTransitionTime; }

        /// <summary>Backing field for <see cref="TargetDedicatedNode" /> property.</summary>
        private int? _targetDedicatedNode;

        /// <summary>The desired number of dedicated Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? TargetDedicatedNode { get => this._targetDedicatedNode; }

        /// <summary>Backing field for <see cref="TargetLowPriorityNode" /> property.</summary>
        private int? _targetLowPriorityNode;

        /// <summary>The desired number of Spot/Low-priority Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? TargetLowPriorityNode { get => this._targetLowPriorityNode; }

        /// <summary>Backing field for <see cref="TargetNodeCommunicationMode" /> property.</summary>
        private string _targetNodeCommunicationMode;

        /// <summary>
        /// The desired node communication mode for the pool. If omitted, the default value is Default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TargetNodeCommunicationMode { get => this._targetNodeCommunicationMode; set => this._targetNodeCommunicationMode = value; }

        /// <summary>Backing field for <see cref="TaskSchedulingPolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicy _taskSchedulingPolicy;

        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicy TaskSchedulingPolicy { get => (this._taskSchedulingPolicy = this._taskSchedulingPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicy()); }

        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string TaskSchedulingPolicyNodeFillType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyInternal)TaskSchedulingPolicy).NodeFillType; }

        /// <summary>Backing field for <see cref="TaskSlotsPerNode" /> property.</summary>
        private int? _taskSlotsPerNode;

        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? TaskSlotsPerNode { get => this._taskSlotsPerNode; }

        /// <summary>Backing field for <see cref="UpgradePolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicy _upgradePolicy;

        /// <summary>
        /// The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicy UpgradePolicy { get => (this._upgradePolicy = this._upgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicy()); set => this._upgradePolicy = value; }

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UpgradePolicyMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).Mode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyInternal)UpgradePolicy).Mode = value ?? null; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>The URL of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Url { get => this._url; }

        /// <summary>
        /// The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? UsageStatisticsDedicatedCoreTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsDedicatedCoreTime; }

        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? UsageStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsLastUpdateTime; }

        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? UsageStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatisticsInternal)PoolStatistics).UsageStatisticsStartTime; }

        /// <summary>Backing field for <see cref="UserAccount" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> _userAccount;

        /// <summary>The list of user Accounts to be created on each Compute Node in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> UserAccount { get => this._userAccount; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityUsername = value ?? null; }

        /// <summary>Backing field for <see cref="VMSize" /> property.</summary>
        private string _vMSize;

        /// <summary>
        /// The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available
        /// VM sizes, see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string VMSize { get => this._vMSize; }

        /// <summary>A list of additional error details related to the autoscale error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Value { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunInternal)AutoScaleRun).Value; }

        /// <summary>Backing field for <see cref="VirtualMachineConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration _virtualMachineConfiguration;

        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration VirtualMachineConfiguration { get => (this._virtualMachineConfiguration = this._virtualMachineConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfiguration()); }

        /// <summary>Creates an new <see cref="BatchPool" /> instance.</summary>
        public BatchPool()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag1 = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified1 = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader1) is string __headerLastModifiedHeader1 ? __headerLastModifiedHeader1 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader2) is string __headerClientRequestIdHeader2 ? __headerClientRequestIdHeader2 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader3) is string __headerRequestIdHeader3 ? __headerRequestIdHeader3 : (string)null;
            }
            if (headers.TryGetValues("DataServiceId", out var __dataServiceIdHeader4))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunDataServiceId = System.Linq.Enumerable.FirstOrDefault(__dataServiceIdHeader4) is string __headerDataServiceIdHeader4 ? __headerDataServiceIdHeader4 : (string)null;
            }
            if (headers.TryGetValues("ETag", out var __eTagHeader5))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader5) is string __headerETagHeader5 ? __headerETagHeader5 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader6))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunLastModified = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader6) is string __headerLastModifiedHeader6 ? __headerLastModifiedHeader6 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader7))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader7) is string __headerClientRequestIdHeader7 ? __headerClientRequestIdHeader7 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader8))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunRequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader8) is string __headerRequestIdHeader8 ? __headerRequestIdHeader8 : (string)null;
            }
        }
    }
    /// A Pool in the Azure Batch service.
    public partial interface IBatchPool :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>Whether the Pool is resizing.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Whether the Pool is resizing.",
        SerializedName = @"allocationState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("steady", "resizing", "stopping")]
        string AllocationState { get;  }
        /// <summary>The time at which the Pool entered its current allocation state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Pool entered its current allocation state.",
        SerializedName = @"allocationStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AllocationStateTransitionTime { get;  }
        /// <summary>
        /// The list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes
        /// joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There
        /// is a maximum of 10 Package references on any given Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.",
        SerializedName = @"applicationPackageReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get;  }
        /// <summary>
        /// The time interval at which to automatically adjust the Pool size according to the autoscale formula. This property is
        /// set only if the Pool automatically scales, i.e. enableAutoScale is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time interval at which to automatically adjust the Pool size according to the autoscale formula. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.",
        SerializedName = @"autoScaleEvaluationInterval",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoScaleEvaluationInterval { get;  }
        /// <summary>
        /// A formula for the desired number of Compute Nodes in the Pool. This property is set only if the Pool automatically scales,
        /// i.e. enableAutoScale is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A formula for the desired number of Compute Nodes in the Pool. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.",
        SerializedName = @"autoScaleFormula",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleFormula { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunClientRequestId { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"DataServiceId",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunDataServiceId { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunETag { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunLastModified { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunRequestId { get;  }
        /// <summary>
        /// The final values of all variables used in the evaluation of the autoscale formula. Each variable value is returned in
        /// the form $variable=value, and variables are separated by semicolons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The final values of all variables used in the evaluation of the autoscale formula. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.",
        SerializedName = @"results",
        PossibleTypes = new [] { typeof(string) })]
        string AutoScaleRunResult { get;  }
        /// <summary>The time at which the autoscale formula was last evaluated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the autoscale formula was last evaluated.",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AutoScaleRunTimestamp { get;  }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether OS image rollback feature should be disabled.",
        SerializedName = @"disableAutomaticRollback",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get; set; }
        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration) cannot be set to true.",
        SerializedName = @"enableAutomaticOSUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get; set; }
        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defer OS upgrades on the TVMs if they are running tasks.",
        SerializedName = @"osRollingUpgradeDeferral",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get; set; }
        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.",
        SerializedName = @"useRollingUpgradePolicy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get; set; }
        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.",
        SerializedName = @"certificateReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }
        /// <summary>
        /// An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string Code { get;  }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>The creation time of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The creation time of the Pool.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTime { get;  }
        /// <summary>The number of dedicated Compute Nodes currently in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of dedicated Compute Nodes currently in the Pool.",
        SerializedName = @"currentDedicatedNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? CurrentDedicatedNode { get;  }
        /// <summary>
        /// The number of Spot/Low-priority Compute Nodes currently in the Pool. Spot/Low-priority Compute Nodes which have been preempted
        /// are included in this count.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of Spot/Low-priority Compute Nodes currently in the Pool. Spot/Low-priority Compute Nodes which have been preempted are included in this count.",
        SerializedName = @"currentLowPriorityNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? CurrentLowPriorityNode { get;  }
        /// <summary>The current state of the pool communication mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The current state of the pool communication mode.",
        SerializedName = @"currentNodeCommunicationMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        string CurrentNodeCommunicationMode { get;  }
        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>
        /// The ETag of the Pool. This is an opaque string. You can use it to detect whether the Pool has changed between requests.
        /// In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody
        /// else has modified the Pool in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ETag of the Pool. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.",
        SerializedName = @"eTag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag1 { get; set; }
        /// <summary>
        /// Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes
        /// must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to
        /// the formula. The default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.",
        SerializedName = @"enableAutoScale",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAutoScale { get;  }
        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. This imposes restrictions on which Compute Nodes
        /// can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be
        /// allocated in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Whether the Pool permits direct communication between Compute Nodes. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.",
        SerializedName = @"enableInterNodeCommunication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableInterNodeCommunication { get;  }
        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.",
        SerializedName = @"inboundNATPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get;  }
        /// <summary>
        /// A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within an Account that differ only by case).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity
        /// dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("UserAssigned", "None")]
        string IdentityType { get;  }
        /// <summary>
        /// The list of user identities associated with the Batch account. The user identity dictionary key references will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of user identities associated with the Batch account. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity> IdentityUserAssignedIdentity { get;  }
        /// <summary>
        /// The last modified time of the Pool. This is the last time at which the Pool level data, such as the targetDedicatedNodes
        /// or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The last modified time of the Pool. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.",
        SerializedName = @"lastModified",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModified { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified1 { get; set; }
        /// <summary>
        /// A message describing the autoscale error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A message describing the autoscale error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string Message { get;  }
        /// <summary>A list of name-value pairs associated with the Pool as metadata.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of name-value pairs associated with the Pool as metadata.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get;  }
        /// <summary>
        /// A list of file systems to mount on each node in the pool. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of file systems to mount on each node in the pool. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.",
        SerializedName = @"mountConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> MountConfiguration { get;  }
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The scope of dynamic vnet assignment.",
        SerializedName = @"dynamicVNetAssignmentScope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        string NetworkConfigurationDynamicVnetAssignmentScope { get;  }
        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.",
        SerializedName = @"enableAcceleratedNetworking",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NetworkConfigurationEnableAcceleratedNetworking { get;  }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication, including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see: https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkConfigurationSubnetId { get;  }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PoolStatisticsLastUpdateTime { get;  }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The start time of the time range covered by the statistics.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PoolStatisticsStartTime { get;  }
        /// <summary>The URL for the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL for the statistics.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string PoolStatisticsUrl { get;  }
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get;  }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string PublicIPAddressConfigurationIpaddressProvisioningType { get;  }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>
        /// A list of errors encountered while performing the last resize on the Pool. This property is set only if one or more errors
        /// occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of errors encountered while performing the last resize on the Pool. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.",
        SerializedName = @"resizeErrors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError> ResizeError { get;  }
        /// <summary>
        /// The timeout for allocation of Compute Nodes to the Pool. This is the timeout for the most recent resize operation. (The
        /// initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timeout for allocation of Compute Nodes to the Pool. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.",
        SerializedName = @"resizeTimeout",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ResizeTimeout { get;  }
        /// <summary>
        /// The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The average CPU usage across all Compute Nodes in the Pool (percentage per node).",
        SerializedName = @"avgCPUPercentage",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsAvgCpuPercentage { get;  }
        /// <summary>The average used disk space in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The average used disk space in GiB across all Compute Nodes in the Pool.",
        SerializedName = @"avgDiskGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsAvgDiskGiB { get;  }
        /// <summary>The average memory usage in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The average memory usage in GiB across all Compute Nodes in the Pool.",
        SerializedName = @"avgMemoryGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsAvgMemoryGiB { get;  }
        /// <summary>
        /// The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.",
        SerializedName = @"diskReadGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsDiskReadGiB { get;  }
        /// <summary>The total number of disk read operations across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of disk read operations across all Compute Nodes in the Pool.",
        SerializedName = @"diskReadIOps",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceStatisticsDiskReadIop { get;  }
        /// <summary>
        /// The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.",
        SerializedName = @"diskWriteGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsDiskWriteGiB { get;  }
        /// <summary>The total number of disk write operations across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of disk write operations across all Compute Nodes in the Pool.",
        SerializedName = @"diskWriteIOps",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceStatisticsDiskWriteIop { get;  }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ResourceStatisticsLastUpdateTime { get;  }
        /// <summary>
        /// The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total amount of data in GiB of network reads across all Compute Nodes in the Pool.",
        SerializedName = @"networkReadGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsNetworkReadGiB { get;  }
        /// <summary>
        /// The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total amount of data in GiB of network writes across all Compute Nodes in the Pool.",
        SerializedName = @"networkWriteGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsNetworkWriteGiB { get;  }
        /// <summary>The peak used disk space in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The peak used disk space in GiB across all Compute Nodes in the Pool.",
        SerializedName = @"peakDiskGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsPeakDiskGiB { get;  }
        /// <summary>The peak memory usage in GiB across all Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The peak memory usage in GiB across all Compute Nodes in the Pool.",
        SerializedName = @"peakMemoryGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? ResourceStatisticsPeakMemoryGiB { get;  }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The start time of the time range covered by the statistics.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ResourceStatisticsStartTime { get;  }
        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.",
        SerializedName = @"resourceTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags ResourceTag { get;  }
        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.",
        SerializedName = @"enableCrossZoneUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get; set; }
        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxBatchInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxBatchInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxUnhealthyInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive.",
        SerializedName = @"maxUnhealthyUpgradedInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format..",
        SerializedName = @"pauseTimeBetweenBatches",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RollingUpgradePolicyPauseTimeBetweenBatch { get; set; }
        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Upgrade all unhealthy instances in a scale set before any healthy instances.",
        SerializedName = @"prioritizeUnhealthyInstances",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get; set; }
        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Rollback failed instances to previous model if the Rolling Upgrade policy is violated.",
        SerializedName = @"rollbackFailedInstancesOnPolicyBreach",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string StartTaskCommandLine { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the StartTask.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>The current state of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The current state of the Pool.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "deleting")]
        string State { get;  }
        /// <summary>The time at which the Pool entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Pool entered its current state.",
        SerializedName = @"stateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StateTransitionTime { get;  }
        /// <summary>The desired number of dedicated Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The desired number of dedicated Compute Nodes in the Pool.",
        SerializedName = @"targetDedicatedNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? TargetDedicatedNode { get;  }
        /// <summary>The desired number of Spot/Low-priority Compute Nodes in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The desired number of Spot/Low-priority Compute Nodes in the Pool.",
        SerializedName = @"targetLowPriorityNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? TargetLowPriorityNode { get;  }
        /// <summary>
        /// The desired node communication mode for the pool. If omitted, the default value is Default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The desired node communication mode for the pool. If omitted, the default value is Default.",
        SerializedName = @"targetNodeCommunicationMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        string TargetNodeCommunicationMode { get; set; }
        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.",
        SerializedName = @"nodeFillType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("spread", "pack")]
        string TaskSchedulingPolicyNodeFillType { get;  }
        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.",
        SerializedName = @"taskSlotsPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? TaskSlotsPerNode { get;  }
        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("automatic", "manual", "rolling")]
        string UpgradePolicyMode { get; set; }
        /// <summary>The URL of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the Pool.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get;  }
        /// <summary>
        /// The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.",
        SerializedName = @"dedicatedCoreTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? UsageStatisticsDedicatedCoreTime { get;  }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UsageStatisticsLastUpdateTime { get;  }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The start time of the time range covered by the statistics.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UsageStatisticsStartTime { get;  }
        /// <summary>The list of user Accounts to be created on each Compute Node in the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of user Accounts to be created on each Compute Node in the Pool.",
        SerializedName = @"userAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> UserAccount { get;  }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available
        /// VM sizes, see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available VM sizes, see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        string VMSize { get;  }
        /// <summary>A list of additional error details related to the autoscale error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of additional error details related to the autoscale error.",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Value { get;  }
        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The virtual machine configuration for the Pool. This property must be specified.",
        SerializedName = @"virtualMachineConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration VirtualMachineConfiguration { get;  }

    }
    /// A Pool in the Azure Batch service.
    internal partial interface IBatchPoolInternal

    {
        /// <summary>Whether the Pool is resizing.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("steady", "resizing", "stopping")]
        string AllocationState { get; set; }
        /// <summary>The time at which the Pool entered its current allocation state.</summary>
        global::System.DateTime? AllocationStateTransitionTime { get; set; }
        /// <summary>
        /// The list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes
        /// joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There
        /// is a maximum of 10 Package references on any given Pool.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get; set; }
        /// <summary>
        /// The time interval at which to automatically adjust the Pool size according to the autoscale formula. This property is
        /// set only if the Pool automatically scales, i.e. enableAutoScale is true.
        /// </summary>
        global::System.TimeSpan? AutoScaleEvaluationInterval { get; set; }
        /// <summary>
        /// A formula for the desired number of Compute Nodes in the Pool. This property is set only if the Pool automatically scales,
        /// i.e. enableAutoScale is true.
        /// </summary>
        string AutoScaleFormula { get; set; }
        /// <summary>
        /// The results and errors from the last execution of the autoscale formula. This property is set only if the Pool automatically
        /// scales, i.e. enableAutoScale is true.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRun AutoScaleRun { get; set; }

        string AutoScaleRunClientRequestId { get; set; }

        string AutoScaleRunDataServiceId { get; set; }

        string AutoScaleRunETag { get; set; }
        /// <summary>
        /// Details of the error encountered evaluating the autoscale formula on the Pool, if the evaluation was unsuccessful.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunError AutoScaleRunError { get; set; }

        string AutoScaleRunLastModified { get; set; }

        string AutoScaleRunRequestId { get; set; }
        /// <summary>
        /// The final values of all variables used in the evaluation of the autoscale formula. Each variable value is returned in
        /// the form $variable=value, and variables are separated by semicolons.
        /// </summary>
        string AutoScaleRunResult { get; set; }
        /// <summary>The time at which the autoscale formula was last evaluated.</summary>
        global::System.DateTime? AutoScaleRunTimestamp { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get; set; }
        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get; set; }
        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get; set; }
        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get; set; }
        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get; set; }

        string ClientRequestId { get; set; }
        /// <summary>
        /// An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string Code { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>The creation time of the Pool.</summary>
        global::System.DateTime? CreationTime { get; set; }
        /// <summary>The number of dedicated Compute Nodes currently in the Pool.</summary>
        int? CurrentDedicatedNode { get; set; }
        /// <summary>
        /// The number of Spot/Low-priority Compute Nodes currently in the Pool. Spot/Low-priority Compute Nodes which have been preempted
        /// are included in this count.
        /// </summary>
        int? CurrentLowPriorityNode { get; set; }
        /// <summary>The current state of the pool communication mode.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        string CurrentNodeCommunicationMode { get; set; }
        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The ETag of the Pool. This is an opaque string. You can use it to detect whether the Pool has changed between requests.
        /// In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody
        /// else has modified the Pool in the meantime.
        /// </summary>
        string ETag { get; set; }

        string ETag1 { get; set; }
        /// <summary>
        /// Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes
        /// must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to
        /// the formula. The default value is false.
        /// </summary>
        bool? EnableAutoScale { get; set; }
        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. This imposes restrictions on which Compute Nodes
        /// can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be
        /// allocated in the Pool.
        /// </summary>
        bool? EnableInterNodeCommunication { get; set; }
        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within an Account that differ only by case).
        /// </summary>
        string Id { get; set; }
        /// <summary>
        /// The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity
        /// dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentity Identity { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity
        /// dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("UserAssigned", "None")]
        string IdentityType { get; set; }
        /// <summary>
        /// The list of user identities associated with the Batch account. The user identity dictionary key references will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity> IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// The last modified time of the Pool. This is the last time at which the Pool level data, such as the targetDedicatedNodes
        /// or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        /// </summary>
        global::System.DateTime? LastModified { get; set; }

        string LastModified1 { get; set; }
        /// <summary>
        /// A message describing the autoscale error, intended to be suitable for display in a user interface.
        /// </summary>
        string Message { get; set; }
        /// <summary>A list of name-value pairs associated with the Pool as metadata.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// A list of file systems to mount on each node in the pool. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> MountConfiguration { get; set; }
        /// <summary>The network configuration for the Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        string NetworkConfigurationDynamicVnetAssignmentScope { get; set; }
        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        bool? NetworkConfigurationEnableAcceleratedNetworking { get; set; }
        /// <summary>The configuration for endpoints on Compute Nodes in the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfiguration NetworkConfigurationEndpointConfiguration { get; set; }
        /// <summary>The Public IPAddress configuration for Compute Nodes in the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration NetworkConfigurationPublicIPAddressConfiguration { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>
        /// Utilization and resource usage statistics for the entire lifetime of the Pool. This property is populated only if the
        /// BatchPool was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may
        /// not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30
        /// minutes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatistics PoolStatistics { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        global::System.DateTime? PoolStatisticsLastUpdateTime { get; set; }
        /// <summary>Statistics related to resource consumption by Compute Nodes in the Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceStatistics PoolStatisticsResourceStatistics { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        global::System.DateTime? PoolStatisticsStartTime { get; set; }
        /// <summary>The URL for the statistics.</summary>
        string PoolStatisticsUrl { get; set; }
        /// <summary>Statistics related to Pool usage, such as the amount of core-time used.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUsageStatistics PoolStatisticsUsageStatistics { get; set; }
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string PublicIPAddressConfigurationIpaddressProvisioningType { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }

        string RequestId { get; set; }
        /// <summary>
        /// A list of errors encountered while performing the last resize on the Pool. This property is set only if one or more errors
        /// occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError> ResizeError { get; set; }
        /// <summary>
        /// The timeout for allocation of Compute Nodes to the Pool. This is the timeout for the most recent resize operation. (The
        /// initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        /// </summary>
        global::System.TimeSpan? ResizeTimeout { get; set; }
        /// <summary>
        /// The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        /// </summary>
        float? ResourceStatisticsAvgCpuPercentage { get; set; }
        /// <summary>The average used disk space in GiB across all Compute Nodes in the Pool.</summary>
        float? ResourceStatisticsAvgDiskGiB { get; set; }
        /// <summary>The average memory usage in GiB across all Compute Nodes in the Pool.</summary>
        float? ResourceStatisticsAvgMemoryGiB { get; set; }
        /// <summary>
        /// The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        /// </summary>
        float? ResourceStatisticsDiskReadGiB { get; set; }
        /// <summary>The total number of disk read operations across all Compute Nodes in the Pool.</summary>
        string ResourceStatisticsDiskReadIop { get; set; }
        /// <summary>
        /// The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        /// </summary>
        float? ResourceStatisticsDiskWriteGiB { get; set; }
        /// <summary>The total number of disk write operations across all Compute Nodes in the Pool.</summary>
        string ResourceStatisticsDiskWriteIop { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        global::System.DateTime? ResourceStatisticsLastUpdateTime { get; set; }
        /// <summary>
        /// The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        /// </summary>
        float? ResourceStatisticsNetworkReadGiB { get; set; }
        /// <summary>
        /// The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        /// </summary>
        float? ResourceStatisticsNetworkWriteGiB { get; set; }
        /// <summary>The peak used disk space in GiB across all Compute Nodes in the Pool.</summary>
        float? ResourceStatisticsPeakDiskGiB { get; set; }
        /// <summary>The peak memory usage in GiB across all Compute Nodes in the Pool.</summary>
        float? ResourceStatisticsPeakMemoryGiB { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        global::System.DateTime? ResourceStatisticsStartTime { get; set; }
        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags ResourceTag { get; set; }
        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get; set; }
        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        int? RollingUpgradePolicyMaxBatchInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        global::System.TimeSpan? RollingUpgradePolicyPauseTimeBetweenBatch { get; set; }
        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get; set; }
        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get; set; }
        /// <summary>A Task specified to run on each Compute Node as it joins the Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask StartTask { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string StartTaskCommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the StartTask runs. When this is specified, all directories recursively below
        /// the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment
        /// variables are mapped into the container, and the Task command line is executed in the container. Files produced in the
        /// container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will
        /// not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings StartTaskContainerSetting { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get; set; }
        /// <summary>
        /// The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the
        /// Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity StartTaskUserIdentity { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>The current state of the Pool.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "deleting")]
        string State { get; set; }
        /// <summary>The time at which the Pool entered its current state.</summary>
        global::System.DateTime? StateTransitionTime { get; set; }
        /// <summary>The desired number of dedicated Compute Nodes in the Pool.</summary>
        int? TargetDedicatedNode { get; set; }
        /// <summary>The desired number of Spot/Low-priority Compute Nodes in the Pool.</summary>
        int? TargetLowPriorityNode { get; set; }
        /// <summary>
        /// The desired node communication mode for the pool. If omitted, the default value is Default.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        string TargetNodeCommunicationMode { get; set; }
        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("spread", "pack")]
        string TaskSchedulingPolicyNodeFillType { get; set; }
        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        int? TaskSlotsPerNode { get; set; }
        /// <summary>
        /// The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicy UpgradePolicy { get; set; }
        /// <summary>
        /// Configuration parameters used for performing automatic OS Upgrade. The configuration parameters used for performing automatic
        /// OS upgrade.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy UpgradePolicyAutomaticOSUpgradePolicy { get; set; }
        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("automatic", "manual", "rolling")]
        string UpgradePolicyMode { get; set; }
        /// <summary>The configuration parameters used while performing a rolling upgrade.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy UpgradePolicyRollingUpgradePolicy { get; set; }
        /// <summary>The URL of the Pool.</summary>
        string Url { get; set; }
        /// <summary>
        /// The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        /// </summary>
        global::System.TimeSpan? UsageStatisticsDedicatedCoreTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        global::System.DateTime? UsageStatisticsLastUpdateTime { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        global::System.DateTime? UsageStatisticsStartTime { get; set; }
        /// <summary>The list of user Accounts to be created on each Compute Node in the Pool.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> UserAccount { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available
        /// VM sizes, see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </summary>
        string VMSize { get; set; }
        /// <summary>A list of additional error details related to the autoscale error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Value { get; set; }
        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration VirtualMachineConfiguration { get; set; }

    }
}