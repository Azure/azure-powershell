// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A Job Schedule that allows recurring Jobs by specifying when to run Jobs and a
    /// specification used to create each Job.
    /// </summary>
    public partial class BatchJobSchedule
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject into a new instance of <see cref="BatchJobSchedule" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal BatchJobSchedule(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_schedule = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("schedule"), out var __jsonSchedule) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobScheduleConfiguration.FromJson(__jsonSchedule) : _schedule;}
            {_executionInfo = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("executionInfo"), out var __jsonExecutionInfo) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobScheduleExecutionInfo.FromJson(__jsonExecutionInfo) : _executionInfo;}
            {_jobScheduleStatistics = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("stats"), out var __jsonStats) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobScheduleStatistics.FromJson(__jsonStats) : _jobScheduleStatistics;}
            {_id = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("id"), out var __jsonId) ? (string)__jsonId : (string)_id;}
            {_displayName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("displayName"), out var __jsonDisplayName) ? (string)__jsonDisplayName : (string)_displayName;}
            {_url = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("url"), out var __jsonUrl) ? (string)__jsonUrl : (string)_url;}
            {_eTag = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("eTag"), out var __jsonETag) ? (string)__jsonETag : (string)_eTag;}
            {_lastModified = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("lastModified"), out var __jsonLastModified) ? global::System.DateTime.TryParse((string)__jsonLastModified, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastModifiedValue) ? __jsonLastModifiedValue : _lastModified : _lastModified;}
            {_creationTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("creationTime"), out var __jsonCreationTime) ? global::System.DateTime.TryParse((string)__jsonCreationTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonCreationTimeValue) ? __jsonCreationTimeValue : _creationTime : _creationTime;}
            {_state = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("state"), out var __jsonState) ? (string)__jsonState : (string)_state;}
            {_stateTransitionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("stateTransitionTime"), out var __jsonStateTransitionTime) ? global::System.DateTime.TryParse((string)__jsonStateTransitionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonStateTransitionTimeValue) ? __jsonStateTransitionTimeValue : _stateTransitionTime : _stateTransitionTime;}
            {_previousState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("previousState"), out var __jsonPreviousState) ? (string)__jsonPreviousState : (string)_previousState;}
            {_previousStateTransitionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("previousStateTransitionTime"), out var __jsonPreviousStateTransitionTime) ? global::System.DateTime.TryParse((string)__jsonPreviousStateTransitionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonPreviousStateTransitionTimeValue) ? __jsonPreviousStateTransitionTimeValue : _previousStateTransitionTime : _previousStateTransitionTime;}
            {_metadata = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("metadata"), out var __jsonMetadata) ? If( __jsonMetadata as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItem.FromJson(__u) )) ))() : null : _metadata;}
            {_jobSpecification = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("jobSpecification"), out var __jsonJobSpecification) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobSpecification.FromJson(__jsonJobSpecification) : _jobSpecification;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedule.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedule.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedule FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json ? new BatchJobSchedule(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="BatchJobSchedule" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="BatchJobSchedule" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._schedule ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._schedule.ToJson(null,serializationMode) : null, "schedule" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._executionInfo ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._executionInfo.ToJson(null,serializationMode) : null, "executionInfo" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._jobScheduleStatistics ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._jobScheduleStatistics.ToJson(null,serializationMode) : null, "stats" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._id)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._id.ToString()) : null, "id" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._displayName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._displayName.ToString()) : null, "displayName" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._url)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._url.ToString()) : null, "url" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._eTag)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._eTag.ToString()) : null, "eTag" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._lastModified ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._lastModified?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastModified" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._creationTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._creationTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "creationTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._state)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._state.ToString()) : null, "state" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._stateTransitionTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._stateTransitionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "stateTransitionTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._previousState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._previousState.ToString()) : null, "previousState" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._previousStateTransitionTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._previousStateTransitionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "previousStateTransitionTime" ,container.Add );
            }
            if (null != this._metadata)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __x in this._metadata )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("metadata",__w);
            }
            AddIf( null != this._jobSpecification ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._jobSpecification.ToJson(null,serializationMode) : null, "jobSpecification" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}