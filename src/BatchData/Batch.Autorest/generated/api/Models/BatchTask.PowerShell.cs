// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(BatchTaskTypeConverter))]
    public partial class BatchTask
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchTask(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ExitCondition"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitCondition = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions) content.GetValueForProperty("ExitCondition",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitCondition, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitConditionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AffinityInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo) content.GetValueForProperty("AffinityInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAffinityInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("Constraint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Constraint = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints) content.GetValueForProperty("Constraint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Constraint, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraintsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo) content.GetValueForProperty("ExecutionInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("NodeInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo) content.GetValueForProperty("NodeInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("MultiInstanceSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings) content.GetValueForProperty("MultiInstanceSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MultiInstanceSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatistics) content.GetValueForProperty("TaskStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("DependsOn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependsOn = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies) content.GetValueForProperty("DependsOn",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependsOn, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskDependenciesTypeConverter.ConvertFrom);
            }
            if (content.Contains("AuthenticationTokenSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings) content.GetValueForProperty("AuthenticationTokenSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("Url"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Url = (string) content.GetValueForProperty("Url",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Url, global::System.Convert.ToString);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified = (global::System.DateTime?) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("CreationTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CreationTime = (global::System.DateTime?) content.GetValueForProperty("CreationTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CreationTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("State"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).State = (string) content.GetValueForProperty("State",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).State, global::System.Convert.ToString);
            }
            if (content.Contains("StateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).StateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("StateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).StateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("PreviousState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousState = (string) content.GetValueForProperty("PreviousState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousState, global::System.Convert.ToString);
            }
            if (content.Contains("PreviousStateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousStateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("PreviousStateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousStateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("OutputFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).OutputFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>) content.GetValueForProperty("OutputFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).OutputFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).EnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("RequiredSlot"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequiredSlot = (int?) content.GetValueForProperty("RequiredSlot",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequiredSlot, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("DataServiceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DataServiceId = (string) content.GetValueForProperty("DataServiceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DataServiceId, global::System.Convert.ToString);
            }
            if (content.Contains("ETag1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag1 = (string) content.GetValueForProperty("ETag1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag1, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified1 = (string) content.GetValueForProperty("LastModified1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified1, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("ExitConditionExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCode = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping>) content.GetValueForProperty("ExitConditionExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCode, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitCodeMappingTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("AuthenticationTokenSettingAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSettingAccess = (System.Collections.Generic.List<string>) content.GetValueForProperty("AuthenticationTokenSettingAccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSettingAccess, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ExitConditionPreProcessingError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionPreProcessingError = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions) content.GetValueForProperty("ExitConditionPreProcessingError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionPreProcessingError, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExitConditionFileUploadError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionFileUploadError = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions) content.GetValueForProperty("ExitConditionFileUploadError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionFileUploadError, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExitConditionDefault"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionDefault = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions) content.GetValueForProperty("ExitConditionDefault",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionDefault, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExitConditionExitCodeRange"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCodeRange = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping>) content.GetValueForProperty("ExitConditionExitCodeRange",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCodeRange, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitCodeRangeMappingTypeConverter.ConvertFrom));
            }
            if (content.Contains("PreProcessingErrorDependencyAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorDependencyAction = (string) content.GetValueForProperty("PreProcessingErrorDependencyAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorDependencyAction, global::System.Convert.ToString);
            }
            if (content.Contains("FileUploadErrorDependencyAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorDependencyAction = (string) content.GetValueForProperty("FileUploadErrorDependencyAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorDependencyAction, global::System.Convert.ToString);
            }
            if (content.Contains("DefaultDependencyAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultDependencyAction = (string) content.GetValueForProperty("DefaultDependencyAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultDependencyAction, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("AffinityInfoAffinityId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfoAffinityId = (string) content.GetValueForProperty("AffinityInfoAffinityId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfoAffinityId, global::System.Convert.ToString);
            }
            if (content.Contains("ConstraintMaxWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintMaxWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintRetentionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintRetentionTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintRetentionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintRetentionTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxTaskRetryCount = (int?) content.GetValueForProperty("ConstraintMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionInfoContainerInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoContainerInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo) content.GetValueForProperty("ExecutionInfoContainerInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoContainerInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoFailureInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoFailureInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo) content.GetValueForProperty("ExecutionInfoFailureInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoFailureInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoStartTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoEndTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoEndTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoEndTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoEndTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoExitCode = (int?) content.GetValueForProperty("ExecutionInfoExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoExitCode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRetryCount = (int?) content.GetValueForProperty("ExecutionInfoRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRetryTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRetryTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRetryTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRetryTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoRequeueCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRequeueCount = (int?) content.GetValueForProperty("ExecutionInfoRequeueCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRequeueCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRequeueTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRequeueTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRequeueTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRequeueTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoResult = (string) content.GetValueForProperty("ExecutionInfoResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoResult, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoAffinityId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoAffinityId = (string) content.GetValueForProperty("NodeInfoAffinityId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoAffinityId, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoNodeUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeUrl = (string) content.GetValueForProperty("NodeInfoNodeUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeUrl, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoPoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoPoolId = (string) content.GetValueForProperty("NodeInfoPoolId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoPoolId, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoNodeId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeId = (string) content.GetValueForProperty("NodeInfoNodeId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeId, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoTaskRootDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectory = (string) content.GetValueForProperty("NodeInfoTaskRootDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoTaskRootDirectoryUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectoryUrl = (string) content.GetValueForProperty("NodeInfoTaskRootDirectoryUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectoryUrl, global::System.Convert.ToString);
            }
            if (content.Contains("MultiInstanceSettingNumberOfInstance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingNumberOfInstance = (int?) content.GetValueForProperty("MultiInstanceSettingNumberOfInstance",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingNumberOfInstance, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MultiInstanceSettingCoordinationCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCoordinationCommandLine = (string) content.GetValueForProperty("MultiInstanceSettingCoordinationCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCoordinationCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("MultiInstanceSettingCommonResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCommonResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("MultiInstanceSettingCommonResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCommonResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("TaskStatisticsUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUrl = (string) content.GetValueForProperty("TaskStatisticsUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUrl, global::System.Convert.ToString);
            }
            if (content.Contains("TaskStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("TaskStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("TaskStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("TaskStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("TaskStatisticsUserCpuTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUserCpuTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsUserCpuTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUserCpuTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("TaskStatisticsKernelCpuTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsKernelCpuTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsKernelCpuTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsKernelCpuTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("TaskStatisticsWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("TaskStatisticsReadIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIop = (string) content.GetValueForProperty("TaskStatisticsReadIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIop, global::System.Convert.ToString);
            }
            if (content.Contains("TaskStatisticsWriteIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIop = (string) content.GetValueForProperty("TaskStatisticsWriteIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIop, global::System.Convert.ToString);
            }
            if (content.Contains("TaskStatisticsReadIoGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIoGiB = (float?) content.GetValueForProperty("TaskStatisticsReadIoGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIoGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("TaskStatisticsWriteIoGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIoGiB = (float?) content.GetValueForProperty("TaskStatisticsWriteIoGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIoGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("TaskStatisticsWaitTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWaitTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsWaitTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWaitTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("DependOnTaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskId = (System.Collections.Generic.List<string>) content.GetValueForProperty("DependOnTaskId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskId, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("DependOnTaskIdRange"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskIdRange = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange>) content.GetValueForProperty("DependOnTaskIdRange",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskIdRange, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskIdRangeTypeConverter.ConvertFrom));
            }
            if (content.Contains("PreProcessingErrorJobAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorJobAction = (string) content.GetValueForProperty("PreProcessingErrorJobAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorJobAction, global::System.Convert.ToString);
            }
            if (content.Contains("FileUploadErrorJobAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorJobAction = (string) content.GetValueForProperty("FileUploadErrorJobAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorJobAction, global::System.Convert.ToString);
            }
            if (content.Contains("DefaultJobAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultJobAction = (string) content.GetValueForProperty("DefaultJobAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultJobAction, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoContainerId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoContainerId = (string) content.GetValueForProperty("ContainerInfoContainerId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoContainerId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoState = (string) content.GetValueForProperty("ContainerInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoError = (string) content.GetValueForProperty("ContainerInfoError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoError, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCategory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCategory = (string) content.GetValueForProperty("FailureInfoCategory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCategory, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCode = (string) content.GetValueForProperty("FailureInfoCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCode, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoMessage = (string) content.GetValueForProperty("FailureInfoMessage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoDetail"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoDetail = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("FailureInfoDetail",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoDetail, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchTask(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ExitCondition"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitCondition = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions) content.GetValueForProperty("ExitCondition",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitCondition, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitConditionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("AffinityInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo) content.GetValueForProperty("AffinityInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAffinityInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("Constraint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Constraint = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints) content.GetValueForProperty("Constraint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Constraint, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraintsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo) content.GetValueForProperty("ExecutionInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("NodeInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo) content.GetValueForProperty("NodeInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("MultiInstanceSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings) content.GetValueForProperty("MultiInstanceSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MultiInstanceSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatistics) content.GetValueForProperty("TaskStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("DependsOn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependsOn = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies) content.GetValueForProperty("DependsOn",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependsOn, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskDependenciesTypeConverter.ConvertFrom);
            }
            if (content.Contains("AuthenticationTokenSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings) content.GetValueForProperty("AuthenticationTokenSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("Url"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Url = (string) content.GetValueForProperty("Url",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).Url, global::System.Convert.ToString);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified = (global::System.DateTime?) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("CreationTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CreationTime = (global::System.DateTime?) content.GetValueForProperty("CreationTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CreationTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("State"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).State = (string) content.GetValueForProperty("State",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).State, global::System.Convert.ToString);
            }
            if (content.Contains("StateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).StateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("StateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).StateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("PreviousState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousState = (string) content.GetValueForProperty("PreviousState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousState, global::System.Convert.ToString);
            }
            if (content.Contains("PreviousStateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousStateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("PreviousStateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreviousStateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("OutputFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).OutputFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>) content.GetValueForProperty("OutputFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).OutputFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).EnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("RequiredSlot"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequiredSlot = (int?) content.GetValueForProperty("RequiredSlot",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequiredSlot, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("DataServiceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DataServiceId = (string) content.GetValueForProperty("DataServiceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DataServiceId, global::System.Convert.ToString);
            }
            if (content.Contains("ETag1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag1 = (string) content.GetValueForProperty("ETag1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag1, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified1 = (string) content.GetValueForProperty("LastModified1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified1, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("ExitConditionExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCode = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping>) content.GetValueForProperty("ExitConditionExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCode, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitCodeMappingTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("AuthenticationTokenSettingAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSettingAccess = (System.Collections.Generic.List<string>) content.GetValueForProperty("AuthenticationTokenSettingAccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AuthenticationTokenSettingAccess, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ExitConditionPreProcessingError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionPreProcessingError = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions) content.GetValueForProperty("ExitConditionPreProcessingError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionPreProcessingError, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExitConditionFileUploadError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionFileUploadError = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions) content.GetValueForProperty("ExitConditionFileUploadError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionFileUploadError, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExitConditionDefault"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionDefault = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions) content.GetValueForProperty("ExitConditionDefault",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionDefault, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExitConditionExitCodeRange"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCodeRange = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping>) content.GetValueForProperty("ExitConditionExitCodeRange",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExitConditionExitCodeRange, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitCodeRangeMappingTypeConverter.ConvertFrom));
            }
            if (content.Contains("PreProcessingErrorDependencyAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorDependencyAction = (string) content.GetValueForProperty("PreProcessingErrorDependencyAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorDependencyAction, global::System.Convert.ToString);
            }
            if (content.Contains("FileUploadErrorDependencyAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorDependencyAction = (string) content.GetValueForProperty("FileUploadErrorDependencyAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorDependencyAction, global::System.Convert.ToString);
            }
            if (content.Contains("DefaultDependencyAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultDependencyAction = (string) content.GetValueForProperty("DefaultDependencyAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultDependencyAction, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("AffinityInfoAffinityId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfoAffinityId = (string) content.GetValueForProperty("AffinityInfoAffinityId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AffinityInfoAffinityId, global::System.Convert.ToString);
            }
            if (content.Contains("ConstraintMaxWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintMaxWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintRetentionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintRetentionTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintRetentionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintRetentionTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxTaskRetryCount = (int?) content.GetValueForProperty("ConstraintMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ConstraintMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionInfoContainerInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoContainerInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo) content.GetValueForProperty("ExecutionInfoContainerInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoContainerInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoFailureInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoFailureInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo) content.GetValueForProperty("ExecutionInfoFailureInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoFailureInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoStartTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoEndTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoEndTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoEndTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoEndTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoExitCode = (int?) content.GetValueForProperty("ExecutionInfoExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoExitCode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRetryCount = (int?) content.GetValueForProperty("ExecutionInfoRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRetryTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRetryTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRetryTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRetryTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoRequeueCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRequeueCount = (int?) content.GetValueForProperty("ExecutionInfoRequeueCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoRequeueCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRequeueTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRequeueTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRequeueTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoLastRequeueTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoResult = (string) content.GetValueForProperty("ExecutionInfoResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ExecutionInfoResult, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoAffinityId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoAffinityId = (string) content.GetValueForProperty("NodeInfoAffinityId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoAffinityId, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoNodeUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeUrl = (string) content.GetValueForProperty("NodeInfoNodeUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeUrl, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoPoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoPoolId = (string) content.GetValueForProperty("NodeInfoPoolId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoPoolId, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoNodeId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeId = (string) content.GetValueForProperty("NodeInfoNodeId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoNodeId, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoTaskRootDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectory = (string) content.GetValueForProperty("NodeInfoTaskRootDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("NodeInfoTaskRootDirectoryUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectoryUrl = (string) content.GetValueForProperty("NodeInfoTaskRootDirectoryUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).NodeInfoTaskRootDirectoryUrl, global::System.Convert.ToString);
            }
            if (content.Contains("MultiInstanceSettingNumberOfInstance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingNumberOfInstance = (int?) content.GetValueForProperty("MultiInstanceSettingNumberOfInstance",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingNumberOfInstance, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MultiInstanceSettingCoordinationCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCoordinationCommandLine = (string) content.GetValueForProperty("MultiInstanceSettingCoordinationCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCoordinationCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("MultiInstanceSettingCommonResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCommonResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("MultiInstanceSettingCommonResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).MultiInstanceSettingCommonResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("TaskStatisticsUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUrl = (string) content.GetValueForProperty("TaskStatisticsUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUrl, global::System.Convert.ToString);
            }
            if (content.Contains("TaskStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("TaskStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("TaskStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("TaskStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("TaskStatisticsUserCpuTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUserCpuTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsUserCpuTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsUserCpuTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("TaskStatisticsKernelCpuTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsKernelCpuTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsKernelCpuTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsKernelCpuTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("TaskStatisticsWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("TaskStatisticsReadIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIop = (string) content.GetValueForProperty("TaskStatisticsReadIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIop, global::System.Convert.ToString);
            }
            if (content.Contains("TaskStatisticsWriteIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIop = (string) content.GetValueForProperty("TaskStatisticsWriteIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIop, global::System.Convert.ToString);
            }
            if (content.Contains("TaskStatisticsReadIoGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIoGiB = (float?) content.GetValueForProperty("TaskStatisticsReadIoGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsReadIoGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("TaskStatisticsWriteIoGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIoGiB = (float?) content.GetValueForProperty("TaskStatisticsWriteIoGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWriteIoGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("TaskStatisticsWaitTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWaitTime = (global::System.TimeSpan?) content.GetValueForProperty("TaskStatisticsWaitTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).TaskStatisticsWaitTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("DependOnTaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskId = (System.Collections.Generic.List<string>) content.GetValueForProperty("DependOnTaskId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskId, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("DependOnTaskIdRange"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskIdRange = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange>) content.GetValueForProperty("DependOnTaskIdRange",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DependOnTaskIdRange, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskIdRangeTypeConverter.ConvertFrom));
            }
            if (content.Contains("PreProcessingErrorJobAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorJobAction = (string) content.GetValueForProperty("PreProcessingErrorJobAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).PreProcessingErrorJobAction, global::System.Convert.ToString);
            }
            if (content.Contains("FileUploadErrorJobAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorJobAction = (string) content.GetValueForProperty("FileUploadErrorJobAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FileUploadErrorJobAction, global::System.Convert.ToString);
            }
            if (content.Contains("DefaultJobAction"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultJobAction = (string) content.GetValueForProperty("DefaultJobAction",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DefaultJobAction, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoContainerId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoContainerId = (string) content.GetValueForProperty("ContainerInfoContainerId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoContainerId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoState = (string) content.GetValueForProperty("ContainerInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoError = (string) content.GetValueForProperty("ContainerInfoError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ContainerInfoError, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCategory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCategory = (string) content.GetValueForProperty("FailureInfoCategory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCategory, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCode = (string) content.GetValueForProperty("FailureInfoCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoCode, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoMessage = (string) content.GetValueForProperty("FailureInfoMessage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoDetail"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoDetail = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("FailureInfoDetail",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).FailureInfoDetail, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTask" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTask DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchTask(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTask" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTask DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchTask(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchTask" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchTask" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTask FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing.
    [System.ComponentModel.TypeConverter(typeof(BatchTaskTypeConverter))]
    public partial interface IBatchTask

    {

    }
}