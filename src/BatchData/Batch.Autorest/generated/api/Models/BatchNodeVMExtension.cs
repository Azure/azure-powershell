// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The configuration for virtual machine extension instance view.</summary>
    public partial class BatchNodeVMExtension :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtension,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Backing field for <see cref="InstanceView" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceView _instanceView;

        /// <summary>The vm extension instance view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceView InstanceView { get => (this._instanceView = this._instanceView ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionInstanceView()); set => this._instanceView = value; }

        /// <summary>The name of the vm extension instance view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string InstanceViewName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceViewInternal)InstanceView).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceViewInternal)InstanceView).Name = value ?? null; }

        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus> InstanceViewStatuses { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceViewInternal)InstanceView).Statuses; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceViewInternal)InstanceView).Statuses = value ?? null /* arrayOf */; }

        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus> InstanceViewSubStatuses { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceViewInternal)InstanceView).SubStatuses; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceViewInternal)InstanceView).SubStatuses = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private string _lastModified;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified { get => this._lastModified; set => this._lastModified = value; }

        /// <summary>Internal Acessors for InstanceView</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceView Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal.InstanceView { get => (this._instanceView = this._instanceView ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionInstanceView()); set { {_instanceView = value;} } }

        /// <summary>Internal Acessors for VMExtension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtension Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal.VMExtension { get => (this._vMExtension = this._vMExtension ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtension()); set { {_vMExtension = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>The provisioning state of the virtual machine extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; set => this._provisioningState = value; }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Backing field for <see cref="VMExtension" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtension _vMExtension;

        /// <summary>The virtual machine extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtension VMExtension { get => (this._vMExtension = this._vMExtension ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtension()); set => this._vMExtension = value; }

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
        /// however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? VMExtensionAutoUpgradeMinorVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).AutoUpgradeMinorVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).AutoUpgradeMinorVersion = value ?? default(bool); }

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension
        /// available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? VMExtensionEnableAutomaticUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).EnableAutomaticUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).EnableAutomaticUpgrade = value ?? default(bool); }

        /// <summary>The name of the virtual machine extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VMExtensionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Name = value ?? null; }

        /// <summary>
        /// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionProtectedSettings VMExtensionProtectedSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).ProtectedSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).ProtectedSetting = value ?? null /* model class */; }

        /// <summary>
        /// The collection of extension names. Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> VMExtensionProvisionAfterExtension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).ProvisionAfterExtension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).ProvisionAfterExtension = value ?? null /* arrayOf */; }

        /// <summary>The name of the extension handler publisher.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VMExtensionPublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Publisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Publisher = value ?? null; }

        /// <summary>JSON formatted public settings for the extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionSettings VMExtensionSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Setting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Setting = value ?? null /* model class */; }

        /// <summary>The type of the extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VMExtensionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).Type = value ?? null; }

        /// <summary>The version of script handler.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VMExtensionTypeHandlerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).TypeHandlerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInternal)VMExtension).TypeHandlerVersion = value ?? null; }

        /// <summary>Creates an new <see cref="BatchNodeVMExtension" /> instance.</summary>
        public BatchNodeVMExtension()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).LastModified = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader1) is string __headerLastModifiedHeader1 ? __headerLastModifiedHeader1 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader2) is string __headerClientRequestIdHeader2 ? __headerClientRequestIdHeader2 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader3) is string __headerRequestIdHeader3 ? __headerRequestIdHeader3 : (string)null;
            }
        }
    }
    /// The configuration for virtual machine extension instance view.
    public partial interface IBatchNodeVMExtension :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>The name of the vm extension instance view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the vm extension instance view.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceViewName { get; set; }
        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The resource status information.",
        SerializedName = @"statuses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus> InstanceViewStatuses { get; set; }
        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The resource status information.",
        SerializedName = @"subStatuses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus> InstanceViewSubStatuses { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified { get; set; }
        /// <summary>The provisioning state of the virtual machine extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The provisioning state of the virtual machine extension.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
        /// however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.",
        SerializedName = @"autoUpgradeMinorVersion",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VMExtensionAutoUpgradeMinorVersion { get; set; }
        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension
        /// available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.",
        SerializedName = @"enableAutomaticUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VMExtensionEnableAutomaticUpgrade { get; set; }
        /// <summary>The name of the virtual machine extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the virtual machine extension.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string VMExtensionName { get; set; }
        /// <summary>
        /// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.",
        SerializedName = @"protectedSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionProtectedSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionProtectedSettings VMExtensionProtectedSetting { get; set; }
        /// <summary>
        /// The collection of extension names. Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The collection of extension names. Collection of extension names after which this extension needs to be provisioned.",
        SerializedName = @"provisionAfterExtensions",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> VMExtensionProvisionAfterExtension { get; set; }
        /// <summary>The name of the extension handler publisher.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the extension handler publisher.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string VMExtensionPublisher { get; set; }
        /// <summary>JSON formatted public settings for the extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"JSON formatted public settings for the extension.",
        SerializedName = @"settings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionSettings VMExtensionSetting { get; set; }
        /// <summary>The type of the extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the extension.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string VMExtensionType { get; set; }
        /// <summary>The version of script handler.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of script handler.",
        SerializedName = @"typeHandlerVersion",
        PossibleTypes = new [] { typeof(string) })]
        string VMExtensionTypeHandlerVersion { get; set; }

    }
    /// The configuration for virtual machine extension instance view.
    internal partial interface IBatchNodeVMExtensionInternal

    {
        string ClientRequestId { get; set; }

        string ETag { get; set; }
        /// <summary>The vm extension instance view.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceView InstanceView { get; set; }
        /// <summary>The name of the vm extension instance view.</summary>
        string InstanceViewName { get; set; }
        /// <summary>The resource status information.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus> InstanceViewStatuses { get; set; }
        /// <summary>The resource status information.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus> InstanceViewSubStatuses { get; set; }

        string LastModified { get; set; }
        /// <summary>The provisioning state of the virtual machine extension.</summary>
        string ProvisioningState { get; set; }

        string RequestId { get; set; }
        /// <summary>The virtual machine extension.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtension VMExtension { get; set; }
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
        /// however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        bool? VMExtensionAutoUpgradeMinorVersion { get; set; }
        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension
        /// available.
        /// </summary>
        bool? VMExtensionEnableAutomaticUpgrade { get; set; }
        /// <summary>The name of the virtual machine extension.</summary>
        string VMExtensionName { get; set; }
        /// <summary>
        /// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionProtectedSettings VMExtensionProtectedSetting { get; set; }
        /// <summary>
        /// The collection of extension names. Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        System.Collections.Generic.List<string> VMExtensionProvisionAfterExtension { get; set; }
        /// <summary>The name of the extension handler publisher.</summary>
        string VMExtensionPublisher { get; set; }
        /// <summary>JSON formatted public settings for the extension.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionSettings VMExtensionSetting { get; set; }
        /// <summary>The type of the extension.</summary>
        string VMExtensionType { get; set; }
        /// <summary>The version of script handler.</summary>
        string VMExtensionTypeHandlerVersion { get; set; }

    }
}