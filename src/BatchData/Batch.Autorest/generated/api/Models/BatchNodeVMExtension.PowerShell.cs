// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>The configuration for virtual machine extension instance view.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchNodeVMExtensionTypeConverter))]
    public partial class BatchNodeVMExtension
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeVMExtension"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchNodeVMExtension(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("VMExtension"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtension = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtension) content.GetValueForProperty("VMExtension",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtension, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionTypeConverter.ConvertFrom);
            }
            if (content.Contains("InstanceView"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceView = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceView) content.GetValueForProperty("InstanceView",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceView, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionInstanceViewTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).LastModified = (string) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).LastModified, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionName = (string) content.GetValueForProperty("VMExtensionName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionName, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionPublisher"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionPublisher = (string) content.GetValueForProperty("VMExtensionPublisher",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionPublisher, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionType = (string) content.GetValueForProperty("VMExtensionType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionType, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionTypeHandlerVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionTypeHandlerVersion = (string) content.GetValueForProperty("VMExtensionTypeHandlerVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionTypeHandlerVersion, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionAutoUpgradeMinorVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionAutoUpgradeMinorVersion = (bool?) content.GetValueForProperty("VMExtensionAutoUpgradeMinorVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionAutoUpgradeMinorVersion, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("VMExtensionEnableAutomaticUpgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionEnableAutomaticUpgrade = (bool?) content.GetValueForProperty("VMExtensionEnableAutomaticUpgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionEnableAutomaticUpgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("VMExtensionSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionSettings) content.GetValueForProperty("VMExtensionSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("VMExtensionProtectedSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProtectedSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionProtectedSettings) content.GetValueForProperty("VMExtensionProtectedSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProtectedSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionProtectedSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("VMExtensionProvisionAfterExtension"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProvisionAfterExtension = (System.Collections.Generic.List<string>) content.GetValueForProperty("VMExtensionProvisionAfterExtension",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProvisionAfterExtension, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("InstanceViewName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewName = (string) content.GetValueForProperty("InstanceViewName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewName, global::System.Convert.ToString);
            }
            if (content.Contains("InstanceViewStatuses"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewStatuses = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>) content.GetValueForProperty("InstanceViewStatuses",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewStatuses, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.InstanceViewStatusTypeConverter.ConvertFrom));
            }
            if (content.Contains("InstanceViewSubStatuses"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewSubStatuses = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>) content.GetValueForProperty("InstanceViewSubStatuses",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewSubStatuses, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.InstanceViewStatusTypeConverter.ConvertFrom));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeVMExtension"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchNodeVMExtension(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("VMExtension"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtension = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtension) content.GetValueForProperty("VMExtension",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtension, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionTypeConverter.ConvertFrom);
            }
            if (content.Contains("InstanceView"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceView = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionInstanceView) content.GetValueForProperty("InstanceView",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceView, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionInstanceViewTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).LastModified = (string) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).LastModified, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionName = (string) content.GetValueForProperty("VMExtensionName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionName, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionPublisher"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionPublisher = (string) content.GetValueForProperty("VMExtensionPublisher",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionPublisher, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionType = (string) content.GetValueForProperty("VMExtensionType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionType, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionTypeHandlerVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionTypeHandlerVersion = (string) content.GetValueForProperty("VMExtensionTypeHandlerVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionTypeHandlerVersion, global::System.Convert.ToString);
            }
            if (content.Contains("VMExtensionAutoUpgradeMinorVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionAutoUpgradeMinorVersion = (bool?) content.GetValueForProperty("VMExtensionAutoUpgradeMinorVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionAutoUpgradeMinorVersion, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("VMExtensionEnableAutomaticUpgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionEnableAutomaticUpgrade = (bool?) content.GetValueForProperty("VMExtensionEnableAutomaticUpgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionEnableAutomaticUpgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("VMExtensionSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionSettings) content.GetValueForProperty("VMExtensionSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("VMExtensionProtectedSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProtectedSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVMExtensionProtectedSettings) content.GetValueForProperty("VMExtensionProtectedSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProtectedSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VMExtensionProtectedSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("VMExtensionProvisionAfterExtension"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProvisionAfterExtension = (System.Collections.Generic.List<string>) content.GetValueForProperty("VMExtensionProvisionAfterExtension",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).VMExtensionProvisionAfterExtension, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("InstanceViewName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewName = (string) content.GetValueForProperty("InstanceViewName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewName, global::System.Convert.ToString);
            }
            if (content.Contains("InstanceViewStatuses"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewStatuses = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>) content.GetValueForProperty("InstanceViewStatuses",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewStatuses, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.InstanceViewStatusTypeConverter.ConvertFrom));
            }
            if (content.Contains("InstanceViewSubStatuses"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewSubStatuses = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>) content.GetValueForProperty("InstanceViewSubStatuses",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtensionInternal)this).InstanceViewSubStatuses, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInstanceViewStatus>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.InstanceViewStatusTypeConverter.ConvertFrom));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeVMExtension"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtension" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtension DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchNodeVMExtension(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeVMExtension"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtension" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtension DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchNodeVMExtension(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchNodeVMExtension" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchNodeVMExtension" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeVMExtension FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// The configuration for virtual machine extension instance view.
    [System.ComponentModel.TypeConverter(typeof(BatchNodeVMExtensionTypeConverter))]
    public partial interface IBatchNodeVMExtension

    {

    }
}