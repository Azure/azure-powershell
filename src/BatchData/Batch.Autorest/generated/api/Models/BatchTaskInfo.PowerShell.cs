// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>Information about a Task running on a Compute Node.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchTaskInfoTypeConverter))]
    public partial class BatchTaskInfo
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskInfo"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchTaskInfo(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ExecutionInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo) content.GetValueForProperty("ExecutionInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskUrl = (string) content.GetValueForProperty("TaskUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskUrl, global::System.Convert.ToString);
            }
            if (content.Contains("JobId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).JobId = (string) content.GetValueForProperty("JobId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).JobId, global::System.Convert.ToString);
            }
            if (content.Contains("TaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskId = (string) content.GetValueForProperty("TaskId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskId, global::System.Convert.ToString);
            }
            if (content.Contains("SubtaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).SubtaskId = (int?) content.GetValueForProperty("SubtaskId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).SubtaskId, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskState = (string) content.GetValueForProperty("TaskState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskState, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionInfoContainerInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoContainerInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo) content.GetValueForProperty("ExecutionInfoContainerInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoContainerInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoFailureInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoFailureInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo) content.GetValueForProperty("ExecutionInfoFailureInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoFailureInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoStartTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoEndTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoEndTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoEndTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoEndTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoExitCode = (int?) content.GetValueForProperty("ExecutionInfoExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoExitCode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRetryCount = (int?) content.GetValueForProperty("ExecutionInfoRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRetryTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRetryTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRetryTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRetryTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoRequeueCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRequeueCount = (int?) content.GetValueForProperty("ExecutionInfoRequeueCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRequeueCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRequeueTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRequeueTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRequeueTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRequeueTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoResult = (string) content.GetValueForProperty("ExecutionInfoResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoResult, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoContainerId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoContainerId = (string) content.GetValueForProperty("ContainerInfoContainerId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoContainerId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoState = (string) content.GetValueForProperty("ContainerInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoError = (string) content.GetValueForProperty("ContainerInfoError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoError, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCategory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCategory = (string) content.GetValueForProperty("FailureInfoCategory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCategory, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCode = (string) content.GetValueForProperty("FailureInfoCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCode, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoMessage = (string) content.GetValueForProperty("FailureInfoMessage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoDetail"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoDetail = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("FailureInfoDetail",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoDetail, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskInfo"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchTaskInfo(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ExecutionInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo) content.GetValueForProperty("ExecutionInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskUrl = (string) content.GetValueForProperty("TaskUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskUrl, global::System.Convert.ToString);
            }
            if (content.Contains("JobId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).JobId = (string) content.GetValueForProperty("JobId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).JobId, global::System.Convert.ToString);
            }
            if (content.Contains("TaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskId = (string) content.GetValueForProperty("TaskId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskId, global::System.Convert.ToString);
            }
            if (content.Contains("SubtaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).SubtaskId = (int?) content.GetValueForProperty("SubtaskId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).SubtaskId, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskState = (string) content.GetValueForProperty("TaskState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).TaskState, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionInfoContainerInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoContainerInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo) content.GetValueForProperty("ExecutionInfoContainerInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoContainerInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoFailureInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoFailureInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo) content.GetValueForProperty("ExecutionInfoFailureInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoFailureInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionInfoStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoStartTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoEndTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoEndTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoEndTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoEndTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoExitCode = (int?) content.GetValueForProperty("ExecutionInfoExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoExitCode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRetryCount = (int?) content.GetValueForProperty("ExecutionInfoRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRetryTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRetryTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRetryTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRetryTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoRequeueCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRequeueCount = (int?) content.GetValueForProperty("ExecutionInfoRequeueCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoRequeueCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ExecutionInfoLastRequeueTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRequeueTime = (global::System.DateTime?) content.GetValueForProperty("ExecutionInfoLastRequeueTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoLastRequeueTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ExecutionInfoResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoResult = (string) content.GetValueForProperty("ExecutionInfoResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ExecutionInfoResult, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoContainerId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoContainerId = (string) content.GetValueForProperty("ContainerInfoContainerId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoContainerId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoState = (string) content.GetValueForProperty("ContainerInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoError = (string) content.GetValueForProperty("ContainerInfoError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).ContainerInfoError, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCategory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCategory = (string) content.GetValueForProperty("FailureInfoCategory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCategory, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCode = (string) content.GetValueForProperty("FailureInfoCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoCode, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoMessage = (string) content.GetValueForProperty("FailureInfoMessage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoDetail"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoDetail = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("FailureInfoDetail",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal)this).FailureInfoDetail, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskInfo"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchTaskInfo(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskInfo"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchTaskInfo(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchTaskInfo" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchTaskInfo" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Information about a Task running on a Compute Node.
    [System.ComponentModel.TypeConverter(typeof(BatchTaskInfoTypeConverter))]
    public partial interface IBatchTaskInfo

    {

    }
}