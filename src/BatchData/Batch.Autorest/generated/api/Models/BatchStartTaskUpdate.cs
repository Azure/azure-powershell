// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing. In some cases the
    /// StartTask may be re-run even though the Compute Node was not rebooted. Special
    /// care should be taken to avoid StartTasks which create breakaway process or
    /// install/launch services from the StartTask working directory, as this will
    /// block Batch from being able to re-run the StartTask.
    /// </summary>
    public partial class BatchStartTaskUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal
    {

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope = value ?? null; }

        /// <summary>Backing field for <see cref="CommandLine" /> property.</summary>
        private string _commandLine;

        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CommandLine { get => this._commandLine; set => this._commandLine = value; }

        /// <summary>Backing field for <see cref="ContainerSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate _containerSetting;

        /// <summary>
        /// The settings for the container under which the StartTask runs. When this is specified, all directories recursively below
        /// the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment
        /// variables are mapped into the container, and the Task command line is executed in the container. Files produced in the
        /// container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will
        /// not be able to access those files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdate()); set => this._containerSetting = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).WorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).WorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="EnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _environmentSetting;

        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get => this._environmentSetting; set => this._environmentSetting = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="MaxTaskRetryCount" /> property.</summary>
        private int? _maxTaskRetryCount;

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? MaxTaskRetryCount { get => this._maxTaskRetryCount; set => this._maxTaskRetryCount = value; }

        /// <summary>Internal Acessors for ContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal.ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdate()); set { {_containerSetting = value;} } }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).Registry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).Registry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal.UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set { {_userIdentity = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser = value ?? null /* model class */; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="ResourceFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> _resourceFile;

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get => this._resourceFile; set => this._resourceFile = value; }

        /// <summary>Backing field for <see cref="UserIdentity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity _userIdentity;

        /// <summary>
        /// The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the
        /// Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set => this._userIdentity = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username = value ?? null; }

        /// <summary>Backing field for <see cref="WaitForSuccess" /> property.</summary>
        private bool? _waitForSuccess;

        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? WaitForSuccess { get => this._waitForSuccess; set => this._waitForSuccess = value; }

        /// <summary>Creates an new <see cref="BatchStartTaskUpdate" /> instance.</summary>
        public BatchStartTaskUpdate()
        {

        }
    }
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing. In some cases the
    /// StartTask may be re-run even though the Compute Node was not rebooted. Special
    /// care should be taken to avoid StartTasks which create breakaway process or
    /// install/launch services from the StartTask working directory, as this will
    /// block Batch from being able to re-run the StartTask.
    public partial interface IBatchStartTaskUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string CommandLine { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the StartTask.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxTaskRetryCount { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WaitForSuccess { get; set; }

    }
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing. In some cases the
    /// StartTask may be re-run even though the Compute Node was not rebooted. Special
    /// care should be taken to avoid StartTasks which create breakaway process or
    /// install/launch services from the StartTask working directory, as this will
    /// block Batch from being able to re-run the StartTask.
    internal partial interface IBatchStartTaskUpdateInternal

    {
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string CommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the StartTask runs. When this is specified, all directories recursively below
        /// the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment
        /// variables are mapped into the container, and the Task command line is executed in the container. Files produced in the
        /// container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will
        /// not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate ContainerSetting { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        int? MaxTaskRetryCount { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the
        /// Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        bool? WaitForSuccess { get; set; }

    }
}