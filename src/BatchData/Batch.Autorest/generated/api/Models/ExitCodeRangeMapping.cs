// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A range of exit codes and how the Batch service should respond to exit codes
    /// within that range.
    /// </summary>
    public partial class ExitCodeRangeMapping :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMappingInternal
    {

        /// <summary>Backing field for <see cref="End" /> property.</summary>
        private int _end;

        /// <summary>The last exit code in the range.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int End { get => this._end; set => this._end = value; }

        /// <summary>Backing field for <see cref="ExitOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions _exitOption;

        /// <summary>
        /// How the Batch service should respond if the Task exits with an exit code in the range start to end (inclusive).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitOption { get => (this._exitOption = this._exitOption ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set => this._exitOption = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ExitOptionDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)ExitOption).DependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)ExitOption).DependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ExitOptionJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)ExitOption).JobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)ExitOption).JobAction = value ?? null; }

        /// <summary>Internal Acessors for ExitOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMappingInternal.ExitOption { get => (this._exitOption = this._exitOption ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set { {_exitOption = value;} } }

        /// <summary>Backing field for <see cref="Start" /> property.</summary>
        private int _start;

        /// <summary>The first exit code in the range.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Start { get => this._start; set => this._start = value; }

        /// <summary>Creates an new <see cref="ExitCodeRangeMapping" /> instance.</summary>
        public ExitCodeRangeMapping()
        {

        }
    }
    /// A range of exit codes and how the Batch service should respond to exit codes
    /// within that range.
    public partial interface IExitCodeRangeMapping :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The last exit code in the range.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The last exit code in the range.",
        SerializedName = @"end",
        PossibleTypes = new [] { typeof(int) })]
        int End { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string ExitOptionDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string ExitOptionJobAction { get; set; }
        /// <summary>The first exit code in the range.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The first exit code in the range.",
        SerializedName = @"start",
        PossibleTypes = new [] { typeof(int) })]
        int Start { get; set; }

    }
    /// A range of exit codes and how the Batch service should respond to exit codes
    /// within that range.
    internal partial interface IExitCodeRangeMappingInternal

    {
        /// <summary>The last exit code in the range.</summary>
        int End { get; set; }
        /// <summary>
        /// How the Batch service should respond if the Task exits with an exit code in the range start to end (inclusive).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitOption { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string ExitOptionDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string ExitOptionJobAction { get; set; }
        /// <summary>The first exit code in the range.</summary>
        int Start { get; set; }

    }
}