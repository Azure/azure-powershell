// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A Job Release Task to run on Job completion on any Compute Node where the Job has run.
    /// The Job Release Task runs when the Job ends, because of one of the following:
    /// The user calls the Terminate Job API, or the Delete Job API while the Job is
    /// still active, the Job's maximum wall clock time constraint is reached, and the
    /// Job is still active, or the Job's Job Manager Task completed, and the Job is
    /// configured to terminate when the Job Manager completes. The Job Release Task
    /// runs on each Node where Tasks of the Job have run and the Job Preparation Task
    /// ran and completed. If you reimage a Node after it has run the Job Preparation
    /// Task, and the Job ends without any further Tasks of the Job running on that
    /// Node (and hence the Job Preparation Task does not re-run), then the Job Release
    /// Task does not run on that Compute Node. If a Node reboots while the Job Release
    /// Task is still running, the Job Release Task runs again when the Compute Node
    /// starts up. The Job is not marked as complete until all Job Release Tasks have
    /// completed. The Job Release Task runs in the background. It does not occupy a
    /// scheduling slot; that is, it does not count towards the taskSlotsPerNode limit
    /// specified on the Pool.
    /// </summary>
    public partial class BatchJobReleaseTaskUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdateInternal
    {

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope = value ?? null; }

        /// <summary>Backing field for <see cref="CommandLine" /> property.</summary>
        private string _commandLine;

        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CommandLine { get => this._commandLine; set => this._commandLine = value; }

        /// <summary>Backing field for <see cref="ContainerSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate _containerSetting;

        /// <summary>
        /// The settings for the container under which the Job Release Task runs. When this is specified, all directories recursively
        /// below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all
        /// Task environment variables are mapped into the container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch
        /// file APIs will not be able to access those files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdate()); set => this._containerSetting = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).ImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).WorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).WorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="EnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _environmentSetting;

        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get => this._environmentSetting; set => this._environmentSetting = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="MaxWallClockTime" /> property.</summary>
        private global::System.TimeSpan? _maxWallClockTime;

        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? MaxWallClockTime { get => this._maxWallClockTime; set => this._maxWallClockTime = value; }

        /// <summary>Internal Acessors for ContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdateInternal.ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdate()); set { {_containerSetting = value;} } }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdateInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).Registry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).Registry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdateInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdateInternal.UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set { {_userIdentity = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskUpdateInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser = value ?? null /* model class */; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdateInternal)ContainerSetting).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="ResourceFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> _resourceFile;

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get => this._resourceFile; set => this._resourceFile = value; }

        /// <summary>Backing field for <see cref="RetentionTime" /> property.</summary>
        private global::System.TimeSpan? _retentionTime;

        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? RetentionTime { get => this._retentionTime; set => this._retentionTime = value; }

        /// <summary>Backing field for <see cref="UserIdentity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity _userIdentity;

        /// <summary>
        /// The user identity under which the Job Release Task runs. If omitted, the Task runs as a non-administrative user unique
        /// to the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set => this._userIdentity = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username = value ?? null; }

        /// <summary>Creates an new <see cref="BatchJobReleaseTaskUpdate" /> instance.</summary>
        public BatchJobReleaseTaskUpdate()
        {

        }
    }
    /// A Job Release Task to run on Job completion on any Compute Node where the Job has run.
    /// The Job Release Task runs when the Job ends, because of one of the following:
    /// The user calls the Terminate Job API, or the Delete Job API while the Job is
    /// still active, the Job's maximum wall clock time constraint is reached, and the
    /// Job is still active, or the Job's Job Manager Task completed, and the Job is
    /// configured to terminate when the Job Manager completes. The Job Release Task
    /// runs on each Node where Tasks of the Job have run and the Job Preparation Task
    /// ran and completed. If you reimage a Node after it has run the Job Preparation
    /// Task, and the Job ends without any further Tasks of the Job running on that
    /// Node (and hence the Job Preparation Task does not re-run), then the Job Release
    /// Task does not run on that Compute Node. If a Node reboots while the Job Release
    /// Task is still running, the Job Release Task runs again when the Compute Node
    /// starts up. The Job is not marked as complete until all Job Release Tasks have
    /// completed. The Job Release Task runs in the background. It does not occupy a
    /// scheduling slot; that is, it does not count towards the taskSlotsPerNode limit
    /// specified on the Pool.
    public partial interface IBatchJobReleaseTaskUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string CommandLine { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the Job Release Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? MaxWallClockTime { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RetentionTime { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }

    }
    /// A Job Release Task to run on Job completion on any Compute Node where the Job has run.
    /// The Job Release Task runs when the Job ends, because of one of the following:
    /// The user calls the Terminate Job API, or the Delete Job API while the Job is
    /// still active, the Job's maximum wall clock time constraint is reached, and the
    /// Job is still active, or the Job's Job Manager Task completed, and the Job is
    /// configured to terminate when the Job Manager completes. The Job Release Task
    /// runs on each Node where Tasks of the Job have run and the Job Preparation Task
    /// ran and completed. If you reimage a Node after it has run the Job Preparation
    /// Task, and the Job ends without any further Tasks of the Job running on that
    /// Node (and hence the Job Preparation Task does not re-run), then the Job Release
    /// Task does not run on that Compute Node. If a Node reboots while the Job Release
    /// Task is still running, the Job Release Task runs again when the Compute Node
    /// starts up. The Job is not marked as complete until all Job Release Tasks have
    /// completed. The Job Release Task runs in the background. It does not occupy a
    /// scheduling slot; that is, it does not count towards the taskSlotsPerNode limit
    /// specified on the Pool.
    internal partial interface IBatchJobReleaseTaskUpdateInternal

    {
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string CommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the Job Release Task runs. When this is specified, all directories recursively
        /// below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all
        /// Task environment variables are mapped into the container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch
        /// file APIs will not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate ContainerSetting { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? MaxWallClockTime { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? RetentionTime { get; set; }
        /// <summary>
        /// The user identity under which the Job Release Task runs. If omitted, the Task runs as a non-administrative user unique
        /// to the Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }

    }
}