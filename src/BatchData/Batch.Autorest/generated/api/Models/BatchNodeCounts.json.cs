// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The number of Compute Nodes in each Compute Node state.</summary>
    public partial class BatchNodeCounts
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject into a new instance of <see cref="BatchNodeCounts" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal BatchNodeCounts(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_creating = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("creating"), out var __jsonCreating) ? (int)__jsonCreating : _creating;}
            {_idle = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("idle"), out var __jsonIdle) ? (int)__jsonIdle : _idle;}
            {_offline = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("offline"), out var __jsonOffline) ? (int)__jsonOffline : _offline;}
            {_preempted = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("preempted"), out var __jsonPreempted) ? (int)__jsonPreempted : _preempted;}
            {_rebooting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("rebooting"), out var __jsonRebooting) ? (int)__jsonRebooting : _rebooting;}
            {_reimaging = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("reimaging"), out var __jsonReimaging) ? (int)__jsonReimaging : _reimaging;}
            {_running = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("running"), out var __jsonRunning) ? (int)__jsonRunning : _running;}
            {_starting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("starting"), out var __jsonStarting) ? (int)__jsonStarting : _starting;}
            {_startTaskFailed = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("startTaskFailed"), out var __jsonStartTaskFailed) ? (int)__jsonStartTaskFailed : _startTaskFailed;}
            {_leavingPool = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("leavingPool"), out var __jsonLeavingPool) ? (int)__jsonLeavingPool : _leavingPool;}
            {_unknown = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("unknown"), out var __jsonUnknown) ? (int)__jsonUnknown : _unknown;}
            {_unusable = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("unusable"), out var __jsonUnusable) ? (int)__jsonUnusable : _unusable;}
            {_waitingForStartTask = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("waitingForStartTask"), out var __jsonWaitingForStartTask) ? (int)__jsonWaitingForStartTask : _waitingForStartTask;}
            {_deallocated = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("deallocated"), out var __jsonDeallocated) ? (int)__jsonDeallocated : _deallocated;}
            {_deallocating = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("deallocating"), out var __jsonDeallocating) ? (int)__jsonDeallocating : _deallocating;}
            {_total = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("total"), out var __jsonTotal) ? (int)__jsonTotal : _total;}
            {_upgradingOS = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("upgradingOS"), out var __jsonUpgradingOS) ? (int)__jsonUpgradingOS : _upgradingOS;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json ? new BatchNodeCounts(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="BatchNodeCounts" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="BatchNodeCounts" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._creating), "creating" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._idle), "idle" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._offline), "offline" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._preempted), "preempted" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._rebooting), "rebooting" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._reimaging), "reimaging" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._running), "running" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._starting), "starting" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._startTaskFailed), "startTaskFailed" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._leavingPool), "leavingPool" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._unknown), "unknown" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._unusable), "unusable" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._waitingForStartTask), "waitingForStartTask" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._deallocated), "deallocated" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._deallocating), "deallocating" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._total), "total" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber(this._upgradingOS), "upgradingOS" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}