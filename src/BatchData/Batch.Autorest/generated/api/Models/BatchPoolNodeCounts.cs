// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The number of Compute Nodes in each state for a Pool.</summary>
    public partial class BatchPoolNodeCounts :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCounts,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal
    {

        /// <summary>Backing field for <see cref="Dedicated" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts _dedicated;

        /// <summary>The number of dedicated Compute Nodes in each state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts Dedicated { get => (this._dedicated = this._dedicated ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCounts()); set => this._dedicated = value; }

        /// <summary>The number of Compute Nodes in the creating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedCreating { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Creating; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Creating = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedDeallocated { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Deallocated; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Deallocated = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedDeallocating { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Deallocating; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Deallocating = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the idle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedIdle { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Idle; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Idle = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedLeavingPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).LeavingPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).LeavingPool = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the offline state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedOffline { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Offline; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Offline = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedPreempted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Preempted; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Preempted = value ?? default(int); }

        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedRebooting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Rebooting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Rebooting = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedReimaging { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Reimaging; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Reimaging = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the running state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedRunning { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Running; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Running = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedStartTaskFailed { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).StartTaskFailed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).StartTaskFailed = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the starting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedStarting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Starting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Starting = value ?? default(int); }

        /// <summary>The total number of Compute Nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedTotal { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Total; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Total = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedUnknown { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Unknown; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Unknown = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedUnusable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Unusable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).Unusable = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedUpgradingOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).UpgradingOS; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).UpgradingOS = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedWaitingForStartTask { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).WaitingForStartTask; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)Dedicated).WaitingForStartTask = value ?? default(int); }

        /// <summary>Backing field for <see cref="LowPriority" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts _lowPriority;

        /// <summary>The number of Spot/Low-priority Compute Nodes in each state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts LowPriority { get => (this._lowPriority = this._lowPriority ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCounts()); set => this._lowPriority = value; }

        /// <summary>The number of Compute Nodes in the creating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityCreating { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Creating; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Creating = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityDeallocated { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Deallocated; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Deallocated = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityDeallocating { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Deallocating; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Deallocating = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the idle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityIdle { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Idle; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Idle = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityLeavingPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).LeavingPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).LeavingPool = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the offline state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityOffline { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Offline; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Offline = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityPreempted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Preempted; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Preempted = value ?? default(int); }

        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityRebooting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Rebooting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Rebooting = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityReimaging { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Reimaging; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Reimaging = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the running state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityRunning { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Running; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Running = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityStartTaskFailed { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).StartTaskFailed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).StartTaskFailed = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the starting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityStarting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Starting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Starting = value ?? default(int); }

        /// <summary>The total number of Compute Nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityTotal { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Total; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Total = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityUnknown { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Unknown; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Unknown = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityUnusable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Unusable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).Unusable = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityUpgradingOS { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).UpgradingOS; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).UpgradingOS = value ?? default(int); }

        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityWaitingForStartTask { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).WaitingForStartTask; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal)LowPriority).WaitingForStartTask = value ?? default(int); }

        /// <summary>Internal Acessors for Dedicated</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal.Dedicated { get => (this._dedicated = this._dedicated ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCounts()); set { {_dedicated = value;} } }

        /// <summary>Internal Acessors for LowPriority</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal.LowPriority { get => (this._lowPriority = this._lowPriority ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCounts()); set { {_lowPriority = value;} } }

        /// <summary>Backing field for <see cref="PoolId" /> property.</summary>
        private string _poolId;

        /// <summary>The ID of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PoolId { get => this._poolId; set => this._poolId = value; }

        /// <summary>Creates an new <see cref="BatchPoolNodeCounts" /> instance.</summary>
        public BatchPoolNodeCounts()
        {

        }
    }
    /// The number of Compute Nodes in each state for a Pool.
    public partial interface IBatchPoolNodeCounts :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The number of Compute Nodes in the creating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the creating state.",
        SerializedName = @"creating",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedCreating { get; set; }
        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the deallocated state.",
        SerializedName = @"deallocated",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedDeallocated { get; set; }
        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the deallocating state.",
        SerializedName = @"deallocating",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedDeallocating { get; set; }
        /// <summary>The number of Compute Nodes in the idle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the idle state.",
        SerializedName = @"idle",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedIdle { get; set; }
        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the leavingPool state.",
        SerializedName = @"leavingPool",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedLeavingPool { get; set; }
        /// <summary>The number of Compute Nodes in the offline state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the offline state.",
        SerializedName = @"offline",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedOffline { get; set; }
        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the preempted state.",
        SerializedName = @"preempted",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedPreempted { get; set; }
        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The count of Compute Nodes in the rebooting state.",
        SerializedName = @"rebooting",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedRebooting { get; set; }
        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the reimaging state.",
        SerializedName = @"reimaging",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedReimaging { get; set; }
        /// <summary>The number of Compute Nodes in the running state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the running state.",
        SerializedName = @"running",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedRunning { get; set; }
        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the startTaskFailed state.",
        SerializedName = @"startTaskFailed",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedStartTaskFailed { get; set; }
        /// <summary>The number of Compute Nodes in the starting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the starting state.",
        SerializedName = @"starting",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedStarting { get; set; }
        /// <summary>The total number of Compute Nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Compute Nodes.",
        SerializedName = @"total",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedTotal { get; set; }
        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the unknown state.",
        SerializedName = @"unknown",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedUnknown { get; set; }
        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the unusable state.",
        SerializedName = @"unusable",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedUnusable { get; set; }
        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the upgradingOS state.",
        SerializedName = @"upgradingOS",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedUpgradingOS { get; set; }
        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the waitingForStartTask state.",
        SerializedName = @"waitingForStartTask",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedWaitingForStartTask { get; set; }
        /// <summary>The number of Compute Nodes in the creating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the creating state.",
        SerializedName = @"creating",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityCreating { get; set; }
        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the deallocated state.",
        SerializedName = @"deallocated",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityDeallocated { get; set; }
        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the deallocating state.",
        SerializedName = @"deallocating",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityDeallocating { get; set; }
        /// <summary>The number of Compute Nodes in the idle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the idle state.",
        SerializedName = @"idle",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityIdle { get; set; }
        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the leavingPool state.",
        SerializedName = @"leavingPool",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityLeavingPool { get; set; }
        /// <summary>The number of Compute Nodes in the offline state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the offline state.",
        SerializedName = @"offline",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityOffline { get; set; }
        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the preempted state.",
        SerializedName = @"preempted",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityPreempted { get; set; }
        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The count of Compute Nodes in the rebooting state.",
        SerializedName = @"rebooting",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityRebooting { get; set; }
        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the reimaging state.",
        SerializedName = @"reimaging",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityReimaging { get; set; }
        /// <summary>The number of Compute Nodes in the running state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the running state.",
        SerializedName = @"running",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityRunning { get; set; }
        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the startTaskFailed state.",
        SerializedName = @"startTaskFailed",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityStartTaskFailed { get; set; }
        /// <summary>The number of Compute Nodes in the starting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the starting state.",
        SerializedName = @"starting",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityStarting { get; set; }
        /// <summary>The total number of Compute Nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Compute Nodes.",
        SerializedName = @"total",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityTotal { get; set; }
        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the unknown state.",
        SerializedName = @"unknown",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityUnknown { get; set; }
        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the unusable state.",
        SerializedName = @"unusable",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityUnusable { get; set; }
        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the upgradingOS state.",
        SerializedName = @"upgradingOS",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityUpgradingOS { get; set; }
        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the waitingForStartTask state.",
        SerializedName = @"waitingForStartTask",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityWaitingForStartTask { get; set; }
        /// <summary>The ID of the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Pool.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolId { get; set; }

    }
    /// The number of Compute Nodes in each state for a Pool.
    internal partial interface IBatchPoolNodeCountsInternal

    {
        /// <summary>The number of dedicated Compute Nodes in each state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts Dedicated { get; set; }
        /// <summary>The number of Compute Nodes in the creating state.</summary>
        int? DedicatedCreating { get; set; }
        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        int? DedicatedDeallocated { get; set; }
        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        int? DedicatedDeallocating { get; set; }
        /// <summary>The number of Compute Nodes in the idle state.</summary>
        int? DedicatedIdle { get; set; }
        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        int? DedicatedLeavingPool { get; set; }
        /// <summary>The number of Compute Nodes in the offline state.</summary>
        int? DedicatedOffline { get; set; }
        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        int? DedicatedPreempted { get; set; }
        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        int? DedicatedRebooting { get; set; }
        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        int? DedicatedReimaging { get; set; }
        /// <summary>The number of Compute Nodes in the running state.</summary>
        int? DedicatedRunning { get; set; }
        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        int? DedicatedStartTaskFailed { get; set; }
        /// <summary>The number of Compute Nodes in the starting state.</summary>
        int? DedicatedStarting { get; set; }
        /// <summary>The total number of Compute Nodes.</summary>
        int? DedicatedTotal { get; set; }
        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        int? DedicatedUnknown { get; set; }
        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        int? DedicatedUnusable { get; set; }
        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        int? DedicatedUpgradingOS { get; set; }
        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        int? DedicatedWaitingForStartTask { get; set; }
        /// <summary>The number of Spot/Low-priority Compute Nodes in each state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts LowPriority { get; set; }
        /// <summary>The number of Compute Nodes in the creating state.</summary>
        int? LowPriorityCreating { get; set; }
        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        int? LowPriorityDeallocated { get; set; }
        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        int? LowPriorityDeallocating { get; set; }
        /// <summary>The number of Compute Nodes in the idle state.</summary>
        int? LowPriorityIdle { get; set; }
        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        int? LowPriorityLeavingPool { get; set; }
        /// <summary>The number of Compute Nodes in the offline state.</summary>
        int? LowPriorityOffline { get; set; }
        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        int? LowPriorityPreempted { get; set; }
        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        int? LowPriorityRebooting { get; set; }
        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        int? LowPriorityReimaging { get; set; }
        /// <summary>The number of Compute Nodes in the running state.</summary>
        int? LowPriorityRunning { get; set; }
        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        int? LowPriorityStartTaskFailed { get; set; }
        /// <summary>The number of Compute Nodes in the starting state.</summary>
        int? LowPriorityStarting { get; set; }
        /// <summary>The total number of Compute Nodes.</summary>
        int? LowPriorityTotal { get; set; }
        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        int? LowPriorityUnknown { get; set; }
        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        int? LowPriorityUnusable { get; set; }
        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        int? LowPriorityUpgradingOS { get; set; }
        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        int? LowPriorityWaitingForStartTask { get; set; }
        /// <summary>The ID of the Pool.</summary>
        string PoolId { get; set; }

    }
}