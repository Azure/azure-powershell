// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>The Task and TaskSlot counts for a Job.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchTaskCountsResultTypeConverter))]
    public partial class BatchTaskCountsResult
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCountsResult"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchTaskCountsResult(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("TaskCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCount = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCounts) content.GetValueForProperty("TaskCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCount, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskSlotCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCount = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCounts) content.GetValueForProperty("TaskSlotCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCount, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSlotCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).LastModified = (string) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).LastModified, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("TaskCountActive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountActive = (int) content.GetValueForProperty("TaskCountActive",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountActive, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountRunning = (int) content.GetValueForProperty("TaskCountRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountCompleted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountCompleted = (int) content.GetValueForProperty("TaskCountCompleted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountCompleted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountSucceeded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountSucceeded = (int) content.GetValueForProperty("TaskCountSucceeded",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountSucceeded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountFailed = (int) content.GetValueForProperty("TaskCountFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountActive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountActive = (int) content.GetValueForProperty("TaskSlotCountActive",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountActive, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountRunning = (int) content.GetValueForProperty("TaskSlotCountRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountCompleted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountCompleted = (int) content.GetValueForProperty("TaskSlotCountCompleted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountCompleted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountSucceeded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountSucceeded = (int) content.GetValueForProperty("TaskSlotCountSucceeded",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountSucceeded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountFailed = (int) content.GetValueForProperty("TaskSlotCountFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCountsResult"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchTaskCountsResult(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("TaskCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCount = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCounts) content.GetValueForProperty("TaskCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCount, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskSlotCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCount = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCounts) content.GetValueForProperty("TaskSlotCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCount, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSlotCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).LastModified = (string) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).LastModified, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("TaskCountActive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountActive = (int) content.GetValueForProperty("TaskCountActive",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountActive, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountRunning = (int) content.GetValueForProperty("TaskCountRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountCompleted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountCompleted = (int) content.GetValueForProperty("TaskCountCompleted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountCompleted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountSucceeded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountSucceeded = (int) content.GetValueForProperty("TaskCountSucceeded",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountSucceeded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskCountFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountFailed = (int) content.GetValueForProperty("TaskCountFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskCountFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountActive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountActive = (int) content.GetValueForProperty("TaskSlotCountActive",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountActive, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountRunning = (int) content.GetValueForProperty("TaskSlotCountRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountCompleted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountCompleted = (int) content.GetValueForProperty("TaskSlotCountCompleted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountCompleted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountSucceeded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountSucceeded = (int) content.GetValueForProperty("TaskSlotCountSucceeded",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountSucceeded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TaskSlotCountFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountFailed = (int) content.GetValueForProperty("TaskSlotCountFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).TaskSlotCountFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCountsResult"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResult" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResult DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchTaskCountsResult(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCountsResult"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResult" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResult DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchTaskCountsResult(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchTaskCountsResult" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchTaskCountsResult" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResult FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// The Task and TaskSlot counts for a Job.
    [System.ComponentModel.TypeConverter(typeof(BatchTaskCountsResultTypeConverter))]
    public partial interface IBatchTaskCountsResult

    {

    }
}