// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case,
    /// if any of the subtasks fail (for example due to exiting with a non-zero exit
    /// code) the entire multi-instance Task fails. The multi-instance Task is then
    /// terminated and retried, up to its retry limit.
    /// </summary>
    public partial class MultiInstanceSettings :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal
    {

        /// <summary>Backing field for <see cref="CommonResourceFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> _commonResourceFile;

        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> CommonResourceFile { get => this._commonResourceFile; set => this._commonResourceFile = value; }

        /// <summary>Backing field for <see cref="CoordinationCommandLine" /> property.</summary>
        private string _coordinationCommandLine;

        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CoordinationCommandLine { get => this._coordinationCommandLine; set => this._coordinationCommandLine = value; }

        /// <summary>Backing field for <see cref="NumberOfInstance" /> property.</summary>
        private int? _numberOfInstance;

        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? NumberOfInstance { get => this._numberOfInstance; set => this._numberOfInstance = value; }

        /// <summary>Creates an new <see cref="MultiInstanceSettings" /> instance.</summary>
        public MultiInstanceSettings()
        {

        }
    }
    /// Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case,
    /// if any of the subtasks fail (for example due to exiting with a non-zero exit
    /// code) the entire multi-instance Task fails. The multi-instance Task is then
    /// terminated and retried, up to its retry limit.
    public partial interface IMultiInstanceSettings :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory).  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"commonResourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> CommonResourceFile { get; set; }
        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command. A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.",
        SerializedName = @"coordinationCommandLine",
        PossibleTypes = new [] { typeof(string) })]
        string CoordinationCommandLine { get; set; }
        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes required by the Task. If omitted, the default is 1.",
        SerializedName = @"numberOfInstances",
        PossibleTypes = new [] { typeof(int) })]
        int? NumberOfInstance { get; set; }

    }
    /// Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case,
    /// if any of the subtasks fail (for example due to exiting with a non-zero exit
    /// code) the entire multi-instance Task fails. The multi-instance Task is then
    /// terminated and retried, up to its retry limit.
    internal partial interface IMultiInstanceSettingsInternal

    {
        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> CommonResourceFile { get; set; }
        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        string CoordinationCommandLine { get; set; }
        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        int? NumberOfInstance { get; set; }

    }
}