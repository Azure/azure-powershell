// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>Parameters for updating an Azure Batch Pool.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchPoolUpdateOptionsTypeConverter))]
    public partial class BatchPoolUpdateOptions
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchPoolUpdateOptions(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskSchedulingPolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdate) content.GetValueForProperty("TaskSchedulingPolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicyUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate) content.GetValueForProperty("NetworkConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfigurationUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdate) content.GetValueForProperty("UpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicyUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("VMSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VMSize = (string) content.GetValueForProperty("VMSize",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VMSize, global::System.Convert.ToString);
            }
            if (content.Contains("EnableInterNodeCommunication"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EnableInterNodeCommunication = (bool?) content.GetValueForProperty("EnableInterNodeCommunication",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EnableInterNodeCommunication, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("Metadata"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).Metadata = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>) content.GetValueForProperty("Metadata",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).Metadata, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("TargetNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TargetNodeCommunicationMode = (string) content.GetValueForProperty("TargetNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TargetNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("TaskSlotsPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSlotsPerNode = (int?) content.GetValueForProperty("TaskSlotsPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSlotsPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ResourceTag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ResourceTag = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags) content.GetValueForProperty("ResourceTag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ResourceTag, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptionsResourceTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserAccount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserAccount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>) content.GetValueForProperty("UserAccount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserAccount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserAccountTypeConverter.ConvertFrom));
            }
            if (content.Contains("MountConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).MountConfiguration = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>) content.GetValueForProperty("MountConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).MountConfiguration, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MountConfigurationTypeConverter.ConvertFrom));
            }
            if (content.Contains("VirtualMachineConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VirtualMachineConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate) content.GetValueForProperty("VirtualMachineConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VirtualMachineConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfigurationUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("TaskSchedulingPolicyNodeFillType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicyNodeFillType = (string) content.GetValueForProperty("TaskSchedulingPolicyNodeFillType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicyNodeFillType, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationEndpointConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEndpointConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate) content.GetValueForProperty("NetworkConfigurationEndpointConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEndpointConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolEndpointConfigurationUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationPublicIPAddressConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationPublicIPAddressConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration) content.GetValueForProperty("NetworkConfigurationPublicIPAddressConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationPublicIPAddressConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPublicIPAddressConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationSubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationSubnetId = (string) content.GetValueForProperty("NetworkConfigurationSubnetId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationSubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationDynamicVnetAssignmentScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationDynamicVnetAssignmentScope = (string) content.GetValueForProperty("NetworkConfigurationDynamicVnetAssignmentScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationDynamicVnetAssignmentScope, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationEnableAcceleratedNetworking"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEnableAcceleratedNetworking = (bool?) content.GetValueForProperty("NetworkConfigurationEnableAcceleratedNetworking",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEnableAcceleratedNetworking, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UpgradePolicyAutomaticOSUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyAutomaticOSUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy) content.GetValueForProperty("UpgradePolicyAutomaticOSUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyAutomaticOSUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutomaticOSUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyRollingUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy) content.GetValueForProperty("UpgradePolicyRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyRollingUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.RollingUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyMode = (string) content.GetValueForProperty("UpgradePolicyMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyMode, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("EndpointConfigurationInboundNatPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EndpointConfigurationInboundNatPool = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>) content.GetValueForProperty("EndpointConfigurationInboundNatPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EndpointConfigurationInboundNatPool, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchInboundNatPoolTypeConverter.ConvertFrom));
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressProvisioningType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType = (string) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressProvisioningType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType, global::System.Convert.ToString);
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressId = (System.Collections.Generic.List<string>) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressId, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("AutomaticOSUpgradePolicyDisableAutomaticRollback"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyDisableAutomaticRollback",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyUseRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyUseRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyEnableCrossZoneUpgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade = (bool?) content.GetValueForProperty("RollingUpgradePolicyEnableCrossZoneUpgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyMaxBatchInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxBatchInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxBatchInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxBatchInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyPauseTimeBetweenBatch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch = (global::System.TimeSpan?) content.GetValueForProperty("RollingUpgradePolicyPauseTimeBetweenBatch",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("RollingUpgradePolicyPrioritizeUnhealthyInstance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance = (bool?) content.GetValueForProperty("RollingUpgradePolicyPrioritizeUnhealthyInstance",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = (bool?) content.GetValueForProperty("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchPoolUpdateOptions(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskSchedulingPolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdate) content.GetValueForProperty("TaskSchedulingPolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicyUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate) content.GetValueForProperty("NetworkConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfigurationUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdate) content.GetValueForProperty("UpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicyUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("VMSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VMSize = (string) content.GetValueForProperty("VMSize",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VMSize, global::System.Convert.ToString);
            }
            if (content.Contains("EnableInterNodeCommunication"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EnableInterNodeCommunication = (bool?) content.GetValueForProperty("EnableInterNodeCommunication",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EnableInterNodeCommunication, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("Metadata"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).Metadata = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>) content.GetValueForProperty("Metadata",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).Metadata, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("TargetNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TargetNodeCommunicationMode = (string) content.GetValueForProperty("TargetNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TargetNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("TaskSlotsPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSlotsPerNode = (int?) content.GetValueForProperty("TaskSlotsPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSlotsPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ResourceTag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ResourceTag = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags) content.GetValueForProperty("ResourceTag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ResourceTag, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptionsResourceTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserAccount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserAccount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>) content.GetValueForProperty("UserAccount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserAccount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserAccountTypeConverter.ConvertFrom));
            }
            if (content.Contains("MountConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).MountConfiguration = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>) content.GetValueForProperty("MountConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).MountConfiguration, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MountConfigurationTypeConverter.ConvertFrom));
            }
            if (content.Contains("VirtualMachineConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VirtualMachineConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate) content.GetValueForProperty("VirtualMachineConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).VirtualMachineConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfigurationUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("TaskSchedulingPolicyNodeFillType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicyNodeFillType = (string) content.GetValueForProperty("TaskSchedulingPolicyNodeFillType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).TaskSchedulingPolicyNodeFillType, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationEndpointConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEndpointConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate) content.GetValueForProperty("NetworkConfigurationEndpointConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEndpointConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolEndpointConfigurationUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationPublicIPAddressConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationPublicIPAddressConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration) content.GetValueForProperty("NetworkConfigurationPublicIPAddressConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationPublicIPAddressConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPublicIPAddressConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationSubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationSubnetId = (string) content.GetValueForProperty("NetworkConfigurationSubnetId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationSubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationDynamicVnetAssignmentScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationDynamicVnetAssignmentScope = (string) content.GetValueForProperty("NetworkConfigurationDynamicVnetAssignmentScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationDynamicVnetAssignmentScope, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationEnableAcceleratedNetworking"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEnableAcceleratedNetworking = (bool?) content.GetValueForProperty("NetworkConfigurationEnableAcceleratedNetworking",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).NetworkConfigurationEnableAcceleratedNetworking, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UpgradePolicyAutomaticOSUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyAutomaticOSUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy) content.GetValueForProperty("UpgradePolicyAutomaticOSUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyAutomaticOSUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutomaticOSUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyRollingUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy) content.GetValueForProperty("UpgradePolicyRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyRollingUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.RollingUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyMode = (string) content.GetValueForProperty("UpgradePolicyMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UpgradePolicyMode, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("EndpointConfigurationInboundNatPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EndpointConfigurationInboundNatPool = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>) content.GetValueForProperty("EndpointConfigurationInboundNatPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).EndpointConfigurationInboundNatPool, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchInboundNatPoolTypeConverter.ConvertFrom));
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressProvisioningType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType = (string) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressProvisioningType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType, global::System.Convert.ToString);
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressId = (System.Collections.Generic.List<string>) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).PublicIPAddressConfigurationIpaddressId, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("AutomaticOSUpgradePolicyDisableAutomaticRollback"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyDisableAutomaticRollback",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyUseRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyUseRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyEnableCrossZoneUpgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade = (bool?) content.GetValueForProperty("RollingUpgradePolicyEnableCrossZoneUpgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyMaxBatchInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxBatchInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxBatchInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxBatchInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyPauseTimeBetweenBatch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch = (global::System.TimeSpan?) content.GetValueForProperty("RollingUpgradePolicyPauseTimeBetweenBatch",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("RollingUpgradePolicyPrioritizeUnhealthyInstance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance = (bool?) content.GetValueForProperty("RollingUpgradePolicyPrioritizeUnhealthyInstance",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = (bool?) content.GetValueForProperty("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptions" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptions DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchPoolUpdateOptions(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptions" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptions DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchPoolUpdateOptions(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchPoolUpdateOptions" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchPoolUpdateOptions" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptions FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Parameters for updating an Azure Batch Pool.
    [System.ComponentModel.TypeConverter(typeof(BatchPoolUpdateOptionsTypeConverter))]
    public partial interface IBatchPoolUpdateOptions

    {

    }
}