// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Specifies how a Job should be assigned to a Pool.</summary>
    public partial class BatchPoolInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal
    {

        /// <summary>Backing field for <see cref="AutoPoolSpecification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification _autoPoolSpecification;

        /// <summary>
        /// Characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted. If
        /// auto Pool creation fails, the Batch service moves the Job to a completed state, and the Pool creation error is set in
        /// the Job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified,
        /// deletion) of the auto Pool. Any user actions that affect the lifetime of the auto Pool while the Job is active will result
        /// in unexpected behavior. You must specify either the Pool ID or the auto Pool specification, but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification AutoPoolSpecification { get => (this._autoPoolSpecification = this._autoPoolSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAutoPoolSpecification()); set => this._autoPoolSpecification = value; }

        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoPoolSpecificationAutoPoolIdPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).AutoPoolIdPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).AutoPoolIdPrefix = value ?? null; }

        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutoPoolSpecificationKeepAlive { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).KeepAlive; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).KeepAlive = value ?? default(bool); }

        /// <summary>The Pool specification for the auto Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).Pool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).Pool = value ?? null /* model class */; }

        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoPoolSpecificationPoolLifetimeOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).PoolLifetimeOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecificationInternal)AutoPoolSpecification).PoolLifetimeOption = value ?? null; }

        /// <summary>Internal Acessors for AutoPoolSpecification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal.AutoPoolSpecification { get => (this._autoPoolSpecification = this._autoPoolSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAutoPoolSpecification()); set { {_autoPoolSpecification = value;} } }

        /// <summary>Backing field for <see cref="PoolId" /> property.</summary>
        private string _poolId;

        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PoolId { get => this._poolId; set => this._poolId = value; }

        /// <summary>Creates an new <see cref="BatchPoolInfo" /> instance.</summary>
        public BatchPoolInfo()
        {

        }
    }
    /// Specifies how a Job should be assigned to a Pool.
    public partial interface IBatchPoolInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.",
        SerializedName = @"autoPoolIdPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string AutoPoolSpecificationAutoPoolIdPrefix { get; set; }
        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.",
        SerializedName = @"keepAlive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoPoolSpecificationKeepAlive { get; set; }
        /// <summary>The Pool specification for the auto Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Pool specification for the auto Pool.",
        SerializedName = @"pool",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get; set; }
        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.",
        SerializedName = @"poolLifetimeOption",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        string AutoPoolSpecificationPoolLifetimeOption { get; set; }
        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolId { get; set; }

    }
    /// Specifies how a Job should be assigned to a Pool.
    internal partial interface IBatchPoolInfoInternal

    {
        /// <summary>
        /// Characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted. If
        /// auto Pool creation fails, the Batch service moves the Job to a completed state, and the Pool creation error is set in
        /// the Job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified,
        /// deletion) of the auto Pool. Any user actions that affect the lifetime of the auto Pool while the Job is active will result
        /// in unexpected behavior. You must specify either the Pool ID or the auto Pool specification, but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification AutoPoolSpecification { get; set; }
        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        string AutoPoolSpecificationAutoPoolIdPrefix { get; set; }
        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        bool? AutoPoolSpecificationKeepAlive { get; set; }
        /// <summary>The Pool specification for the auto Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get; set; }
        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        string AutoPoolSpecificationPoolLifetimeOption { get; set; }
        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        string PoolId { get; set; }

    }
}