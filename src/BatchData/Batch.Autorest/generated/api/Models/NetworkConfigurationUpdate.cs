// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The network configuration for a Pool.</summary>
    public partial class NetworkConfigurationUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal
    {

        /// <summary>Backing field for <see cref="DynamicVnetAssignmentScope" /> property.</summary>
        private string _dynamicVnetAssignmentScope;

        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DynamicVnetAssignmentScope { get => this._dynamicVnetAssignmentScope; set => this._dynamicVnetAssignmentScope = value; }

        /// <summary>Backing field for <see cref="EnableAcceleratedNetworking" /> property.</summary>
        private bool? _enableAcceleratedNetworking;

        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? EnableAcceleratedNetworking { get => this._enableAcceleratedNetworking; set => this._enableAcceleratedNetworking = value; }

        /// <summary>Backing field for <see cref="EndpointConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate _endpointConfiguration;

        /// <summary>The configuration for endpoints on Compute Nodes in the Batch Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate EndpointConfiguration { get => (this._endpointConfiguration = this._endpointConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolEndpointConfigurationUpdate()); set => this._endpointConfiguration = value; }

        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdateInternal)EndpointConfiguration).InboundNatPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdateInternal)EndpointConfiguration).InboundNatPool = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for EndpointConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal.EndpointConfiguration { get => (this._endpointConfiguration = this._endpointConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolEndpointConfigurationUpdate()); set { {_endpointConfiguration = value;} } }

        /// <summary>Internal Acessors for PublicIPAddressConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal.PublicIPAddressConfiguration { get => (this._publicIPAddressConfiguration = this._publicIPAddressConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPublicIPAddressConfiguration()); set { {_publicIPAddressConfiguration = value;} } }

        /// <summary>Backing field for <see cref="PublicIPAddressConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration _publicIPAddressConfiguration;

        /// <summary>The Public IPAddress configuration for Compute Nodes in the Batch Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration PublicIPAddressConfiguration { get => (this._publicIPAddressConfiguration = this._publicIPAddressConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPublicIPAddressConfiguration()); set => this._publicIPAddressConfiguration = value; }

        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).IPAddressId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).IPAddressId = value ?? null /* arrayOf */; }

        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PublicIPAddressConfigurationIpaddressProvisioningType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).IPAddressProvisioningType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfigurationInternal)PublicIPAddressConfiguration).IPAddressProvisioningType = value ?? null; }

        /// <summary>Backing field for <see cref="SubnetId" /> property.</summary>
        private string _subnetId;

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string SubnetId { get => this._subnetId; set => this._subnetId = value; }

        /// <summary>Creates an new <see cref="NetworkConfigurationUpdate" /> instance.</summary>
        public NetworkConfigurationUpdate()
        {

        }
    }
    /// The network configuration for a Pool.
    public partial interface INetworkConfigurationUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope of dynamic vnet assignment.",
        SerializedName = @"dynamicVNetAssignmentScope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        string DynamicVnetAssignmentScope { get; set; }
        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.",
        SerializedName = @"enableAcceleratedNetworking",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAcceleratedNetworking { get; set; }
        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.",
        SerializedName = @"inboundNATPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string PublicIPAddressConfigurationIpaddressProvisioningType { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication, including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see: https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetId { get; set; }

    }
    /// The network configuration for a Pool.
    internal partial interface INetworkConfigurationUpdateInternal

    {
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        string DynamicVnetAssignmentScope { get; set; }
        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        bool? EnableAcceleratedNetworking { get; set; }
        /// <summary>The configuration for endpoints on Compute Nodes in the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate EndpointConfiguration { get; set; }
        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>The Public IPAddress configuration for Compute Nodes in the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration PublicIPAddressConfiguration { get; set; }
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string PublicIPAddressConfigurationIpaddressProvisioningType { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        string SubnetId { get; set; }

    }
}