// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>The number of Compute Nodes in each state for a Pool.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchPoolNodeCountsTypeConverter))]
    public partial class BatchPoolNodeCounts
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolNodeCounts"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchPoolNodeCounts(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Dedicated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).Dedicated = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts) content.GetValueForProperty("Dedicated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).Dedicated, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("LowPriority"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriority = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts) content.GetValueForProperty("LowPriority",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriority, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).PoolId = (string) content.GetValueForProperty("PoolId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).PoolId, global::System.Convert.ToString);
            }
            if (content.Contains("DedicatedCreating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedCreating = (int?) content.GetValueForProperty("DedicatedCreating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedCreating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedIdle"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedIdle = (int?) content.GetValueForProperty("DedicatedIdle",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedIdle, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedOffline"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedOffline = (int?) content.GetValueForProperty("DedicatedOffline",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedOffline, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedPreempted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedPreempted = (int?) content.GetValueForProperty("DedicatedPreempted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedPreempted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedRebooting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRebooting = (int?) content.GetValueForProperty("DedicatedRebooting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRebooting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedReimaging"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedReimaging = (int?) content.GetValueForProperty("DedicatedReimaging",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedReimaging, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRunning = (int?) content.GetValueForProperty("DedicatedRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedStarting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStarting = (int?) content.GetValueForProperty("DedicatedStarting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStarting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedStartTaskFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStartTaskFailed = (int?) content.GetValueForProperty("DedicatedStartTaskFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStartTaskFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedLeavingPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedLeavingPool = (int?) content.GetValueForProperty("DedicatedLeavingPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedLeavingPool, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedUnknown"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnknown = (int?) content.GetValueForProperty("DedicatedUnknown",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnknown, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedUnusable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnusable = (int?) content.GetValueForProperty("DedicatedUnusable",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnusable, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedWaitingForStartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedWaitingForStartTask = (int?) content.GetValueForProperty("DedicatedWaitingForStartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedWaitingForStartTask, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedDeallocated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocated = (int?) content.GetValueForProperty("DedicatedDeallocated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocated, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedDeallocating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocating = (int?) content.GetValueForProperty("DedicatedDeallocating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedTotal"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedTotal = (int?) content.GetValueForProperty("DedicatedTotal",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedTotal, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedUpgradingOS"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUpgradingOS = (int?) content.GetValueForProperty("DedicatedUpgradingOS",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUpgradingOS, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityCreating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityCreating = (int?) content.GetValueForProperty("LowPriorityCreating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityCreating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityIdle"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityIdle = (int?) content.GetValueForProperty("LowPriorityIdle",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityIdle, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityOffline"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityOffline = (int?) content.GetValueForProperty("LowPriorityOffline",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityOffline, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityPreempted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityPreempted = (int?) content.GetValueForProperty("LowPriorityPreempted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityPreempted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityRebooting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRebooting = (int?) content.GetValueForProperty("LowPriorityRebooting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRebooting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityReimaging"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityReimaging = (int?) content.GetValueForProperty("LowPriorityReimaging",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityReimaging, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRunning = (int?) content.GetValueForProperty("LowPriorityRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityStarting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStarting = (int?) content.GetValueForProperty("LowPriorityStarting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStarting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityStartTaskFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStartTaskFailed = (int?) content.GetValueForProperty("LowPriorityStartTaskFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStartTaskFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityLeavingPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityLeavingPool = (int?) content.GetValueForProperty("LowPriorityLeavingPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityLeavingPool, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityUnknown"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnknown = (int?) content.GetValueForProperty("LowPriorityUnknown",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnknown, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityUnusable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnusable = (int?) content.GetValueForProperty("LowPriorityUnusable",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnusable, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityWaitingForStartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityWaitingForStartTask = (int?) content.GetValueForProperty("LowPriorityWaitingForStartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityWaitingForStartTask, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityDeallocated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocated = (int?) content.GetValueForProperty("LowPriorityDeallocated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocated, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityDeallocating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocating = (int?) content.GetValueForProperty("LowPriorityDeallocating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityTotal"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityTotal = (int?) content.GetValueForProperty("LowPriorityTotal",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityTotal, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityUpgradingOS"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUpgradingOS = (int?) content.GetValueForProperty("LowPriorityUpgradingOS",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUpgradingOS, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolNodeCounts"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchPoolNodeCounts(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Dedicated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).Dedicated = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts) content.GetValueForProperty("Dedicated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).Dedicated, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("LowPriority"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriority = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts) content.GetValueForProperty("LowPriority",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriority, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeCountsTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).PoolId = (string) content.GetValueForProperty("PoolId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).PoolId, global::System.Convert.ToString);
            }
            if (content.Contains("DedicatedCreating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedCreating = (int?) content.GetValueForProperty("DedicatedCreating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedCreating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedIdle"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedIdle = (int?) content.GetValueForProperty("DedicatedIdle",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedIdle, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedOffline"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedOffline = (int?) content.GetValueForProperty("DedicatedOffline",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedOffline, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedPreempted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedPreempted = (int?) content.GetValueForProperty("DedicatedPreempted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedPreempted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedRebooting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRebooting = (int?) content.GetValueForProperty("DedicatedRebooting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRebooting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedReimaging"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedReimaging = (int?) content.GetValueForProperty("DedicatedReimaging",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedReimaging, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRunning = (int?) content.GetValueForProperty("DedicatedRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedStarting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStarting = (int?) content.GetValueForProperty("DedicatedStarting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStarting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedStartTaskFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStartTaskFailed = (int?) content.GetValueForProperty("DedicatedStartTaskFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedStartTaskFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedLeavingPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedLeavingPool = (int?) content.GetValueForProperty("DedicatedLeavingPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedLeavingPool, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedUnknown"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnknown = (int?) content.GetValueForProperty("DedicatedUnknown",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnknown, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedUnusable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnusable = (int?) content.GetValueForProperty("DedicatedUnusable",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUnusable, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedWaitingForStartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedWaitingForStartTask = (int?) content.GetValueForProperty("DedicatedWaitingForStartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedWaitingForStartTask, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedDeallocated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocated = (int?) content.GetValueForProperty("DedicatedDeallocated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocated, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedDeallocating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocating = (int?) content.GetValueForProperty("DedicatedDeallocating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedDeallocating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedTotal"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedTotal = (int?) content.GetValueForProperty("DedicatedTotal",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedTotal, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedUpgradingOS"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUpgradingOS = (int?) content.GetValueForProperty("DedicatedUpgradingOS",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).DedicatedUpgradingOS, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityCreating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityCreating = (int?) content.GetValueForProperty("LowPriorityCreating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityCreating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityIdle"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityIdle = (int?) content.GetValueForProperty("LowPriorityIdle",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityIdle, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityOffline"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityOffline = (int?) content.GetValueForProperty("LowPriorityOffline",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityOffline, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityPreempted"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityPreempted = (int?) content.GetValueForProperty("LowPriorityPreempted",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityPreempted, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityRebooting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRebooting = (int?) content.GetValueForProperty("LowPriorityRebooting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRebooting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityReimaging"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityReimaging = (int?) content.GetValueForProperty("LowPriorityReimaging",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityReimaging, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityRunning"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRunning = (int?) content.GetValueForProperty("LowPriorityRunning",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityRunning, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityStarting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStarting = (int?) content.GetValueForProperty("LowPriorityStarting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStarting, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityStartTaskFailed"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStartTaskFailed = (int?) content.GetValueForProperty("LowPriorityStartTaskFailed",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityStartTaskFailed, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityLeavingPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityLeavingPool = (int?) content.GetValueForProperty("LowPriorityLeavingPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityLeavingPool, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityUnknown"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnknown = (int?) content.GetValueForProperty("LowPriorityUnknown",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnknown, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityUnusable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnusable = (int?) content.GetValueForProperty("LowPriorityUnusable",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUnusable, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityWaitingForStartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityWaitingForStartTask = (int?) content.GetValueForProperty("LowPriorityWaitingForStartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityWaitingForStartTask, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityDeallocated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocated = (int?) content.GetValueForProperty("LowPriorityDeallocated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocated, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityDeallocating"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocating = (int?) content.GetValueForProperty("LowPriorityDeallocating",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityDeallocating, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityTotal"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityTotal = (int?) content.GetValueForProperty("LowPriorityTotal",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityTotal, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LowPriorityUpgradingOS"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUpgradingOS = (int?) content.GetValueForProperty("LowPriorityUpgradingOS",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCountsInternal)this).LowPriorityUpgradingOS, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolNodeCounts"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCounts" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCounts DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchPoolNodeCounts(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolNodeCounts"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCounts" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCounts DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchPoolNodeCounts(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchPoolNodeCounts" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchPoolNodeCounts" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolNodeCounts FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// The number of Compute Nodes in each state for a Pool.
    [System.ComponentModel.TypeConverter(typeof(BatchPoolNodeCountsTypeConverter))]
    public partial interface IBatchPoolNodeCounts

    {

    }
}