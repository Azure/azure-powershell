// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// On every file uploads, Batch service writes two log files to the compute node, 'fileuploadout.txt' and 'fileuploaderr.txt'.
    /// These log files are used to learn more about a specific failure.
    /// </summary>
    public partial class OutputFile :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileInternal
    {

        /// <summary>
        /// The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file
        /// (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains
        /// one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which
        /// is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container
        /// with a blob name matching their file name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerPath = value ?? null; }

        /// <summary>
        /// A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading
        /// files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader> ContainerUploadHeader { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerUploadHeader; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerUploadHeader = value ?? null /* arrayOf */; }

        /// <summary>
        /// The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the
        /// URL must include a Shared Access Signature (SAS) granting write permissions to the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerUrl = value ?? null; }

        /// <summary>Backing field for <see cref="Destination" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestination _destination;

        /// <summary>The destination for the output file(s).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestination Destination { get => (this._destination = this._destination ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileDestination()); set => this._destination = value; }

        /// <summary>Backing field for <see cref="FilePattern" /> property.</summary>
        private string _filePattern;

        /// <summary>
        /// A pattern indicating which file(s) to upload. Both relative and absolute paths are supported. Relative paths are relative
        /// to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern
        /// abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character
        /// in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character
        /// not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored
        /// by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will).
        /// A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory
        /// or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*]
        /// would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on
        /// Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string FilePattern { get => this._filePattern; set => this._filePattern = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for ContainerIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileInternal.ContainerIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).ContainerIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Destination</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestination Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileInternal.Destination { get => (this._destination = this._destination ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileDestination()); set { {_destination = value;} } }

        /// <summary>Internal Acessors for DestinationContainer</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestination Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileInternal.DestinationContainer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).Container; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal)Destination).Container = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UploadOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadConfig Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileInternal.UploadOption { get => (this._uploadOption = this._uploadOption ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileUploadConfig()); set { {_uploadOption = value;} } }

        /// <summary>Backing field for <see cref="UploadOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadConfig _uploadOption;

        /// <summary>
        /// Additional options for the upload operation, including under what conditions to perform the upload.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadConfig UploadOption { get => (this._uploadOption = this._uploadOption ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileUploadConfig()); set => this._uploadOption = value; }

        /// <summary>
        /// The conditions under which the Task output file or set of files should be uploaded. The default is taskcompletion.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UploadOptionUploadCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadConfigInternal)UploadOption).UploadCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadConfigInternal)UploadOption).UploadCondition = value ; }

        /// <summary>Creates an new <see cref="OutputFile" /> instance.</summary>
        public OutputFile()
        {

        }
    }
    /// On every file uploads, Batch service writes two log files to the compute node, 'fileuploadout.txt' and 'fileuploaderr.txt'.
    /// These log files are used to learn more about a specific failure.
    public partial interface IOutputFile :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file
        /// (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains
        /// one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which
        /// is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container
        /// with a blob name matching their file name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerPath { get; set; }
        /// <summary>
        /// A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading
        /// files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.",
        SerializedName = @"uploadHeaders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader> ContainerUploadHeader { get; set; }
        /// <summary>
        /// The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the
        /// URL must include a Shared Access Signature (SAS) granting write permissions to the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the URL must include a Shared Access Signature (SAS) granting write permissions to the container.",
        SerializedName = @"containerUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerUrl { get; set; }
        /// <summary>
        /// A pattern indicating which file(s) to upload. Both relative and absolute paths are supported. Relative paths are relative
        /// to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern
        /// abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character
        /// in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character
        /// not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored
        /// by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will).
        /// A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory
        /// or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*]
        /// would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on
        /// Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A pattern indicating which file(s) to upload. Both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with ""."" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.",
        SerializedName = @"filePattern",
        PossibleTypes = new [] { typeof(string) })]
        string FilePattern { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The conditions under which the Task output file or set of files should be uploaded. The default is taskcompletion.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The conditions under which the Task output file or set of files should be uploaded. The default is taskcompletion.",
        SerializedName = @"uploadCondition",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("tasksuccess", "taskfailure", "taskcompletion")]
        string UploadOptionUploadCondition { get; set; }

    }
    /// On every file uploads, Batch service writes two log files to the compute node, 'fileuploadout.txt' and 'fileuploaderr.txt'.
    /// These log files are used to learn more about a specific failure.
    internal partial interface IOutputFileInternal

    {
        /// <summary>
        /// The reference to the user assigned identity to use to access Azure Blob Storage specified by containerUrl. The identity
        /// must have write access to the Azure Blob Storage container.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference ContainerIdentityReference { get; set; }
        /// <summary>
        /// The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file
        /// (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains
        /// one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which
        /// is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container
        /// with a blob name matching their file name.
        /// </summary>
        string ContainerPath { get; set; }
        /// <summary>
        /// A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading
        /// files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader> ContainerUploadHeader { get; set; }
        /// <summary>
        /// The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the
        /// URL must include a Shared Access Signature (SAS) granting write permissions to the container.
        /// </summary>
        string ContainerUrl { get; set; }
        /// <summary>The destination for the output file(s).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestination Destination { get; set; }
        /// <summary>A location in Azure blob storage to which files are uploaded.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestination DestinationContainer { get; set; }
        /// <summary>
        /// A pattern indicating which file(s) to upload. Both relative and absolute paths are supported. Relative paths are relative
        /// to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern
        /// abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character
        /// in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character
        /// not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored
        /// by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will).
        /// A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory
        /// or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*]
        /// would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on
        /// Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
        /// </summary>
        string FilePattern { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// Additional options for the upload operation, including under what conditions to perform the upload.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadConfig UploadOption { get; set; }
        /// <summary>
        /// The conditions under which the Task output file or set of files should be uploaded. The default is taskcompletion.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("tasksuccess", "taskfailure", "taskcompletion")]
        string UploadOptionUploadCondition { get; set; }

    }
}