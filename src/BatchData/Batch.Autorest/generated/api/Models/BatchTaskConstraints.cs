// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Execution constraints to apply to a Task.</summary>
    public partial class BatchTaskConstraints :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal
    {

        /// <summary>Backing field for <see cref="MaxTaskRetryCount" /> property.</summary>
        private int? _maxTaskRetryCount;

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? MaxTaskRetryCount { get => this._maxTaskRetryCount; set => this._maxTaskRetryCount = value; }

        /// <summary>Backing field for <see cref="MaxWallClockTime" /> property.</summary>
        private global::System.TimeSpan? _maxWallClockTime;

        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? MaxWallClockTime { get => this._maxWallClockTime; set => this._maxWallClockTime = value; }

        /// <summary>Backing field for <see cref="RetentionTime" /> property.</summary>
        private global::System.TimeSpan? _retentionTime;

        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? RetentionTime { get => this._retentionTime; set => this._retentionTime = value; }

        /// <summary>Creates an new <see cref="BatchTaskConstraints" /> instance.</summary>
        public BatchTaskConstraints()
        {

        }
    }
    /// Execution constraints to apply to a Task.
    public partial interface IBatchTaskConstraints :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? MaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RetentionTime { get; set; }

    }
    /// Execution constraints to apply to a Task.
    internal partial interface IBatchTaskConstraintsInternal

    {
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        int? MaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        global::System.TimeSpan? MaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? RetentionTime { get; set; }

    }
}