// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Information about an Azure Batch subtask.</summary>
    public partial class BatchSubtask :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchSubtask,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchSubtaskInternal
    {

        /// <summary>Backing field for <see cref="ContainerInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo _containerInfo;

        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo ContainerInfo { get => (this._containerInfo = this._containerInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfo()); set => this._containerInfo = value; }

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).ContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).ContainerId = value ?? null; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).Error; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).Error = value ?? null; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).State = value ?? null; }

        /// <summary>Backing field for <see cref="EndTime" /> property.</summary>
        private global::System.DateTime? _endTime;

        /// <summary>
        /// The time at which the subtask completed. This property is set only if the subtask is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? EndTime { get => this._endTime; set => this._endTime = value; }

        /// <summary>Backing field for <see cref="ExitCode" /> property.</summary>
        private int? _exitCode;

        /// <summary>
        /// The exit code of the program specified on the subtask command line. This property is set only if the subtask is in the
        /// completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? ExitCode { get => this._exitCode; set => this._exitCode = value; }

        /// <summary>Backing field for <see cref="FailureInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo _failureInfo;

        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo FailureInfo { get => (this._failureInfo = this._failureInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfo()); set => this._failureInfo = value; }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Category; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Category = value ?? null; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Code = value ?? null; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Detail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Message = value ?? null; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private int? _id;

        /// <summary>The ID of the subtask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? Id { get => this._id; set => this._id = value; }

        /// <summary>Internal Acessors for ContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchSubtaskInternal.ContainerInfo { get => (this._containerInfo = this._containerInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfo()); set { {_containerInfo = value;} } }

        /// <summary>Internal Acessors for FailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchSubtaskInternal.FailureInfo { get => (this._failureInfo = this._failureInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfo()); set { {_failureInfo = value;} } }

        /// <summary>Internal Acessors for NodeInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchSubtaskInternal.NodeInfo { get => (this._nodeInfo = this._nodeInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeInfo()); set { {_nodeInfo = value;} } }

        /// <summary>Backing field for <see cref="NodeInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo _nodeInfo;

        /// <summary>Information about the Compute Node on which the subtask ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo NodeInfo { get => (this._nodeInfo = this._nodeInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeInfo()); set => this._nodeInfo = value; }

        /// <summary>
        /// An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled
        /// on this Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoAffinityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).AffinityId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).AffinityId = value ?? null; }

        /// <summary>The ID of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoNodeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeId = value ?? null; }

        /// <summary>The URL of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoNodeUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeUrl = value ?? null; }

        /// <summary>The ID of the Pool on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).PoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).PoolId = value ?? null; }

        /// <summary>The root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoTaskRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectory = value ?? null; }

        /// <summary>The URL to the root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoTaskRootDirectoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectoryUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectoryUrl = value ?? null; }

        /// <summary>Backing field for <see cref="PreviousState" /> property.</summary>
        private string _previousState;

        /// <summary>
        /// The previous state of the subtask. This property is not set if the subtask is in its initial running state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PreviousState { get => this._previousState; set => this._previousState = value; }

        /// <summary>Backing field for <see cref="PreviousStateTransitionTime" /> property.</summary>
        private global::System.DateTime? _previousStateTransitionTime;

        /// <summary>
        /// The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial running
        /// state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? PreviousStateTransitionTime { get => this._previousStateTransitionTime; set => this._previousStateTransitionTime = value; }

        /// <summary>Backing field for <see cref="Result" /> property.</summary>
        private string _result;

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Result { get => this._result; set => this._result = value; }

        /// <summary>Backing field for <see cref="StartTime" /> property.</summary>
        private global::System.DateTime? _startTime;

        /// <summary>
        /// The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time
        /// at which the subtask started running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StartTime { get => this._startTime; set => this._startTime = value; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The current state of the subtask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; set => this._state = value; }

        /// <summary>Backing field for <see cref="StateTransitionTime" /> property.</summary>
        private global::System.DateTime? _stateTransitionTime;

        /// <summary>The time at which the subtask entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StateTransitionTime { get => this._stateTransitionTime; set => this._stateTransitionTime = value; }

        /// <summary>Creates an new <see cref="BatchSubtask" /> instance.</summary>
        public BatchSubtask()
        {

        }
    }
    /// Information about an Azure Batch subtask.
    public partial interface IBatchSubtask :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the subtask completed. This property is set only if the subtask is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the subtask completed. This property is set only if the subtask is in the Completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? EndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the subtask command line. This property is set only if the subtask is in the
        /// completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exit code of the program specified on the subtask command line. This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? ExitCode { get; set; }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoMessage { get; set; }
        /// <summary>The ID of the subtask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the subtask.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(int) })]
        int? Id { get; set; }
        /// <summary>
        /// An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled
        /// on this Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled on this Compute Node.",
        SerializedName = @"affinityId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoAffinityId { get; set; }
        /// <summary>The ID of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Compute Node on which the Task ran.",
        SerializedName = @"nodeId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoNodeId { get; set; }
        /// <summary>The URL of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the Compute Node on which the Task ran.",
        SerializedName = @"nodeUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoNodeUrl { get; set; }
        /// <summary>The ID of the Pool on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Pool on which the Task ran.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoPoolId { get; set; }
        /// <summary>The root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The root directory of the Task on the Compute Node.",
        SerializedName = @"taskRootDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL to the root directory of the Task on the Compute Node.",
        SerializedName = @"taskRootDirectoryUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>
        /// The previous state of the subtask. This property is not set if the subtask is in its initial running state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The previous state of the subtask. This property is not set if the subtask is in its initial running state.",
        SerializedName = @"previousState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("preparing", "running", "completed")]
        string PreviousState { get; set; }
        /// <summary>
        /// The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial running
        /// state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial running state.",
        SerializedName = @"previousStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PreviousStateTransitionTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string Result { get; set; }
        /// <summary>
        /// The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time
        /// at which the subtask started running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartTime { get; set; }
        /// <summary>The current state of the subtask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The current state of the subtask.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("preparing", "running", "completed")]
        string State { get; set; }
        /// <summary>The time at which the subtask entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the subtask entered its current state.",
        SerializedName = @"stateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StateTransitionTime { get; set; }

    }
    /// Information about an Azure Batch subtask.
    internal partial interface IBatchSubtaskInternal

    {
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo ContainerInfo { get; set; }
        /// <summary>The ID of the container.</summary>
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the subtask completed. This property is set only if the subtask is in the Completed state.
        /// </summary>
        global::System.DateTime? EndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the subtask command line. This property is set only if the subtask is in the
        /// completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        int? ExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo FailureInfo { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string FailureInfoMessage { get; set; }
        /// <summary>The ID of the subtask.</summary>
        int? Id { get; set; }
        /// <summary>Information about the Compute Node on which the subtask ran.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo NodeInfo { get; set; }
        /// <summary>
        /// An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled
        /// on this Compute Node.
        /// </summary>
        string NodeInfoAffinityId { get; set; }
        /// <summary>The ID of the Compute Node on which the Task ran.</summary>
        string NodeInfoNodeId { get; set; }
        /// <summary>The URL of the Compute Node on which the Task ran.</summary>
        string NodeInfoNodeUrl { get; set; }
        /// <summary>The ID of the Pool on which the Task ran.</summary>
        string NodeInfoPoolId { get; set; }
        /// <summary>The root directory of the Task on the Compute Node.</summary>
        string NodeInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Task on the Compute Node.</summary>
        string NodeInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>
        /// The previous state of the subtask. This property is not set if the subtask is in its initial running state.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("preparing", "running", "completed")]
        string PreviousState { get; set; }
        /// <summary>
        /// The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial running
        /// state.
        /// </summary>
        global::System.DateTime? PreviousStateTransitionTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string Result { get; set; }
        /// <summary>
        /// The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time
        /// at which the subtask started running.
        /// </summary>
        global::System.DateTime? StartTime { get; set; }
        /// <summary>The current state of the subtask.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("preparing", "running", "completed")]
        string State { get; set; }
        /// <summary>The time at which the subtask entered its current state.</summary>
        global::System.DateTime? StateTransitionTime { get; set; }

    }
}