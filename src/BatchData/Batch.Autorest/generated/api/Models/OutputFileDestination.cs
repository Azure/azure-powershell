// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The destination to which a file should be uploaded.</summary>
    public partial class OutputFileDestination :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestination,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal
    {

        /// <summary>Backing field for <see cref="Container" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestination _container;

        /// <summary>A location in Azure blob storage to which files are uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestination Container { get => (this._container = this._container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileBlobContainerDestination()); set => this._container = value; }

        /// <summary>
        /// The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file
        /// (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains
        /// one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which
        /// is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container
        /// with a blob name matching their file name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).Path; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).Path = value ?? null; }

        /// <summary>
        /// A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading
        /// files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader> ContainerUploadHeader { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).UploadHeader; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).UploadHeader = value ?? null /* arrayOf */; }

        /// <summary>
        /// The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the
        /// URL must include a Shared Access Signature (SAS) granting write permissions to the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).ContainerUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).ContainerUrl = value ?? null; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for Container</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestination Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal.Container { get => (this._container = this._container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileBlobContainerDestination()); set { {_container = value;} } }

        /// <summary>Internal Acessors for ContainerIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileDestinationInternal.ContainerIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).IdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestinationInternal)Container).IdentityReference = value ?? null /* model class */; }

        /// <summary>Creates an new <see cref="OutputFileDestination" /> instance.</summary>
        public OutputFileDestination()
        {

        }
    }
    /// The destination to which a file should be uploaded.
    public partial interface IOutputFileDestination :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file
        /// (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains
        /// one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which
        /// is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container
        /// with a blob name matching their file name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerPath { get; set; }
        /// <summary>
        /// A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading
        /// files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.",
        SerializedName = @"uploadHeaders",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader> ContainerUploadHeader { get; set; }
        /// <summary>
        /// The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the
        /// URL must include a Shared Access Signature (SAS) granting write permissions to the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the URL must include a Shared Access Signature (SAS) granting write permissions to the container.",
        SerializedName = @"containerUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerUrl { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }

    }
    /// The destination to which a file should be uploaded.
    internal partial interface IOutputFileDestinationInternal

    {
        /// <summary>A location in Azure blob storage to which files are uploaded.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileBlobContainerDestination Container { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access Azure Blob Storage specified by containerUrl. The identity
        /// must have write access to the Azure Blob Storage container.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference ContainerIdentityReference { get; set; }
        /// <summary>
        /// The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific file
        /// (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains
        /// one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which
        /// is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container
        /// with a blob name matching their file name.
        /// </summary>
        string ContainerPath { get; set; }
        /// <summary>
        /// A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when uploading
        /// files to Azure Storage. Official document on allowed headers when uploading blobs: https://learn.microsoft.com/rest/api/storageservices/put-blob#request-headers-all-blob-types.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFileUploadHeader> ContainerUploadHeader { get; set; }
        /// <summary>
        /// The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed identity, the
        /// URL must include a Shared Access Signature (SAS) granting write permissions to the container.
        /// </summary>
        string ContainerUrl { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }

    }
}