// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>
    /// A Job Preparation Task to run before any Tasks of the Job on any given Compute Node.
    /// You can use Job Preparation to prepare a Node to run Tasks for the Job.
    /// Activities commonly performed in Job Preparation include: Downloading common
    /// resource files used by all the Tasks in the Job. The Job Preparation Task can
    /// download these common resource files to the shared location on the Node.
    /// (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the Node so
    /// that all Tasks of that Job can communicate with it. If the Job Preparation Task
    /// fails (that is, exhausts its retry count before exiting with exit code 0),
    /// Batch will not run Tasks of this Job on the Node. The Compute Node remains
    /// ineligible to run Tasks of this Job until it is reimaged. The Compute Node
    /// remains active and can be used for other Jobs. The Job Preparation Task can run
    /// multiple times on the same Node. Therefore, you should write the Job
    /// Preparation Task to handle re-execution. If the Node is rebooted, the Job
    /// Preparation Task is run again on the Compute Node before scheduling any other
    /// Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job
    /// Preparation Task did not previously complete. If the Node is reimaged, the Job
    /// Preparation Task is run again before scheduling any Task of the Job. Batch will
    /// retry Tasks when a recovery operation is triggered on a Node. Examples of
    /// recovery operations include (but are not limited to) when an unhealthy Node is
    /// rebooted or a Compute Node disappeared due to host failure. Retries due to
    /// recovery operations are independent of and are not counted against the
    /// maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to
    /// a recovery operation may occur. Because of this, all Tasks should be
    /// idempotent. This means Tasks need to tolerate being interrupted and restarted
    /// without causing any corruption or duplicate data. The best practice for long
    /// running Tasks is to use some form of checkpointing.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(BatchJobPreparationTaskTypeConverter))]
    public partial class BatchJobPreparationTask
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchJobPreparationTask(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Constraint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Constraint = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints) content.GetValueForProperty("Constraint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Constraint, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraintsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).EnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("WaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).WaitForSuccess = (bool?) content.GetValueForProperty("WaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).WaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RerunOnNodeRebootAfterSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RerunOnNodeRebootAfterSuccess = (bool?) content.GetValueForProperty("RerunOnNodeRebootAfterSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RerunOnNodeRebootAfterSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("ConstraintMaxWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintMaxWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintRetentionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintRetentionTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintRetentionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintRetentionTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxTaskRetryCount = (int?) content.GetValueForProperty("ConstraintMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchJobPreparationTask(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Constraint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Constraint = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints) content.GetValueForProperty("Constraint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Constraint, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraintsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).EnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("WaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).WaitForSuccess = (bool?) content.GetValueForProperty("WaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).WaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RerunOnNodeRebootAfterSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RerunOnNodeRebootAfterSuccess = (bool?) content.GetValueForProperty("RerunOnNodeRebootAfterSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RerunOnNodeRebootAfterSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("ConstraintMaxWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintMaxWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintRetentionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintRetentionTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintRetentionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintRetentionTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxTaskRetryCount = (int?) content.GetValueForProperty("ConstraintMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).ConstraintMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchJobPreparationTask(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchJobPreparationTask(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchJobPreparationTask" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchJobPreparationTask" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// A Job Preparation Task to run before any Tasks of the Job on any given Compute Node.
    /// You can use Job Preparation to prepare a Node to run Tasks for the Job.
    /// Activities commonly performed in Job Preparation include: Downloading common
    /// resource files used by all the Tasks in the Job. The Job Preparation Task can
    /// download these common resource files to the shared location on the Node.
    /// (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the Node so
    /// that all Tasks of that Job can communicate with it. If the Job Preparation Task
    /// fails (that is, exhausts its retry count before exiting with exit code 0),
    /// Batch will not run Tasks of this Job on the Node. The Compute Node remains
    /// ineligible to run Tasks of this Job until it is reimaged. The Compute Node
    /// remains active and can be used for other Jobs. The Job Preparation Task can run
    /// multiple times on the same Node. Therefore, you should write the Job
    /// Preparation Task to handle re-execution. If the Node is rebooted, the Job
    /// Preparation Task is run again on the Compute Node before scheduling any other
    /// Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job
    /// Preparation Task did not previously complete. If the Node is reimaged, the Job
    /// Preparation Task is run again before scheduling any Task of the Job. Batch will
    /// retry Tasks when a recovery operation is triggered on a Node. Examples of
    /// recovery operations include (but are not limited to) when an unhealthy Node is
    /// rebooted or a Compute Node disappeared due to host failure. Retries due to
    /// recovery operations are independent of and are not counted against the
    /// maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to
    /// a recovery operation may occur. Because of this, all Tasks should be
    /// idempotent. This means Tasks need to tolerate being interrupted and restarted
    /// without causing any corruption or duplicate data. The best practice for long
    /// running Tasks is to use some form of checkpointing.
    [System.ComponentModel.TypeConverter(typeof(BatchJobPreparationTaskTypeConverter))]
    public partial interface IBatchJobPreparationTask

    {

    }
}