// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Information about a Task running on a Compute Node.</summary>
    public partial class BatchTaskInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal
    {

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoContainerId = value ?? null; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoError = value ?? null; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoState = value ?? null; }

        /// <summary>Backing field for <see cref="ExecutionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo _executionInfo;

        /// <summary>Information about the execution of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo ExecutionInfo { get => (this._executionInfo = this._executionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfo()); set => this._executionInfo = value; }

        /// <summary>
        /// The time at which the Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).EndTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed
        /// state. In general, the exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination
        /// via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ExecutionInfoExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ExitCode = value ?? default(int); }

        /// <summary>
        /// The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property
        /// is set only if the requeueCount is nonzero.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoLastRequeueTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRequeueTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRequeueTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoLastRetryTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRetryTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRetryTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes
        /// Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that
        /// running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued
        /// for these reasons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ExecutionInfoRequeueCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RequeueCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RequeueCount = value ?? default(int); }

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ExecutionInfoResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).Result = value ?? null; }

        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ExecutionInfoRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RetryCount = value ?? default(int); }

        /// <summary>
        /// The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource
        /// files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
        /// the Task has been restarted or retried, this is the most recent time at which the Task started running. This property
        /// is present only for Tasks that are in the running or completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCategory = value ?? null; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCode = value ?? null; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoDetail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoMessage = value ?? null; }

        /// <summary>Backing field for <see cref="JobId" /> property.</summary>
        private string _jobId;

        /// <summary>The ID of the Job to which the Task belongs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string JobId { get => this._jobId; set => this._jobId = value; }

        /// <summary>Internal Acessors for ExecutionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal.ExecutionInfo { get => (this._executionInfo = this._executionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfo()); set { {_executionInfo = value;} } }

        /// <summary>Internal Acessors for ExecutionInfoContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal.ExecutionInfoContainerInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExecutionInfoFailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfoInternal.ExecutionInfoFailureInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfo = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="SubtaskId" /> property.</summary>
        private int? _subtaskId;

        /// <summary>The ID of the subtask if the Task is a multi-instance Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? SubtaskId { get => this._subtaskId; set => this._subtaskId = value; }

        /// <summary>Backing field for <see cref="TaskId" /> property.</summary>
        private string _taskId;

        /// <summary>The ID of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskId { get => this._taskId; set => this._taskId = value; }

        /// <summary>Backing field for <see cref="TaskState" /> property.</summary>
        private string _taskState;

        /// <summary>The current state of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskState { get => this._taskState; set => this._taskState = value; }

        /// <summary>Backing field for <see cref="TaskUrl" /> property.</summary>
        private string _taskUrl;

        /// <summary>The URL of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskUrl { get => this._taskUrl; set => this._taskUrl = value; }

        /// <summary>Creates an new <see cref="BatchTaskInfo" /> instance.</summary>
        public BatchTaskInfo()
        {

        }
    }
    /// Information about a Task running on a Compute Node.
    public partial interface IBatchTaskInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Task completed. This property is set only if the Task is in the Completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed
        /// state. In general, the exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination
        /// via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? ExecutionInfoExitCode { get; set; }
        /// <summary>
        /// The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property
        /// is set only if the requeueCount is nonzero.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property is set only if the requeueCount is nonzero.",
        SerializedName = @"lastRequeueTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoLastRequeueTime { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The most recent time at which a retry of the Task started running. This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.",
        SerializedName = @"lastRetryTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoLastRetryTime { get; set; }
        /// <summary>
        /// The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes
        /// Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that
        /// running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued
        /// for these reasons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued for these reasons.",
        SerializedName = @"requeueCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExecutionInfoRequeueCount { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string ExecutionInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.",
        SerializedName = @"retryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExecutionInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource
        /// files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
        /// the Task has been restarted or retried, this is the most recent time at which the Task started running. This property
        /// is present only for Tasks that are in the running or completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If the Task has been restarted or retried, this is the most recent time at which the Task started running. This property is present only for Tasks that are in the running or completed state.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoStartTime { get; set; }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoMessage { get; set; }
        /// <summary>The ID of the Job to which the Task belongs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Job to which the Task belongs.",
        SerializedName = @"jobId",
        PossibleTypes = new [] { typeof(string) })]
        string JobId { get; set; }
        /// <summary>The ID of the subtask if the Task is a multi-instance Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the subtask if the Task is a multi-instance Task.",
        SerializedName = @"subtaskId",
        PossibleTypes = new [] { typeof(int) })]
        int? SubtaskId { get; set; }
        /// <summary>The ID of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Task.",
        SerializedName = @"taskId",
        PossibleTypes = new [] { typeof(string) })]
        string TaskId { get; set; }
        /// <summary>The current state of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The current state of the Task.",
        SerializedName = @"taskState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "preparing", "running", "completed")]
        string TaskState { get; set; }
        /// <summary>The URL of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the Task.",
        SerializedName = @"taskUrl",
        PossibleTypes = new [] { typeof(string) })]
        string TaskUrl { get; set; }

    }
    /// Information about a Task running on a Compute Node.
    internal partial interface IBatchTaskInfoInternal

    {
        /// <summary>The ID of the container.</summary>
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string ContainerInfoState { get; set; }
        /// <summary>Information about the execution of the Task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo ExecutionInfo { get; set; }
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo ExecutionInfoContainerInfo { get; set; }
        /// <summary>
        /// The time at which the Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        global::System.DateTime? ExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed
        /// state. In general, the exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination
        /// via the API) you may see an operating system-defined exit code.
        /// </summary>
        int? ExecutionInfoExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo ExecutionInfoFailureInfo { get; set; }
        /// <summary>
        /// The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property
        /// is set only if the requeueCount is nonzero.
        /// </summary>
        global::System.DateTime? ExecutionInfoLastRequeueTime { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        global::System.DateTime? ExecutionInfoLastRetryTime { get; set; }
        /// <summary>
        /// The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes
        /// Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that
        /// running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued
        /// for these reasons.
        /// </summary>
        int? ExecutionInfoRequeueCount { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string ExecutionInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        int? ExecutionInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource
        /// files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
        /// the Task has been restarted or retried, this is the most recent time at which the Task started running. This property
        /// is present only for Tasks that are in the running or completed state.
        /// </summary>
        global::System.DateTime? ExecutionInfoStartTime { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string FailureInfoMessage { get; set; }
        /// <summary>The ID of the Job to which the Task belongs.</summary>
        string JobId { get; set; }
        /// <summary>The ID of the subtask if the Task is a multi-instance Task.</summary>
        int? SubtaskId { get; set; }
        /// <summary>The ID of the Task.</summary>
        string TaskId { get; set; }
        /// <summary>The current state of the Task.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "preparing", "running", "completed")]
        string TaskState { get; set; }
        /// <summary>The URL of the Task.</summary>
        string TaskUrl { get; set; }

    }
}