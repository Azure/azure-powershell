// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Resource usage statistics for a Job Schedule.</summary>
    public partial class BatchJobScheduleStatistics :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleStatistics,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleStatisticsInternal
    {

        /// <summary>Backing field for <see cref="FailedTasksCount" /> property.</summary>
        private string _failedTasksCount;

        /// <summary>
        /// The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if
        /// it exhausts its maximum retry count without returning exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string FailedTasksCount { get => this._failedTasksCount; set => this._failedTasksCount = value; }

        /// <summary>Backing field for <see cref="KernelCpuTime" /> property.</summary>
        private global::System.TimeSpan _kernelCpuTime;

        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created
        /// under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan KernelCpuTime { get => this._kernelCpuTime; set => this._kernelCpuTime = value; }

        /// <summary>Backing field for <see cref="LastUpdateTime" /> property.</summary>
        private global::System.DateTime _lastUpdateTime;

        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime LastUpdateTime { get => this._lastUpdateTime; set => this._lastUpdateTime = value; }

        /// <summary>Backing field for <see cref="ReadIoGiB" /> property.</summary>
        private float _readIoGiB;

        /// <summary>
        /// The total gibibytes read from disk by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public float ReadIoGiB { get => this._readIoGiB; set => this._readIoGiB = value; }

        /// <summary>Backing field for <see cref="ReadIop" /> property.</summary>
        private string _readIop;

        /// <summary>
        /// The total number of disk read operations made by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ReadIop { get => this._readIop; set => this._readIop = value; }

        /// <summary>Backing field for <see cref="StartTime" /> property.</summary>
        private global::System.DateTime _startTime;

        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime StartTime { get => this._startTime; set => this._startTime = value; }

        /// <summary>Backing field for <see cref="SucceededTasksCount" /> property.</summary>
        private string _succeededTasksCount;

        /// <summary>
        /// The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task
        /// completes successfully if it returns exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string SucceededTasksCount { get => this._succeededTasksCount; set => this._succeededTasksCount = value; }

        /// <summary>Backing field for <see cref="TaskRetriesCount" /> property.</summary>
        private string _taskRetriesCount;

        /// <summary>
        /// The total number of retries during the given time range on all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskRetriesCount { get => this._taskRetriesCount; set => this._taskRetriesCount = value; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>The URL of the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Url { get => this._url; set => this._url = value; }

        /// <summary>Backing field for <see cref="UserCpuTime" /> property.</summary>
        private global::System.TimeSpan _userCpuTime;

        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created
        /// under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan UserCpuTime { get => this._userCpuTime; set => this._userCpuTime = value; }

        /// <summary>Backing field for <see cref="WaitTime" /> property.</summary>
        private global::System.TimeSpan _waitTime;

        /// <summary>
        /// The total wait time of all Tasks in all Jobs created under the schedule. The wait time for a Task is defined as the elapsed
        /// time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait
        /// time is the time to the most recent Task execution.). This value is only reported in the Account lifetime statistics;
        /// it is not included in the Job statistics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan WaitTime { get => this._waitTime; set => this._waitTime = value; }

        /// <summary>Backing field for <see cref="WallClockTime" /> property.</summary>
        private global::System.TimeSpan _wallClockTime;

        /// <summary>
        /// The total wall clock time of all the Tasks in all the Jobs created under the schedule. The wall clock time is the elapsed
        /// time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task
        /// retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan WallClockTime { get => this._wallClockTime; set => this._wallClockTime = value; }

        /// <summary>Backing field for <see cref="WriteIoGiB" /> property.</summary>
        private float _writeIoGiB;

        /// <summary>
        /// The total gibibytes written to disk by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public float WriteIoGiB { get => this._writeIoGiB; set => this._writeIoGiB = value; }

        /// <summary>Backing field for <see cref="WriteIop" /> property.</summary>
        private string _writeIop;

        /// <summary>
        /// The total number of disk write operations made by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string WriteIop { get => this._writeIop; set => this._writeIop = value; }

        /// <summary>Creates an new <see cref="BatchJobScheduleStatistics" /> instance.</summary>
        public BatchJobScheduleStatistics()
        {

        }
    }
    /// Resource usage statistics for a Job Schedule.
    public partial interface IBatchJobScheduleStatistics :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if
        /// it exhausts its maximum retry count without returning exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if it exhausts its maximum retry count without returning exit code 0.",
        SerializedName = @"numFailedTasks",
        PossibleTypes = new [] { typeof(string) })]
        string FailedTasksCount { get; set; }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created
        /// under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule.",
        SerializedName = @"kernelCPUTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan KernelCpuTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime LastUpdateTime { get; set; }
        /// <summary>
        /// The total gibibytes read from disk by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total gibibytes read from disk by all Tasks in all Jobs created under the schedule.",
        SerializedName = @"readIOGiB",
        PossibleTypes = new [] { typeof(float) })]
        float ReadIoGiB { get; set; }
        /// <summary>
        /// The total number of disk read operations made by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of disk read operations made by all Tasks in all Jobs created under the schedule.",
        SerializedName = @"readIOps",
        PossibleTypes = new [] { typeof(string) })]
        string ReadIop { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The start time of the time range covered by the statistics.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime StartTime { get; set; }
        /// <summary>
        /// The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task
        /// completes successfully if it returns exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task completes successfully if it returns exit code 0.",
        SerializedName = @"numSucceededTasks",
        PossibleTypes = new [] { typeof(string) })]
        string SucceededTasksCount { get; set; }
        /// <summary>
        /// The total number of retries during the given time range on all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of retries during the given time range on all Tasks in all Jobs created under the schedule.",
        SerializedName = @"numTaskRetries",
        PossibleTypes = new [] { typeof(string) })]
        string TaskRetriesCount { get; set; }
        /// <summary>The URL of the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the statistics.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get; set; }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created
        /// under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule.",
        SerializedName = @"userCPUTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan UserCpuTime { get; set; }
        /// <summary>
        /// The total wait time of all Tasks in all Jobs created under the schedule. The wait time for a Task is defined as the elapsed
        /// time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait
        /// time is the time to the most recent Task execution.). This value is only reported in the Account lifetime statistics;
        /// it is not included in the Job statistics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total wait time of all Tasks in all Jobs created under the schedule. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.). This value is only reported in the Account lifetime statistics; it is not included in the Job statistics.",
        SerializedName = @"waitTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan WaitTime { get; set; }
        /// <summary>
        /// The total wall clock time of all the Tasks in all the Jobs created under the schedule. The wall clock time is the elapsed
        /// time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task
        /// retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total wall clock time of all the Tasks in all the Jobs created under the schedule. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries.",
        SerializedName = @"wallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan WallClockTime { get; set; }
        /// <summary>
        /// The total gibibytes written to disk by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total gibibytes written to disk by all Tasks in all Jobs created under the schedule.",
        SerializedName = @"writeIOGiB",
        PossibleTypes = new [] { typeof(float) })]
        float WriteIoGiB { get; set; }
        /// <summary>
        /// The total number of disk write operations made by all Tasks in all Jobs created under the schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of disk write operations made by all Tasks in all Jobs created under the schedule.",
        SerializedName = @"writeIOps",
        PossibleTypes = new [] { typeof(string) })]
        string WriteIop { get; set; }

    }
    /// Resource usage statistics for a Job Schedule.
    internal partial interface IBatchJobScheduleStatisticsInternal

    {
        /// <summary>
        /// The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if
        /// it exhausts its maximum retry count without returning exit code 0.
        /// </summary>
        string FailedTasksCount { get; set; }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created
        /// under the schedule.
        /// </summary>
        global::System.TimeSpan KernelCpuTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        global::System.DateTime LastUpdateTime { get; set; }
        /// <summary>
        /// The total gibibytes read from disk by all Tasks in all Jobs created under the schedule.
        /// </summary>
        float ReadIoGiB { get; set; }
        /// <summary>
        /// The total number of disk read operations made by all Tasks in all Jobs created under the schedule.
        /// </summary>
        string ReadIop { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        global::System.DateTime StartTime { get; set; }
        /// <summary>
        /// The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task
        /// completes successfully if it returns exit code 0.
        /// </summary>
        string SucceededTasksCount { get; set; }
        /// <summary>
        /// The total number of retries during the given time range on all Tasks in all Jobs created under the schedule.
        /// </summary>
        string TaskRetriesCount { get; set; }
        /// <summary>The URL of the statistics.</summary>
        string Url { get; set; }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created
        /// under the schedule.
        /// </summary>
        global::System.TimeSpan UserCpuTime { get; set; }
        /// <summary>
        /// The total wait time of all Tasks in all Jobs created under the schedule. The wait time for a Task is defined as the elapsed
        /// time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait
        /// time is the time to the most recent Task execution.). This value is only reported in the Account lifetime statistics;
        /// it is not included in the Job statistics.
        /// </summary>
        global::System.TimeSpan WaitTime { get; set; }
        /// <summary>
        /// The total wall clock time of all the Tasks in all the Jobs created under the schedule. The wall clock time is the elapsed
        /// time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task
        /// retries.
        /// </summary>
        global::System.TimeSpan WallClockTime { get; set; }
        /// <summary>
        /// The total gibibytes written to disk by all Tasks in all Jobs created under the schedule.
        /// </summary>
        float WriteIoGiB { get; set; }
        /// <summary>
        /// The total number of disk write operations made by all Tasks in all Jobs created under the schedule.
        /// </summary>
        string WriteIop { get; set; }

    }
}