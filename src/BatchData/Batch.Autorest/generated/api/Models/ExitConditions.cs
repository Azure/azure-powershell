// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Specifies how the Batch service should respond when the Task completes.</summary>
    public partial class ExitConditions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal
    {

        /// <summary>Backing field for <see cref="Default" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions _default;

        /// <summary>
        /// How the Batch service should respond if the Task fails with an exit condition not covered by any of the other properties.
        /// This value is used if the Task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection,
        /// with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError
        /// property is not present. If you want non-default behavior on exit code 0, you must list it explicitly using the exitCodes
        /// or exitCodeRanges collection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Default { get => (this._default = this._default ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set => this._default = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DefaultDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)Default).DependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)Default).DependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DefaultJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)Default).JobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)Default).JobAction = value ?? null; }

        /// <summary>Backing field for <see cref="ExitCode" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> _exitCode;

        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitCode { get => this._exitCode; set => this._exitCode = value; }

        /// <summary>Backing field for <see cref="ExitCodeRange" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> _exitCodeRange;

        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitCodeRange { get => this._exitCodeRange; set => this._exitCodeRange = value; }

        /// <summary>Backing field for <see cref="FileUploadError" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions _fileUploadError;

        /// <summary>
        /// How the Batch service should respond if a file upload error occurs. If the Task exited with an exit code that was specified
        /// via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code
        /// takes precedence.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions FileUploadError { get => (this._fileUploadError = this._fileUploadError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set => this._fileUploadError = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FileUploadErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)FileUploadError).DependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)FileUploadError).DependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FileUploadErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)FileUploadError).JobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)FileUploadError).JobAction = value ?? null; }

        /// <summary>Internal Acessors for Default</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal.Default { get => (this._default = this._default ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set { {_default = value;} } }

        /// <summary>Internal Acessors for FileUploadError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal.FileUploadError { get => (this._fileUploadError = this._fileUploadError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set { {_fileUploadError = value;} } }

        /// <summary>Internal Acessors for PreProcessingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal.PreProcessingError { get => (this._preProcessingError = this._preProcessingError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set { {_preProcessingError = value;} } }

        /// <summary>Backing field for <see cref="PreProcessingError" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions _preProcessingError;

        /// <summary>
        /// How the Batch service should respond if the Task fails to start due to an error.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions PreProcessingError { get => (this._preProcessingError = this._preProcessingError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitOptions()); set => this._preProcessingError = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PreProcessingErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)PreProcessingError).DependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)PreProcessingError).DependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PreProcessingErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)PreProcessingError).JobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptionsInternal)PreProcessingError).JobAction = value ?? null; }

        /// <summary>Creates an new <see cref="ExitConditions" /> instance.</summary>
        public ExitConditions()
        {

        }
    }
    /// Specifies how the Batch service should respond when the Task completes.
    public partial interface IExitConditions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string DefaultDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string DefaultJobAction { get; set; }
        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of individual Task exit codes and how the Batch service should respond to them.",
        SerializedName = @"exitCodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitCode { get; set; }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of Task exit code ranges and how the Batch service should respond to them.",
        SerializedName = @"exitCodeRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitCodeRange { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string FileUploadErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string FileUploadErrorJobAction { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string PreProcessingErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string PreProcessingErrorJobAction { get; set; }

    }
    /// Specifies how the Batch service should respond when the Task completes.
    internal partial interface IExitConditionsInternal

    {
        /// <summary>
        /// How the Batch service should respond if the Task fails with an exit condition not covered by any of the other properties.
        /// This value is used if the Task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection,
        /// with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError
        /// property is not present. If you want non-default behavior on exit code 0, you must list it explicitly using the exitCodes
        /// or exitCodeRanges collection.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Default { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string DefaultDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string DefaultJobAction { get; set; }
        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitCode { get; set; }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitCodeRange { get; set; }
        /// <summary>
        /// How the Batch service should respond if a file upload error occurs. If the Task exited with an exit code that was specified
        /// via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code
        /// takes precedence.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions FileUploadError { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string FileUploadErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string FileUploadErrorJobAction { get; set; }
        /// <summary>
        /// How the Batch service should respond if the Task fails to start due to an error.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions PreProcessingError { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string PreProcessingErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string PreProcessingErrorJobAction { get; set; }

    }
}