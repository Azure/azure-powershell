// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Parameters for updating an Azure Batch Pool.</summary>
    public partial class BatchPoolUpdateOptions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptions,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal
    {

        /// <summary>Backing field for <see cref="ApplicationPackageReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> _applicationPackageReference;

        /// <summary>
        /// A list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes
        /// joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If
        /// this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package
        /// references are removed from the Pool. If omitted, any existing Package references are left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get => this._applicationPackageReference; set => this._applicationPackageReference = value; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).AutoUserScope = value ?? null; }

        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyDisableAutomaticRollback; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyDisableAutomaticRollback = value ?? default(bool); }

        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = value ?? default(bool); }

        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = value ?? default(bool); }

        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyUseRollingUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicyUseRollingUpgradePolicy = value ?? default(bool); }

        /// <summary>Backing field for <see cref="CertificateReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> _certificateReference;

        /// <summary>
        /// If this element is present, it replaces any existing Certificate references configured on the Pool.
        /// If omitted, any existing Certificate references are left unchanged.
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get => this._certificateReference; set => this._certificateReference = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingWorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024. This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="EnableInterNodeCommunication" /> property.</summary>
        private bool? _enableInterNodeCommunication;

        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum
        /// size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching
        /// its desired size. The default value is false.<br /><br />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? EnableInterNodeCommunication { get => this._enableInterNodeCommunication; set => this._enableInterNodeCommunication = value; }

        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).EndpointConfigurationInboundNatPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).EndpointConfigurationInboundNatPool = value ?? null /* arrayOf */; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="Metadata" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> _metadata;

        /// <summary>
        /// A list of name-value pairs associated with the Pool as metadata. If this element is present, it replaces any existing
        /// metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted,
        /// any existing metadata is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get => this._metadata; set => this._metadata = value; }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSettingRegistry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for NetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfigurationUpdate()); set { {_networkConfiguration = value;} } }

        /// <summary>Internal Acessors for NetworkConfigurationEndpointConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.NetworkConfigurationEndpointConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).EndpointConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).EndpointConfiguration = value ?? null /* model class */; }

        /// <summary>Internal Acessors for NetworkConfigurationPublicIPAddressConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.NetworkConfigurationPublicIPAddressConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).PublicIPAddressConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).PublicIPAddressConfiguration = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.StartTask { get => (this._startTask = this._startTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskUpdate()); set { {_startTask = value;} } }

        /// <summary>Internal Acessors for StartTaskContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.StartTaskContainerSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ContainerSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTaskUserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.StartTaskUserIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).UserIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).UserIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for TaskSchedulingPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.TaskSchedulingPolicy { get => (this._taskSchedulingPolicy = this._taskSchedulingPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicyUpdate()); set { {_taskSchedulingPolicy = value;} } }

        /// <summary>Internal Acessors for UpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdate Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.UpgradePolicy { get => (this._upgradePolicy = this._upgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicyUpdate()); set { {_upgradePolicy = value;} } }

        /// <summary>Internal Acessors for UpgradePolicyAutomaticOSUpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.UpgradePolicyAutomaticOSUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).AutomaticOSUpgradePolicy = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UpgradePolicyRollingUpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.UpgradePolicyRollingUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicy = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).UserIdentityAutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).UserIdentityAutoUser = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="MountConfiguration" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> _mountConfiguration;

        /// <summary>
        /// Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare,
        /// NFS, CIFS or Blobfuse based file system.<br /><br />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> MountConfiguration { get => this._mountConfiguration; set => this._mountConfiguration = value; }

        /// <summary>Backing field for <see cref="NetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate _networkConfiguration;

        /// <summary>
        /// The network configuration for the Pool. This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfigurationUpdate()); set => this._networkConfiguration = value; }

        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationDynamicVnetAssignmentScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).DynamicVnetAssignmentScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).DynamicVnetAssignmentScope = value ?? null; }

        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? NetworkConfigurationEnableAcceleratedNetworking { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).EnableAcceleratedNetworking; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).EnableAcceleratedNetworking = value ?? default(bool); }

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).SubnetId = value ?? null; }

        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressId = value ?? null /* arrayOf */; }

        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PublicIPAddressConfigurationIpaddressProvisioningType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressProvisioningType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdateInternal)NetworkConfiguration).PublicIPAddressConfigurationIpaddressProvisioningType = value ?? null; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="ResourceTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags _resourceTag;

        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.<br /><br
        /// />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags ResourceTag { get => (this._resourceTag = this._resourceTag ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUpdateOptionsResourceTags()); set => this._resourceTag = value; }

        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyEnableCrossZoneUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyEnableCrossZoneUpgrade = value ?? default(bool); }

        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxBatchInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyMaxBatchInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyMaxBatchInstancePercent = value ?? default(int); }

        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyInstancePercent = value ?? default(int); }

        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = value ?? default(int); }

        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? RollingUpgradePolicyPauseTimeBetweenBatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyPauseTimeBetweenBatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyPauseTimeBetweenBatch = value ?? default(global::System.TimeSpan); }

        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyPrioritizeUnhealthyInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyPrioritizeUnhealthyInstance = value ?? default(bool); }

        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = value ?? default(bool); }

        /// <summary>Backing field for <see cref="StartTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate _startTask;

        /// <summary>
        /// A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool or when
        /// the Compute Node is restarted. If this element is present, it overwrites any existing StartTask. If omitted, any existing
        /// StartTask is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate StartTask { get => (this._startTask = this._startTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskUpdate()); set => this._startTask = value; }

        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string StartTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).CommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).CommandLine = value ?? null; }

        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).EnvironmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).EnvironmentSetting = value ?? null /* arrayOf */; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? StartTaskMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).ResourceFile = value ?? null /* arrayOf */; }

        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? StartTaskWaitForSuccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).WaitForSuccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).WaitForSuccess = value ?? default(bool); }

        /// <summary>Backing field for <see cref="TargetNodeCommunicationMode" /> property.</summary>
        private string _targetNodeCommunicationMode;

        /// <summary>
        /// The desired node communication mode for the pool. If this element is present, it replaces the existing targetNodeCommunicationMode
        /// configured on the Pool. If omitted, any existing metadata is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TargetNodeCommunicationMode { get => this._targetNodeCommunicationMode; set => this._targetNodeCommunicationMode = value; }

        /// <summary>Backing field for <see cref="TaskSchedulingPolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdate _taskSchedulingPolicy;

        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.<br /><br />This field
        /// can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdate TaskSchedulingPolicy { get => (this._taskSchedulingPolicy = this._taskSchedulingPolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicyUpdate()); set => this._taskSchedulingPolicy = value; }

        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string TaskSchedulingPolicyNodeFillType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdateInternal)TaskSchedulingPolicy).NodeFillType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdateInternal)TaskSchedulingPolicy).NodeFillType = value ?? null; }

        /// <summary>Backing field for <see cref="TaskSlotsPerNode" /> property.</summary>
        private int? _taskSlotsPerNode;

        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.<br /><br />This
        /// field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? TaskSlotsPerNode { get => this._taskSlotsPerNode; set => this._taskSlotsPerNode = value; }

        /// <summary>Backing field for <see cref="UpgradePolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdate _upgradePolicy;

        /// <summary>
        /// The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling.<br /><br />This field can
        /// be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdate UpgradePolicy { get => (this._upgradePolicy = this._upgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicyUpdate()); set => this._upgradePolicy = value; }

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UpgradePolicyMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).Mode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdateInternal)UpgradePolicy).Mode = value ?? null; }

        /// <summary>Backing field for <see cref="UserAccount" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> _userAccount;

        /// <summary>
        /// The list of user Accounts to be created on each Compute Node in the Pool. This field can be updated only when the pool
        /// is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> UserAccount { get => this._userAccount; set => this._userAccount = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).UserIdentityUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdateInternal)StartTask).UserIdentityUsername = value ?? null; }

        /// <summary>Backing field for <see cref="VMSize" /> property.</summary>
        private string _vMSize;

        /// <summary>
        /// The size of virtual machines in the Pool. For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).<br /><br
        /// />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string VMSize { get => this._vMSize; set => this._vMSize = value; }

        /// <summary>Backing field for <see cref="VirtualMachineConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate _virtualMachineConfiguration;

        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.<br /><br />This field can be updated
        /// only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate VirtualMachineConfiguration { get => (this._virtualMachineConfiguration = this._virtualMachineConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfigurationUpdate()); set => this._virtualMachineConfiguration = value; }

        /// <summary>Creates an new <see cref="BatchPoolUpdateOptions" /> instance.</summary>
        public BatchPoolUpdateOptions()
        {

        }
    }
    /// Parameters for updating an Azure Batch Pool.
    public partial interface IBatchPoolUpdateOptions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes
        /// joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If
        /// this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package
        /// references are removed from the Pool. If omitted, any existing Package references are left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged.",
        SerializedName = @"applicationPackageReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether OS image rollback feature should be disabled.",
        SerializedName = @"disableAutomaticRollback",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get; set; }
        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration) cannot be set to true.",
        SerializedName = @"enableAutomaticOSUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get; set; }
        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defer OS upgrades on the TVMs if they are running tasks.",
        SerializedName = @"osRollingUpgradeDeferral",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get; set; }
        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.",
        SerializedName = @"useRollingUpgradePolicy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get; set; }
        /// <summary>
        /// If this element is present, it replaces any existing Certificate references configured on the Pool.
        /// If omitted, any existing Certificate references are left unchanged.
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"If this element is present, it replaces any existing Certificate references configured on the Pool.
        If omitted, any existing Certificate references are left unchanged.
        For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.",
        SerializedName = @"certificateReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024. This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. This field can be updated only when the pool is empty.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum
        /// size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching
        /// its desired size. The default value is false.<br /><br />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.<br /><br />This field can be updated only when the pool is empty.",
        SerializedName = @"enableInterNodeCommunication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableInterNodeCommunication { get; set; }
        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.",
        SerializedName = @"inboundNATPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with the Pool as metadata. If this element is present, it replaces any existing
        /// metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted,
        /// any existing metadata is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of name-value pairs associated with the Pool as metadata. If this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare,
        /// NFS, CIFS or Blobfuse based file system.<br /><br />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.<br /><br />This field can be updated only when the pool is empty.",
        SerializedName = @"mountConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> MountConfiguration { get; set; }
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope of dynamic vnet assignment.",
        SerializedName = @"dynamicVNetAssignmentScope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        string NetworkConfigurationDynamicVnetAssignmentScope { get; set; }
        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.",
        SerializedName = @"enableAcceleratedNetworking",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NetworkConfigurationEnableAcceleratedNetworking { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication, including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see: https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string PublicIPAddressConfigurationIpaddressProvisioningType { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }
        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.<br /><br
        /// />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.<br /><br />This field can be updated only when the pool is empty.",
        SerializedName = @"resourceTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags ResourceTag { get; set; }
        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.",
        SerializedName = @"enableCrossZoneUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get; set; }
        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxBatchInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxBatchInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxUnhealthyInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive.",
        SerializedName = @"maxUnhealthyUpgradedInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format..",
        SerializedName = @"pauseTimeBetweenBatches",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? RollingUpgradePolicyPauseTimeBetweenBatch { get; set; }
        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Upgrade all unhealthy instances in a scale set before any healthy instances.",
        SerializedName = @"prioritizeUnhealthyInstances",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get; set; }
        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Rollback failed instances to previous model if the Rolling Upgrade policy is violated.",
        SerializedName = @"rollbackFailedInstancesOnPolicyBreach",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string StartTaskCommandLine { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the StartTask.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>
        /// The desired node communication mode for the pool. If this element is present, it replaces the existing targetNodeCommunicationMode
        /// configured on the Pool. If omitted, any existing metadata is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The desired node communication mode for the pool. If this element is present, it replaces the existing targetNodeCommunicationMode configured on the Pool. If omitted, any existing metadata is left unchanged.",
        SerializedName = @"targetNodeCommunicationMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        string TargetNodeCommunicationMode { get; set; }
        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.",
        SerializedName = @"nodeFillType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("spread", "pack")]
        string TaskSchedulingPolicyNodeFillType { get; set; }
        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.<br /><br />This
        /// field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.<br /><br />This field can be updated only when the pool is empty.",
        SerializedName = @"taskSlotsPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? TaskSlotsPerNode { get; set; }
        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("automatic", "manual", "rolling")]
        string UpgradePolicyMode { get; set; }
        /// <summary>
        /// The list of user Accounts to be created on each Compute Node in the Pool. This field can be updated only when the pool
        /// is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of user Accounts to be created on each Compute Node in the Pool. This field can be updated only when the pool is empty.",
        SerializedName = @"userAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> UserAccount { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// The size of virtual machines in the Pool. For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).<br /><br
        /// />This field can be updated only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The size of virtual machines in the Pool. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).<br /><br />This field can be updated only when the pool is empty.",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        string VMSize { get; set; }
        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.<br /><br />This field can be updated
        /// only when the pool is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The virtual machine configuration for the Pool. This property must be specified.<br /><br />This field can be updated only when the pool is empty.",
        SerializedName = @"virtualMachineConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate VirtualMachineConfiguration { get; set; }

    }
    /// Parameters for updating an Azure Batch Pool.
    internal partial interface IBatchPoolUpdateOptionsInternal

    {
        /// <summary>
        /// A list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes
        /// joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If
        /// this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package
        /// references are removed from the Pool. If omitted, any existing Package references are left unchanged.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get; set; }
        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get; set; }
        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get; set; }
        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get; set; }
        /// <summary>
        /// If this element is present, it replaces any existing Certificate references configured on the Pool.
        /// If omitted, any existing Certificate references are left unchanged.
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024. This field can be updated only when the pool is empty.
        /// </summary>
        string DisplayName { get; set; }
        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum
        /// size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching
        /// its desired size. The default value is false.<br /><br />This field can be updated only when the pool is empty.
        /// </summary>
        bool? EnableInterNodeCommunication { get; set; }
        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool> EndpointConfigurationInboundNatPool { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with the Pool as metadata. If this element is present, it replaces any existing
        /// metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted,
        /// any existing metadata is left unchanged.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare,
        /// NFS, CIFS or Blobfuse based file system.<br /><br />This field can be updated only when the pool is empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration> MountConfiguration { get; set; }
        /// <summary>
        /// The network configuration for the Pool. This field can be updated only when the pool is empty.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfigurationUpdate NetworkConfiguration { get; set; }
        /// <summary>The scope of dynamic vnet assignment.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        string NetworkConfigurationDynamicVnetAssignmentScope { get; set; }
        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        bool? NetworkConfigurationEnableAcceleratedNetworking { get; set; }
        /// <summary>The configuration for endpoints on Compute Nodes in the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfigurationUpdate NetworkConfigurationEndpointConfiguration { get; set; }
        /// <summary>The Public IPAddress configuration for Compute Nodes in the Batch Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration NetworkConfigurationPublicIPAddressConfiguration { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        System.Collections.Generic.List<string> PublicIPAddressConfigurationIpaddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string PublicIPAddressConfigurationIpaddressProvisioningType { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }
        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.<br /><br
        /// />This field can be updated only when the pool is empty.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUpdateOptionsResourceTags ResourceTag { get; set; }
        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get; set; }
        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        int? RollingUpgradePolicyMaxBatchInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        global::System.TimeSpan? RollingUpgradePolicyPauseTimeBetweenBatch { get; set; }
        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get; set; }
        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get; set; }
        /// <summary>
        /// A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool or when
        /// the Compute Node is restarted. If this element is present, it overwrites any existing StartTask. If omitted, any existing
        /// StartTask is left unchanged.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskUpdate StartTask { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string StartTaskCommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the StartTask runs. When this is specified, all directories recursively below
        /// the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment
        /// variables are mapped into the container, and the Task command line is executed in the container. Files produced in the
        /// container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will
        /// not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate StartTaskContainerSetting { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get; set; }
        /// <summary>
        /// The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the
        /// Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity StartTaskUserIdentity { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>
        /// The desired node communication mode for the pool. If this element is present, it replaces the existing targetNodeCommunicationMode
        /// configured on the Pool. If omitted, any existing metadata is left unchanged.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        string TargetNodeCommunicationMode { get; set; }
        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.<br /><br />This field
        /// can be updated only when the pool is empty.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicyUpdate TaskSchedulingPolicy { get; set; }
        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("spread", "pack")]
        string TaskSchedulingPolicyNodeFillType { get; set; }
        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.<br /><br />This
        /// field can be updated only when the pool is empty.
        /// </summary>
        int? TaskSlotsPerNode { get; set; }
        /// <summary>
        /// The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling.<br /><br />This field can
        /// be updated only when the pool is empty.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicyUpdate UpgradePolicy { get; set; }
        /// <summary>
        /// Configuration parameters used for performing automatic OS Upgrade. The configuration parameters used for performing automatic
        /// OS upgrade.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy UpgradePolicyAutomaticOSUpgradePolicy { get; set; }
        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("automatic", "manual", "rolling")]
        string UpgradePolicyMode { get; set; }
        /// <summary>The configuration parameters used while performing a rolling upgrade.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy UpgradePolicyRollingUpgradePolicy { get; set; }
        /// <summary>
        /// The list of user Accounts to be created on each Compute Node in the Pool. This field can be updated only when the pool
        /// is empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount> UserAccount { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// The size of virtual machines in the Pool. For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).<br /><br
        /// />This field can be updated only when the pool is empty.
        /// </summary>
        string VMSize { get; set; }
        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.<br /><br />This field can be updated
        /// only when the pool is empty.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfigurationUpdate VirtualMachineConfiguration { get; set; }

    }
}