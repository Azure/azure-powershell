// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The configuration for container-enabled Pools.</summary>
    public partial class BatchContainerConfigurationUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchContainerConfigurationUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchContainerConfigurationUpdateInternal
    {

        /// <summary>Backing field for <see cref="ContainerImageName" /> property.</summary>
        private System.Collections.Generic.List<string> _containerImageName;

        /// <summary>
        /// The collection of container Image names. This is the full Image reference, as would be specified to "docker pull". An
        /// Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> ContainerImageName { get => this._containerImageName; set => this._containerImageName = value; }

        /// <summary>Backing field for <see cref="ContainerRegistry" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference> _containerRegistry;

        /// <summary>
        /// Additional private registries from which containers can be pulled. If any Images must be downloaded from a private registry
        /// which requires credentials, then those credentials must be provided here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference> ContainerRegistry { get => this._containerRegistry; set => this._containerRegistry = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The container technology to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="BatchContainerConfigurationUpdate" /> instance.</summary>
        public BatchContainerConfigurationUpdate()
        {

        }
    }
    /// The configuration for container-enabled Pools.
    public partial interface IBatchContainerConfigurationUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The collection of container Image names. This is the full Image reference, as would be specified to "docker pull". An
        /// Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The collection of container Image names. This is the full Image reference, as would be specified to ""docker pull"". An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.",
        SerializedName = @"containerImageNames",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ContainerImageName { get; set; }
        /// <summary>
        /// Additional private registries from which containers can be pulled. If any Images must be downloaded from a private registry
        /// which requires credentials, then those credentials must be provided here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional private registries from which containers can be pulled. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.",
        SerializedName = @"containerRegistries",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference> ContainerRegistry { get; set; }
        /// <summary>The container technology to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The container technology to be used.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("dockerCompatible", "criCompatible")]
        string Type { get; set; }

    }
    /// The configuration for container-enabled Pools.
    internal partial interface IBatchContainerConfigurationUpdateInternal

    {
        /// <summary>
        /// The collection of container Image names. This is the full Image reference, as would be specified to "docker pull". An
        /// Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        /// </summary>
        System.Collections.Generic.List<string> ContainerImageName { get; set; }
        /// <summary>
        /// Additional private registries from which containers can be pulled. If any Images must be downloaded from a private registry
        /// which requires credentials, then those credentials must be provided here.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference> ContainerRegistry { get; set; }
        /// <summary>The container technology to be used.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("dockerCompatible", "criCompatible")]
        string Type { get; set; }

    }
}