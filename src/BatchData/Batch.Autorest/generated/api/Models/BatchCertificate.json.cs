// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A Certificate that can be installed on Compute Nodes and can be used to
    /// authenticate operations on the machine.
    /// </summary>
    public partial class BatchCertificate
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject into a new instance of <see cref="BatchCertificate" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal BatchCertificate(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_deleteCertificateError = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("deleteCertificateError"), out var __jsonDeleteCertificateError) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateDeleteError.FromJson(__jsonDeleteCertificateError) : _deleteCertificateError;}
            {_thumbprint = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("thumbprint"), out var __jsonThumbprint) ? (string)__jsonThumbprint : (string)_thumbprint;}
            {_thumbprintAlgorithm = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("thumbprintAlgorithm"), out var __jsonThumbprintAlgorithm) ? (string)__jsonThumbprintAlgorithm : (string)_thumbprintAlgorithm;}
            {_url = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("url"), out var __jsonUrl) ? (string)__jsonUrl : (string)_url;}
            {_state = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("state"), out var __jsonState) ? (string)__jsonState : (string)_state;}
            {_stateTransitionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("stateTransitionTime"), out var __jsonStateTransitionTime) ? global::System.DateTime.TryParse((string)__jsonStateTransitionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonStateTransitionTimeValue) ? __jsonStateTransitionTimeValue : _stateTransitionTime : _stateTransitionTime;}
            {_previousState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("previousState"), out var __jsonPreviousState) ? (string)__jsonPreviousState : (string)_previousState;}
            {_previousStateTransitionTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("previousStateTransitionTime"), out var __jsonPreviousStateTransitionTime) ? global::System.DateTime.TryParse((string)__jsonPreviousStateTransitionTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonPreviousStateTransitionTimeValue) ? __jsonPreviousStateTransitionTimeValue : _previousStateTransitionTime : _previousStateTransitionTime;}
            {_publicData = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("publicData"), out var __jsonPublicData) ? (string)__jsonPublicData : (string)_publicData;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificate.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificate.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificate FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json ? new BatchCertificate(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="BatchCertificate" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="BatchCertificate" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._deleteCertificateError ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._deleteCertificateError.ToJson(null,serializationMode) : null, "deleteCertificateError" ,container.Add );
            }
            AddIf( null != (((object)this._thumbprint)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._thumbprint.ToString()) : null, "thumbprint" ,container.Add );
            AddIf( null != (((object)this._thumbprintAlgorithm)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._thumbprintAlgorithm.ToString()) : null, "thumbprintAlgorithm" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._url)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._url.ToString()) : null, "url" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._state)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._state.ToString()) : null, "state" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._stateTransitionTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._stateTransitionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "stateTransitionTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._previousState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._previousState.ToString()) : null, "previousState" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._previousStateTransitionTime ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._previousStateTransitionTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "previousStateTransitionTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._publicData)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._publicData.ToString()) : null, "publicData" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeCreate))
            {
                AddIf( null != this._data ? global::System.Convert.ToBase64String( this._data) : null ,(v)=> container.Add( "data",v) );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeCreate))
            {
                AddIf( null != (((object)this._certificateFormat)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._certificateFormat.ToString()) : null, "certificateFormat" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeCreate))
            {
                AddIf( null != (((object)this._password)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._password.ToString()) : null, "password" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}