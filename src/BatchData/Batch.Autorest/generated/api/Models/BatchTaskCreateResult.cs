// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Result for a single Task created as part of an add Task collection operation.</summary>
    public partial class BatchTaskCreateResult :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateResult,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateResultInternal
    {

        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).Code = value ?? null; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        /// <summary>
        /// The ETag of the Task, if the Task was successfully added. You can use this to detect whether the Task has changed between
        /// requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take
        /// effect only if nobody else has modified the Job in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Backing field for <see cref="Error" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError _error;

        /// <summary>The error encountered while attempting to add the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError Error { get => (this._error = this._error ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchError()); set => this._error = value; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private global::System.DateTime? _lastModified;

        /// <summary>The last modified time of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? LastModified { get => this._lastModified; set => this._lastModified = value; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>The URL of the Task, if the Task was successfully added.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>The language code of the error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string MessageLang { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).MessageLang; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).MessageLang = value ?? null; }

        /// <summary>The text of the message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string MessageValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).MessageValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).MessageValue = value ?? null; }

        /// <summary>Internal Acessors for Error</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateResultInternal.Error { get => (this._error = this._error ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchError()); set { {_error = value;} } }

        /// <summary>Internal Acessors for Message</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorMessage Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateResultInternal.Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).Message = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>The status of the add Task request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="TaskId" /> property.</summary>
        private string _taskId;

        /// <summary>The ID of the Task for which this is the result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskId { get => this._taskId; set => this._taskId = value; }

        /// <summary>A collection of key-value pairs containing additional details about the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorDetail> Value { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorInternal)Error).Value = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="BatchTaskCreateResult" /> instance.</summary>
        public BatchTaskCreateResult()
        {

        }
    }
    /// Result for a single Task created as part of an add Task collection operation.
    public partial interface IBatchTaskCreateResult :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string Code { get; set; }
        /// <summary>
        /// The ETag of the Task, if the Task was successfully added. You can use this to detect whether the Task has changed between
        /// requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take
        /// effect only if nobody else has modified the Job in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ETag of the Task, if the Task was successfully added. You can use this to detect whether the Task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the Job in the meantime.",
        SerializedName = @"eTag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>The last modified time of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The last modified time of the Task.",
        SerializedName = @"lastModified",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModified { get; set; }
        /// <summary>The URL of the Task, if the Task was successfully added.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the Task, if the Task was successfully added.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>The language code of the error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The language code of the error message.",
        SerializedName = @"lang",
        PossibleTypes = new [] { typeof(string) })]
        string MessageLang { get; set; }
        /// <summary>The text of the message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The text of the message.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string MessageValue { get; set; }
        /// <summary>The status of the add Task request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The status of the add Task request.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "clienterror", "servererror")]
        string Status { get; set; }
        /// <summary>The ID of the Task for which this is the result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Task for which this is the result.",
        SerializedName = @"taskId",
        PossibleTypes = new [] { typeof(string) })]
        string TaskId { get; set; }
        /// <summary>A collection of key-value pairs containing additional details about the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A collection of key-value pairs containing additional details about the error.",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorDetail) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorDetail> Value { get; set; }

    }
    /// Result for a single Task created as part of an add Task collection operation.
    internal partial interface IBatchTaskCreateResultInternal

    {
        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string Code { get; set; }
        /// <summary>
        /// The ETag of the Task, if the Task was successfully added. You can use this to detect whether the Task has changed between
        /// requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take
        /// effect only if nobody else has modified the Job in the meantime.
        /// </summary>
        string ETag { get; set; }
        /// <summary>The error encountered while attempting to add the Task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError Error { get; set; }
        /// <summary>The last modified time of the Task.</summary>
        global::System.DateTime? LastModified { get; set; }
        /// <summary>The URL of the Task, if the Task was successfully added.</summary>
        string Location { get; set; }
        /// <summary>
        /// A message describing the error, intended to be suitable for display in a user interface.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorMessage Message { get; set; }
        /// <summary>The language code of the error message.</summary>
        string MessageLang { get; set; }
        /// <summary>The text of the message.</summary>
        string MessageValue { get; set; }
        /// <summary>The status of the add Task request.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "clienterror", "servererror")]
        string Status { get; set; }
        /// <summary>The ID of the Task for which this is the result.</summary>
        string TaskId { get; set; }
        /// <summary>A collection of key-value pairs containing additional details about the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchErrorDetail> Value { get; set; }

    }
}