// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The execution constraints for a Job.</summary>
    public partial class BatchJobConstraints :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal
    {

        /// <summary>Backing field for <see cref="MaxTaskRetryCount" /> property.</summary>
        private int? _maxTaskRetryCount;

        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? MaxTaskRetryCount { get => this._maxTaskRetryCount; set => this._maxTaskRetryCount = value; }

        /// <summary>Backing field for <see cref="MaxWallClockTime" /> property.</summary>
        private global::System.TimeSpan? _maxWallClockTime;

        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.TimeSpan? MaxWallClockTime { get => this._maxWallClockTime; set => this._maxWallClockTime = value; }

        /// <summary>Creates an new <see cref="BatchJobConstraints" /> instance.</summary>
        public BatchJobConstraints()
        {

        }
    }
    /// The execution constraints for a Job.
    public partial interface IBatchJobConstraints :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? MaxWallClockTime { get; set; }

    }
    /// The execution constraints for a Job.
    internal partial interface IBatchJobConstraintsInternal

    {
        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        int? MaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        global::System.TimeSpan? MaxWallClockTime { get; set; }

    }
}