// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>A Pool in the Azure Batch service.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchPoolTypeConverter))]
    public partial class BatchPool
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPool"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchPool(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("AutoScaleRun"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRun = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRun) content.GetValueForProperty("AutoScaleRun",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRun, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoScaleRunTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfiguration) content.GetValueForProperty("NetworkConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskSchedulingPolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicy) content.GetValueForProperty("TaskSchedulingPolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatistics) content.GetValueForProperty("PoolStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Identity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Identity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentity) content.GetValueForProperty("Identity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Identity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicy) content.GetValueForProperty("UpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("Url"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Url = (string) content.GetValueForProperty("Url",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Url, global::System.Convert.ToString);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified = (global::System.DateTime?) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("CreationTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CreationTime = (global::System.DateTime?) content.GetValueForProperty("CreationTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CreationTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("State"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).State = (string) content.GetValueForProperty("State",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).State, global::System.Convert.ToString);
            }
            if (content.Contains("StateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("StateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("AllocationState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationState = (string) content.GetValueForProperty("AllocationState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationState, global::System.Convert.ToString);
            }
            if (content.Contains("AllocationStateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationStateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("AllocationStateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationStateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("VMSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VMSize = (string) content.GetValueForProperty("VMSize",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VMSize, global::System.Convert.ToString);
            }
            if (content.Contains("ResizeTimeout"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeTimeout = (global::System.TimeSpan?) content.GetValueForProperty("ResizeTimeout",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeTimeout, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ResizeError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeError = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError>) content.GetValueForProperty("ResizeError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeError, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResizeErrorTypeConverter.ConvertFrom));
            }
            if (content.Contains("ResourceTag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceTag = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags) content.GetValueForProperty("ResourceTag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceTag, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolResourceTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("CurrentDedicatedNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentDedicatedNode = (int?) content.GetValueForProperty("CurrentDedicatedNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentDedicatedNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CurrentLowPriorityNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentLowPriorityNode = (int?) content.GetValueForProperty("CurrentLowPriorityNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentLowPriorityNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TargetDedicatedNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetDedicatedNode = (int?) content.GetValueForProperty("TargetDedicatedNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetDedicatedNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TargetLowPriorityNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetLowPriorityNode = (int?) content.GetValueForProperty("TargetLowPriorityNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetLowPriorityNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("EnableAutoScale"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableAutoScale = (bool?) content.GetValueForProperty("EnableAutoScale",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableAutoScale, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutoScaleFormula"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleFormula = (string) content.GetValueForProperty("AutoScaleFormula",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleFormula, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleEvaluationInterval"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleEvaluationInterval = (global::System.TimeSpan?) content.GetValueForProperty("AutoScaleEvaluationInterval",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleEvaluationInterval, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("EnableInterNodeCommunication"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableInterNodeCommunication = (bool?) content.GetValueForProperty("EnableInterNodeCommunication",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableInterNodeCommunication, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("TaskSlotsPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSlotsPerNode = (int?) content.GetValueForProperty("TaskSlotsPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSlotsPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserAccount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserAccount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>) content.GetValueForProperty("UserAccount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserAccount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserAccountTypeConverter.ConvertFrom));
            }
            if (content.Contains("Metadata"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Metadata = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>) content.GetValueForProperty("Metadata",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Metadata, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("MountConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).MountConfiguration = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>) content.GetValueForProperty("MountConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).MountConfiguration, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MountConfigurationTypeConverter.ConvertFrom));
            }
            if (content.Contains("TargetNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetNodeCommunicationMode = (string) content.GetValueForProperty("TargetNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("CurrentNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentNodeCommunicationMode = (string) content.GetValueForProperty("CurrentNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("ETag1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag1 = (string) content.GetValueForProperty("ETag1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag1, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified1 = (string) content.GetValueForProperty("LastModified1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified1, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("VirtualMachineConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VirtualMachineConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration) content.GetValueForProperty("VirtualMachineConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VirtualMachineConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoScaleRunError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunError = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunError) content.GetValueForProperty("AutoScaleRunError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunError, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoScaleRunErrorTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoScaleRunTimestamp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunTimestamp = (global::System.DateTime?) content.GetValueForProperty("AutoScaleRunTimestamp",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunTimestamp, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("AutoScaleRunResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunResult = (string) content.GetValueForProperty("AutoScaleRunResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunResult, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationSubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationSubnetId = (string) content.GetValueForProperty("NetworkConfigurationSubnetId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationSubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoScaleRunDataServiceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunDataServiceId = (string) content.GetValueForProperty("AutoScaleRunDataServiceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunDataServiceId, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunETag = (string) content.GetValueForProperty("AutoScaleRunETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunETag, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunLastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunLastModified = (string) content.GetValueForProperty("AutoScaleRunLastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunLastModified, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunClientRequestId = (string) content.GetValueForProperty("AutoScaleRunClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunRequestId = (string) content.GetValueForProperty("AutoScaleRunRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("Code"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Code = (string) content.GetValueForProperty("Code",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Code, global::System.Convert.ToString);
            }
            if (content.Contains("Message"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Message = (string) content.GetValueForProperty("Message",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Message, global::System.Convert.ToString);
            }
            if (content.Contains("Value"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Value = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("Value",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Value, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            if (content.Contains("NetworkConfigurationEndpointConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEndpointConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfiguration) content.GetValueForProperty("NetworkConfigurationEndpointConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEndpointConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolEndpointConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationPublicIPAddressConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationPublicIPAddressConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration) content.GetValueForProperty("NetworkConfigurationPublicIPAddressConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationPublicIPAddressConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPublicIPAddressConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationDynamicVnetAssignmentScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationDynamicVnetAssignmentScope = (string) content.GetValueForProperty("NetworkConfigurationDynamicVnetAssignmentScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationDynamicVnetAssignmentScope, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationEnableAcceleratedNetworking"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEnableAcceleratedNetworking = (bool?) content.GetValueForProperty("NetworkConfigurationEnableAcceleratedNetworking",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEnableAcceleratedNetworking, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("TaskSchedulingPolicyNodeFillType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicyNodeFillType = (string) content.GetValueForProperty("TaskSchedulingPolicyNodeFillType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicyNodeFillType, global::System.Convert.ToString);
            }
            if (content.Contains("PoolStatisticsUsageStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUsageStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUsageStatistics) content.GetValueForProperty("PoolStatisticsUsageStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUsageStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUsageStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolStatisticsResourceStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsResourceStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceStatistics) content.GetValueForProperty("PoolStatisticsResourceStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsResourceStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolResourceStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolStatisticsUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUrl = (string) content.GetValueForProperty("PoolStatisticsUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUrl, global::System.Convert.ToString);
            }
            if (content.Contains("PoolStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("PoolStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("PoolStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("PoolStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("IdentityType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityType = (string) content.GetValueForProperty("IdentityType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityType, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityUserAssignedIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityUserAssignedIdentity = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity>) content.GetValueForProperty("IdentityUserAssignedIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityUserAssignedIdentity, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchUserAssignedIdentityTypeConverter.ConvertFrom));
            }
            if (content.Contains("UpgradePolicyAutomaticOSUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyAutomaticOSUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy) content.GetValueForProperty("UpgradePolicyAutomaticOSUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyAutomaticOSUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutomaticOSUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyRollingUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy) content.GetValueForProperty("UpgradePolicyRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyRollingUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.RollingUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyMode = (string) content.GetValueForProperty("UpgradePolicyMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyMode, global::System.Convert.ToString);
            }
            if (content.Contains("EndpointConfigurationInboundNatPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EndpointConfigurationInboundNatPool = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>) content.GetValueForProperty("EndpointConfigurationInboundNatPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EndpointConfigurationInboundNatPool, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchInboundNatPoolTypeConverter.ConvertFrom));
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressProvisioningType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType = (string) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressProvisioningType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType, global::System.Convert.ToString);
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressId = (System.Collections.Generic.List<string>) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressId, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("UsageStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("UsageStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("UsageStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("UsageStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("UsageStatisticsDedicatedCoreTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsDedicatedCoreTime = (global::System.TimeSpan?) content.GetValueForProperty("UsageStatisticsDedicatedCoreTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsDedicatedCoreTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ResourceStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("ResourceStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ResourceStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("ResourceStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ResourceStatisticsAvgCpuPercentage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgCpuPercentage = (float?) content.GetValueForProperty("ResourceStatisticsAvgCpuPercentage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgCpuPercentage, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsAvgMemoryGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgMemoryGiB = (float?) content.GetValueForProperty("ResourceStatisticsAvgMemoryGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgMemoryGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsPeakMemoryGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakMemoryGiB = (float?) content.GetValueForProperty("ResourceStatisticsPeakMemoryGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakMemoryGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsAvgDiskGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgDiskGiB = (float?) content.GetValueForProperty("ResourceStatisticsAvgDiskGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgDiskGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsPeakDiskGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakDiskGiB = (float?) content.GetValueForProperty("ResourceStatisticsPeakDiskGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakDiskGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsDiskReadIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadIop = (string) content.GetValueForProperty("ResourceStatisticsDiskReadIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadIop, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceStatisticsDiskWriteIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteIop = (string) content.GetValueForProperty("ResourceStatisticsDiskWriteIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteIop, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceStatisticsDiskReadGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadGiB = (float?) content.GetValueForProperty("ResourceStatisticsDiskReadGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsDiskWriteGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteGiB = (float?) content.GetValueForProperty("ResourceStatisticsDiskWriteGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsNetworkReadGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkReadGiB = (float?) content.GetValueForProperty("ResourceStatisticsNetworkReadGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkReadGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsNetworkWriteGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkWriteGiB = (float?) content.GetValueForProperty("ResourceStatisticsNetworkWriteGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkWriteGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyDisableAutomaticRollback"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyDisableAutomaticRollback",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyUseRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyUseRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyEnableCrossZoneUpgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade = (bool?) content.GetValueForProperty("RollingUpgradePolicyEnableCrossZoneUpgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyMaxBatchInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxBatchInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxBatchInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxBatchInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyPauseTimeBetweenBatch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch = (global::System.TimeSpan?) content.GetValueForProperty("RollingUpgradePolicyPauseTimeBetweenBatch",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("RollingUpgradePolicyPrioritizeUnhealthyInstance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance = (bool?) content.GetValueForProperty("RollingUpgradePolicyPrioritizeUnhealthyInstance",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = (bool?) content.GetValueForProperty("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPool"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchPool(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("AutoScaleRun"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRun = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRun) content.GetValueForProperty("AutoScaleRun",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRun, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoScaleRunTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkConfiguration) content.GetValueForProperty("NetworkConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskSchedulingPolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSchedulingPolicy) content.GetValueForProperty("TaskSchedulingPolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolStatistics) content.GetValueForProperty("PoolStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Identity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Identity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolIdentity) content.GetValueForProperty("Identity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Identity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUpgradePolicy) content.GetValueForProperty("UpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("Url"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Url = (string) content.GetValueForProperty("Url",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Url, global::System.Convert.ToString);
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified = (global::System.DateTime?) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("CreationTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CreationTime = (global::System.DateTime?) content.GetValueForProperty("CreationTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CreationTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("State"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).State = (string) content.GetValueForProperty("State",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).State, global::System.Convert.ToString);
            }
            if (content.Contains("StateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("StateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("AllocationState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationState = (string) content.GetValueForProperty("AllocationState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationState, global::System.Convert.ToString);
            }
            if (content.Contains("AllocationStateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationStateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("AllocationStateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AllocationStateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("VMSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VMSize = (string) content.GetValueForProperty("VMSize",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VMSize, global::System.Convert.ToString);
            }
            if (content.Contains("ResizeTimeout"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeTimeout = (global::System.TimeSpan?) content.GetValueForProperty("ResizeTimeout",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeTimeout, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ResizeError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeError = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError>) content.GetValueForProperty("ResizeError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResizeError, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResizeError>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResizeErrorTypeConverter.ConvertFrom));
            }
            if (content.Contains("ResourceTag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceTag = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceTags) content.GetValueForProperty("ResourceTag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceTag, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolResourceTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("CurrentDedicatedNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentDedicatedNode = (int?) content.GetValueForProperty("CurrentDedicatedNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentDedicatedNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CurrentLowPriorityNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentLowPriorityNode = (int?) content.GetValueForProperty("CurrentLowPriorityNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentLowPriorityNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TargetDedicatedNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetDedicatedNode = (int?) content.GetValueForProperty("TargetDedicatedNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetDedicatedNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TargetLowPriorityNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetLowPriorityNode = (int?) content.GetValueForProperty("TargetLowPriorityNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetLowPriorityNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("EnableAutoScale"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableAutoScale = (bool?) content.GetValueForProperty("EnableAutoScale",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableAutoScale, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutoScaleFormula"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleFormula = (string) content.GetValueForProperty("AutoScaleFormula",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleFormula, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleEvaluationInterval"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleEvaluationInterval = (global::System.TimeSpan?) content.GetValueForProperty("AutoScaleEvaluationInterval",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleEvaluationInterval, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("EnableInterNodeCommunication"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableInterNodeCommunication = (bool?) content.GetValueForProperty("EnableInterNodeCommunication",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EnableInterNodeCommunication, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("TaskSlotsPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSlotsPerNode = (int?) content.GetValueForProperty("TaskSlotsPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSlotsPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserAccount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserAccount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>) content.GetValueForProperty("UserAccount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserAccount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserAccountTypeConverter.ConvertFrom));
            }
            if (content.Contains("Metadata"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Metadata = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>) content.GetValueForProperty("Metadata",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Metadata, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("MountConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).MountConfiguration = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>) content.GetValueForProperty("MountConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).MountConfiguration, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MountConfigurationTypeConverter.ConvertFrom));
            }
            if (content.Contains("TargetNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetNodeCommunicationMode = (string) content.GetValueForProperty("TargetNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TargetNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("CurrentNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentNodeCommunicationMode = (string) content.GetValueForProperty("CurrentNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).CurrentNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("ETag1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag1 = (string) content.GetValueForProperty("ETag1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ETag1, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified1 = (string) content.GetValueForProperty("LastModified1",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).LastModified1, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("VirtualMachineConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VirtualMachineConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration) content.GetValueForProperty("VirtualMachineConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).VirtualMachineConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoScaleRunError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunError = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoScaleRunError) content.GetValueForProperty("AutoScaleRunError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunError, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoScaleRunErrorTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoScaleRunTimestamp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunTimestamp = (global::System.DateTime?) content.GetValueForProperty("AutoScaleRunTimestamp",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunTimestamp, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("AutoScaleRunResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunResult = (string) content.GetValueForProperty("AutoScaleRunResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunResult, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationSubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationSubnetId = (string) content.GetValueForProperty("NetworkConfigurationSubnetId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationSubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoScaleRunDataServiceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunDataServiceId = (string) content.GetValueForProperty("AutoScaleRunDataServiceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunDataServiceId, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunETag = (string) content.GetValueForProperty("AutoScaleRunETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunETag, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunLastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunLastModified = (string) content.GetValueForProperty("AutoScaleRunLastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunLastModified, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunClientRequestId = (string) content.GetValueForProperty("AutoScaleRunClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("AutoScaleRunRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunRequestId = (string) content.GetValueForProperty("AutoScaleRunRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoScaleRunRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("Code"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Code = (string) content.GetValueForProperty("Code",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Code, global::System.Convert.ToString);
            }
            if (content.Contains("Message"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Message = (string) content.GetValueForProperty("Message",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Message, global::System.Convert.ToString);
            }
            if (content.Contains("Value"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Value = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("Value",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).Value, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            if (content.Contains("NetworkConfigurationEndpointConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEndpointConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolEndpointConfiguration) content.GetValueForProperty("NetworkConfigurationEndpointConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEndpointConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolEndpointConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationPublicIPAddressConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationPublicIPAddressConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration) content.GetValueForProperty("NetworkConfigurationPublicIPAddressConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationPublicIPAddressConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPublicIPAddressConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NetworkConfigurationDynamicVnetAssignmentScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationDynamicVnetAssignmentScope = (string) content.GetValueForProperty("NetworkConfigurationDynamicVnetAssignmentScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationDynamicVnetAssignmentScope, global::System.Convert.ToString);
            }
            if (content.Contains("NetworkConfigurationEnableAcceleratedNetworking"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEnableAcceleratedNetworking = (bool?) content.GetValueForProperty("NetworkConfigurationEnableAcceleratedNetworking",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).NetworkConfigurationEnableAcceleratedNetworking, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("TaskSchedulingPolicyNodeFillType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicyNodeFillType = (string) content.GetValueForProperty("TaskSchedulingPolicyNodeFillType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).TaskSchedulingPolicyNodeFillType, global::System.Convert.ToString);
            }
            if (content.Contains("PoolStatisticsUsageStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUsageStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolUsageStatistics) content.GetValueForProperty("PoolStatisticsUsageStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUsageStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolUsageStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolStatisticsResourceStatistics"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsResourceStatistics = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolResourceStatistics) content.GetValueForProperty("PoolStatisticsResourceStatistics",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsResourceStatistics, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolResourceStatisticsTypeConverter.ConvertFrom);
            }
            if (content.Contains("PoolStatisticsUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUrl = (string) content.GetValueForProperty("PoolStatisticsUrl",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsUrl, global::System.Convert.ToString);
            }
            if (content.Contains("PoolStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("PoolStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("PoolStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("PoolStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PoolStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("IdentityType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityType = (string) content.GetValueForProperty("IdentityType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityType, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityUserAssignedIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityUserAssignedIdentity = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity>) content.GetValueForProperty("IdentityUserAssignedIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityUserAssignedIdentity, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchUserAssignedIdentity>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchUserAssignedIdentityTypeConverter.ConvertFrom));
            }
            if (content.Contains("UpgradePolicyAutomaticOSUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyAutomaticOSUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutomaticOSUpgradePolicy) content.GetValueForProperty("UpgradePolicyAutomaticOSUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyAutomaticOSUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutomaticOSUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyRollingUpgradePolicy = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IRollingUpgradePolicy) content.GetValueForProperty("UpgradePolicyRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyRollingUpgradePolicy, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.RollingUpgradePolicyTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpgradePolicyMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyMode = (string) content.GetValueForProperty("UpgradePolicyMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UpgradePolicyMode, global::System.Convert.ToString);
            }
            if (content.Contains("EndpointConfigurationInboundNatPool"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EndpointConfigurationInboundNatPool = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>) content.GetValueForProperty("EndpointConfigurationInboundNatPool",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).EndpointConfigurationInboundNatPool, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchInboundNatPoolTypeConverter.ConvertFrom));
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressProvisioningType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType = (string) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressProvisioningType",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressProvisioningType, global::System.Convert.ToString);
            }
            if (content.Contains("PublicIPAddressConfigurationIpaddressId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressId = (System.Collections.Generic.List<string>) content.GetValueForProperty("PublicIPAddressConfigurationIpaddressId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).PublicIPAddressConfigurationIpaddressId, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("UsageStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("UsageStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("UsageStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("UsageStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("UsageStatisticsDedicatedCoreTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsDedicatedCoreTime = (global::System.TimeSpan?) content.GetValueForProperty("UsageStatisticsDedicatedCoreTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).UsageStatisticsDedicatedCoreTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ResourceStatisticsStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsStartTime = (global::System.DateTime?) content.GetValueForProperty("ResourceStatisticsStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ResourceStatisticsLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("ResourceStatisticsLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ResourceStatisticsAvgCpuPercentage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgCpuPercentage = (float?) content.GetValueForProperty("ResourceStatisticsAvgCpuPercentage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgCpuPercentage, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsAvgMemoryGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgMemoryGiB = (float?) content.GetValueForProperty("ResourceStatisticsAvgMemoryGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgMemoryGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsPeakMemoryGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakMemoryGiB = (float?) content.GetValueForProperty("ResourceStatisticsPeakMemoryGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakMemoryGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsAvgDiskGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgDiskGiB = (float?) content.GetValueForProperty("ResourceStatisticsAvgDiskGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsAvgDiskGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsPeakDiskGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakDiskGiB = (float?) content.GetValueForProperty("ResourceStatisticsPeakDiskGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsPeakDiskGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsDiskReadIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadIop = (string) content.GetValueForProperty("ResourceStatisticsDiskReadIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadIop, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceStatisticsDiskWriteIop"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteIop = (string) content.GetValueForProperty("ResourceStatisticsDiskWriteIop",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteIop, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceStatisticsDiskReadGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadGiB = (float?) content.GetValueForProperty("ResourceStatisticsDiskReadGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskReadGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsDiskWriteGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteGiB = (float?) content.GetValueForProperty("ResourceStatisticsDiskWriteGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsDiskWriteGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsNetworkReadGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkReadGiB = (float?) content.GetValueForProperty("ResourceStatisticsNetworkReadGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkReadGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("ResourceStatisticsNetworkWriteGiB"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkWriteGiB = (float?) content.GetValueForProperty("ResourceStatisticsNetworkWriteGiB",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).ResourceStatisticsNetworkWriteGiB, (__y)=> (float) global::System.Convert.ChangeType(__y, typeof(float)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyDisableAutomaticRollback"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyDisableAutomaticRollback",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyDisableAutomaticRollback, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyEnableAutomaticOsupgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyEnableAutomaticOsupgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyUseRollingUpgradePolicy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyUseRollingUpgradePolicy",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyUseRollingUpgradePolicy, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = (bool?) content.GetValueForProperty("AutomaticOSUpgradePolicyOsrollingUpgradeDeferral",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).AutomaticOSUpgradePolicyOsrollingUpgradeDeferral, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyEnableCrossZoneUpgrade"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade = (bool?) content.GetValueForProperty("RollingUpgradePolicyEnableCrossZoneUpgrade",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyEnableCrossZoneUpgrade, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyMaxBatchInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxBatchInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxBatchInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxBatchInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = (int?) content.GetValueForProperty("RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RollingUpgradePolicyPauseTimeBetweenBatch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch = (global::System.TimeSpan?) content.GetValueForProperty("RollingUpgradePolicyPauseTimeBetweenBatch",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPauseTimeBetweenBatch, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("RollingUpgradePolicyPrioritizeUnhealthyInstance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance = (bool?) content.GetValueForProperty("RollingUpgradePolicyPrioritizeUnhealthyInstance",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyPrioritizeUnhealthyInstance, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = (bool?) content.GetValueForProperty("RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPool"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPool" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPool DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchPool(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPool"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPool" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPool DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchPool(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchPool" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchPool" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPool FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// A Pool in the Azure Batch service.
    [System.ComponentModel.TypeConverter(typeof(BatchPoolTypeConverter))]
    public partial interface IBatchPool

    {

    }
}