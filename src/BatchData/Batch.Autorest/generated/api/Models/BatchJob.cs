// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>An Azure Batch Job.</summary>
    public partial class BatchJob :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJob,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="AllTasksCompleteMode" /> property.</summary>
        private string _allTasksCompleteMode;

        /// <summary>
        /// The action the Batch service should take when all Tasks in the Job are in the completed state. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string AllTasksCompleteMode { get => this._allTasksCompleteMode; set => this._allTasksCompleteMode = value; }

        /// <summary>Backing field for <see cref="AllowTaskPreemption" /> property.</summary>
        private bool? _allowTaskPreemption;

        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? AllowTaskPreemption { get => this._allowTaskPreemption; set => this._allowTaskPreemption = value; }

        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoPoolSpecificationAutoPoolIdPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationAutoPoolIdPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationAutoPoolIdPrefix = value ?? null; }

        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutoPoolSpecificationKeepAlive { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationKeepAlive; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationKeepAlive = value ?? default(bool); }

        /// <summary>The Pool specification for the auto Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPool = value ?? null /* model class */; }

        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoPoolSpecificationPoolLifetimeOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPoolLifetimeOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPoolLifetimeOption = value ?? null; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserElevationLevel; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserScope; }

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>Backing field for <see cref="CommonEnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _commonEnvironmentSetting;

        /// <summary>
        /// The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including
        /// the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified
        /// here by specifying the same setting name with a different value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> CommonEnvironmentSetting { get => this._commonEnvironmentSetting; }

        /// <summary>Backing field for <see cref="Constraint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints _constraint;

        /// <summary>The execution constraints for the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobConstraints()); set => this._constraint = value; }

        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ConstraintMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerHostBatchBindMount; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerRunOption; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingImageName; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingWorkingDirectory; }

        /// <summary>Backing field for <see cref="CreationTime" /> property.</summary>
        private global::System.DateTime? _creationTime;

        /// <summary>The creation time of the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? CreationTime { get => this._creationTime; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>The display name for the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        /// <summary>
        /// The ETag of the Job. This is an opaque string. You can use it to detect whether the Job has changed between requests.
        /// In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody
        /// else has modified the Job in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; }

        /// <summary>Backing field for <see cref="ETag1" /> property.</summary>
        private string _eTag1;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag1 { get => this._eTag1; set => this._eTag1 = value; }

        /// <summary>Backing field for <see cref="ExecutionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfo _executionInfo;

        /// <summary>The execution information for the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfo ExecutionInfo { get => (this._executionInfo = this._executionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobExecutionInfo()); }

        /// <summary>
        /// The completion time of the Job. This property is set only if the Job is in the completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).EndTime; }

        /// <summary>
        /// The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When
        /// you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data
        /// from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs
        /// are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ExecutionInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).PoolId; }

        /// <summary>The start time of the Job. This is the time at which the Job was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).StartTime; }

        /// <summary>
        /// A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch
        /// service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion
        /// was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the
        /// Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute
        /// is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
        /// performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob.
        /// Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ExecutionInfoTerminationReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).TerminationReason; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A string that uniquely identifies the Job within the Account. The ID is case-preserving and case-insensitive (that is,
        /// you may not have two IDs within an Account that differ only by case).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).IdentityReferenceResourceId; }

        /// <summary>Backing field for <see cref="JobManagerTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask _jobManagerTask;

        /// <summary>Details of a Job Manager Task to be launched when the Job is started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get => (this._jobManagerTask = this._jobManagerTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTask()); }

        /// <summary>Backing field for <see cref="JobPreparationTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask _jobPreparationTask;

        /// <summary>
        /// The Job Preparation Task. The Job Preparation Task is a special Task run on each Compute Node before any other Task of
        /// the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get => (this._jobPreparationTask = this._jobPreparationTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask()); }

        /// <summary>Backing field for <see cref="JobReleaseTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask _jobReleaseTask;

        /// <summary>
        /// The Job Release Task. The Job Release Task is a special Task run at the end of the Job on each Compute Node that has run
        /// any other Task of the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask JobReleaseTask { get => (this._jobReleaseTask = this._jobReleaseTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobReleaseTask()); }

        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).CommandLine; }

        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> JobReleaseTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).EnvironmentSetting; }

        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).Id; }

        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobReleaseTaskMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).MaxWallClockTime; }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> JobReleaseTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ResourceFile; }

        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobReleaseTaskRetentionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RetentionTime; }

        /// <summary>Backing field for <see cref="JobStatistics" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatistics _jobStatistics;

        /// <summary>
        /// Resource usage statistics for the entire lifetime of the Job. This property is populated only if the BatchJob was retrieved
        /// with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available.
        /// The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatistics JobStatistics { get => (this._jobStatistics = this._jobStatistics ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobStatistics()); }

        /// <summary>
        /// The total number of Tasks in the Job that failed during the given time range. A Task fails if it exhausts its maximum
        /// retry count without returning exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobStatisticsFailedTasksCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).FailedTasksCount; }

        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobStatisticsKernelCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).KernelCpuTime; }

        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).LastUpdateTime; }

        /// <summary>The total amount of data in GiB read from disk by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? JobStatisticsReadIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).ReadIoGiB; }

        /// <summary>The total number of disk read operations made by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobStatisticsReadIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).ReadIop; }

        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).StartTime; }

        /// <summary>
        /// The total number of Tasks successfully completed in the Job during the given time range. A Task completes successfully
        /// if it returns exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobStatisticsSucceededTasksCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).SucceededTasksCount; }

        /// <summary>
        /// The total number of retries on all the Tasks in the Job during the given time range.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobStatisticsTaskRetriesCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).TaskRetriesCount; }

        /// <summary>The URL of the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobStatisticsUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).Url; }

        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobStatisticsUserCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).UserCpuTime; }

        /// <summary>
        /// The total wait time of all Tasks in the Job. The wait time for a Task is defined as the elapsed time between the creation
        /// of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the
        /// most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the
        /// Job statistics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobStatisticsWaitTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WaitTime; }

        /// <summary>
        /// The total wall clock time of all Tasks in the Job. The wall clock time is the elapsed time from when the Task started
        /// running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished
        /// by then). If a Task was retried, this includes the wall clock time of all the Task retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobStatisticsWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WallClockTime; }

        /// <summary>The total amount of data in GiB written to disk by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? JobStatisticsWriteIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WriteIoGiB; }

        /// <summary>The total number of disk write operations made by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobStatisticsWriteIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WriteIop; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private global::System.DateTime? _lastModified;

        /// <summary>
        /// The last modified time of the Job. This is the last time at which the Job level data, such as the Job state or priority,
        /// changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? LastModified { get => this._lastModified; }

        /// <summary>Backing field for <see cref="LastModified1" /> property.</summary>
        private string _lastModified1;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified1 { get => this._lastModified1; set => this._lastModified1 = value; }

        /// <summary>Backing field for <see cref="MaxParallelTask" /> property.</summary>
        private int? _maxParallelTask;

        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? MaxParallelTask { get => this._maxParallelTask; set => this._maxParallelTask = value; }

        /// <summary>Backing field for <see cref="Metadata" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> _metadata;

        /// <summary>
        /// A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata;
        /// it is solely for the use of user code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get => this._metadata; set => this._metadata = value; }

        /// <summary>Internal Acessors for AutoUserElevationLevel</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserElevationLevel = value ?? null; }

        /// <summary>Internal Acessors for AutoUserScope</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserScope = value ?? null; }

        /// <summary>Internal Acessors for CommonEnvironmentSetting</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.CommonEnvironmentSetting { get => this._commonEnvironmentSetting; set { {_commonEnvironmentSetting = value;} } }

        /// <summary>Internal Acessors for Constraint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobConstraints()); set { {_constraint = value;} } }

        /// <summary>Internal Acessors for ContainerSettingContainerHostBatchBindMount</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for ContainerSettingContainerRunOption</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerRunOption = value ?? null; }

        /// <summary>Internal Acessors for ContainerSettingImageName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingImageName = value ?? null; }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingRegistry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ContainerSettingWorkingDirectory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingWorkingDirectory = value ?? null; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.CreationTime { get => this._creationTime; set { {_creationTime = value;} } }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.DisplayName { get => this._displayName; set { {_displayName = value;} } }

        /// <summary>Internal Acessors for ETag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ETag { get => this._eTag; set { {_eTag = value;} } }

        /// <summary>Internal Acessors for ExecutionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ExecutionInfo { get => (this._executionInfo = this._executionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobExecutionInfo()); set { {_executionInfo = value;} } }

        /// <summary>Internal Acessors for ExecutionInfoEndTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).EndTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ExecutionInfoPoolId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ExecutionInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).PoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).PoolId = value ?? null; }

        /// <summary>Internal Acessors for ExecutionInfoSchedulingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingError Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ExecutionInfoSchedulingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingError = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExecutionInfoStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ExecutionInfoTerminationReason</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.ExecutionInfoTerminationReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).TerminationReason; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).TerminationReason = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for IdentityReferenceResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for JobManagerTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobManagerTask { get => (this._jobManagerTask = this._jobManagerTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTask()); set { {_jobManagerTask = value;} } }

        /// <summary>Internal Acessors for JobPreparationTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobPreparationTask { get => (this._jobPreparationTask = this._jobPreparationTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask()); set { {_jobPreparationTask = value;} } }

        /// <summary>Internal Acessors for JobReleaseTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTask { get => (this._jobReleaseTask = this._jobReleaseTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobReleaseTask()); set { {_jobReleaseTask = value;} } }

        /// <summary>Internal Acessors for JobReleaseTaskCommandLine</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).CommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).CommandLine = value ?? null; }

        /// <summary>Internal Acessors for JobReleaseTaskContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskContainerSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobReleaseTaskEnvironmentSetting</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).EnvironmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).EnvironmentSetting = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for JobReleaseTaskId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).Id = value ?? null; }

        /// <summary>Internal Acessors for JobReleaseTaskMaxWallClockTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for JobReleaseTaskResourceFile</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ResourceFile = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for JobReleaseTaskRetentionTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskRetentionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RetentionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RetentionTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for JobReleaseTaskUserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobReleaseTaskUserIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobStatistics</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatistics Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatistics { get => (this._jobStatistics = this._jobStatistics ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobStatistics()); set { {_jobStatistics = value;} } }

        /// <summary>Internal Acessors for JobStatisticsFailedTasksCount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsFailedTasksCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).FailedTasksCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).FailedTasksCount = value ?? null; }

        /// <summary>Internal Acessors for JobStatisticsKernelCpuTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsKernelCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).KernelCpuTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).KernelCpuTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for JobStatisticsLastUpdateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).LastUpdateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).LastUpdateTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for JobStatisticsReadIoGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsReadIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).ReadIoGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).ReadIoGiB = value ?? default(float); }

        /// <summary>Internal Acessors for JobStatisticsReadIop</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsReadIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).ReadIop; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).ReadIop = value ?? null; }

        /// <summary>Internal Acessors for JobStatisticsStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for JobStatisticsSucceededTasksCount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsSucceededTasksCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).SucceededTasksCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).SucceededTasksCount = value ?? null; }

        /// <summary>Internal Acessors for JobStatisticsTaskRetriesCount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsTaskRetriesCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).TaskRetriesCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).TaskRetriesCount = value ?? null; }

        /// <summary>Internal Acessors for JobStatisticsUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).Url = value ?? null; }

        /// <summary>Internal Acessors for JobStatisticsUserCpuTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsUserCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).UserCpuTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).UserCpuTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for JobStatisticsWaitTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsWaitTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WaitTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WaitTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for JobStatisticsWallClockTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for JobStatisticsWriteIoGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsWriteIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WriteIoGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WriteIoGiB = value ?? default(float); }

        /// <summary>Internal Acessors for JobStatisticsWriteIop</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.JobStatisticsWriteIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WriteIop; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatisticsInternal)JobStatistics).WriteIop = value ?? null; }

        /// <summary>Internal Acessors for LastModified</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.LastModified { get => this._lastModified; set { {_lastModified = value;} } }

        /// <summary>Internal Acessors for NetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobNetworkConfiguration()); set { {_networkConfiguration = value;} } }

        /// <summary>Internal Acessors for NetworkConfigurationSkipWithdrawFromVnet</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.NetworkConfigurationSkipWithdrawFromVnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SkipWithdrawFromVnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SkipWithdrawFromVnet = value ?? default(bool); }

        /// <summary>Internal Acessors for NetworkConfigurationSubnetId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SubnetId = value ?? null; }

        /// <summary>Internal Acessors for PoolInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.PoolInfo { get => (this._poolInfo = this._poolInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolInfo()); set { {_poolInfo = value;} } }

        /// <summary>Internal Acessors for PoolInfoAutoPoolSpecification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.PoolInfoAutoPoolSpecification { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecification; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecification = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PreviousState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.PreviousState { get => this._previousState; set { {_previousState = value;} } }

        /// <summary>Internal Acessors for PreviousStateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.PreviousStateTransitionTime { get => this._previousStateTransitionTime; set { {_previousStateTransitionTime = value;} } }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryPassword</summary>
        System.Security.SecureString Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryPassword = value ?? null; }

        /// <summary>Internal Acessors for RegistryServer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryServer = value ?? null; }

        /// <summary>Internal Acessors for RegistryUsername</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryUsername = value ?? null; }

        /// <summary>Internal Acessors for SchedulingErrorCategory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.SchedulingErrorCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorCategory = value ?? null; }

        /// <summary>Internal Acessors for SchedulingErrorCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.SchedulingErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorCode = value ?? null; }

        /// <summary>Internal Acessors for SchedulingErrorDetail</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.SchedulingErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorDetail = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for SchedulingErrorMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.SchedulingErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorMessage = value ?? null; }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for StateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.StateTransitionTime { get => this._stateTransitionTime; set { {_stateTransitionTime = value;} } }

        /// <summary>Internal Acessors for TaskFailureMode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.TaskFailureMode { get => this._taskFailureMode; set { {_taskFailureMode = value;} } }

        /// <summary>Internal Acessors for Url</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.Url { get => this._url; set { {_url = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityAutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityAutoUser = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentityUsername</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityUsername = value ?? null; }

        /// <summary>Internal Acessors for UsesTaskDependency</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal.UsesTaskDependency { get => this._usesTaskDependency; set { {_usesTaskDependency = value;} } }

        /// <summary>Backing field for <see cref="NetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration _networkConfiguration;

        /// <summary>The network configuration for the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobNetworkConfiguration()); }

        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? NetworkConfigurationSkipWithdrawFromVnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SkipWithdrawFromVnet; }

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SubnetId; }

        /// <summary>Backing field for <see cref="PoolInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo _poolInfo;

        /// <summary>The Pool settings associated with the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo PoolInfo { get => (this._poolInfo = this._poolInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolInfo()); set => this._poolInfo = value; }

        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PoolInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).PoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).PoolId = value ?? null; }

        /// <summary>Backing field for <see cref="PreviousState" /> property.</summary>
        private string _previousState;

        /// <summary>
        /// The previous state of the Job. This property is not set if the Job is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PreviousState { get => this._previousState; }

        /// <summary>Backing field for <see cref="PreviousStateTransitionTime" /> property.</summary>
        private global::System.DateTime? _previousStateTransitionTime;

        /// <summary>
        /// The time at which the Job entered its previous state. This property is not set if the Job is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? PreviousStateTransitionTime { get => this._previousStateTransitionTime; }

        /// <summary>Backing field for <see cref="Priority" /> property.</summary>
        private int? _priority;

        /// <summary>
        /// The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being
        /// the highest priority. The default value is 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? Priority { get => this._priority; set => this._priority = value; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryPassword; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryServer; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryUsername; }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>The category of the Job scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string SchedulingErrorCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorCategory; }

        /// <summary>
        /// An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string SchedulingErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorCode; }

        /// <summary>A list of additional error details related to the scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> SchedulingErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorDetail; }

        /// <summary>
        /// A message describing the Job scheduling error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string SchedulingErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal)ExecutionInfo).SchedulingErrorMessage; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The current state of the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Backing field for <see cref="StateTransitionTime" /> property.</summary>
        private global::System.DateTime? _stateTransitionTime;

        /// <summary>The time at which the Job entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StateTransitionTime { get => this._stateTransitionTime; }

        /// <summary>Backing field for <see cref="TaskFailureMode" /> property.</summary>
        private string _taskFailureMode;

        /// <summary>
        /// The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a
        /// failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or
        /// if there was an error starting the Task, for example due to a resource file download error. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskFailureMode { get => this._taskFailureMode; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>The URL of the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Url { get => this._url; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityUsername; }

        /// <summary>Backing field for <see cref="UsesTaskDependency" /> property.</summary>
        private bool? _usesTaskDependency;

        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? UsesTaskDependency { get => this._usesTaskDependency; }

        /// <summary>Creates an new <see cref="BatchJob" /> instance.</summary>
        public BatchJob()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal)this).ETag1 = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal)this).LastModified1 = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader1) is string __headerLastModifiedHeader1 ? __headerLastModifiedHeader1 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader2) is string __headerClientRequestIdHeader2 ? __headerClientRequestIdHeader2 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader3) is string __headerRequestIdHeader3 ? __headerRequestIdHeader3 : (string)null;
            }
        }
    }
    /// An Azure Batch Job.
    public partial interface IBatchJob :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The action the Batch service should take when all Tasks in the Job are in the completed state. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The action the Batch service should take when all Tasks in the Job are in the completed state. The default is noaction.",
        SerializedName = @"onAllTasksComplete",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "terminatejob")]
        string AllTasksCompleteMode { get; set; }
        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API.",
        SerializedName = @"allowTaskPreemption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowTaskPreemption { get; set; }
        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.",
        SerializedName = @"autoPoolIdPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string AutoPoolSpecificationAutoPoolIdPrefix { get; set; }
        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.",
        SerializedName = @"keepAlive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoPoolSpecificationKeepAlive { get; set; }
        /// <summary>The Pool specification for the auto Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Pool specification for the auto Pool.",
        SerializedName = @"pool",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get; set; }
        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.",
        SerializedName = @"poolLifetimeOption",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        string AutoPoolSpecificationPoolLifetimeOption { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get;  }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }
        /// <summary>
        /// The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including
        /// the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified
        /// here by specifying the same setting name with a different value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.",
        SerializedName = @"commonEnvironmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> CommonEnvironmentSetting { get;  }
        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get;  }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get;  }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get;  }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get;  }
        /// <summary>The creation time of the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The creation time of the Job.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTime { get;  }
        /// <summary>The display name for the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The display name for the Job.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>
        /// The ETag of the Job. This is an opaque string. You can use it to detect whether the Job has changed between requests.
        /// In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody
        /// else has modified the Job in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ETag of the Job. This is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime.",
        SerializedName = @"eTag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag1 { get; set; }
        /// <summary>
        /// The completion time of the Job. This property is set only if the Job is in the completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The completion time of the Job. This property is set only if the Job is in the completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoEndTime { get;  }
        /// <summary>
        /// The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When
        /// you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data
        /// from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs
        /// are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string ExecutionInfoPoolId { get;  }
        /// <summary>The start time of the Job. This is the time at which the Job was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The start time of the Job. This is the time at which the Job was created.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoStartTime { get;  }
        /// <summary>
        /// A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch
        /// service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion
        /// was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the
        /// Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute
        /// is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
        /// performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob.
        /// Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.",
        SerializedName = @"terminateReason",
        PossibleTypes = new [] { typeof(string) })]
        string ExecutionInfoTerminationReason { get;  }
        /// <summary>
        /// A string that uniquely identifies the Job within the Account. The ID is case-preserving and case-insensitive (that is,
        /// you may not have two IDs within an Account that differ only by case).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A string that uniquely identifies the Job within the Account. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get;  }
        /// <summary>Details of a Job Manager Task to be launched when the Job is started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Details of a Job Manager Task to be launched when the Job is started.",
        SerializedName = @"jobManagerTask",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get;  }
        /// <summary>
        /// The Job Preparation Task. The Job Preparation Task is a special Task run on each Compute Node before any other Task of
        /// the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The Job Preparation Task. The Job Preparation Task is a special Task run on each Compute Node before any other Task of the Job.",
        SerializedName = @"jobPreparationTask",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get;  }
        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskCommandLine { get;  }
        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of environment variable settings for the Job Release Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> JobReleaseTaskEnvironmentSetting { get;  }
        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskId { get;  }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobReleaseTaskMaxWallClockTime { get;  }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> JobReleaseTaskResourceFile { get;  }
        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobReleaseTaskRetentionTime { get;  }
        /// <summary>
        /// The total number of Tasks in the Job that failed during the given time range. A Task fails if it exhausts its maximum
        /// retry count without returning exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of Tasks in the Job that failed during the given time range. A Task fails if it exhausts its maximum retry count without returning exit code 0.",
        SerializedName = @"numFailedTasks",
        PossibleTypes = new [] { typeof(string) })]
        string JobStatisticsFailedTasksCount { get;  }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.",
        SerializedName = @"kernelCPUTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobStatisticsKernelCpuTime { get;  }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobStatisticsLastUpdateTime { get;  }
        /// <summary>The total amount of data in GiB read from disk by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total amount of data in GiB read from disk by all Tasks in the Job.",
        SerializedName = @"readIOGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? JobStatisticsReadIoGiB { get;  }
        /// <summary>The total number of disk read operations made by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of disk read operations made by all Tasks in the Job.",
        SerializedName = @"readIOps",
        PossibleTypes = new [] { typeof(string) })]
        string JobStatisticsReadIop { get;  }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The start time of the time range covered by the statistics.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobStatisticsStartTime { get;  }
        /// <summary>
        /// The total number of Tasks successfully completed in the Job during the given time range. A Task completes successfully
        /// if it returns exit code 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of Tasks successfully completed in the Job during the given time range. A Task completes successfully if it returns exit code 0.",
        SerializedName = @"numSucceededTasks",
        PossibleTypes = new [] { typeof(string) })]
        string JobStatisticsSucceededTasksCount { get;  }
        /// <summary>
        /// The total number of retries on all the Tasks in the Job during the given time range.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of retries on all the Tasks in the Job during the given time range.",
        SerializedName = @"numTaskRetries",
        PossibleTypes = new [] { typeof(string) })]
        string JobStatisticsTaskRetriesCount { get;  }
        /// <summary>The URL of the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the statistics.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string JobStatisticsUrl { get;  }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.",
        SerializedName = @"userCPUTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobStatisticsUserCpuTime { get;  }
        /// <summary>
        /// The total wait time of all Tasks in the Job. The wait time for a Task is defined as the elapsed time between the creation
        /// of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the
        /// most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the
        /// Job statistics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total wait time of all Tasks in the Job. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics.",
        SerializedName = @"waitTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobStatisticsWaitTime { get;  }
        /// <summary>
        /// The total wall clock time of all Tasks in the Job. The wall clock time is the elapsed time from when the Task started
        /// running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished
        /// by then). If a Task was retried, this includes the wall clock time of all the Task retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total wall clock time of all Tasks in the Job.  The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries.",
        SerializedName = @"wallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobStatisticsWallClockTime { get;  }
        /// <summary>The total amount of data in GiB written to disk by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total amount of data in GiB written to disk by all Tasks in the Job.",
        SerializedName = @"writeIOGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? JobStatisticsWriteIoGiB { get;  }
        /// <summary>The total number of disk write operations made by all Tasks in the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of disk write operations made by all Tasks in the Job.",
        SerializedName = @"writeIOps",
        PossibleTypes = new [] { typeof(string) })]
        string JobStatisticsWriteIop { get;  }
        /// <summary>
        /// The last modified time of the Job. This is the last time at which the Job level data, such as the Job state or priority,
        /// changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The last modified time of the Job. This is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.",
        SerializedName = @"lastModified",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModified { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified1 { get; set; }
        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.",
        SerializedName = @"maxParallelTasks",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxParallelTask { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata;
        /// it is solely for the use of user code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted.  If true, nodes will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults to false.",
        SerializedName = @"skipWithdrawFromVNet",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NetworkConfigurationSkipWithdrawFromVnet { get;  }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkConfigurationSubnetId { get;  }
        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolInfoPoolId { get; set; }
        /// <summary>
        /// The previous state of the Job. This property is not set if the Job is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The previous state of the Job. This property is not set if the Job is in its initial Active state.",
        SerializedName = @"previousState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "disabling", "disabled", "enabling", "terminating", "completed", "deleting")]
        string PreviousState { get;  }
        /// <summary>
        /// The time at which the Job entered its previous state. This property is not set if the Job is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Job entered its previous state. This property is not set if the Job is in its initial Active state.",
        SerializedName = @"previousStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PreviousStateTransitionTime { get;  }
        /// <summary>
        /// The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being
        /// the highest priority. The default value is 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.",
        SerializedName = @"priority",
        PossibleTypes = new [] { typeof(int) })]
        int? Priority { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get;  }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get;  }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>The category of the Job scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The category of the Job scheduling error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string SchedulingErrorCategory { get;  }
        /// <summary>
        /// An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string SchedulingErrorCode { get;  }
        /// <summary>A list of additional error details related to the scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of additional error details related to the scheduling error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> SchedulingErrorDetail { get;  }
        /// <summary>
        /// A message describing the Job scheduling error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A message describing the Job scheduling error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string SchedulingErrorMessage { get;  }
        /// <summary>The current state of the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The current state of the Job.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "disabling", "disabled", "enabling", "terminating", "completed", "deleting")]
        string State { get;  }
        /// <summary>The time at which the Job entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Job entered its current state.",
        SerializedName = @"stateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StateTransitionTime { get;  }
        /// <summary>
        /// The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a
        /// failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or
        /// if there was an error starting the Task, for example due to a resource file download error. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction.",
        SerializedName = @"onTaskFailure",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "performexitoptionsjobaction")]
        string TaskFailureMode { get;  }
        /// <summary>The URL of the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the Job.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get;  }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get;  }
        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Whether Tasks in the Job can define dependencies on each other. The default is false.",
        SerializedName = @"usesTaskDependencies",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UsesTaskDependency { get;  }

    }
    /// An Azure Batch Job.
    internal partial interface IBatchJobInternal

    {
        /// <summary>
        /// The action the Batch service should take when all Tasks in the Job are in the completed state. The default is noaction.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "terminatejob")]
        string AllTasksCompleteMode { get; set; }
        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        bool? AllowTaskPreemption { get; set; }
        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        string AutoPoolSpecificationAutoPoolIdPrefix { get; set; }
        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        bool? AutoPoolSpecificationKeepAlive { get; set; }
        /// <summary>The Pool specification for the auto Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get; set; }
        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        string AutoPoolSpecificationPoolLifetimeOption { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }

        string ClientRequestId { get; set; }
        /// <summary>
        /// The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including
        /// the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified
        /// here by specifying the same setting name with a different value.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> CommonEnvironmentSetting { get; set; }
        /// <summary>The execution constraints for the Job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints Constraint { get; set; }
        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>The creation time of the Job.</summary>
        global::System.DateTime? CreationTime { get; set; }
        /// <summary>The display name for the Job.</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The ETag of the Job. This is an opaque string. You can use it to detect whether the Job has changed between requests.
        /// In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody
        /// else has modified the Job in the meantime.
        /// </summary>
        string ETag { get; set; }

        string ETag1 { get; set; }
        /// <summary>The execution information for the Job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfo ExecutionInfo { get; set; }
        /// <summary>
        /// The completion time of the Job. This property is set only if the Job is in the completed state.
        /// </summary>
        global::System.DateTime? ExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When
        /// you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data
        /// from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs
        /// are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
        /// </summary>
        string ExecutionInfoPoolId { get; set; }
        /// <summary>
        /// Details of any error encountered by the service in starting the Job. This property is not set if there was no error starting
        /// the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingError ExecutionInfoSchedulingError { get; set; }
        /// <summary>The start time of the Job. This is the time at which the Job was created.</summary>
        global::System.DateTime? ExecutionInfoStartTime { get; set; }
        /// <summary>
        /// A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch
        /// service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion
        /// was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the
        /// Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute
        /// is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
        /// performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob.
        /// Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
        /// </summary>
        string ExecutionInfoTerminationReason { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job within the Account. The ID is case-preserving and case-insensitive (that is,
        /// you may not have two IDs within an Account that differ only by case).
        /// </summary>
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>Details of a Job Manager Task to be launched when the Job is started.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get; set; }
        /// <summary>
        /// The Job Preparation Task. The Job Preparation Task is a special Task run on each Compute Node before any other Task of
        /// the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get; set; }
        /// <summary>
        /// The Job Release Task. The Job Release Task is a special Task run at the end of the Job on each Compute Node that has run
        /// any other Task of the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask JobReleaseTask { get; set; }
        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string JobReleaseTaskCommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the Job Release Task runs. When this is specified, all directories recursively
        /// below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all
        /// Task environment variables are mapped into the container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch
        /// file APIs will not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings JobReleaseTaskContainerSetting { get; set; }
        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> JobReleaseTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        string JobReleaseTaskId { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? JobReleaseTaskMaxWallClockTime { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> JobReleaseTaskResourceFile { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? JobReleaseTaskRetentionTime { get; set; }
        /// <summary>
        /// The user identity under which the Job Release Task runs. If omitted, the Task runs as a non-administrative user unique
        /// to the Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity JobReleaseTaskUserIdentity { get; set; }
        /// <summary>
        /// Resource usage statistics for the entire lifetime of the Job. This property is populated only if the BatchJob was retrieved
        /// with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available.
        /// The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobStatistics JobStatistics { get; set; }
        /// <summary>
        /// The total number of Tasks in the Job that failed during the given time range. A Task fails if it exhausts its maximum
        /// retry count without returning exit code 0.
        /// </summary>
        string JobStatisticsFailedTasksCount { get; set; }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
        /// </summary>
        global::System.TimeSpan? JobStatisticsKernelCpuTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        global::System.DateTime? JobStatisticsLastUpdateTime { get; set; }
        /// <summary>The total amount of data in GiB read from disk by all Tasks in the Job.</summary>
        float? JobStatisticsReadIoGiB { get; set; }
        /// <summary>The total number of disk read operations made by all Tasks in the Job.</summary>
        string JobStatisticsReadIop { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        global::System.DateTime? JobStatisticsStartTime { get; set; }
        /// <summary>
        /// The total number of Tasks successfully completed in the Job during the given time range. A Task completes successfully
        /// if it returns exit code 0.
        /// </summary>
        string JobStatisticsSucceededTasksCount { get; set; }
        /// <summary>
        /// The total number of retries on all the Tasks in the Job during the given time range.
        /// </summary>
        string JobStatisticsTaskRetriesCount { get; set; }
        /// <summary>The URL of the statistics.</summary>
        string JobStatisticsUrl { get; set; }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
        /// </summary>
        global::System.TimeSpan? JobStatisticsUserCpuTime { get; set; }
        /// <summary>
        /// The total wait time of all Tasks in the Job. The wait time for a Task is defined as the elapsed time between the creation
        /// of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the
        /// most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the
        /// Job statistics.
        /// </summary>
        global::System.TimeSpan? JobStatisticsWaitTime { get; set; }
        /// <summary>
        /// The total wall clock time of all Tasks in the Job. The wall clock time is the elapsed time from when the Task started
        /// running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished
        /// by then). If a Task was retried, this includes the wall clock time of all the Task retries.
        /// </summary>
        global::System.TimeSpan? JobStatisticsWallClockTime { get; set; }
        /// <summary>The total amount of data in GiB written to disk by all Tasks in the Job.</summary>
        float? JobStatisticsWriteIoGiB { get; set; }
        /// <summary>The total number of disk write operations made by all Tasks in the Job.</summary>
        string JobStatisticsWriteIop { get; set; }
        /// <summary>
        /// The last modified time of the Job. This is the last time at which the Job level data, such as the Job state or priority,
        /// changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.
        /// </summary>
        global::System.DateTime? LastModified { get; set; }

        string LastModified1 { get; set; }
        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        int? MaxParallelTask { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata;
        /// it is solely for the use of user code.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>The network configuration for the Job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        bool? NetworkConfigurationSkipWithdrawFromVnet { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>The Pool settings associated with the Job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo PoolInfo { get; set; }
        /// <summary>
        /// Characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted. If
        /// auto Pool creation fails, the Batch service moves the Job to a completed state, and the Pool creation error is set in
        /// the Job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified,
        /// deletion) of the auto Pool. Any user actions that affect the lifetime of the auto Pool while the Job is active will result
        /// in unexpected behavior. You must specify either the Pool ID or the auto Pool specification, but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification PoolInfoAutoPoolSpecification { get; set; }
        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        string PoolInfoPoolId { get; set; }
        /// <summary>
        /// The previous state of the Job. This property is not set if the Job is in its initial Active state.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "disabling", "disabled", "enabling", "terminating", "completed", "deleting")]
        string PreviousState { get; set; }
        /// <summary>
        /// The time at which the Job entered its previous state. This property is not set if the Job is in its initial Active state.
        /// </summary>
        global::System.DateTime? PreviousStateTransitionTime { get; set; }
        /// <summary>
        /// The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being
        /// the highest priority. The default value is 0.
        /// </summary>
        int? Priority { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }

        string RequestId { get; set; }
        /// <summary>The category of the Job scheduling error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string SchedulingErrorCategory { get; set; }
        /// <summary>
        /// An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string SchedulingErrorCode { get; set; }
        /// <summary>A list of additional error details related to the scheduling error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> SchedulingErrorDetail { get; set; }
        /// <summary>
        /// A message describing the Job scheduling error, intended to be suitable for display in a user interface.
        /// </summary>
        string SchedulingErrorMessage { get; set; }
        /// <summary>The current state of the Job.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "disabling", "disabled", "enabling", "terminating", "completed", "deleting")]
        string State { get; set; }
        /// <summary>The time at which the Job entered its current state.</summary>
        global::System.DateTime? StateTransitionTime { get; set; }
        /// <summary>
        /// The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a
        /// failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or
        /// if there was an error starting the Task, for example due to a resource file download error. The default is noaction.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "performexitoptionsjobaction")]
        string TaskFailureMode { get; set; }
        /// <summary>The URL of the Job.</summary>
        string Url { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        bool? UsesTaskDependency { get; set; }

    }
}