// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Specifies details of the Jobs to be created on a schedule.</summary>
    public partial class BatchJobSpecification :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecification,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal
    {

        /// <summary>Backing field for <see cref="AllTasksCompleteMode" /> property.</summary>
        private string _allTasksCompleteMode;

        /// <summary>
        /// The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state.
        /// Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used
        /// with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set
        /// onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished
        /// adding Tasks. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string AllTasksCompleteMode { get => this._allTasksCompleteMode; set => this._allTasksCompleteMode = value; }

        /// <summary>Backing field for <see cref="AllowTaskPreemption" /> property.</summary>
        private bool? _allowTaskPreemption;

        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? AllowTaskPreemption { get => this._allowTaskPreemption; set => this._allowTaskPreemption = value; }

        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoPoolSpecificationAutoPoolIdPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationAutoPoolIdPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationAutoPoolIdPrefix = value ?? null; }

        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutoPoolSpecificationKeepAlive { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationKeepAlive; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationKeepAlive = value ?? default(bool); }

        /// <summary>The Pool specification for the auto Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPool; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPool = value ?? null /* model class */; }

        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoPoolSpecificationPoolLifetimeOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPoolLifetimeOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecificationPoolLifetimeOption = value ?? null; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).AutoUserScope = value ?? null; }

        /// <summary>Backing field for <see cref="CommonEnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _commonEnvironmentSetting;

        /// <summary>
        /// A list of common environment variable settings. These environment variables are set for all Tasks in Jobs created under
        /// this schedule (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment
        /// setting specified here by specifying the same setting name with a different value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> CommonEnvironmentSetting { get => this._commonEnvironmentSetting; set => this._commonEnvironmentSetting = value; }

        /// <summary>Backing field for <see cref="Constraint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints _constraint;

        /// <summary>The execution constraints for Jobs created under this schedule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobConstraints()); set => this._constraint = value; }

        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ConstraintMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraintsInternal)Constraint).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingWorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>
        /// The display name for Jobs created under this schedule. The name need not be unique and can contain any Unicode characters
        /// up to a maximum length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="JobManagerTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask _jobManagerTask;

        /// <summary>
        /// The details of a Job Manager Task to be launched when a Job is started under this schedule. If the Job does not specify
        /// a Job Manager Task, the user must explicitly add Tasks to the Job using the Task API. If the Job does specify a Job Manager
        /// Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager
        /// Task before scheduling other Tasks in the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get => (this._jobManagerTask = this._jobManagerTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTask()); set => this._jobManagerTask = value; }

        /// <summary>Backing field for <see cref="JobPreparationTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask _jobPreparationTask;

        /// <summary>
        /// The Job Preparation Task for Jobs created under this schedule. If a Job has a Job Preparation Task, the Batch service
        /// will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get => (this._jobPreparationTask = this._jobPreparationTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTask()); set => this._jobPreparationTask = value; }

        /// <summary>Backing field for <see cref="JobReleaseTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask _jobReleaseTask;

        /// <summary>
        /// The Job Release Task for Jobs created under this schedule. The primary purpose of the Job Release Task is to undo changes
        /// to Nodes made by the Job Preparation Task. Example activities include deleting local files, or shutting down services
        /// that were started as part of Job preparation. A Job Release Task cannot be specified without also specifying a Job Preparation
        /// Task for the Job. The Batch service runs the Job Release Task on the Compute Nodes that have run the Job Preparation Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask JobReleaseTask { get => (this._jobReleaseTask = this._jobReleaseTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobReleaseTask()); set => this._jobReleaseTask = value; }

        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).CommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).CommandLine = value ?? null; }

        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> JobReleaseTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).EnvironmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).EnvironmentSetting = value ?? null /* arrayOf */; }

        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).Id = value ?? null; }

        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobReleaseTaskMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> JobReleaseTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ResourceFile = value ?? null /* arrayOf */; }

        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? JobReleaseTaskRetentionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RetentionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RetentionTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Backing field for <see cref="MaxParallelTask" /> property.</summary>
        private int? _maxParallelTask;

        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? MaxParallelTask { get => this._maxParallelTask; set => this._maxParallelTask = value; }

        /// <summary>Backing field for <see cref="Metadata" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> _metadata;

        /// <summary>
        /// A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not
        /// assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get => this._metadata; set => this._metadata = value; }

        /// <summary>Internal Acessors for Constraint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobConstraints()); set { {_constraint = value;} } }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSettingRegistry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobReleaseTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.JobReleaseTask { get => (this._jobReleaseTask = this._jobReleaseTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobReleaseTask()); set { {_jobReleaseTask = value;} } }

        /// <summary>Internal Acessors for JobReleaseTaskContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.JobReleaseTaskContainerSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).ContainerSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobReleaseTaskUserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.JobReleaseTaskUserIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for NetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobNetworkConfiguration()); set { {_networkConfiguration = value;} } }

        /// <summary>Internal Acessors for PoolInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.PoolInfo { get => (this._poolInfo = this._poolInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolInfo()); set { {_poolInfo = value;} } }

        /// <summary>Internal Acessors for PoolInfoAutoPoolSpecification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.PoolInfoAutoPoolSpecification { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecification; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).AutoPoolSpecification = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityAutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityAutoUser = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="NetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration _networkConfiguration;

        /// <summary>The network configuration for the Job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobNetworkConfiguration()); set => this._networkConfiguration = value; }

        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? NetworkConfigurationSkipWithdrawFromVnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SkipWithdrawFromVnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SkipWithdrawFromVnet = value ?? default(bool); }

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NetworkConfigurationSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfigurationInternal)NetworkConfiguration).SubnetId = value ?? null; }

        /// <summary>Backing field for <see cref="PoolInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo _poolInfo;

        /// <summary>
        /// The Pool on which the Batch service runs the Tasks of Jobs created under this schedule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo PoolInfo { get => (this._poolInfo = this._poolInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolInfo()); set => this._poolInfo = value; }

        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PoolInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).PoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfoInternal)PoolInfo).PoolId = value ?? null; }

        /// <summary>Backing field for <see cref="Priority" /> property.</summary>
        private int? _priority;

        /// <summary>
        /// The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest
        /// priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs
        /// under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? Priority { get => this._priority; set => this._priority = value; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="TaskFailureMode" /> property.</summary>
        private string _taskFailureMode;

        /// <summary>
        /// The action the Batch service should take when any Task fails in a Job created under this schedule. A Task is considered
        /// to have failed if it have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit
        /// code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file
        /// download error. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TaskFailureMode { get => this._taskFailureMode; set => this._taskFailureMode = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskInternal)JobReleaseTask).UserIdentityUsername = value ?? null; }

        /// <summary>Backing field for <see cref="UsesTaskDependency" /> property.</summary>
        private bool? _usesTaskDependency;

        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? UsesTaskDependency { get => this._usesTaskDependency; set => this._usesTaskDependency = value; }

        /// <summary>Creates an new <see cref="BatchJobSpecification" /> instance.</summary>
        public BatchJobSpecification()
        {

        }
    }
    /// Specifies details of the Jobs to be created on a schedule.
    public partial interface IBatchJobSpecification :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state.
        /// Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used
        /// with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set
        /// onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished
        /// adding Tasks. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction.",
        SerializedName = @"onAllTasksComplete",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "terminatejob")]
        string AllTasksCompleteMode { get; set; }
        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API.",
        SerializedName = @"allowTaskPreemption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowTaskPreemption { get; set; }
        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.",
        SerializedName = @"autoPoolIdPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string AutoPoolSpecificationAutoPoolIdPrefix { get; set; }
        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.",
        SerializedName = @"keepAlive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoPoolSpecificationKeepAlive { get; set; }
        /// <summary>The Pool specification for the auto Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Pool specification for the auto Pool.",
        SerializedName = @"pool",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get; set; }
        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.",
        SerializedName = @"poolLifetimeOption",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        string AutoPoolSpecificationPoolLifetimeOption { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// A list of common environment variable settings. These environment variables are set for all Tasks in Jobs created under
        /// this schedule (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment
        /// setting specified here by specifying the same setting name with a different value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of common environment variable settings. These environment variables are set for all Tasks in Jobs created under this schedule (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.",
        SerializedName = @"commonEnvironmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> CommonEnvironmentSetting { get; set; }
        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>
        /// The display name for Jobs created under this schedule. The name need not be unique and can contain any Unicode characters
        /// up to a maximum length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The display name for Jobs created under this schedule. The name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The details of a Job Manager Task to be launched when a Job is started under this schedule. If the Job does not specify
        /// a Job Manager Task, the user must explicitly add Tasks to the Job using the Task API. If the Job does specify a Job Manager
        /// Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager
        /// Task before scheduling other Tasks in the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The details of a Job Manager Task to be launched when a Job is started under this schedule. If the Job does not specify a Job Manager Task, the user must explicitly add Tasks to the Job using the Task API. If the Job does specify a Job Manager Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks in the Job.",
        SerializedName = @"jobManagerTask",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get; set; }
        /// <summary>
        /// The Job Preparation Task for Jobs created under this schedule. If a Job has a Job Preparation Task, the Batch service
        /// will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Job Preparation Task for Jobs created under this schedule. If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.",
        SerializedName = @"jobPreparationTask",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get; set; }
        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskCommandLine { get; set; }
        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the Job Release Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> JobReleaseTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskId { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobReleaseTaskMaxWallClockTime { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> JobReleaseTaskResourceFile { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? JobReleaseTaskRetentionTime { get; set; }
        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.",
        SerializedName = @"maxParallelTasks",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxParallelTask { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not
        /// assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted.  If true, nodes will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults to false.",
        SerializedName = @"skipWithdrawFromVNet",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NetworkConfigurationSkipWithdrawFromVnet { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolInfoPoolId { get; set; }
        /// <summary>
        /// The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest
        /// priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs
        /// under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.",
        SerializedName = @"priority",
        PossibleTypes = new [] { typeof(int) })]
        int? Priority { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }
        /// <summary>
        /// The action the Batch service should take when any Task fails in a Job created under this schedule. A Task is considered
        /// to have failed if it have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit
        /// code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file
        /// download error. The default is noaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The action the Batch service should take when any Task fails in a Job created under this schedule. A Task is considered to have failed if it have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction.",
        SerializedName = @"onTaskFailure",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "performexitoptionsjobaction")]
        string TaskFailureMode { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether Tasks in the Job can define dependencies on each other. The default is false.",
        SerializedName = @"usesTaskDependencies",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UsesTaskDependency { get; set; }

    }
    /// Specifies details of the Jobs to be created on a schedule.
    internal partial interface IBatchJobSpecificationInternal

    {
        /// <summary>
        /// The action the Batch service should take when all Tasks in a Job created under this schedule are in the completed state.
        /// Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used
        /// with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set
        /// onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished
        /// adding Tasks. The default is noaction.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "terminatejob")]
        string AllTasksCompleteMode { get; set; }
        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        bool? AllowTaskPreemption { get; set; }
        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        string AutoPoolSpecificationAutoPoolIdPrefix { get; set; }
        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        bool? AutoPoolSpecificationKeepAlive { get; set; }
        /// <summary>The Pool specification for the auto Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get; set; }
        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        string AutoPoolSpecificationPoolLifetimeOption { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// A list of common environment variable settings. These environment variables are set for all Tasks in Jobs created under
        /// this schedule (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment
        /// setting specified here by specifying the same setting name with a different value.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> CommonEnvironmentSetting { get; set; }
        /// <summary>The execution constraints for Jobs created under this schedule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobConstraints Constraint { get; set; }
        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>
        /// The display name for Jobs created under this schedule. The name need not be unique and can contain any Unicode characters
        /// up to a maximum length of 1024.
        /// </summary>
        string DisplayName { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The details of a Job Manager Task to be launched when a Job is started under this schedule. If the Job does not specify
        /// a Job Manager Task, the user must explicitly add Tasks to the Job using the Task API. If the Job does specify a Job Manager
        /// Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager
        /// Task before scheduling other Tasks in the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get; set; }
        /// <summary>
        /// The Job Preparation Task for Jobs created under this schedule. If a Job has a Job Preparation Task, the Batch service
        /// will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get; set; }
        /// <summary>
        /// The Job Release Task for Jobs created under this schedule. The primary purpose of the Job Release Task is to undo changes
        /// to Nodes made by the Job Preparation Task. Example activities include deleting local files, or shutting down services
        /// that were started as part of Job preparation. A Job Release Task cannot be specified without also specifying a Job Preparation
        /// Task for the Job. The Batch service runs the Job Release Task on the Compute Nodes that have run the Job Preparation Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTask JobReleaseTask { get; set; }
        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string JobReleaseTaskCommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the Job Release Task runs. When this is specified, all directories recursively
        /// below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all
        /// Task environment variables are mapped into the container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch
        /// file APIs will not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings JobReleaseTaskContainerSetting { get; set; }
        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> JobReleaseTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        string JobReleaseTaskId { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? JobReleaseTaskMaxWallClockTime { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> JobReleaseTaskResourceFile { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? JobReleaseTaskRetentionTime { get; set; }
        /// <summary>
        /// The user identity under which the Job Release Task runs. If omitted, the Task runs as a non-administrative user unique
        /// to the Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity JobReleaseTaskUserIdentity { get; set; }
        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        int? MaxParallelTask { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with each Job created under this schedule as metadata. The Batch service does not
        /// assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>The network configuration for the Job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobNetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        bool? NetworkConfigurationSkipWithdrawFromVnet { get; set; }
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        string NetworkConfigurationSubnetId { get; set; }
        /// <summary>
        /// The Pool on which the Batch service runs the Tasks of Jobs created under this schedule.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolInfo PoolInfo { get; set; }
        /// <summary>
        /// Characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted. If
        /// auto Pool creation fails, the Batch service moves the Job to a completed state, and the Pool creation error is set in
        /// the Job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified,
        /// deletion) of the auto Pool. Any user actions that affect the lifetime of the auto Pool while the Job is active will result
        /// in unexpected behavior. You must specify either the Pool ID or the auto Pool specification, but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAutoPoolSpecification PoolInfoAutoPoolSpecification { get; set; }
        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        string PoolInfoPoolId { get; set; }
        /// <summary>
        /// The priority of Jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest
        /// priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs
        /// under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
        /// </summary>
        int? Priority { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }
        /// <summary>
        /// The action the Batch service should take when any Task fails in a Job created under this schedule. A Task is considered
        /// to have failed if it have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit
        /// code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file
        /// download error. The default is noaction.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "performexitoptionsjobaction")]
        string TaskFailureMode { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        bool? UsesTaskDependency { get; set; }

    }
}