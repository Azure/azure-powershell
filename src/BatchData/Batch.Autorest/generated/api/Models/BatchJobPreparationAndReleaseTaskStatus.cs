// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The status of the Job Preparation and Job Release Tasks on a Compute Node.</summary>
    public partial class BatchJobPreparationAndReleaseTaskStatus :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatus,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal
    {

        /// <summary>Backing field for <see cref="JobPreparationTaskExecutionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfo _jobPreparationTaskExecutionInfo;

        /// <summary>
        /// Information about the execution status of the Job Preparation Task on this Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfo JobPreparationTaskExecutionInfo { get => (this._jobPreparationTaskExecutionInfo = this._jobPreparationTaskExecutionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTaskExecutionInfo()); set => this._jobPreparationTaskExecutionInfo = value; }

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfoContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfoContainerId = value ?? null; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfoError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfoError = value ?? null; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfoState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfoState = value ?? null; }

        /// <summary>
        /// The time at which the Job Preparation Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobPreparationTaskExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).EndTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the
        /// completed state. The exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such
        /// as when a process is forcibly terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? JobPreparationTaskExecutionInfoExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ExitCode = value ?? default(int); }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoFailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoCategory = value ?? null; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoFailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoCode = value ?? null; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> JobPreparationTaskExecutionInfoFailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoDetail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoFailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfoMessage = value ?? null; }

        /// <summary>
        /// The most recent time at which a retry of the Job Preparation Task started running. This property is set only if the Task
        /// was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if
        /// the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry,
        /// then the startTime is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobPreparationTaskExecutionInfoLastRetryTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).LastRetryTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).LastRetryTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).Result = value ?? null; }

        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints. Task application failures (non-zero exit code) are retried,
        /// pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry
        /// the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? JobPreparationTaskExecutionInfoRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).RetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).RetryCount = value ?? default(int); }

        /// <summary>
        /// The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at
        /// which the Task started running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobPreparationTaskExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>The current state of the Job Preparation Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).State = value ?? null; }

        /// <summary>
        /// The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by
        /// the Task, such as log files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoTaskRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).TaskRootDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).TaskRootDirectory = value ?? null; }

        /// <summary>The URL to the root directory of the Job Preparation Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobPreparationTaskExecutionInfoTaskRootDirectoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).TaskRootDirectoryUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).TaskRootDirectoryUrl = value ?? null; }

        /// <summary>Backing field for <see cref="JobReleaseTaskExecutionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfo _jobReleaseTaskExecutionInfo;

        /// <summary>
        /// Information about the execution status of the Job Release Task on this Compute Node. This property is set only if the
        /// Job Release Task has run on the Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfo JobReleaseTaskExecutionInfo { get => (this._jobReleaseTaskExecutionInfo = this._jobReleaseTaskExecutionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobReleaseTaskExecutionInfo()); set => this._jobReleaseTaskExecutionInfo = value; }

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfoContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfoContainerId = value ?? null; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfoError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfoError = value ?? null; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfoState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfoState = value ?? null; }

        /// <summary>
        /// The time at which the Job Release Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobReleaseTaskExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).EndTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the
        /// completed state. The exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such
        /// as when a process is forcibly terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? JobReleaseTaskExecutionInfoExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ExitCode = value ?? default(int); }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoFailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoCategory = value ?? null; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoFailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoCode = value ?? null; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> JobReleaseTaskExecutionInfoFailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoDetail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoFailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfoMessage = value ?? null; }

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).Result = value ?? null; }

        /// <summary>
        /// The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at
        /// which the Task started running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? JobReleaseTaskExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>The current state of the Job Release Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).State = value ?? null; }

        /// <summary>
        /// The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the
        /// Task, such as log files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoTaskRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).TaskRootDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).TaskRootDirectory = value ?? null; }

        /// <summary>The URL to the root directory of the Job Release Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string JobReleaseTaskExecutionInfoTaskRootDirectoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).TaskRootDirectoryUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).TaskRootDirectoryUrl = value ?? null; }

        /// <summary>Internal Acessors for JobPreparationTaskExecutionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal.JobPreparationTaskExecutionInfo { get => (this._jobPreparationTaskExecutionInfo = this._jobPreparationTaskExecutionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobPreparationTaskExecutionInfo()); set { {_jobPreparationTaskExecutionInfo = value;} } }

        /// <summary>Internal Acessors for JobPreparationTaskExecutionInfoContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal.JobPreparationTaskExecutionInfoContainerInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).ContainerInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobPreparationTaskExecutionInfoFailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal.JobPreparationTaskExecutionInfoFailureInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfoInternal)JobPreparationTaskExecutionInfo).FailureInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobReleaseTaskExecutionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal.JobReleaseTaskExecutionInfo { get => (this._jobReleaseTaskExecutionInfo = this._jobReleaseTaskExecutionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobReleaseTaskExecutionInfo()); set { {_jobReleaseTaskExecutionInfo = value;} } }

        /// <summary>Internal Acessors for JobReleaseTaskExecutionInfoContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal.JobReleaseTaskExecutionInfoContainerInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).ContainerInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for JobReleaseTaskExecutionInfoFailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationAndReleaseTaskStatusInternal.JobReleaseTaskExecutionInfoFailureInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfoInternal)JobReleaseTaskExecutionInfo).FailureInfo = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="NodeId" /> property.</summary>
        private string _nodeId;

        /// <summary>The ID of the Compute Node to which this entry refers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string NodeId { get => this._nodeId; set => this._nodeId = value; }

        /// <summary>Backing field for <see cref="NodeUrl" /> property.</summary>
        private string _nodeUrl;

        /// <summary>The URL of the Compute Node to which this entry refers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string NodeUrl { get => this._nodeUrl; set => this._nodeUrl = value; }

        /// <summary>Backing field for <see cref="PoolId" /> property.</summary>
        private string _poolId;

        /// <summary>The ID of the Pool containing the Compute Node to which this entry refers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PoolId { get => this._poolId; set => this._poolId = value; }

        /// <summary>Creates an new <see cref="BatchJobPreparationAndReleaseTaskStatus" /> instance.</summary>
        public BatchJobPreparationAndReleaseTaskStatus()
        {

        }
    }
    /// The status of the Job Preparation and Job Release Tasks on a Compute Node.
    public partial interface IBatchJobPreparationAndReleaseTaskStatus :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the Job Preparation Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Job Preparation Task completed. This property is set only if the Task is in the Completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobPreparationTaskExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the
        /// completed state. The exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such
        /// as when a process is forcibly terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? JobPreparationTaskExecutionInfoExitCode { get; set; }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string JobPreparationTaskExecutionInfoFailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoFailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> JobPreparationTaskExecutionInfoFailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoFailureInfoMessage { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Job Preparation Task started running. This property is set only if the Task
        /// was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if
        /// the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry,
        /// then the startTime is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The most recent time at which a retry of the Job Preparation Task started running. This property is set only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.",
        SerializedName = @"lastRetryTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobPreparationTaskExecutionInfoLastRetryTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string JobPreparationTaskExecutionInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints. Task application failures (non-zero exit code) are retried,
        /// pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry
        /// the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.",
        SerializedName = @"retryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? JobPreparationTaskExecutionInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at
        /// which the Task started running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at which the Task started running.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobPreparationTaskExecutionInfoStartTime { get; set; }
        /// <summary>The current state of the Job Preparation Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The current state of the Job Preparation Task on the Compute Node.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string JobPreparationTaskExecutionInfoState { get; set; }
        /// <summary>
        /// The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by
        /// the Task, such as log files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files.",
        SerializedName = @"taskRootDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Job Preparation Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL to the root directory of the Job Preparation Task on the Compute Node.",
        SerializedName = @"taskRootDirectoryUrl",
        PossibleTypes = new [] { typeof(string) })]
        string JobPreparationTaskExecutionInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the Job Release Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Job Release Task completed. This property is set only if the Task is in the Completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobReleaseTaskExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the
        /// completed state. The exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such
        /// as when a process is forcibly terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? JobReleaseTaskExecutionInfoExitCode { get; set; }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string JobReleaseTaskExecutionInfoFailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoFailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> JobReleaseTaskExecutionInfoFailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoFailureInfoMessage { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string JobReleaseTaskExecutionInfoResult { get; set; }
        /// <summary>
        /// The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at
        /// which the Task started running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at which the Task started running.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? JobReleaseTaskExecutionInfoStartTime { get; set; }
        /// <summary>The current state of the Job Release Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The current state of the Job Release Task on the Compute Node.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string JobReleaseTaskExecutionInfoState { get; set; }
        /// <summary>
        /// The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the
        /// Task, such as log files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files.",
        SerializedName = @"taskRootDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Job Release Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL to the root directory of the Job Release Task on the Compute Node.",
        SerializedName = @"taskRootDirectoryUrl",
        PossibleTypes = new [] { typeof(string) })]
        string JobReleaseTaskExecutionInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>The ID of the Compute Node to which this entry refers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Compute Node to which this entry refers.",
        SerializedName = @"nodeId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeId { get; set; }
        /// <summary>The URL of the Compute Node to which this entry refers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the Compute Node to which this entry refers.",
        SerializedName = @"nodeUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NodeUrl { get; set; }
        /// <summary>The ID of the Pool containing the Compute Node to which this entry refers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Pool containing the Compute Node to which this entry refers.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolId { get; set; }

    }
    /// The status of the Job Preparation and Job Release Tasks on a Compute Node.
    internal partial interface IBatchJobPreparationAndReleaseTaskStatusInternal

    {
        /// <summary>
        /// Information about the execution status of the Job Preparation Task on this Compute Node.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskExecutionInfo JobPreparationTaskExecutionInfo { get; set; }
        /// <summary>The ID of the container.</summary>
        string JobPreparationTaskExecutionInfoContainerId { get; set; }
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo JobPreparationTaskExecutionInfoContainerInfo { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string JobPreparationTaskExecutionInfoContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string JobPreparationTaskExecutionInfoContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the Job Preparation Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        global::System.DateTime? JobPreparationTaskExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the
        /// completed state. The exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such
        /// as when a process is forcibly terminated.
        /// </summary>
        int? JobPreparationTaskExecutionInfoExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo JobPreparationTaskExecutionInfoFailureInfo { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string JobPreparationTaskExecutionInfoFailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string JobPreparationTaskExecutionInfoFailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> JobPreparationTaskExecutionInfoFailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string JobPreparationTaskExecutionInfoFailureInfoMessage { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Job Preparation Task started running. This property is set only if the Task
        /// was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if
        /// the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry,
        /// then the startTime is updated but the lastRetryTime is not.
        /// </summary>
        global::System.DateTime? JobPreparationTaskExecutionInfoLastRetryTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string JobPreparationTaskExecutionInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints. Task application failures (non-zero exit code) are retried,
        /// pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry
        /// the Task up to the limit specified by the constraints.
        /// </summary>
        int? JobPreparationTaskExecutionInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at
        /// which the Task started running.
        /// </summary>
        global::System.DateTime? JobPreparationTaskExecutionInfoStartTime { get; set; }
        /// <summary>The current state of the Job Preparation Task on the Compute Node.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string JobPreparationTaskExecutionInfoState { get; set; }
        /// <summary>
        /// The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by
        /// the Task, such as log files.
        /// </summary>
        string JobPreparationTaskExecutionInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Job Preparation Task on the Compute Node.</summary>
        string JobPreparationTaskExecutionInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>
        /// Information about the execution status of the Job Release Task on this Compute Node. This property is set only if the
        /// Job Release Task has run on the Compute Node.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobReleaseTaskExecutionInfo JobReleaseTaskExecutionInfo { get; set; }
        /// <summary>The ID of the container.</summary>
        string JobReleaseTaskExecutionInfoContainerId { get; set; }
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo JobReleaseTaskExecutionInfoContainerInfo { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string JobReleaseTaskExecutionInfoContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string JobReleaseTaskExecutionInfoContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the Job Release Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        global::System.DateTime? JobReleaseTaskExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the
        /// completed state. The exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such
        /// as when a process is forcibly terminated.
        /// </summary>
        int? JobReleaseTaskExecutionInfoExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo JobReleaseTaskExecutionInfoFailureInfo { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string JobReleaseTaskExecutionInfoFailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string JobReleaseTaskExecutionInfoFailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> JobReleaseTaskExecutionInfoFailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string JobReleaseTaskExecutionInfoFailureInfoMessage { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string JobReleaseTaskExecutionInfoResult { get; set; }
        /// <summary>
        /// The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at
        /// which the Task started running.
        /// </summary>
        global::System.DateTime? JobReleaseTaskExecutionInfoStartTime { get; set; }
        /// <summary>The current state of the Job Release Task on the Compute Node.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string JobReleaseTaskExecutionInfoState { get; set; }
        /// <summary>
        /// The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the
        /// Task, such as log files.
        /// </summary>
        string JobReleaseTaskExecutionInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Job Release Task on the Compute Node.</summary>
        string JobReleaseTaskExecutionInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>The ID of the Compute Node to which this entry refers.</summary>
        string NodeId { get; set; }
        /// <summary>The URL of the Compute Node to which this entry refers.</summary>
        string NodeUrl { get; set; }
        /// <summary>The ID of the Pool containing the Compute Node to which this entry refers.</summary>
        string PoolId { get; set; }

    }
}