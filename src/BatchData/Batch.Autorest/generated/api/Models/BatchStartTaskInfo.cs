// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Information about a StartTask running on a Compute Node.</summary>
    public partial class BatchStartTaskInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal
    {

        /// <summary>Backing field for <see cref="ContainerInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo _containerInfo;

        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo ContainerInfo { get => (this._containerInfo = this._containerInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfo()); set => this._containerInfo = value; }

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).ContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).ContainerId = value ?? null; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).Error; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).Error = value ?? null; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfoInternal)ContainerInfo).State = value ?? null; }

        /// <summary>Backing field for <see cref="EndTime" /> property.</summary>
        private global::System.DateTime? _endTime;

        /// <summary>
        /// The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that
        /// run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
        /// running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? EndTime { get => this._endTime; set => this._endTime = value; }

        /// <summary>Backing field for <see cref="ExitCode" /> property.</summary>
        private int? _exitCode;

        /// <summary>
        /// The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in
        /// the completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? ExitCode { get => this._exitCode; set => this._exitCode = value; }

        /// <summary>Backing field for <see cref="FailureInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo _failureInfo;

        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo FailureInfo { get => (this._failureInfo = this._failureInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfo()); set => this._failureInfo = value; }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Category; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Category = value ?? null; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Code = value ?? null; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Detail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfoInternal)FailureInfo).Message = value ?? null; }

        /// <summary>Backing field for <see cref="LastRetryTime" /> property.</summary>
        private global::System.DateTime? _lastRetryTime;

        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? LastRetryTime { get => this._lastRetryTime; set => this._lastRetryTime = value; }

        /// <summary>Internal Acessors for ContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal.ContainerInfo { get => (this._containerInfo = this._containerInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfo()); set { {_containerInfo = value;} } }

        /// <summary>Internal Acessors for FailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal.FailureInfo { get => (this._failureInfo = this._failureInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfo()); set { {_failureInfo = value;} } }

        /// <summary>Backing field for <see cref="Result" /> property.</summary>
        private string _result;

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Result { get => this._result; set => this._result = value; }

        /// <summary>Backing field for <see cref="RetryCount" /> property.</summary>
        private int _retryCount;

        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int RetryCount { get => this._retryCount; set => this._retryCount = value; }

        /// <summary>Backing field for <see cref="StartTime" /> property.</summary>
        private global::System.DateTime _startTime;

        /// <summary>
        /// The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that
        /// is, this is the most recent time at which the StartTask started running).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime StartTime { get => this._startTime; set => this._startTime = value; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The state of the StartTask on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; set => this._state = value; }

        /// <summary>Creates an new <see cref="BatchStartTaskInfo" /> instance.</summary>
        public BatchStartTaskInfo()
        {

        }
    }
    /// Information about a StartTask running on a Compute Node.
    public partial interface IBatchStartTaskInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that
        /// run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
        /// running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently running.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? EndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in
        /// the completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? ExitCode { get; set; }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoMessage { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The most recent time at which a retry of the Task started running. This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.",
        SerializedName = @"lastRetryTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastRetryTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string Result { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.",
        SerializedName = @"retryCount",
        PossibleTypes = new [] { typeof(int) })]
        int RetryCount { get; set; }
        /// <summary>
        /// The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that
        /// is, this is the most recent time at which the StartTask started running).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running).",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime StartTime { get; set; }
        /// <summary>The state of the StartTask on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the StartTask on the Compute Node.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string State { get; set; }

    }
    /// Information about a StartTask running on a Compute Node.
    internal partial interface IBatchStartTaskInfoInternal

    {
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo ContainerInfo { get; set; }
        /// <summary>The ID of the container.</summary>
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that
        /// run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
        /// running.
        /// </summary>
        global::System.DateTime? EndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in
        /// the completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        int? ExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo FailureInfo { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string FailureInfoMessage { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        global::System.DateTime? LastRetryTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string Result { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        int RetryCount { get; set; }
        /// <summary>
        /// The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that
        /// is, this is the most recent time at which the StartTask started running).
        /// </summary>
        global::System.DateTime StartTime { get; set; }
        /// <summary>The state of the StartTask on the Compute Node.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string State { get; set; }

    }
}