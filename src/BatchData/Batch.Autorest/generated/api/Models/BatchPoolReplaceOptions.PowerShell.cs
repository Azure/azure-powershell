// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>Parameters for replacing properties on an Azure Batch Pool.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchPoolReplaceOptionsTypeConverter))]
    public partial class BatchPoolReplaceOptions
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolReplaceOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchPoolReplaceOptions(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskTypeConverter.ConvertFrom);
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("Metadata"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).Metadata = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>) content.GetValueForProperty("Metadata",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).Metadata, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("TargetNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).TargetNodeCommunicationMode = (string) content.GetValueForProperty("TargetNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).TargetNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolReplaceOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchPoolReplaceOptions(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskTypeConverter.ConvertFrom);
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("Metadata"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).Metadata = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>) content.GetValueForProperty("Metadata",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).Metadata, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("TargetNodeCommunicationMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).TargetNodeCommunicationMode = (string) content.GetValueForProperty("TargetNodeCommunicationMode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).TargetNodeCommunicationMode, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptionsInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolReplaceOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptions" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptions DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchPoolReplaceOptions(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolReplaceOptions"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptions" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptions DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchPoolReplaceOptions(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchPoolReplaceOptions" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchPoolReplaceOptions" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolReplaceOptions FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Parameters for replacing properties on an Azure Batch Pool.
    [System.ComponentModel.TypeConverter(typeof(BatchPoolReplaceOptionsTypeConverter))]
    public partial interface IBatchPoolReplaceOptions

    {

    }
}