// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Contains information about the execution of a Job in the Azure Batch service.</summary>
    public partial class BatchJobExecutionInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfo,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal
    {

        /// <summary>Backing field for <see cref="EndTime" /> property.</summary>
        private global::System.DateTime? _endTime;

        /// <summary>
        /// The completion time of the Job. This property is set only if the Job is in the completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? EndTime { get => this._endTime; set => this._endTime = value; }

        /// <summary>Internal Acessors for SchedulingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingError Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobExecutionInfoInternal.SchedulingError { get => (this._schedulingError = this._schedulingError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobSchedulingError()); set { {_schedulingError = value;} } }

        /// <summary>Backing field for <see cref="PoolId" /> property.</summary>
        private string _poolId;

        /// <summary>
        /// The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When
        /// you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data
        /// from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs
        /// are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PoolId { get => this._poolId; set => this._poolId = value; }

        /// <summary>Backing field for <see cref="SchedulingError" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingError _schedulingError;

        /// <summary>
        /// Details of any error encountered by the service in starting the Job. This property is not set if there was no error starting
        /// the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingError SchedulingError { get => (this._schedulingError = this._schedulingError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobSchedulingError()); set => this._schedulingError = value; }

        /// <summary>The category of the Job scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string SchedulingErrorCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Category; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Category = value ?? null; }

        /// <summary>
        /// An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string SchedulingErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Code = value ?? null; }

        /// <summary>A list of additional error details related to the scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> SchedulingErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Detail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Job scheduling error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string SchedulingErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingErrorInternal)SchedulingError).Message = value ?? null; }

        /// <summary>Backing field for <see cref="StartTime" /> property.</summary>
        private global::System.DateTime _startTime;

        /// <summary>The start time of the Job. This is the time at which the Job was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime StartTime { get => this._startTime; set => this._startTime = value; }

        /// <summary>Backing field for <see cref="TerminationReason" /> property.</summary>
        private string _terminationReason;

        /// <summary>
        /// A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch
        /// service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion
        /// was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the
        /// Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute
        /// is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
        /// performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob.
        /// Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string TerminationReason { get => this._terminationReason; set => this._terminationReason = value; }

        /// <summary>Creates an new <see cref="BatchJobExecutionInfo" /> instance.</summary>
        public BatchJobExecutionInfo()
        {

        }
    }
    /// Contains information about the execution of a Job in the Azure Batch service.
    public partial interface IBatchJobExecutionInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The completion time of the Job. This property is set only if the Job is in the completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The completion time of the Job. This property is set only if the Job is in the completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? EndTime { get; set; }
        /// <summary>
        /// The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When
        /// you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data
        /// from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs
        /// are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolId { get; set; }
        /// <summary>The category of the Job scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Job scheduling error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string SchedulingErrorCategory { get; set; }
        /// <summary>
        /// An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string SchedulingErrorCode { get; set; }
        /// <summary>A list of additional error details related to the scheduling error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional error details related to the scheduling error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> SchedulingErrorDetail { get; set; }
        /// <summary>
        /// A message describing the Job scheduling error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Job scheduling error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string SchedulingErrorMessage { get; set; }
        /// <summary>The start time of the Job. This is the time at which the Job was created.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The start time of the Job. This is the time at which the Job was created.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime StartTime { get; set; }
        /// <summary>
        /// A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch
        /// service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion
        /// was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the
        /// Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute
        /// is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
        /// performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob.
        /// Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.",
        SerializedName = @"terminateReason",
        PossibleTypes = new [] { typeof(string) })]
        string TerminationReason { get; set; }

    }
    /// Contains information about the execution of a Job in the Azure Batch service.
    internal partial interface IBatchJobExecutionInfoInternal

    {
        /// <summary>
        /// The completion time of the Job. This property is set only if the Job is in the completed state.
        /// </summary>
        global::System.DateTime? EndTime { get; set; }
        /// <summary>
        /// The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When
        /// you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data
        /// from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs
        /// are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
        /// </summary>
        string PoolId { get; set; }
        /// <summary>
        /// Details of any error encountered by the service in starting the Job. This property is not set if there was no error starting
        /// the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSchedulingError SchedulingError { get; set; }
        /// <summary>The category of the Job scheduling error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string SchedulingErrorCategory { get; set; }
        /// <summary>
        /// An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string SchedulingErrorCode { get; set; }
        /// <summary>A list of additional error details related to the scheduling error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> SchedulingErrorDetail { get; set; }
        /// <summary>
        /// A message describing the Job scheduling error, intended to be suitable for display in a user interface.
        /// </summary>
        string SchedulingErrorMessage { get; set; }
        /// <summary>The start time of the Job. This is the time at which the Job was created.</summary>
        global::System.DateTime StartTime { get; set; }
        /// <summary>
        /// A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch
        /// service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion
        /// was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the
        /// Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute
        /// is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
        /// performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob.
        /// Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
        /// </summary>
        string TerminationReason { get; set; }

    }
}