// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The public IP Address configuration of the networking configuration of a Pool.</summary>
    public partial class BatchPublicIPAddressConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPublicIPAddressConfigurationInternal
    {

        /// <summary>Backing field for <see cref="IPAddressId" /> property.</summary>
        private System.Collections.Generic.List<string> _iPAddressId;

        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> IPAddressId { get => this._iPAddressId; set => this._iPAddressId = value; }

        /// <summary>Backing field for <see cref="IPAddressProvisioningType" /> property.</summary>
        private string _iPAddressProvisioningType;

        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string IPAddressProvisioningType { get => this._iPAddressProvisioningType; set => this._iPAddressProvisioningType = value; }

        /// <summary>Creates an new <see cref="BatchPublicIPAddressConfiguration" /> instance.</summary>
        public BatchPublicIPAddressConfiguration()
        {

        }
    }
    /// The public IP Address configuration of the networking configuration of a Pool.
    public partial interface IBatchPublicIPAddressConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IPAddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string IPAddressProvisioningType { get; set; }

    }
    /// The public IP Address configuration of the networking configuration of a Pool.
    internal partial interface IBatchPublicIPAddressConfigurationInternal

    {
        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        System.Collections.Generic.List<string> IPAddressId { get; set; }
        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        string IPAddressProvisioningType { get; set; }

    }
}