// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The number of Compute Nodes in each Compute Node state.</summary>
    public partial class BatchNodeCounts :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCounts,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeCountsInternal
    {

        /// <summary>Backing field for <see cref="Creating" /> property.</summary>
        private int _creating;

        /// <summary>The number of Compute Nodes in the creating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Creating { get => this._creating; set => this._creating = value; }

        /// <summary>Backing field for <see cref="Deallocated" /> property.</summary>
        private int _deallocated;

        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Deallocated { get => this._deallocated; set => this._deallocated = value; }

        /// <summary>Backing field for <see cref="Deallocating" /> property.</summary>
        private int _deallocating;

        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Deallocating { get => this._deallocating; set => this._deallocating = value; }

        /// <summary>Backing field for <see cref="Idle" /> property.</summary>
        private int _idle;

        /// <summary>The number of Compute Nodes in the idle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Idle { get => this._idle; set => this._idle = value; }

        /// <summary>Backing field for <see cref="LeavingPool" /> property.</summary>
        private int _leavingPool;

        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int LeavingPool { get => this._leavingPool; set => this._leavingPool = value; }

        /// <summary>Backing field for <see cref="Offline" /> property.</summary>
        private int _offline;

        /// <summary>The number of Compute Nodes in the offline state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Offline { get => this._offline; set => this._offline = value; }

        /// <summary>Backing field for <see cref="Preempted" /> property.</summary>
        private int _preempted;

        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Preempted { get => this._preempted; set => this._preempted = value; }

        /// <summary>Backing field for <see cref="Rebooting" /> property.</summary>
        private int _rebooting;

        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Rebooting { get => this._rebooting; set => this._rebooting = value; }

        /// <summary>Backing field for <see cref="Reimaging" /> property.</summary>
        private int _reimaging;

        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Reimaging { get => this._reimaging; set => this._reimaging = value; }

        /// <summary>Backing field for <see cref="Running" /> property.</summary>
        private int _running;

        /// <summary>The number of Compute Nodes in the running state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Running { get => this._running; set => this._running = value; }

        /// <summary>Backing field for <see cref="StartTaskFailed" /> property.</summary>
        private int _startTaskFailed;

        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int StartTaskFailed { get => this._startTaskFailed; set => this._startTaskFailed = value; }

        /// <summary>Backing field for <see cref="Starting" /> property.</summary>
        private int _starting;

        /// <summary>The number of Compute Nodes in the starting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Starting { get => this._starting; set => this._starting = value; }

        /// <summary>Backing field for <see cref="Total" /> property.</summary>
        private int _total;

        /// <summary>The total number of Compute Nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Total { get => this._total; set => this._total = value; }

        /// <summary>Backing field for <see cref="Unknown" /> property.</summary>
        private int _unknown;

        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Unknown { get => this._unknown; set => this._unknown = value; }

        /// <summary>Backing field for <see cref="Unusable" /> property.</summary>
        private int _unusable;

        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int Unusable { get => this._unusable; set => this._unusable = value; }

        /// <summary>Backing field for <see cref="UpgradingOS" /> property.</summary>
        private int _upgradingOS;

        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int UpgradingOS { get => this._upgradingOS; set => this._upgradingOS = value; }

        /// <summary>Backing field for <see cref="WaitingForStartTask" /> property.</summary>
        private int _waitingForStartTask;

        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int WaitingForStartTask { get => this._waitingForStartTask; set => this._waitingForStartTask = value; }

        /// <summary>Creates an new <see cref="BatchNodeCounts" /> instance.</summary>
        public BatchNodeCounts()
        {

        }
    }
    /// The number of Compute Nodes in each Compute Node state.
    public partial interface IBatchNodeCounts :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The number of Compute Nodes in the creating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the creating state.",
        SerializedName = @"creating",
        PossibleTypes = new [] { typeof(int) })]
        int Creating { get; set; }
        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the deallocated state.",
        SerializedName = @"deallocated",
        PossibleTypes = new [] { typeof(int) })]
        int Deallocated { get; set; }
        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the deallocating state.",
        SerializedName = @"deallocating",
        PossibleTypes = new [] { typeof(int) })]
        int Deallocating { get; set; }
        /// <summary>The number of Compute Nodes in the idle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the idle state.",
        SerializedName = @"idle",
        PossibleTypes = new [] { typeof(int) })]
        int Idle { get; set; }
        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the leavingPool state.",
        SerializedName = @"leavingPool",
        PossibleTypes = new [] { typeof(int) })]
        int LeavingPool { get; set; }
        /// <summary>The number of Compute Nodes in the offline state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the offline state.",
        SerializedName = @"offline",
        PossibleTypes = new [] { typeof(int) })]
        int Offline { get; set; }
        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the preempted state.",
        SerializedName = @"preempted",
        PossibleTypes = new [] { typeof(int) })]
        int Preempted { get; set; }
        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The count of Compute Nodes in the rebooting state.",
        SerializedName = @"rebooting",
        PossibleTypes = new [] { typeof(int) })]
        int Rebooting { get; set; }
        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the reimaging state.",
        SerializedName = @"reimaging",
        PossibleTypes = new [] { typeof(int) })]
        int Reimaging { get; set; }
        /// <summary>The number of Compute Nodes in the running state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the running state.",
        SerializedName = @"running",
        PossibleTypes = new [] { typeof(int) })]
        int Running { get; set; }
        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the startTaskFailed state.",
        SerializedName = @"startTaskFailed",
        PossibleTypes = new [] { typeof(int) })]
        int StartTaskFailed { get; set; }
        /// <summary>The number of Compute Nodes in the starting state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the starting state.",
        SerializedName = @"starting",
        PossibleTypes = new [] { typeof(int) })]
        int Starting { get; set; }
        /// <summary>The total number of Compute Nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Compute Nodes.",
        SerializedName = @"total",
        PossibleTypes = new [] { typeof(int) })]
        int Total { get; set; }
        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the unknown state.",
        SerializedName = @"unknown",
        PossibleTypes = new [] { typeof(int) })]
        int Unknown { get; set; }
        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the unusable state.",
        SerializedName = @"unusable",
        PossibleTypes = new [] { typeof(int) })]
        int Unusable { get; set; }
        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the upgradingOS state.",
        SerializedName = @"upgradingOS",
        PossibleTypes = new [] { typeof(int) })]
        int UpgradingOS { get; set; }
        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes in the waitingForStartTask state.",
        SerializedName = @"waitingForStartTask",
        PossibleTypes = new [] { typeof(int) })]
        int WaitingForStartTask { get; set; }

    }
    /// The number of Compute Nodes in each Compute Node state.
    internal partial interface IBatchNodeCountsInternal

    {
        /// <summary>The number of Compute Nodes in the creating state.</summary>
        int Creating { get; set; }
        /// <summary>The number of Compute Nodes in the deallocated state.</summary>
        int Deallocated { get; set; }
        /// <summary>The number of Compute Nodes in the deallocating state.</summary>
        int Deallocating { get; set; }
        /// <summary>The number of Compute Nodes in the idle state.</summary>
        int Idle { get; set; }
        /// <summary>The number of Compute Nodes in the leavingPool state.</summary>
        int LeavingPool { get; set; }
        /// <summary>The number of Compute Nodes in the offline state.</summary>
        int Offline { get; set; }
        /// <summary>The number of Compute Nodes in the preempted state.</summary>
        int Preempted { get; set; }
        /// <summary>The count of Compute Nodes in the rebooting state.</summary>
        int Rebooting { get; set; }
        /// <summary>The number of Compute Nodes in the reimaging state.</summary>
        int Reimaging { get; set; }
        /// <summary>The number of Compute Nodes in the running state.</summary>
        int Running { get; set; }
        /// <summary>The number of Compute Nodes in the startTaskFailed state.</summary>
        int StartTaskFailed { get; set; }
        /// <summary>The number of Compute Nodes in the starting state.</summary>
        int Starting { get; set; }
        /// <summary>The total number of Compute Nodes.</summary>
        int Total { get; set; }
        /// <summary>The number of Compute Nodes in the unknown state.</summary>
        int Unknown { get; set; }
        /// <summary>The number of Compute Nodes in the unusable state.</summary>
        int Unusable { get; set; }
        /// <summary>The number of Compute Nodes in the upgradingOS state.</summary>
        int UpgradingOS { get; set; }
        /// <summary>The number of Compute Nodes in the waitingForStartTask state.</summary>
        int WaitingForStartTask { get; set; }

    }
}