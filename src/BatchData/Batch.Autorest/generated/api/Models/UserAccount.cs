// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// Properties used to create a user used to execute Tasks on an Azure Batch
    /// Compute Node.
    /// </summary>
    public partial class UserAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccountInternal
    {

        /// <summary>Backing field for <see cref="ElevationLevel" /> property.</summary>
        private string _elevationLevel;

        /// <summary>The elevation level of the user Account. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ElevationLevel { get => this._elevationLevel; set => this._elevationLevel = value; }

        /// <summary>Backing field for <see cref="LinuxUserConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfiguration _linuxUserConfiguration;

        /// <summary>
        /// The Linux-specific user configuration for the user Account. This property is ignored if specified on a Windows Pool. If
        /// not specified, the user is created with the default options.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfiguration LinuxUserConfiguration { get => (this._linuxUserConfiguration = this._linuxUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.LinuxUserConfiguration()); set => this._linuxUserConfiguration = value; }

        /// <summary>
        /// The group ID for the user Account. The uid and gid properties must be specified together or not at all. If not specified
        /// the underlying operating system picks the gid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LinuxUserConfigurationGid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Gid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Gid = value ?? default(int); }

        /// <summary>
        /// The SSH private key for the user Account. The private key must not be password protected. The private key is used to automatically
        /// configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication
        /// property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the
        /// user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of
        /// the user's .ssh directory is done).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString LinuxUserConfigurationSshPrivateKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfigurationInternal)LinuxUserConfiguration).SshPrivateKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfigurationInternal)LinuxUserConfiguration).SshPrivateKey = value ?? null; }

        /// <summary>
        /// The user ID of the user Account. The uid and gid properties must be specified together or not at all. If not specified
        /// the underlying operating system picks the uid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LinuxUserConfigurationUid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Uid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfigurationInternal)LinuxUserConfiguration).Uid = value ?? default(int); }

        /// <summary>Internal Acessors for LinuxUserConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccountInternal.LinuxUserConfiguration { get => (this._linuxUserConfiguration = this._linuxUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.LinuxUserConfiguration()); set { {_linuxUserConfiguration = value;} } }

        /// <summary>Internal Acessors for WindowsUserConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IWindowsUserConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccountInternal.WindowsUserConfiguration { get => (this._windowsUserConfiguration = this._windowsUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.WindowsUserConfiguration()); set { {_windowsUserConfiguration = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// The name of the user Account. Names can contain any Unicode characters up to a maximum length of 20.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private System.Security.SecureString _password;

        /// <summary>The password for the user Account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Security.SecureString Password { get => this._password; set => this._password = value; }

        /// <summary>The login mode for the user. The default is 'batch'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string WindowUserConfigurationLoginMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IWindowsUserConfigurationInternal)WindowsUserConfiguration).LoginMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IWindowsUserConfigurationInternal)WindowsUserConfiguration).LoginMode = value ?? null; }

        /// <summary>Backing field for <see cref="WindowsUserConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IWindowsUserConfiguration _windowsUserConfiguration;

        /// <summary>
        /// The Windows-specific user configuration for the user Account. This property can only be specified if the user is on a
        /// Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IWindowsUserConfiguration WindowsUserConfiguration { get => (this._windowsUserConfiguration = this._windowsUserConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.WindowsUserConfiguration()); set => this._windowsUserConfiguration = value; }

        /// <summary>Creates an new <see cref="UserAccount" /> instance.</summary>
        public UserAccount()
        {

        }
    }
    /// Properties used to create a user used to execute Tasks on an Azure Batch
    /// Compute Node.
    public partial interface IUserAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The elevation level of the user Account. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the user Account. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string ElevationLevel { get; set; }
        /// <summary>
        /// The group ID for the user Account. The uid and gid properties must be specified together or not at all. If not specified
        /// the underlying operating system picks the gid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The group ID for the user Account. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.",
        SerializedName = @"gid",
        PossibleTypes = new [] { typeof(int) })]
        int? LinuxUserConfigurationGid { get; set; }
        /// <summary>
        /// The SSH private key for the user Account. The private key must not be password protected. The private key is used to automatically
        /// configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication
        /// property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the
        /// user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of
        /// the user's .ssh directory is done).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The SSH private key for the user Account. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh directory is done).",
        SerializedName = @"sshPrivateKey",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString LinuxUserConfigurationSshPrivateKey { get; set; }
        /// <summary>
        /// The user ID of the user Account. The uid and gid properties must be specified together or not at all. If not specified
        /// the underlying operating system picks the uid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user ID of the user Account. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.",
        SerializedName = @"uid",
        PossibleTypes = new [] { typeof(int) })]
        int? LinuxUserConfigurationUid { get; set; }
        /// <summary>
        /// The name of the user Account. Names can contain any Unicode characters up to a maximum length of 20.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user Account. Names can contain any Unicode characters up to a maximum length of 20.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>The password for the user Account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password for the user Account.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString Password { get; set; }
        /// <summary>The login mode for the user. The default is 'batch'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The login mode for the user. The default is 'batch'.",
        SerializedName = @"loginMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batch", "interactive")]
        string WindowUserConfigurationLoginMode { get; set; }

    }
    /// Properties used to create a user used to execute Tasks on an Azure Batch
    /// Compute Node.
    internal partial interface IUserAccountInternal

    {
        /// <summary>The elevation level of the user Account. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string ElevationLevel { get; set; }
        /// <summary>
        /// The Linux-specific user configuration for the user Account. This property is ignored if specified on a Windows Pool. If
        /// not specified, the user is created with the default options.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ILinuxUserConfiguration LinuxUserConfiguration { get; set; }
        /// <summary>
        /// The group ID for the user Account. The uid and gid properties must be specified together or not at all. If not specified
        /// the underlying operating system picks the gid.
        /// </summary>
        int? LinuxUserConfigurationGid { get; set; }
        /// <summary>
        /// The SSH private key for the user Account. The private key must not be password protected. The private key is used to automatically
        /// configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication
        /// property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the
        /// user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of
        /// the user's .ssh directory is done).
        /// </summary>
        System.Security.SecureString LinuxUserConfigurationSshPrivateKey { get; set; }
        /// <summary>
        /// The user ID of the user Account. The uid and gid properties must be specified together or not at all. If not specified
        /// the underlying operating system picks the uid.
        /// </summary>
        int? LinuxUserConfigurationUid { get; set; }
        /// <summary>
        /// The name of the user Account. Names can contain any Unicode characters up to a maximum length of 20.
        /// </summary>
        string Name { get; set; }
        /// <summary>The password for the user Account.</summary>
        System.Security.SecureString Password { get; set; }
        /// <summary>The login mode for the user. The default is 'batch'.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batch", "interactive")]
        string WindowUserConfigurationLoginMode { get; set; }
        /// <summary>
        /// The Windows-specific user configuration for the user Account. This property can only be specified if the user is on a
        /// Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IWindowsUserConfiguration WindowsUserConfiguration { get; set; }

    }
}