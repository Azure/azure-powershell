// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The Task and TaskSlot counts for a Job.</summary>
    public partial class BatchTaskCountsResult :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResult,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private string _lastModified;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified { get => this._lastModified; set => this._lastModified = value; }

        /// <summary>Internal Acessors for TaskCount</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCounts Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal.TaskCount { get => (this._taskCount = this._taskCount ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCounts()); set { {_taskCount = value;} } }

        /// <summary>Internal Acessors for TaskSlotCount</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCounts Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal.TaskSlotCount { get => (this._taskSlotCount = this._taskSlotCount ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSlotCounts()); set { {_taskSlotCount = value;} } }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Backing field for <see cref="TaskCount" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCounts _taskCount;

        /// <summary>The number of Tasks per state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCounts TaskCount { get => (this._taskCount = this._taskCount ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCounts()); set => this._taskCount = value; }

        /// <summary>The number of Tasks in the active state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskCountActive { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Active; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Active = value ; }

        /// <summary>The number of Tasks in the completed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskCountCompleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Completed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Completed = value ; }

        /// <summary>
        /// The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskCountFailed { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Failed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Failed = value ; }

        /// <summary>The number of Tasks in the running or preparing state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskCountRunning { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Running; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Running = value ; }

        /// <summary>
        /// The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskCountSucceeded { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Succeeded; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsInternal)TaskCount).Succeeded = value ; }

        /// <summary>Backing field for <see cref="TaskSlotCount" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCounts _taskSlotCount;

        /// <summary>The number of TaskSlots required by Tasks per state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCounts TaskSlotCount { get => (this._taskSlotCount = this._taskSlotCount ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSlotCounts()); set => this._taskSlotCount = value; }

        /// <summary>The number of TaskSlots for active Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskSlotCountActive { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Active; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Active = value ; }

        /// <summary>The number of TaskSlots for completed Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskSlotCountCompleted { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Completed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Completed = value ; }

        /// <summary>The number of TaskSlots for failed Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskSlotCountFailed { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Failed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Failed = value ; }

        /// <summary>The number of TaskSlots for running Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskSlotCountRunning { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Running; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Running = value ; }

        /// <summary>The number of TaskSlots for succeeded Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int TaskSlotCountSucceeded { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Succeeded; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCountsInternal)TaskSlotCount).Succeeded = value ; }

        /// <summary>Creates an new <see cref="BatchTaskCountsResult" /> instance.</summary>
        public BatchTaskCountsResult()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).LastModified = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader1) is string __headerLastModifiedHeader1 ? __headerLastModifiedHeader1 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader2) is string __headerClientRequestIdHeader2 ? __headerClientRequestIdHeader2 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCountsResultInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader3) is string __headerRequestIdHeader3 ? __headerRequestIdHeader3 : (string)null;
            }
        }
    }
    /// The Task and TaskSlot counts for a Job.
    public partial interface IBatchTaskCountsResult :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>The number of Tasks in the active state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Tasks in the active state.",
        SerializedName = @"active",
        PossibleTypes = new [] { typeof(int) })]
        int TaskCountActive { get; set; }
        /// <summary>The number of Tasks in the completed state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Tasks in the completed state.",
        SerializedName = @"completed",
        PossibleTypes = new [] { typeof(int) })]
        int TaskCountCompleted { get; set; }
        /// <summary>
        /// The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.",
        SerializedName = @"failed",
        PossibleTypes = new [] { typeof(int) })]
        int TaskCountFailed { get; set; }
        /// <summary>The number of Tasks in the running or preparing state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Tasks in the running or preparing state.",
        SerializedName = @"running",
        PossibleTypes = new [] { typeof(int) })]
        int TaskCountRunning { get; set; }
        /// <summary>
        /// The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.",
        SerializedName = @"succeeded",
        PossibleTypes = new [] { typeof(int) })]
        int TaskCountSucceeded { get; set; }
        /// <summary>The number of TaskSlots for active Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of TaskSlots for active Tasks.",
        SerializedName = @"active",
        PossibleTypes = new [] { typeof(int) })]
        int TaskSlotCountActive { get; set; }
        /// <summary>The number of TaskSlots for completed Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of TaskSlots for completed Tasks.",
        SerializedName = @"completed",
        PossibleTypes = new [] { typeof(int) })]
        int TaskSlotCountCompleted { get; set; }
        /// <summary>The number of TaskSlots for failed Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of TaskSlots for failed Tasks.",
        SerializedName = @"failed",
        PossibleTypes = new [] { typeof(int) })]
        int TaskSlotCountFailed { get; set; }
        /// <summary>The number of TaskSlots for running Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of TaskSlots for running Tasks.",
        SerializedName = @"running",
        PossibleTypes = new [] { typeof(int) })]
        int TaskSlotCountRunning { get; set; }
        /// <summary>The number of TaskSlots for succeeded Tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of TaskSlots for succeeded Tasks.",
        SerializedName = @"succeeded",
        PossibleTypes = new [] { typeof(int) })]
        int TaskSlotCountSucceeded { get; set; }

    }
    /// The Task and TaskSlot counts for a Job.
    internal partial interface IBatchTaskCountsResultInternal

    {
        string ClientRequestId { get; set; }

        string ETag { get; set; }

        string LastModified { get; set; }

        string RequestId { get; set; }
        /// <summary>The number of Tasks per state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCounts TaskCount { get; set; }
        /// <summary>The number of Tasks in the active state.</summary>
        int TaskCountActive { get; set; }
        /// <summary>The number of Tasks in the completed state.</summary>
        int TaskCountCompleted { get; set; }
        /// <summary>
        /// The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.
        /// </summary>
        int TaskCountFailed { get; set; }
        /// <summary>The number of Tasks in the running or preparing state.</summary>
        int TaskCountRunning { get; set; }
        /// <summary>
        /// The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.
        /// </summary>
        int TaskCountSucceeded { get; set; }
        /// <summary>The number of TaskSlots required by Tasks per state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskSlotCounts TaskSlotCount { get; set; }
        /// <summary>The number of TaskSlots for active Tasks.</summary>
        int TaskSlotCountActive { get; set; }
        /// <summary>The number of TaskSlots for completed Tasks.</summary>
        int TaskSlotCountCompleted { get; set; }
        /// <summary>The number of TaskSlots for failed Tasks.</summary>
        int TaskSlotCountFailed { get; set; }
        /// <summary>The number of TaskSlots for running Tasks.</summary>
        int TaskSlotCountRunning { get; set; }
        /// <summary>The number of TaskSlots for succeeded Tasks.</summary>
        int TaskSlotCountSucceeded { get; set; }

    }
}