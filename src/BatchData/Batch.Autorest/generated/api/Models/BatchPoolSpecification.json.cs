// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Specification for creating a new Pool.</summary>
    public partial class BatchPoolSpecification
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject into a new instance of <see cref="BatchPoolSpecification" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal BatchPoolSpecification(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_taskSchedulingPolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("taskSchedulingPolicy"), out var __jsonTaskSchedulingPolicy) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskSchedulingPolicy.FromJson(__jsonTaskSchedulingPolicy) : _taskSchedulingPolicy;}
            {_networkConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("networkConfiguration"), out var __jsonNetworkConfiguration) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NetworkConfiguration.FromJson(__jsonNetworkConfiguration) : _networkConfiguration;}
            {_startTask = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("startTask"), out var __jsonStartTask) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTask.FromJson(__jsonStartTask) : _startTask;}
            {_upgradePolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("upgradePolicy"), out var __jsonUpgradePolicy) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UpgradePolicy.FromJson(__jsonUpgradePolicy) : _upgradePolicy;}
            {_displayName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("displayName"), out var __jsonDisplayName) ? (string)__jsonDisplayName : (string)_displayName;}
            {_vMSize = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("vmSize"), out var __jsonVMSize) ? (string)__jsonVMSize : (string)_vMSize;}
            {_taskSlotsPerNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("taskSlotsPerNode"), out var __jsonTaskSlotsPerNode) ? (int?)__jsonTaskSlotsPerNode : _taskSlotsPerNode;}
            {_resizeTimeout = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("resizeTimeout"), out var __jsonResizeTimeout) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonResizeTimeout ) : _resizeTimeout;}
            {_resourceTag = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("resourceTags"), out var __jsonResourceTags) ? (string)__jsonResourceTags : (string)_resourceTag;}
            {_targetDedicatedNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("targetDedicatedNodes"), out var __jsonTargetDedicatedNodes) ? (int?)__jsonTargetDedicatedNodes : _targetDedicatedNode;}
            {_targetLowPriorityNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber>("targetLowPriorityNodes"), out var __jsonTargetLowPriorityNodes) ? (int?)__jsonTargetLowPriorityNodes : _targetLowPriorityNode;}
            {_enableAutoScale = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonBoolean>("enableAutoScale"), out var __jsonEnableAutoScale) ? (bool?)__jsonEnableAutoScale : _enableAutoScale;}
            {_autoScaleFormula = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("autoScaleFormula"), out var __jsonAutoScaleFormula) ? (string)__jsonAutoScaleFormula : (string)_autoScaleFormula;}
            {_autoScaleEvaluationInterval = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("autoScaleEvaluationInterval"), out var __jsonAutoScaleEvaluationInterval) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonAutoScaleEvaluationInterval ) : _autoScaleEvaluationInterval;}
            {_enableInterNodeCommunication = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonBoolean>("enableInterNodeCommunication"), out var __jsonEnableInterNodeCommunication) ? (bool?)__jsonEnableInterNodeCommunication : _enableInterNodeCommunication;}
            {_certificateReference = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("certificateReferences"), out var __jsonCertificateReferences) ? If( __jsonCertificateReferences as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReference.FromJson(__u) )) ))() : null : _certificateReference;}
            {_applicationPackageReference = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("applicationPackageReferences"), out var __jsonApplicationPackageReferences) ? If( __jsonApplicationPackageReferences as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReference.FromJson(__p) )) ))() : null : _applicationPackageReference;}
            {_userAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("userAccounts"), out var __jsonUserAccounts) ? If( __jsonUserAccounts as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__l, (__k)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserAccount.FromJson(__k) )) ))() : null : _userAccount;}
            {_metadata = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("metadata"), out var __jsonMetadata) ? If( __jsonMetadata as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__g, (__f)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchMetadataItem.FromJson(__f) )) ))() : null : _metadata;}
            {_mountConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray>("mountConfiguration"), out var __jsonMountConfiguration) ? If( __jsonMountConfiguration as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__b, (__a)=>(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration) (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MountConfiguration.FromJson(__a) )) ))() : null : _mountConfiguration;}
            {_targetNodeCommunicationMode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString>("targetNodeCommunicationMode"), out var __jsonTargetNodeCommunicationMode) ? (string)__jsonTargetNodeCommunicationMode : (string)_targetNodeCommunicationMode;}
            {_virtualMachineConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject>("virtualMachineConfiguration"), out var __jsonVirtualMachineConfiguration) ? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineConfiguration.FromJson(__jsonVirtualMachineConfiguration) : _virtualMachineConfiguration;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject json ? new BatchPoolSpecification(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="BatchPoolSpecification" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="BatchPoolSpecification" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._taskSchedulingPolicy ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._taskSchedulingPolicy.ToJson(null,serializationMode) : null, "taskSchedulingPolicy" ,container.Add );
            AddIf( null != this._networkConfiguration ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._networkConfiguration.ToJson(null,serializationMode) : null, "networkConfiguration" ,container.Add );
            AddIf( null != this._startTask ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._startTask.ToJson(null,serializationMode) : null, "startTask" ,container.Add );
            AddIf( null != this._upgradePolicy ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._upgradePolicy.ToJson(null,serializationMode) : null, "upgradePolicy" ,container.Add );
            AddIf( null != (((object)this._displayName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._displayName.ToString()) : null, "displayName" ,container.Add );
            AddIf( null != (((object)this._vMSize)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._vMSize.ToString()) : null, "vmSize" ,container.Add );
            AddIf( null != this._taskSlotsPerNode ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber((int)this._taskSlotsPerNode) : null, "taskSlotsPerNode" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)(null != this._resizeTimeout ? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._resizeTimeout)): null), "resizeTimeout" ,container.Add );
            AddIf( null != (((object)this._resourceTag)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._resourceTag.ToString()) : null, "resourceTags" ,container.Add );
            AddIf( null != this._targetDedicatedNode ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber((int)this._targetDedicatedNode) : null, "targetDedicatedNodes" ,container.Add );
            AddIf( null != this._targetLowPriorityNode ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNumber((int)this._targetLowPriorityNode) : null, "targetLowPriorityNodes" ,container.Add );
            AddIf( null != this._enableAutoScale ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonBoolean((bool)this._enableAutoScale) : null, "enableAutoScale" ,container.Add );
            AddIf( null != (((object)this._autoScaleFormula)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._autoScaleFormula.ToString()) : null, "autoScaleFormula" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)(null != this._autoScaleEvaluationInterval ? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._autoScaleEvaluationInterval)): null), "autoScaleEvaluationInterval" ,container.Add );
            AddIf( null != this._enableInterNodeCommunication ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonBoolean((bool)this._enableInterNodeCommunication) : null, "enableInterNodeCommunication" ,container.Add );
            if (null != this._certificateReference)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __x in this._certificateReference )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("certificateReferences",__w);
            }
            if (null != this._applicationPackageReference)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __s in this._applicationPackageReference )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("applicationPackageReferences",__r);
            }
            if (null != this._userAccount)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __n in this._userAccount )
                {
                    AddIf(__n?.ToJson(null, serializationMode) ,__m.Add);
                }
                container.Add("userAccounts",__m);
            }
            if (null != this._metadata)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __i in this._metadata )
                {
                    AddIf(__i?.ToJson(null, serializationMode) ,__h.Add);
                }
                container.Add("metadata",__h);
            }
            if (null != this._mountConfiguration)
            {
                var __c = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.XNodeArray();
                foreach( var __d in this._mountConfiguration )
                {
                    AddIf(__d?.ToJson(null, serializationMode) ,__c.Add);
                }
                container.Add("mountConfiguration",__c);
            }
            AddIf( null != (((object)this._targetNodeCommunicationMode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonString(this._targetNodeCommunicationMode.ToString()) : null, "targetNodeCommunicationMode" ,container.Add );
            AddIf( null != this._virtualMachineConfiguration ? (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode) this._virtualMachineConfiguration.ToJson(null,serializationMode) : null, "virtualMachineConfiguration" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}