// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A inbound NAT Pool that can be used to address specific ports on Compute Nodes
    /// in a Batch Pool externally.
    /// </summary>
    public partial class BatchInboundNatPool :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPoolInternal
    {

        /// <summary>Backing field for <see cref="BackendPort" /> property.</summary>
        private int _backendPort;

        /// <summary>
        /// The port number on the Compute Node. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535
        /// except for 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status
        /// code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int BackendPort { get => this._backendPort; set => this._backendPort = value; }

        /// <summary>Backing field for <see cref="FrontendPortRangeEnd" /> property.</summary>
        private int _frontendPortRangeEnd;

        /// <summary>
        /// The last port number in the range of external ports that will be used to provide inbound access to the backendPort on
        /// individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved
        /// by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40
        /// ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int FrontendPortRangeEnd { get => this._frontendPortRangeEnd; set => this._frontendPortRangeEnd = value; }

        /// <summary>Backing field for <see cref="FrontendPortRangeStart" /> property.</summary>
        private int _frontendPortRangeStart;

        /// <summary>
        /// The first port number in the range of external ports that will be used to provide inbound access to the backendPort on
        /// individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved.
        /// All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved
        /// or overlapping values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int FrontendPortRangeStart { get => this._frontendPortRangeStart; set => this._frontendPortRangeStart = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// The name of the endpoint. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods,
        /// and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed
        /// 77 characters. If any invalid values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="NetworkSecurityGroupRule" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkSecurityGroupRule> _networkSecurityGroupRule;

        /// <summary>
        /// A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified
        /// across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will
        /// be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules
        /// is exceeded the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkSecurityGroupRule> NetworkSecurityGroupRule { get => this._networkSecurityGroupRule; set => this._networkSecurityGroupRule = value; }

        /// <summary>Backing field for <see cref="Protocol" /> property.</summary>
        private string _protocol;

        /// <summary>The protocol of the endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Protocol { get => this._protocol; set => this._protocol = value; }

        /// <summary>Creates an new <see cref="BatchInboundNatPool" /> instance.</summary>
        public BatchInboundNatPool()
        {

        }
    }
    /// A inbound NAT Pool that can be used to address specific ports on Compute Nodes
    /// in a Batch Pool externally.
    public partial interface IBatchInboundNatPool :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The port number on the Compute Node. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535
        /// except for 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status
        /// code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The port number on the Compute Node. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.",
        SerializedName = @"backendPort",
        PossibleTypes = new [] { typeof(int) })]
        int BackendPort { get; set; }
        /// <summary>
        /// The last port number in the range of external ports that will be used to provide inbound access to the backendPort on
        /// individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved
        /// by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40
        /// ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The last port number in the range of external ports that will be used to provide inbound access to the backendPort on individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.",
        SerializedName = @"frontendPortRangeEnd",
        PossibleTypes = new [] { typeof(int) })]
        int FrontendPortRangeEnd { get; set; }
        /// <summary>
        /// The first port number in the range of external ports that will be used to provide inbound access to the backendPort on
        /// individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved.
        /// All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved
        /// or overlapping values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The first port number in the range of external ports that will be used to provide inbound access to the backendPort on individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.",
        SerializedName = @"frontendPortRangeStart",
        PossibleTypes = new [] { typeof(int) })]
        int FrontendPortRangeStart { get; set; }
        /// <summary>
        /// The name of the endpoint. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods,
        /// and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed
        /// 77 characters. If any invalid values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the endpoint. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified
        /// across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will
        /// be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules
        /// is exceeded the request fails with HTTP status code 400.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.",
        SerializedName = @"networkSecurityGroupRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkSecurityGroupRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkSecurityGroupRule> NetworkSecurityGroupRule { get; set; }
        /// <summary>The protocol of the endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The protocol of the endpoint.",
        SerializedName = @"protocol",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("tcp", "udp")]
        string Protocol { get; set; }

    }
    /// A inbound NAT Pool that can be used to address specific ports on Compute Nodes
    /// in a Batch Pool externally.
    internal partial interface IBatchInboundNatPoolInternal

    {
        /// <summary>
        /// The port number on the Compute Node. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535
        /// except for 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status
        /// code 400.
        /// </summary>
        int BackendPort { get; set; }
        /// <summary>
        /// The last port number in the range of external ports that will be used to provide inbound access to the backendPort on
        /// individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved
        /// by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40
        /// ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        /// </summary>
        int FrontendPortRangeEnd { get; set; }
        /// <summary>
        /// The first port number in the range of external ports that will be used to provide inbound access to the backendPort on
        /// individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved.
        /// All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved
        /// or overlapping values are provided the request fails with HTTP status code 400.
        /// </summary>
        int FrontendPortRangeStart { get; set; }
        /// <summary>
        /// The name of the endpoint. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods,
        /// and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed
        /// 77 characters. If any invalid values are provided the request fails with HTTP status code 400.
        /// </summary>
        string Name { get; set; }
        /// <summary>
        /// A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified
        /// across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will
        /// be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules
        /// is exceeded the request fails with HTTP status code 400.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INetworkSecurityGroupRule> NetworkSecurityGroupRule { get; set; }
        /// <summary>The protocol of the endpoint.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("tcp", "udp")]
        string Protocol { get; set; }

    }
}