// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Parameters for updating an Azure Batch Job Schedule.</summary>
    public partial class BatchJobScheduleUpdateOptions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleUpdateOptions,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleUpdateOptionsInternal
    {

        /// <summary>Backing field for <see cref="JobSpecification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationUpdate _jobSpecification;

        /// <summary>
        /// The details of the Jobs to be created on this schedule. Updates affect only Jobs that are started after the update has
        /// taken place. Any currently active Job continues with the older specification.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationUpdate JobSpecification { get => (this._jobSpecification = this._jobSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobSpecificationUpdate()); set => this._jobSpecification = value; }

        /// <summary>Backing field for <see cref="Metadata" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> _metadata;

        /// <summary>
        /// A list of name-value pairs associated with the Job Schedule as metadata. If you do not specify this element, existing
        /// metadata is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get => this._metadata; set => this._metadata = value; }

        /// <summary>Internal Acessors for Schedule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleUpdateOptionsInternal.Schedule { get => (this._schedule = this._schedule ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobScheduleConfiguration()); set { {_schedule = value;} } }

        /// <summary>Backing field for <see cref="Schedule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfiguration _schedule;

        /// <summary>
        /// The schedule according to which Jobs will be created. All times are fixed respective to UTC and are not impacted by daylight
        /// saving time. If you do not specify this element, the existing schedule is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfiguration Schedule { get => (this._schedule = this._schedule ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobScheduleConfiguration()); set => this._schedule = value; }

        /// <summary>
        /// A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon
        /// as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time,
        /// and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ScheduleDoNotRunAfter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).DoNotRunAfter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).DoNotRunAfter = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time,
        /// the schedule becomes ready to create Jobs immediately.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ScheduleDoNotRunUntil { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).DoNotRunUntil; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).DoNotRunUntil = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most
        /// one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given
        /// time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service
        /// will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow
        /// period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should
        /// normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external
        /// process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence.
        /// The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time,
        /// and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value,
        /// the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is
        /// 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ScheduleRecurrenceInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).RecurrenceInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).RecurrenceInterval = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job
        /// must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will
        /// be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than
        /// the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval
        /// is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you
        /// specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly,
        /// the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ScheduleStartWindow { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).StartWindow; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfigurationInternal)Schedule).StartWindow = value ?? default(global::System.TimeSpan); }

        /// <summary>Creates an new <see cref="BatchJobScheduleUpdateOptions" /> instance.</summary>
        public BatchJobScheduleUpdateOptions()
        {

        }
    }
    /// Parameters for updating an Azure Batch Job Schedule.
    public partial interface IBatchJobScheduleUpdateOptions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The details of the Jobs to be created on this schedule. Updates affect only Jobs that are started after the update has
        /// taken place. Any currently active Job continues with the older specification.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The details of the Jobs to be created on this schedule. Updates affect only Jobs that are started after the update has taken place. Any currently active Job continues with the older specification.",
        SerializedName = @"jobSpecification",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationUpdate) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationUpdate JobSpecification { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with the Job Schedule as metadata. If you do not specify this element, existing
        /// metadata is left unchanged.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of name-value pairs associated with the Job Schedule as metadata. If you do not specify this element, existing metadata is left unchanged.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon
        /// as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time,
        /// and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it.",
        SerializedName = @"doNotRunAfter",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ScheduleDoNotRunAfter { get; set; }
        /// <summary>
        /// The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time,
        /// the schedule becomes ready to create Jobs immediately.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately.",
        SerializedName = @"doNotRunUntil",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ScheduleDoNotRunUntil { get; set; }
        /// <summary>
        /// The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most
        /// one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given
        /// time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service
        /// will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow
        /// period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should
        /// normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external
        /// process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence.
        /// The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time,
        /// and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value,
        /// the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is
        /// 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"recurrenceInterval",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ScheduleRecurrenceInterval { get; set; }
        /// <summary>
        /// The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job
        /// must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will
        /// be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than
        /// the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval
        /// is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you
        /// specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly,
        /// the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"startWindow",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ScheduleStartWindow { get; set; }

    }
    /// Parameters for updating an Azure Batch Job Schedule.
    internal partial interface IBatchJobScheduleUpdateOptionsInternal

    {
        /// <summary>
        /// The details of the Jobs to be created on this schedule. Updates affect only Jobs that are started after the update has
        /// taken place. Any currently active Job continues with the older specification.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobSpecificationUpdate JobSpecification { get; set; }
        /// <summary>
        /// A list of name-value pairs associated with the Job Schedule as metadata. If you do not specify this element, existing
        /// metadata is left unchanged.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem> Metadata { get; set; }
        /// <summary>
        /// The schedule according to which Jobs will be created. All times are fixed respective to UTC and are not impacted by daylight
        /// saving time. If you do not specify this element, the existing schedule is left unchanged.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobScheduleConfiguration Schedule { get; set; }
        /// <summary>
        /// A time after which no Job will be created under this Job Schedule. The schedule will move to the completed state as soon
        /// as this deadline is past and there is no active Job under this Job Schedule. If you do not specify a doNotRunAfter time,
        /// and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it.
        /// </summary>
        global::System.DateTime? ScheduleDoNotRunAfter { get; set; }
        /// <summary>
        /// The earliest time at which any Job may be created under this Job Schedule. If you do not specify a doNotRunUntil time,
        /// the schedule becomes ready to create Jobs immediately.
        /// </summary>
        global::System.DateTime? ScheduleDoNotRunUntil { get; set; }
        /// <summary>
        /// The time interval between the start times of two successive Jobs under the Job Schedule. A Job Schedule can have at most
        /// one active Job under it at any given time. Because a Job Schedule can have at most one active Job under it at any given
        /// time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service
        /// will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow
        /// period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should
        /// normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external
        /// process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence.
        /// The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time,
        /// and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value,
        /// the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is
        /// 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? ScheduleRecurrenceInterval { get; set; }
        /// <summary>
        /// The time interval, starting from the time at which the schedule indicates a Job should be created, within which a Job
        /// must be created. If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will
        /// be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than
        /// the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval
        /// is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you
        /// specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly,
        /// the HTTP status code is 400 (Bad Request).
        /// </summary>
        global::System.TimeSpan? ScheduleStartWindow { get; set; }

    }
}