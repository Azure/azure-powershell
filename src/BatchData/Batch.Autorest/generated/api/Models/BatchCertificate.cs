// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A Certificate that can be installed on Compute Nodes and can be used to
    /// authenticate operations on the machine.
    /// </summary>
    public partial class BatchCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificate,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="CertificateFormat" /> property.</summary>
        private string _certificateFormat;

        /// <summary>The format of the Certificate data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CertificateFormat { get => this._certificateFormat; set => this._certificateFormat = value; }

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>Backing field for <see cref="Data" /> property.</summary>
        private byte[] _data;

        /// <summary>The base64-encoded contents of the Certificate. The maximum size is 10KB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public byte[] Data { get => this._data; set => this._data = value; }

        /// <summary>Backing field for <see cref="DeleteCertificateError" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteError _deleteCertificateError;

        /// <summary>
        /// The error that occurred on the last attempt to delete this Certificate. This property is set only if the Certificate is
        /// in the DeleteFailed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteError DeleteCertificateError { get => (this._deleteCertificateError = this._deleteCertificateError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateDeleteError()); }

        /// <summary>
        /// An identifier for the Certificate deletion error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DeleteCertificateErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Code; }

        /// <summary>
        /// A message describing the Certificate deletion error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DeleteCertificateErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Message; }

        /// <summary>
        /// A list of additional error details related to the Certificate deletion error. This list includes details such as the active
        /// Pools and Compute Nodes referencing this Certificate. However, if a large number of resources reference the Certificate,
        /// the list contains only about the first hundred.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> DeleteCertificateErrorValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Value; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private string _lastModified;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified { get => this._lastModified; set => this._lastModified = value; }

        /// <summary>Internal Acessors for DeleteCertificateError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteError Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.DeleteCertificateError { get => (this._deleteCertificateError = this._deleteCertificateError ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateDeleteError()); set { {_deleteCertificateError = value;} } }

        /// <summary>Internal Acessors for DeleteCertificateErrorCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.DeleteCertificateErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Code = value ?? null; }

        /// <summary>Internal Acessors for DeleteCertificateErrorMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.DeleteCertificateErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Message = value ?? null; }

        /// <summary>Internal Acessors for DeleteCertificateErrorValue</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.DeleteCertificateErrorValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteErrorInternal)DeleteCertificateError).Value = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for PreviousState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.PreviousState { get => this._previousState; set { {_previousState = value;} } }

        /// <summary>Internal Acessors for PreviousStateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.PreviousStateTransitionTime { get => this._previousStateTransitionTime; set { {_previousStateTransitionTime = value;} } }

        /// <summary>Internal Acessors for PublicData</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.PublicData { get => this._publicData; set { {_publicData = value;} } }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for StateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.StateTransitionTime { get => this._stateTransitionTime; set { {_stateTransitionTime = value;} } }

        /// <summary>Internal Acessors for Url</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal.Url { get => this._url; set { {_url = value;} } }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private string _password;

        /// <summary>
        /// The password to access the Certificate's private key. This must be omitted if the Certificate format is cer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Password { get => this._password; set => this._password = value; }

        /// <summary>Backing field for <see cref="PreviousState" /> property.</summary>
        private string _previousState;

        /// <summary>
        /// The previous state of the Certificate. This property is not set if the Certificate is in its initial active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PreviousState { get => this._previousState; }

        /// <summary>Backing field for <see cref="PreviousStateTransitionTime" /> property.</summary>
        private global::System.DateTime? _previousStateTransitionTime;

        /// <summary>
        /// The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial
        /// Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? PreviousStateTransitionTime { get => this._previousStateTransitionTime; }

        /// <summary>Backing field for <see cref="PublicData" /> property.</summary>
        private string _publicData;

        /// <summary>The public part of the Certificate as a base-64 encoded .cer file.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PublicData { get => this._publicData; }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The state of the Certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Backing field for <see cref="StateTransitionTime" /> property.</summary>
        private global::System.DateTime? _stateTransitionTime;

        /// <summary>The time at which the Certificate entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StateTransitionTime { get => this._stateTransitionTime; }

        /// <summary>Backing field for <see cref="Thumbprint" /> property.</summary>
        private string _thumbprint;

        /// <summary>
        /// The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are
        /// removed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Thumbprint { get => this._thumbprint; set => this._thumbprint = value; }

        /// <summary>Backing field for <see cref="ThumbprintAlgorithm" /> property.</summary>
        private string _thumbprintAlgorithm;

        /// <summary>The algorithm used to derive the thumbprint. This must be sha1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ThumbprintAlgorithm { get => this._thumbprintAlgorithm; set => this._thumbprintAlgorithm = value; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>The URL of the Certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Url { get => this._url; }

        /// <summary>Creates an new <see cref="BatchCertificate" /> instance.</summary>
        public BatchCertificate()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal)this).LastModified = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader1) is string __headerLastModifiedHeader1 ? __headerLastModifiedHeader1 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader2) is string __headerClientRequestIdHeader2 ? __headerClientRequestIdHeader2 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader3) is string __headerRequestIdHeader3 ? __headerRequestIdHeader3 : (string)null;
            }
        }
    }
    /// A Certificate that can be installed on Compute Nodes and can be used to
    /// authenticate operations on the machine.
    public partial interface IBatchCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The format of the Certificate data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"The format of the Certificate data.",
        SerializedName = @"certificateFormat",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("pfx", "cer")]
        string CertificateFormat { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }
        /// <summary>The base64-encoded contents of the Certificate. The maximum size is 10KB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"The base64-encoded contents of the Certificate. The maximum size is 10KB.",
        SerializedName = @"data",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] Data { get; set; }
        /// <summary>
        /// An identifier for the Certificate deletion error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An identifier for the Certificate deletion error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string DeleteCertificateErrorCode { get;  }
        /// <summary>
        /// A message describing the Certificate deletion error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A message describing the Certificate deletion error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string DeleteCertificateErrorMessage { get;  }
        /// <summary>
        /// A list of additional error details related to the Certificate deletion error. This list includes details such as the active
        /// Pools and Compute Nodes referencing this Certificate. However, if a large number of resources reference the Certificate,
        /// the list contains only about the first hundred.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of additional error details related to the Certificate deletion error. This list includes details such as the active Pools and Compute Nodes referencing this Certificate. However, if a large number of resources reference the Certificate, the list contains only about the first hundred.",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> DeleteCertificateErrorValue { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified { get; set; }
        /// <summary>
        /// The password to access the Certificate's private key. This must be omitted if the Certificate format is cer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"The password to access the Certificate's private key. This must be omitted if the Certificate format is cer.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string Password { get; set; }
        /// <summary>
        /// The previous state of the Certificate. This property is not set if the Certificate is in its initial active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The previous state of the Certificate. This property is not set if the Certificate is in its initial active state.",
        SerializedName = @"previousState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "deleting", "deletefailed")]
        string PreviousState { get;  }
        /// <summary>
        /// The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial
        /// Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial Active state.",
        SerializedName = @"previousStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PreviousStateTransitionTime { get;  }
        /// <summary>The public part of the Certificate as a base-64 encoded .cer file.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The public part of the Certificate as a base-64 encoded .cer file.",
        SerializedName = @"publicData",
        PossibleTypes = new [] { typeof(string) })]
        string PublicData { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>The state of the Certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The state of the Certificate.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "deleting", "deletefailed")]
        string State { get;  }
        /// <summary>The time at which the Certificate entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Certificate entered its current state.",
        SerializedName = @"stateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StateTransitionTime { get;  }
        /// <summary>
        /// The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are
        /// removed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get; set; }
        /// <summary>The algorithm used to derive the thumbprint. This must be sha1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The algorithm used to derive the thumbprint. This must be sha1.",
        SerializedName = @"thumbprintAlgorithm",
        PossibleTypes = new [] { typeof(string) })]
        string ThumbprintAlgorithm { get; set; }
        /// <summary>The URL of the Certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the Certificate.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get;  }

    }
    /// A Certificate that can be installed on Compute Nodes and can be used to
    /// authenticate operations on the machine.
    internal partial interface IBatchCertificateInternal

    {
        /// <summary>The format of the Certificate data.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("pfx", "cer")]
        string CertificateFormat { get; set; }

        string ClientRequestId { get; set; }
        /// <summary>The base64-encoded contents of the Certificate. The maximum size is 10KB.</summary>
        byte[] Data { get; set; }
        /// <summary>
        /// The error that occurred on the last attempt to delete this Certificate. This property is set only if the Certificate is
        /// in the DeleteFailed state.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateDeleteError DeleteCertificateError { get; set; }
        /// <summary>
        /// An identifier for the Certificate deletion error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string DeleteCertificateErrorCode { get; set; }
        /// <summary>
        /// A message describing the Certificate deletion error, intended to be suitable for display in a user interface.
        /// </summary>
        string DeleteCertificateErrorMessage { get; set; }
        /// <summary>
        /// A list of additional error details related to the Certificate deletion error. This list includes details such as the active
        /// Pools and Compute Nodes referencing this Certificate. However, if a large number of resources reference the Certificate,
        /// the list contains only about the first hundred.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> DeleteCertificateErrorValue { get; set; }

        string ETag { get; set; }

        string LastModified { get; set; }
        /// <summary>
        /// The password to access the Certificate's private key. This must be omitted if the Certificate format is cer.
        /// </summary>
        string Password { get; set; }
        /// <summary>
        /// The previous state of the Certificate. This property is not set if the Certificate is in its initial active state.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "deleting", "deletefailed")]
        string PreviousState { get; set; }
        /// <summary>
        /// The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial
        /// Active state.
        /// </summary>
        global::System.DateTime? PreviousStateTransitionTime { get; set; }
        /// <summary>The public part of the Certificate as a base-64 encoded .cer file.</summary>
        string PublicData { get; set; }

        string RequestId { get; set; }
        /// <summary>The state of the Certificate.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "deleting", "deletefailed")]
        string State { get; set; }
        /// <summary>The time at which the Certificate entered its current state.</summary>
        global::System.DateTime? StateTransitionTime { get; set; }
        /// <summary>
        /// The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are
        /// removed).
        /// </summary>
        string Thumbprint { get; set; }
        /// <summary>The algorithm used to derive the thumbprint. This must be sha1.</summary>
        string ThumbprintAlgorithm { get; set; }
        /// <summary>The URL of the Certificate.</summary>
        string Url { get; set; }

    }
}