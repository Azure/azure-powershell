// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// A Job Preparation Task to run before any Tasks of the Job on any given Compute Node.
    /// You can use Job Preparation to prepare a Node to run Tasks for the Job.
    /// Activities commonly performed in Job Preparation include: Downloading common
    /// resource files used by all the Tasks in the Job. The Job Preparation Task can
    /// download these common resource files to the shared location on the Node.
    /// (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the Node so
    /// that all Tasks of that Job can communicate with it. If the Job Preparation Task
    /// fails (that is, exhausts its retry count before exiting with exit code 0),
    /// Batch will not run Tasks of this Job on the Node. The Compute Node remains
    /// ineligible to run Tasks of this Job until it is reimaged. The Compute Node
    /// remains active and can be used for other Jobs. The Job Preparation Task can run
    /// multiple times on the same Node. Therefore, you should write the Job
    /// Preparation Task to handle re-execution. If the Node is rebooted, the Job
    /// Preparation Task is run again on the Compute Node before scheduling any other
    /// Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job
    /// Preparation Task did not previously complete. If the Node is reimaged, the Job
    /// Preparation Task is run again before scheduling any Task of the Job. Batch will
    /// retry Tasks when a recovery operation is triggered on a Node. Examples of
    /// recovery operations include (but are not limited to) when an unhealthy Node is
    /// rebooted or a Compute Node disappeared due to host failure. Retries due to
    /// recovery operations are independent of and are not counted against the
    /// maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to
    /// a recovery operation may occur. Because of this, all Tasks should be
    /// idempotent. This means Tasks need to tolerate being interrupted and restarted
    /// without causing any corruption or duplicate data. The best practice for long
    /// running Tasks is to use some form of checkpointing.
    /// </summary>
    public partial class BatchJobPreparationTask :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal
    {

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope = value ?? null; }

        /// <summary>Backing field for <see cref="CommandLine" /> property.</summary>
        private string _commandLine;

        /// <summary>
        /// The command line of the Job Preparation Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CommandLine { get => this._commandLine; set => this._commandLine = value; }

        /// <summary>Backing field for <see cref="Constraint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints _constraint;

        /// <summary>Constraints that apply to the Job Preparation Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraints()); set => this._constraint = value; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ConstraintMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintRetentionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).RetentionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).RetentionTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Backing field for <see cref="ContainerSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings _containerSetting;

        /// <summary>
        /// The settings for the container under which the Job Preparation Task runs. When this is specified, all directories recursively
        /// below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all
        /// Task environment variables are mapped into the container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch
        /// file APIs will not be able to access those files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettings()); set => this._containerSetting = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="EnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _environmentSetting;

        /// <summary>A list of environment variable settings for the Job Preparation Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get => this._environmentSetting; set => this._environmentSetting = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A string that uniquely identifies the Job Preparation Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job
        /// Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code
        /// TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for Constraint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal.Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraints()); set { {_constraint = value;} } }

        /// <summary>Internal Acessors for ContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal.ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettings()); set { {_containerSetting = value;} } }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).Registry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).Registry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal.UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set { {_userIdentity = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTaskInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser = value ?? null /* model class */; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="RerunOnNodeRebootAfterSuccess" /> property.</summary>
        private bool? _rerunOnNodeRebootAfterSuccess;

        /// <summary>
        /// Whether the Batch service should rerun the Job Preparation Task after a Compute Node reboots. The Job Preparation Task
        /// is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot
        /// occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to
        /// behave correctly if run multiple times. The default value is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? RerunOnNodeRebootAfterSuccess { get => this._rerunOnNodeRebootAfterSuccess; set => this._rerunOnNodeRebootAfterSuccess = value; }

        /// <summary>Backing field for <see cref="ResourceFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> _resourceFile;

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. Files listed
        /// under this element are located in the Task's working directory. There is a maximum size for the list of resource files.
        /// When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this
        /// occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages,
        /// or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get => this._resourceFile; set => this._resourceFile = value; }

        /// <summary>Backing field for <see cref="UserIdentity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity _userIdentity;

        /// <summary>
        /// The user identity under which the Job Preparation Task runs. If omitted, the Task runs as a non-administrative user unique
        /// to the Task on Windows Compute Nodes, or a non-administrative user unique to the Pool on Linux Compute Nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set => this._userIdentity = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username = value ?? null; }

        /// <summary>Backing field for <see cref="WaitForSuccess" /> property.</summary>
        private bool? _waitForSuccess;

        /// <summary>
        /// Whether the Batch service should wait for the Job Preparation Task to complete successfully before scheduling any other
        /// Tasks of the Job on the Compute Node. A Job Preparation Task has completed successfully if it exits with exit code 0.
        /// If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum
        /// retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries,
        /// then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks
        /// of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other
        /// Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if
        /// the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? WaitForSuccess { get => this._waitForSuccess; set => this._waitForSuccess = value; }

        /// <summary>Creates an new <see cref="BatchJobPreparationTask" /> instance.</summary>
        public BatchJobPreparationTask()
        {

        }
    }
    /// A Job Preparation Task to run before any Tasks of the Job on any given Compute Node.
    /// You can use Job Preparation to prepare a Node to run Tasks for the Job.
    /// Activities commonly performed in Job Preparation include: Downloading common
    /// resource files used by all the Tasks in the Job. The Job Preparation Task can
    /// download these common resource files to the shared location on the Node.
    /// (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the Node so
    /// that all Tasks of that Job can communicate with it. If the Job Preparation Task
    /// fails (that is, exhausts its retry count before exiting with exit code 0),
    /// Batch will not run Tasks of this Job on the Node. The Compute Node remains
    /// ineligible to run Tasks of this Job until it is reimaged. The Compute Node
    /// remains active and can be used for other Jobs. The Job Preparation Task can run
    /// multiple times on the same Node. Therefore, you should write the Job
    /// Preparation Task to handle re-execution. If the Node is rebooted, the Job
    /// Preparation Task is run again on the Compute Node before scheduling any other
    /// Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job
    /// Preparation Task did not previously complete. If the Node is reimaged, the Job
    /// Preparation Task is run again before scheduling any Task of the Job. Batch will
    /// retry Tasks when a recovery operation is triggered on a Node. Examples of
    /// recovery operations include (but are not limited to) when an unhealthy Node is
    /// rebooted or a Compute Node disappeared due to host failure. Retries due to
    /// recovery operations are independent of and are not counted against the
    /// maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to
    /// a recovery operation may occur. Because of this, all Tasks should be
    /// idempotent. This means Tasks need to tolerate being interrupted and restarted
    /// without causing any corruption or duplicate data. The best practice for long
    /// running Tasks is to use some form of checkpointing.
    public partial interface IBatchJobPreparationTask :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the Job Preparation Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the Job Preparation Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string CommandLine { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintRetentionTime { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>A list of environment variable settings for the Job Preparation Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the Job Preparation Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Preparation Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job
        /// Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code
        /// TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string that uniquely identifies the Job Preparation Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }
        /// <summary>
        /// Whether the Batch service should rerun the Job Preparation Task after a Compute Node reboots. The Job Preparation Task
        /// is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot
        /// occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to
        /// behave correctly if run multiple times. The default value is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Batch service should rerun the Job Preparation Task after a Compute Node reboots. The Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true.",
        SerializedName = @"rerunOnNodeRebootAfterSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RerunOnNodeRebootAfterSuccess { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. Files listed
        /// under this element are located in the Task's working directory. There is a maximum size for the list of resource files.
        /// When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this
        /// occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages,
        /// or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line. Files listed under this element are located in the Task's working directory.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the Job Preparation Task to complete successfully before scheduling any other
        /// Tasks of the Job on the Compute Node. A Job Preparation Task has completed successfully if it exits with exit code 0.
        /// If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum
        /// retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries,
        /// then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks
        /// of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other
        /// Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if
        /// the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Batch service should wait for the Job Preparation Task to complete successfully before scheduling any other Tasks of the Job on the Compute Node. A Job Preparation Task has completed successfully if it exits with exit code 0. If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WaitForSuccess { get; set; }

    }
    /// A Job Preparation Task to run before any Tasks of the Job on any given Compute Node.
    /// You can use Job Preparation to prepare a Node to run Tasks for the Job.
    /// Activities commonly performed in Job Preparation include: Downloading common
    /// resource files used by all the Tasks in the Job. The Job Preparation Task can
    /// download these common resource files to the shared location on the Node.
    /// (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the Node so
    /// that all Tasks of that Job can communicate with it. If the Job Preparation Task
    /// fails (that is, exhausts its retry count before exiting with exit code 0),
    /// Batch will not run Tasks of this Job on the Node. The Compute Node remains
    /// ineligible to run Tasks of this Job until it is reimaged. The Compute Node
    /// remains active and can be used for other Jobs. The Job Preparation Task can run
    /// multiple times on the same Node. Therefore, you should write the Job
    /// Preparation Task to handle re-execution. If the Node is rebooted, the Job
    /// Preparation Task is run again on the Compute Node before scheduling any other
    /// Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job
    /// Preparation Task did not previously complete. If the Node is reimaged, the Job
    /// Preparation Task is run again before scheduling any Task of the Job. Batch will
    /// retry Tasks when a recovery operation is triggered on a Node. Examples of
    /// recovery operations include (but are not limited to) when an unhealthy Node is
    /// rebooted or a Compute Node disappeared due to host failure. Retries due to
    /// recovery operations are independent of and are not counted against the
    /// maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to
    /// a recovery operation may occur. Because of this, all Tasks should be
    /// idempotent. This means Tasks need to tolerate being interrupted and restarted
    /// without causing any corruption or duplicate data. The best practice for long
    /// running Tasks is to use some form of checkpointing.
    internal partial interface IBatchJobPreparationTaskInternal

    {
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the Job Preparation Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string CommandLine { get; set; }
        /// <summary>Constraints that apply to the Job Preparation Task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Constraint { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? ConstraintRetentionTime { get; set; }
        /// <summary>
        /// The settings for the container under which the Job Preparation Task runs. When this is specified, all directories recursively
        /// below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all
        /// Task environment variables are mapped into the container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch
        /// file APIs will not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings ContainerSetting { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>A list of environment variable settings for the Job Preparation Task.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Job Preparation Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job
        /// Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code
        /// TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }
        /// <summary>
        /// Whether the Batch service should rerun the Job Preparation Task after a Compute Node reboots. The Job Preparation Task
        /// is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot
        /// occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to
        /// behave correctly if run multiple times. The default value is true.
        /// </summary>
        bool? RerunOnNodeRebootAfterSuccess { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. Files listed
        /// under this element are located in the Task's working directory. There is a maximum size for the list of resource files.
        /// When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this
        /// occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages,
        /// or Docker Containers.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The user identity under which the Job Preparation Task runs. If omitted, the Task runs as a non-administrative user unique
        /// to the Task on Windows Compute Nodes, or a non-administrative user unique to the Pool on Linux Compute Nodes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the Job Preparation Task to complete successfully before scheduling any other
        /// Tasks of the Job on the Compute Node. A Job Preparation Task has completed successfully if it exits with exit code 0.
        /// If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum
        /// retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries,
        /// then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks
        /// of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other
        /// Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if
        /// the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.
        /// </summary>
        bool? WaitForSuccess { get; set; }

    }
}