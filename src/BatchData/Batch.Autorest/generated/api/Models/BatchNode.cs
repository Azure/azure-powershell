// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>A Compute Node in the Batch service.</summary>
    public partial class BatchNode :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNode,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="AffinityId" /> property.</summary>
        private string _affinityId;

        /// <summary>
        /// An identifier which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. Note
        /// that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled,
        /// then the Task will be scheduled elsewhere.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string AffinityId { get => this._affinityId; set => this._affinityId = value; }

        /// <summary>Backing field for <see cref="AllocationTime" /> property.</summary>
        private global::System.DateTime? _allocationTime;

        /// <summary>
        /// The time at which this Compute Node was allocated to the Pool. This is the time when the Compute Node was initially allocated
        /// and doesn't change once set. It is not updated when the Compute Node is service healed or preempted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? AllocationTime { get => this._allocationTime; set => this._allocationTime = value; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).AutoUserScope = value ?? null; }

        /// <summary>Backing field for <see cref="CertificateReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> _certificateReference;

        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get => this._certificateReference; set => this._certificateReference = value; }

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfoContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfoContainerId = value ?? null; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfoError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfoError = value ?? null; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfoState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfoState = value ?? null; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingWorkingDirectory = value ?? null; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; set => this._eTag = value; }

        /// <summary>Backing field for <see cref="EndpointConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfiguration _endpointConfiguration;

        /// <summary>The endpoint configuration for the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfiguration EndpointConfiguration { get => (this._endpointConfiguration = this._endpointConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeEndpointConfiguration()); set => this._endpointConfiguration = value; }

        /// <summary>The list of inbound endpoints that are accessible on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint> EndpointConfigurationInboundEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfigurationInternal)EndpointConfiguration).InboundEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfigurationInternal)EndpointConfiguration).InboundEndpoint = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Error" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError> _error;

        /// <summary>The list of errors that are currently being encountered by the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError> Error { get => this._error; set => this._error = value; }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoCategory = value ?? null; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoCode = value ?? null; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoDetail = value ?? null /* arrayOf */; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfoMessage = value ?? null; }

        /// <summary>Backing field for <see cref="IPAddress" /> property.</summary>
        private string _iPAddress;

        /// <summary>
        /// The IP address that other Nodes can use to communicate with this Compute Node. Every Compute Node that is added to a Pool
        /// is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and
        /// the IP address is reclaimed and could be reused for new Compute Nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string IPAddress { get => this._iPAddress; set => this._iPAddress = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// The ID of the Compute Node. Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node
        /// is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute
        /// Nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).IdentityReferenceResourceId = value ?? null; }

        /// <summary>
        /// The community gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched
        /// from community gallery image GET call.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceCommunityGalleryImageId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceCommunityGalleryImageId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceCommunityGalleryImageId = value ?? null; }

        /// <summary>
        /// The specific version of the platform image or marketplace image used to create the node. This read-only field differs
        /// from 'version' only if the value specified for 'version' when the pool was created was 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceExactVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceExactVersion; }

        /// <summary>
        /// The offer type of the Azure Virtual Machines Marketplace Image. For example, UbuntuServer or WindowsServer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceOffer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceOffer = value ?? null; }

        /// <summary>
        /// The publisher of the Azure Virtual Machines Marketplace Image. For example, Canonical or MicrosoftWindowsServer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferencePublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferencePublisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferencePublisher = value ?? null; }

        /// <summary>
        /// The shared gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched
        /// from shared gallery image GET call.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceSharedGalleryImageId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceSharedGalleryImageId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceSharedGalleryImageId = value ?? null; }

        /// <summary>
        /// The SKU of the Azure Virtual Machines Marketplace Image. For example, 18.04-LTS or 2019-Datacenter.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceSku = value ?? null; }

        /// <summary>
        /// The version of the Azure Virtual Machines Marketplace Image. A value of 'latest' can be specified to select the latest
        /// version of an Image. If omitted, the default is 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceVersion = value ?? null; }

        /// <summary>
        /// The ARM resource identifier of the Azure Compute Gallery Image. Compute Nodes in the Pool will be created using this Image
        /// Id. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{VersionId}
        /// or /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}
        /// for always defaulting to the latest image version. This property is mutually exclusive with other ImageReference properties.
        /// The Azure Compute Gallery Image must have replicas in the same region and must be in the same subscription as the Azure
        /// Batch account. If the image version is not specified in the imageId, the latest version will be used. For information
        /// about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ImageReferenceVirtualMachineImageId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceVirtualMachineImageId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceVirtualMachineImageId = value ?? null; }

        /// <summary>Backing field for <see cref="IsDedicated" /> property.</summary>
        private bool? _isDedicated;

        /// <summary>
        /// Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a Spot/Low-priority Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? IsDedicated { get => this._isDedicated; set => this._isDedicated = value; }

        /// <summary>Backing field for <see cref="LastBootTime" /> property.</summary>
        private global::System.DateTime? _lastBootTime;

        /// <summary>
        /// The last time at which the Compute Node was started. This property may not be present if the Compute Node state is unusable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? LastBootTime { get => this._lastBootTime; set => this._lastBootTime = value; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private string _lastModified;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified { get => this._lastModified; set => this._lastModified = value; }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingRegistry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSettingRegistry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for EndpointConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.EndpointConfiguration { get => (this._endpointConfiguration = this._endpointConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeEndpointConfiguration()); set { {_endpointConfiguration = value;} } }

        /// <summary>Internal Acessors for ImageReferenceExactVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.ImageReferenceExactVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceExactVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReferenceExactVersion = value ?? null; }

        /// <summary>Internal Acessors for NodeAgentInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.NodeAgentInfo { get => (this._nodeAgentInfo = this._nodeAgentInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeAgentInfo()); set { {_nodeAgentInfo = value;} } }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTask</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.StartTask { get => (this._startTask = this._startTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTask()); set { {_startTask = value;} } }

        /// <summary>Internal Acessors for StartTaskContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.StartTaskContainerSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ContainerSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTaskInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.StartTaskInfo { get => (this._startTaskInfo = this._startTaskInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskInfo()); set { {_startTaskInfo = value;} } }

        /// <summary>Internal Acessors for StartTaskInfoContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.StartTaskInfoContainerInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ContainerInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTaskInfoFailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.StartTaskInfoFailureInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).FailureInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StartTaskUserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.StartTaskUserIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityAutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityAutoUser = value ?? null /* model class */; }

        /// <summary>Internal Acessors for VirtualMachineInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.VirtualMachineInfo { get => (this._virtualMachineInfo = this._virtualMachineInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineInfo()); set { {_virtualMachineInfo = value;} } }

        /// <summary>Internal Acessors for VirtualMachineInfoImageReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchVMImageReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal.VirtualMachineInfoImageReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ImageReference = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="NodeAgentInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfo _nodeAgentInfo;

        /// <summary>
        /// Information about the Compute Node agent version and the time the Compute Node upgraded to a new version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfo NodeAgentInfo { get => (this._nodeAgentInfo = this._nodeAgentInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeAgentInfo()); set => this._nodeAgentInfo = value; }

        /// <summary>
        /// The time when the Compute Node agent was updated on the Compute Node. This is the most recent time that the Compute Node
        /// agent was updated to a new version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? NodeAgentInfoLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfoInternal)NodeAgentInfo).LastUpdateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfoInternal)NodeAgentInfo).LastUpdateTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The version of the Batch Compute Node agent running on the Compute Node. This version number can be checked against the
        /// Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeAgentInfoVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfoInternal)NodeAgentInfo).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfoInternal)NodeAgentInfo).Version = value ?? null; }

        /// <summary>Backing field for <see cref="RecentTask" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo> _recentTask;

        /// <summary>
        /// A list of Tasks whose state has recently changed. This property is present only if at least one Task has run on this Compute
        /// Node since it was assigned to the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo> RecentTask { get => this._recentTask; set => this._recentTask = value; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Backing field for <see cref="RunningTaskSlotsCount" /> property.</summary>
        private int? _runningTaskSlotsCount;

        /// <summary>
        /// The total number of scheduling slots used by currently running Job Tasks on the Compute Node. This includes Job Manager
        /// Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? RunningTaskSlotsCount { get => this._runningTaskSlotsCount; set => this._runningTaskSlotsCount = value; }

        /// <summary>Backing field for <see cref="RunningTasksCount" /> property.</summary>
        private int? _runningTasksCount;

        /// <summary>
        /// The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks,
        /// but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? RunningTasksCount { get => this._runningTasksCount; set => this._runningTasksCount = value; }

        /// <summary>Backing field for <see cref="SchedulingState" /> property.</summary>
        private string _schedulingState;

        /// <summary>Whether the Compute Node is available for Task scheduling.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string SchedulingState { get => this._schedulingState; set => this._schedulingState = value; }

        /// <summary>Backing field for <see cref="StartTask" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask _startTask;

        /// <summary>The Task specified to run on the Compute Node as it joins the Pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask StartTask { get => (this._startTask = this._startTask ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTask()); set => this._startTask = value; }

        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string StartTaskCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).CommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).CommandLine = value ?? null; }

        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).EnvironmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).EnvironmentSetting = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="StartTaskInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo _startTaskInfo;

        /// <summary>Runtime information about the execution of the StartTask on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo StartTaskInfo { get => (this._startTaskInfo = this._startTaskInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskInfo()); set => this._startTaskInfo = value; }

        /// <summary>
        /// The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that
        /// run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
        /// running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? StartTaskInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).EndTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in
        /// the completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? StartTaskInfoExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).ExitCode = value ?? default(int); }

        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? StartTaskInfoLastRetryTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).LastRetryTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).LastRetryTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string StartTaskInfoResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).Result = value ?? null; }

        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? StartTaskInfoRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).RetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).RetryCount = value ?? default(int); }

        /// <summary>
        /// The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that
        /// is, this is the most recent time at which the StartTask started running).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? StartTaskInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>The state of the StartTask on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string StartTaskInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfoInternal)StartTaskInfo).State = value ?? null; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? StartTaskMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).ResourceFile = value ?? null /* arrayOf */; }

        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? StartTaskWaitForSuccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).WaitForSuccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).WaitForSuccess = value ?? default(bool); }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>
        /// The current state of the Compute Node. The Spot/Low-priority Compute Node has been preempted. Tasks which were running
        /// on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; set => this._state = value; }

        /// <summary>Backing field for <see cref="StateTransitionTime" /> property.</summary>
        private global::System.DateTime? _stateTransitionTime;

        /// <summary>The time at which the Compute Node entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StateTransitionTime { get => this._stateTransitionTime; set => this._stateTransitionTime = value; }

        /// <summary>Backing field for <see cref="TotalTasksRun" /> property.</summary>
        private int? _totalTasksRun;

        /// <summary>
        /// The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not
        /// Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? TotalTasksRun { get => this._totalTasksRun; set => this._totalTasksRun = value; }

        /// <summary>Backing field for <see cref="TotalTasksSucceeded" /> property.</summary>
        private int? _totalTasksSucceeded;

        /// <summary>
        /// The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager
        /// Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? TotalTasksSucceeded { get => this._totalTasksSucceeded; set => this._totalTasksSucceeded = value; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>The URL of the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Url { get => this._url; set => this._url = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInternal)StartTask).UserIdentityUsername = value ?? null; }

        /// <summary>Backing field for <see cref="VMSize" /> property.</summary>
        private string _vMSize;

        /// <summary>
        /// The size of the virtual machine hosting the Compute Node. For information about available sizes of virtual machines in
        /// Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string VMSize { get => this._vMSize; set => this._vMSize = value; }

        /// <summary>Backing field for <see cref="VirtualMachineInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfo _virtualMachineInfo;

        /// <summary>Info about the current state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfo VirtualMachineInfo { get => (this._virtualMachineInfo = this._virtualMachineInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineInfo()); set => this._virtualMachineInfo = value; }

        /// <summary>
        /// The resource ID of the Compute Node's current Virtual Machine Scale Set VM. Only defined if the Batch Account was created
        /// with its poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string VirtualMachineInfoScaleSetVMResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ScaleSetVMResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfoInternal)VirtualMachineInfo).ScaleSetVMResourceId = value ?? null; }

        /// <summary>Creates an new <see cref="BatchNode" /> instance.</summary>
        public BatchNode()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("ETag", out var __eTagHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ETag = System.Linq.Enumerable.FirstOrDefault(__eTagHeader0) is string __headerETagHeader0 ? __headerETagHeader0 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastModified = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader1) is string __headerLastModifiedHeader1 ? __headerLastModifiedHeader1 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader2) is string __headerClientRequestIdHeader2 ? __headerClientRequestIdHeader2 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader3) is string __headerRequestIdHeader3 ? __headerRequestIdHeader3 : (string)null;
            }
        }
    }
    /// A Compute Node in the Batch service.
    public partial interface IBatchNode :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An identifier which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. Note
        /// that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled,
        /// then the Task will be scheduled elsewhere.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.",
        SerializedName = @"affinityId",
        PossibleTypes = new [] { typeof(string) })]
        string AffinityId { get; set; }
        /// <summary>
        /// The time at which this Compute Node was allocated to the Pool. This is the time when the Compute Node was initially allocated
        /// and doesn't change once set. It is not updated when the Compute Node is service healed or preempted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which this Compute Node was allocated to the Pool. This is the time when the Compute Node was initially allocated and doesn't change once set. It is not updated when the Compute Node is service healed or preempted.",
        SerializedName = @"allocationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AllocationTime { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.",
        SerializedName = @"certificateReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get; set; }
        /// <summary>The list of inbound endpoints that are accessible on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of inbound endpoints that are accessible on the Compute Node.",
        SerializedName = @"inboundEndpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint> EndpointConfigurationInboundEndpoint { get; set; }
        /// <summary>The list of errors that are currently being encountered by the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of errors that are currently being encountered by the Compute Node.",
        SerializedName = @"errors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError> Error { get; set; }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoMessage { get; set; }
        /// <summary>
        /// The IP address that other Nodes can use to communicate with this Compute Node. Every Compute Node that is added to a Pool
        /// is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and
        /// the IP address is reclaimed and could be reused for new Compute Nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The IP address that other Nodes can use to communicate with this Compute Node. Every Compute Node that is added to a Pool is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new Compute Nodes.",
        SerializedName = @"ipAddress",
        PossibleTypes = new [] { typeof(string) })]
        string IPAddress { get; set; }
        /// <summary>
        /// The ID of the Compute Node. Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node
        /// is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute
        /// Nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the Compute Node. Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute Nodes.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The community gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched
        /// from community gallery image GET call.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The community gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched from community gallery image GET call.",
        SerializedName = @"communityGalleryImageId",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceCommunityGalleryImageId { get; set; }
        /// <summary>
        /// The specific version of the platform image or marketplace image used to create the node. This read-only field differs
        /// from 'version' only if the value specified for 'version' when the pool was created was 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The specific version of the platform image or marketplace image used to create the node. This read-only field differs from 'version' only if the value specified for 'version' when the pool was created was 'latest'.",
        SerializedName = @"exactVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceExactVersion { get;  }
        /// <summary>
        /// The offer type of the Azure Virtual Machines Marketplace Image. For example, UbuntuServer or WindowsServer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The offer type of the Azure Virtual Machines Marketplace Image. For example, UbuntuServer or WindowsServer.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceOffer { get; set; }
        /// <summary>
        /// The publisher of the Azure Virtual Machines Marketplace Image. For example, Canonical or MicrosoftWindowsServer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The publisher of the Azure Virtual Machines Marketplace Image. For example, Canonical or MicrosoftWindowsServer.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferencePublisher { get; set; }
        /// <summary>
        /// The shared gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched
        /// from shared gallery image GET call.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The shared gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched from shared gallery image GET call.",
        SerializedName = @"sharedGalleryImageId",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceSharedGalleryImageId { get; set; }
        /// <summary>
        /// The SKU of the Azure Virtual Machines Marketplace Image. For example, 18.04-LTS or 2019-Datacenter.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The SKU of the Azure Virtual Machines Marketplace Image. For example, 18.04-LTS or 2019-Datacenter.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceSku { get; set; }
        /// <summary>
        /// The version of the Azure Virtual Machines Marketplace Image. A value of 'latest' can be specified to select the latest
        /// version of an Image. If omitted, the default is 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the Azure Virtual Machines Marketplace Image. A value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceVersion { get; set; }
        /// <summary>
        /// The ARM resource identifier of the Azure Compute Gallery Image. Compute Nodes in the Pool will be created using this Image
        /// Id. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{VersionId}
        /// or /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}
        /// for always defaulting to the latest image version. This property is mutually exclusive with other ImageReference properties.
        /// The Azure Compute Gallery Image must have replicas in the same region and must be in the same subscription as the Azure
        /// Batch account. If the image version is not specified in the imageId, the latest version will be used. For information
        /// about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource identifier of the Azure Compute Gallery Image. Compute Nodes in the Pool will be created using this Image Id. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{VersionId} or /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName} for always defaulting to the latest image version. This property is mutually exclusive with other ImageReference properties. The Azure Compute Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration.",
        SerializedName = @"virtualMachineImageId",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceVirtualMachineImageId { get; set; }
        /// <summary>
        /// Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a Spot/Low-priority Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a Spot/Low-priority Compute Node.",
        SerializedName = @"isDedicated",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsDedicated { get; set; }
        /// <summary>
        /// The last time at which the Compute Node was started. This property may not be present if the Compute Node state is unusable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The last time at which the Compute Node was started. This property may not be present if the Compute Node state is unusable.",
        SerializedName = @"lastBootTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastBootTime { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified { get; set; }
        /// <summary>
        /// The time when the Compute Node agent was updated on the Compute Node. This is the most recent time that the Compute Node
        /// agent was updated to a new version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time when the Compute Node agent was updated on the Compute Node. This is the most recent time that the Compute Node agent was updated to a new version.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? NodeAgentInfoLastUpdateTime { get; set; }
        /// <summary>
        /// The version of the Batch Compute Node agent running on the Compute Node. This version number can be checked against the
        /// Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the Batch Compute Node agent running on the Compute Node. This version number can be checked against the Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string NodeAgentInfoVersion { get; set; }
        /// <summary>
        /// A list of Tasks whose state has recently changed. This property is present only if at least one Task has run on this Compute
        /// Node since it was assigned to the Pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of Tasks whose state has recently changed. This property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool.",
        SerializedName = @"recentTasks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo> RecentTask { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>
        /// The total number of scheduling slots used by currently running Job Tasks on the Compute Node. This includes Job Manager
        /// Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of scheduling slots used by currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.",
        SerializedName = @"runningTaskSlotsCount",
        PossibleTypes = new [] { typeof(int) })]
        int? RunningTaskSlotsCount { get; set; }
        /// <summary>
        /// The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks,
        /// but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.",
        SerializedName = @"runningTasksCount",
        PossibleTypes = new [] { typeof(int) })]
        int? RunningTasksCount { get; set; }
        /// <summary>Whether the Compute Node is available for Task scheduling.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Compute Node is available for Task scheduling.",
        SerializedName = @"schedulingState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("enabled", "disabled")]
        string SchedulingState { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string StartTaskCommandLine { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the StartTask.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get; set; }
        /// <summary>
        /// The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that
        /// run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
        /// running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently running.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartTaskInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in
        /// the completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? StartTaskInfoExitCode { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The most recent time at which a retry of the Task started running. This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.",
        SerializedName = @"lastRetryTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartTaskInfoLastRetryTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string StartTaskInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.",
        SerializedName = @"retryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? StartTaskInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that
        /// is, this is the most recent time at which the StartTask started running).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running).",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartTaskInfoStartTime { get; set; }
        /// <summary>The state of the StartTask on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the StartTask on the Compute Node.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string StartTaskInfoState { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>
        /// The current state of the Compute Node. The Spot/Low-priority Compute Node has been preempted. Tasks which were running
        /// on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The current state of the Compute Node. The Spot/Low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("idle", "rebooting", "reimaging", "running", "unusable", "creating", "starting", "waitingforstarttask", "starttaskfailed", "unknown", "leavingpool", "offline", "preempted", "upgradingos", "deallocated", "deallocating")]
        string State { get; set; }
        /// <summary>The time at which the Compute Node entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which the Compute Node entered its current state.",
        SerializedName = @"stateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StateTransitionTime { get; set; }
        /// <summary>
        /// The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not
        /// Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.",
        SerializedName = @"totalTasksRun",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalTasksRun { get; set; }
        /// <summary>
        /// The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager
        /// Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.",
        SerializedName = @"totalTasksSucceeded",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalTasksSucceeded { get; set; }
        /// <summary>The URL of the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL of the Compute Node.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// The size of the virtual machine hosting the Compute Node. For information about available sizes of virtual machines in
        /// Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The size of the virtual machine hosting the Compute Node. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        string VMSize { get; set; }
        /// <summary>
        /// The resource ID of the Compute Node's current Virtual Machine Scale Set VM. Only defined if the Batch Account was created
        /// with its poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The resource ID of the Compute Node's current Virtual Machine Scale Set VM. Only defined if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'.",
        SerializedName = @"scaleSetVmResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineInfoScaleSetVMResourceId { get; set; }

    }
    /// A Compute Node in the Batch service.
    internal partial interface IBatchNodeInternal

    {
        /// <summary>
        /// An identifier which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. Note
        /// that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled,
        /// then the Task will be scheduled elsewhere.
        /// </summary>
        string AffinityId { get; set; }
        /// <summary>
        /// The time at which this Compute Node was allocated to the Pool. This is the time when the Compute Node was initially allocated
        /// and doesn't change once set. It is not updated when the Compute Node is service healed or preempted.
        /// </summary>
        global::System.DateTime? AllocationTime { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
        /// For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
        /// For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs)
        /// and Certificates are placed in that directory.
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference> CertificateReference { get; set; }

        string ClientRequestId { get; set; }
        /// <summary>The ID of the container.</summary>
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }

        string ETag { get; set; }
        /// <summary>The endpoint configuration for the Compute Node.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfiguration EndpointConfiguration { get; set; }
        /// <summary>The list of inbound endpoints that are accessible on the Compute Node.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint> EndpointConfigurationInboundEndpoint { get; set; }
        /// <summary>The list of errors that are currently being encountered by the Compute Node.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError> Error { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string FailureInfoMessage { get; set; }
        /// <summary>
        /// The IP address that other Nodes can use to communicate with this Compute Node. Every Compute Node that is added to a Pool
        /// is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and
        /// the IP address is reclaimed and could be reused for new Compute Nodes.
        /// </summary>
        string IPAddress { get; set; }
        /// <summary>
        /// The ID of the Compute Node. Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node
        /// is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute
        /// Nodes.
        /// </summary>
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// The community gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched
        /// from community gallery image GET call.
        /// </summary>
        string ImageReferenceCommunityGalleryImageId { get; set; }
        /// <summary>
        /// The specific version of the platform image or marketplace image used to create the node. This read-only field differs
        /// from 'version' only if the value specified for 'version' when the pool was created was 'latest'.
        /// </summary>
        string ImageReferenceExactVersion { get; set; }
        /// <summary>
        /// The offer type of the Azure Virtual Machines Marketplace Image. For example, UbuntuServer or WindowsServer.
        /// </summary>
        string ImageReferenceOffer { get; set; }
        /// <summary>
        /// The publisher of the Azure Virtual Machines Marketplace Image. For example, Canonical or MicrosoftWindowsServer.
        /// </summary>
        string ImageReferencePublisher { get; set; }
        /// <summary>
        /// The shared gallery image unique identifier. This property is mutually exclusive with other properties and can be fetched
        /// from shared gallery image GET call.
        /// </summary>
        string ImageReferenceSharedGalleryImageId { get; set; }
        /// <summary>
        /// The SKU of the Azure Virtual Machines Marketplace Image. For example, 18.04-LTS or 2019-Datacenter.
        /// </summary>
        string ImageReferenceSku { get; set; }
        /// <summary>
        /// The version of the Azure Virtual Machines Marketplace Image. A value of 'latest' can be specified to select the latest
        /// version of an Image. If omitted, the default is 'latest'.
        /// </summary>
        string ImageReferenceVersion { get; set; }
        /// <summary>
        /// The ARM resource identifier of the Azure Compute Gallery Image. Compute Nodes in the Pool will be created using this Image
        /// Id. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{VersionId}
        /// or /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}
        /// for always defaulting to the latest image version. This property is mutually exclusive with other ImageReference properties.
        /// The Azure Compute Gallery Image must have replicas in the same region and must be in the same subscription as the Azure
        /// Batch account. If the image version is not specified in the imageId, the latest version will be used. For information
        /// about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        string ImageReferenceVirtualMachineImageId { get; set; }
        /// <summary>
        /// Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a Spot/Low-priority Compute Node.
        /// </summary>
        bool? IsDedicated { get; set; }
        /// <summary>
        /// The last time at which the Compute Node was started. This property may not be present if the Compute Node state is unusable.
        /// </summary>
        global::System.DateTime? LastBootTime { get; set; }

        string LastModified { get; set; }
        /// <summary>
        /// Information about the Compute Node agent version and the time the Compute Node upgraded to a new version.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfo NodeAgentInfo { get; set; }
        /// <summary>
        /// The time when the Compute Node agent was updated on the Compute Node. This is the most recent time that the Compute Node
        /// agent was updated to a new version.
        /// </summary>
        global::System.DateTime? NodeAgentInfoLastUpdateTime { get; set; }
        /// <summary>
        /// The version of the Batch Compute Node agent running on the Compute Node. This version number can be checked against the
        /// Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md.
        /// </summary>
        string NodeAgentInfoVersion { get; set; }
        /// <summary>
        /// A list of Tasks whose state has recently changed. This property is present only if at least one Task has run on this Compute
        /// Node since it was assigned to the Pool.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo> RecentTask { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }

        string RequestId { get; set; }
        /// <summary>
        /// The total number of scheduling slots used by currently running Job Tasks on the Compute Node. This includes Job Manager
        /// Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        int? RunningTaskSlotsCount { get; set; }
        /// <summary>
        /// The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks,
        /// but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        int? RunningTasksCount { get; set; }
        /// <summary>Whether the Compute Node is available for Task scheduling.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("enabled", "disabled")]
        string SchedulingState { get; set; }
        /// <summary>The Task specified to run on the Compute Node as it joins the Pool.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask StartTask { get; set; }
        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string StartTaskCommandLine { get; set; }
        /// <summary>
        /// The settings for the container under which the StartTask runs. When this is specified, all directories recursively below
        /// the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment
        /// variables are mapped into the container, and the Task command line is executed in the container. Files produced in the
        /// container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will
        /// not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings StartTaskContainerSetting { get; set; }
        /// <summary>A list of environment variable settings for the StartTask.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> StartTaskEnvironmentSetting { get; set; }
        /// <summary>Runtime information about the execution of the StartTask on the Compute Node.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo StartTaskInfo { get; set; }
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo StartTaskInfoContainerInfo { get; set; }
        /// <summary>
        /// The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that
        /// run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
        /// running.
        /// </summary>
        global::System.DateTime? StartTaskInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in
        /// the completed state. In general, the exit code for a process reflects the specific convention implemented by the application
        /// developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit
        /// code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout,
        /// or user termination via the API) you may see an operating system-defined exit code.
        /// </summary>
        int? StartTaskInfoExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo StartTaskInfoFailureInfo { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        global::System.DateTime? StartTaskInfoLastRetryTime { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string StartTaskInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        int? StartTaskInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that
        /// is, this is the most recent time at which the StartTask started running).
        /// </summary>
        global::System.DateTime? StartTaskInfoStartTime { get; set; }
        /// <summary>The state of the StartTask on the Compute Node.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("running", "completed")]
        string StartTaskInfoState { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        int? StartTaskMaxTaskRetryCount { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> StartTaskResourceFile { get; set; }
        /// <summary>
        /// The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the
        /// Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity StartTaskUserIdentity { get; set; }
        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        bool? StartTaskWaitForSuccess { get; set; }
        /// <summary>
        /// The current state of the Compute Node. The Spot/Low-priority Compute Node has been preempted. Tasks which were running
        /// on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("idle", "rebooting", "reimaging", "running", "unusable", "creating", "starting", "waitingforstarttask", "starttaskfailed", "unknown", "leavingpool", "offline", "preempted", "upgradingos", "deallocated", "deallocating")]
        string State { get; set; }
        /// <summary>The time at which the Compute Node entered its current state.</summary>
        global::System.DateTime? StateTransitionTime { get; set; }
        /// <summary>
        /// The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not
        /// Job Preparation, Job Release or Start Tasks.
        /// </summary>
        int? TotalTasksRun { get; set; }
        /// <summary>
        /// The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager
        /// Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
        /// </summary>
        int? TotalTasksSucceeded { get; set; }
        /// <summary>The URL of the Compute Node.</summary>
        string Url { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }
        /// <summary>
        /// The size of the virtual machine hosting the Compute Node. For information about available sizes of virtual machines in
        /// Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://learn.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </summary>
        string VMSize { get; set; }
        /// <summary>Info about the current state of the virtual machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfo VirtualMachineInfo { get; set; }
        /// <summary>The reference to the Azure Virtual Machine's Marketplace Image.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchVMImageReference VirtualMachineInfoImageReference { get; set; }
        /// <summary>
        /// The resource ID of the Compute Node's current Virtual Machine Scale Set VM. Only defined if the Batch Account was created
        /// with its poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        string VirtualMachineInfoScaleSetVMResourceId { get; set; }

    }
}