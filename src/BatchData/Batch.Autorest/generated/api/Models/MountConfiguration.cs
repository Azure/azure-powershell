// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The file system to mount on each node.</summary>
    public partial class MountConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfigurationInternal
    {

        /// <summary>Backing field for <see cref="AzureBlobFileSystemConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfiguration _azureBlobFileSystemConfiguration;

        /// <summary>
        /// The Azure Storage Container to mount using blob FUSE on each node. This property is mutually exclusive with all other
        /// properties.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfiguration AzureBlobFileSystemConfiguration { get => (this._azureBlobFileSystemConfiguration = this._azureBlobFileSystemConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AzureBlobFileSystemConfiguration()); set => this._azureBlobFileSystemConfiguration = value; }

        /// <summary>
        /// The Azure Storage Account key. This property is mutually exclusive with both sasKey and identity; exactly one must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString AzureBlobFileSystemConfigurationAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).AccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).AccountKey = value ?? null; }

        /// <summary>The Azure Storage Account name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureBlobFileSystemConfigurationAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).AccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).AccountName = value ?? null; }

        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureBlobFileSystemConfigurationBlobfuseOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).BlobfuseOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).BlobfuseOption = value ?? null; }

        /// <summary>The Azure Blob Storage Container name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureBlobFileSystemConfigurationContainerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).ContainerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).ContainerName = value ?? null; }

        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureBlobFileSystemConfigurationRelativeMountPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).RelativeMountPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).RelativeMountPath = value ?? null; }

        /// <summary>
        /// The Azure Storage SAS token. This property is mutually exclusive with both accountKey and identity; exactly one must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString AzureBlobFileSystemConfigurationSasKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).SasKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).SasKey = value ?? null; }

        /// <summary>Backing field for <see cref="AzureFileShareConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfiguration _azureFileShareConfiguration;

        /// <summary>
        /// The Azure File Share to mount on each node. This property is mutually exclusive with all other properties.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfiguration AzureFileShareConfiguration { get => (this._azureFileShareConfiguration = this._azureFileShareConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AzureFileShareConfiguration()); set => this._azureFileShareConfiguration = value; }

        /// <summary>The Azure Storage account key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString AzureFileShareConfigurationAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).AccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).AccountKey = value ?? null; }

        /// <summary>The Azure Storage account name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureFileShareConfigurationAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).AccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).AccountName = value ?? null; }

        /// <summary>
        /// The Azure Files URL. This is of the form 'https://{account}.file.core.windows.net/'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureFileShareConfigurationAzureFileUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).AzureFileUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).AzureFileUrl = value ?? null; }

        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureFileShareConfigurationMountOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).MountOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).MountOption = value ?? null; }

        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AzureFileShareConfigurationRelativeMountPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).RelativeMountPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfigurationInternal)AzureFileShareConfiguration).RelativeMountPath = value ?? null; }

        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string CifMountConfigurationMountOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).MountOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).MountOption = value ?? null; }

        /// <summary>The password to use for authentication against the CIFS file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString CifMountConfigurationPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).Password = value ?? null; }

        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string CifMountConfigurationRelativeMountPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).RelativeMountPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).RelativeMountPath = value ?? null; }

        /// <summary>The URI of the file system to mount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string CifMountConfigurationSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).Source; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).Source = value ?? null; }

        /// <summary>The user to use for authentication against the CIFS file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string CifMountConfigurationUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfigurationInternal)CifsMountConfiguration).Username = value ?? null; }

        /// <summary>Backing field for <see cref="CifsMountConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfiguration _cifsMountConfiguration;

        /// <summary>
        /// The CIFS/SMB file system to mount on each node. This property is mutually exclusive with all other properties.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfiguration CifsMountConfiguration { get => (this._cifsMountConfiguration = this._cifsMountConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.CifsMountConfiguration()); set => this._cifsMountConfiguration = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for AzureBlobFileSystemConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfigurationInternal.AzureBlobFileSystemConfiguration { get => (this._azureBlobFileSystemConfiguration = this._azureBlobFileSystemConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AzureBlobFileSystemConfiguration()); set { {_azureBlobFileSystemConfiguration = value;} } }

        /// <summary>Internal Acessors for AzureBlobFileSystemConfigurationIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfigurationInternal.AzureBlobFileSystemConfigurationIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).IdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfigurationInternal)AzureBlobFileSystemConfiguration).IdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for AzureFileShareConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfigurationInternal.AzureFileShareConfiguration { get => (this._azureFileShareConfiguration = this._azureFileShareConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AzureFileShareConfiguration()); set { {_azureFileShareConfiguration = value;} } }

        /// <summary>Internal Acessors for CifsMountConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfigurationInternal.CifsMountConfiguration { get => (this._cifsMountConfiguration = this._cifsMountConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.CifsMountConfiguration()); set { {_cifsMountConfiguration = value;} } }

        /// <summary>Internal Acessors for NfsMountConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfiguration Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfigurationInternal.NfsMountConfiguration { get => (this._nfsMountConfiguration = this._nfsMountConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NfsMountConfiguration()); set { {_nfsMountConfiguration = value;} } }

        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NfMountConfigurationMountOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfigurationInternal)NfsMountConfiguration).MountOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfigurationInternal)NfsMountConfiguration).MountOption = value ?? null; }

        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NfMountConfigurationRelativeMountPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfigurationInternal)NfsMountConfiguration).RelativeMountPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfigurationInternal)NfsMountConfiguration).RelativeMountPath = value ?? null; }

        /// <summary>The URI of the file system to mount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NfMountConfigurationSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfigurationInternal)NfsMountConfiguration).Source; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfigurationInternal)NfsMountConfiguration).Source = value ?? null; }

        /// <summary>Backing field for <see cref="NfsMountConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfiguration _nfsMountConfiguration;

        /// <summary>
        /// The NFS file system to mount on each node. This property is mutually exclusive with all other properties.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfiguration NfsMountConfiguration { get => (this._nfsMountConfiguration = this._nfsMountConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NfsMountConfiguration()); set => this._nfsMountConfiguration = value; }

        /// <summary>Creates an new <see cref="MountConfiguration" /> instance.</summary>
        public MountConfiguration()
        {

        }
    }
    /// The file system to mount on each node.
    public partial interface IMountConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The Azure Storage Account key. This property is mutually exclusive with both sasKey and identity; exactly one must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Storage Account key. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AzureBlobFileSystemConfigurationAccountKey { get; set; }
        /// <summary>The Azure Storage Account name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Storage Account name.",
        SerializedName = @"accountName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobFileSystemConfigurationAccountName { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options in Linux.",
        SerializedName = @"blobfuseOptions",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobFileSystemConfigurationBlobfuseOption { get; set; }
        /// <summary>The Azure Blob Storage Container name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Blob Storage Container name.",
        SerializedName = @"containerName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobFileSystemConfigurationContainerName { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.",
        SerializedName = @"relativeMountPath",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobFileSystemConfigurationRelativeMountPath { get; set; }
        /// <summary>
        /// The Azure Storage SAS token. This property is mutually exclusive with both accountKey and identity; exactly one must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Storage SAS token. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.",
        SerializedName = @"sasKey",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AzureBlobFileSystemConfigurationSasKey { get; set; }
        /// <summary>The Azure Storage account key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Storage account key.",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AzureFileShareConfigurationAccountKey { get; set; }
        /// <summary>The Azure Storage account name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Storage account name.",
        SerializedName = @"accountName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureFileShareConfigurationAccountName { get; set; }
        /// <summary>
        /// The Azure Files URL. This is of the form 'https://{account}.file.core.windows.net/'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Files URL. This is of the form 'https://{account}.file.core.windows.net/'.",
        SerializedName = @"azureFileUrl",
        PossibleTypes = new [] { typeof(string) })]
        string AzureFileShareConfigurationAzureFileUrl { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options in Linux.",
        SerializedName = @"mountOptions",
        PossibleTypes = new [] { typeof(string) })]
        string AzureFileShareConfigurationMountOption { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.",
        SerializedName = @"relativeMountPath",
        PossibleTypes = new [] { typeof(string) })]
        string AzureFileShareConfigurationRelativeMountPath { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options in Linux.",
        SerializedName = @"mountOptions",
        PossibleTypes = new [] { typeof(string) })]
        string CifMountConfigurationMountOption { get; set; }
        /// <summary>The password to use for authentication against the CIFS file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to use for authentication against the CIFS file system.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString CifMountConfigurationPassword { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.",
        SerializedName = @"relativeMountPath",
        PossibleTypes = new [] { typeof(string) })]
        string CifMountConfigurationRelativeMountPath { get; set; }
        /// <summary>The URI of the file system to mount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URI of the file system to mount.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(string) })]
        string CifMountConfigurationSource { get; set; }
        /// <summary>The user to use for authentication against the CIFS file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user to use for authentication against the CIFS file system.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string CifMountConfigurationUsername { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options in Linux.",
        SerializedName = @"mountOptions",
        PossibleTypes = new [] { typeof(string) })]
        string NfMountConfigurationMountOption { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.",
        SerializedName = @"relativeMountPath",
        PossibleTypes = new [] { typeof(string) })]
        string NfMountConfigurationRelativeMountPath { get; set; }
        /// <summary>The URI of the file system to mount.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URI of the file system to mount.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(string) })]
        string NfMountConfigurationSource { get; set; }

    }
    /// The file system to mount on each node.
    internal partial interface IMountConfigurationInternal

    {
        /// <summary>
        /// The Azure Storage Container to mount using blob FUSE on each node. This property is mutually exclusive with all other
        /// properties.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureBlobFileSystemConfiguration AzureBlobFileSystemConfiguration { get; set; }
        /// <summary>
        /// The Azure Storage Account key. This property is mutually exclusive with both sasKey and identity; exactly one must be
        /// specified.
        /// </summary>
        System.Security.SecureString AzureBlobFileSystemConfigurationAccountKey { get; set; }
        /// <summary>The Azure Storage Account name.</summary>
        string AzureBlobFileSystemConfigurationAccountName { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        string AzureBlobFileSystemConfigurationBlobfuseOption { get; set; }
        /// <summary>The Azure Blob Storage Container name.</summary>
        string AzureBlobFileSystemConfigurationContainerName { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access containerName. This property is mutually exclusive with both
        /// accountKey and sasKey; exactly one must be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference AzureBlobFileSystemConfigurationIdentityReference { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        string AzureBlobFileSystemConfigurationRelativeMountPath { get; set; }
        /// <summary>
        /// The Azure Storage SAS token. This property is mutually exclusive with both accountKey and identity; exactly one must be
        /// specified.
        /// </summary>
        System.Security.SecureString AzureBlobFileSystemConfigurationSasKey { get; set; }
        /// <summary>
        /// The Azure File Share to mount on each node. This property is mutually exclusive with all other properties.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAzureFileShareConfiguration AzureFileShareConfiguration { get; set; }
        /// <summary>The Azure Storage account key.</summary>
        System.Security.SecureString AzureFileShareConfigurationAccountKey { get; set; }
        /// <summary>The Azure Storage account name.</summary>
        string AzureFileShareConfigurationAccountName { get; set; }
        /// <summary>
        /// The Azure Files URL. This is of the form 'https://{account}.file.core.windows.net/'.
        /// </summary>
        string AzureFileShareConfigurationAzureFileUrl { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        string AzureFileShareConfigurationMountOption { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        string AzureFileShareConfigurationRelativeMountPath { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        string CifMountConfigurationMountOption { get; set; }
        /// <summary>The password to use for authentication against the CIFS file system.</summary>
        System.Security.SecureString CifMountConfigurationPassword { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        string CifMountConfigurationRelativeMountPath { get; set; }
        /// <summary>The URI of the file system to mount.</summary>
        string CifMountConfigurationSource { get; set; }
        /// <summary>The user to use for authentication against the CIFS file system.</summary>
        string CifMountConfigurationUsername { get; set; }
        /// <summary>
        /// The CIFS/SMB file system to mount on each node. This property is mutually exclusive with all other properties.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ICifsMountConfiguration CifsMountConfiguration { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount' options
        /// in Linux.
        /// </summary>
        string NfMountConfigurationMountOption { get; set; }
        /// <summary>
        /// The relative path on the compute node where the file system will be mounted. All file systems are mounted relative to
        /// the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </summary>
        string NfMountConfigurationRelativeMountPath { get; set; }
        /// <summary>The URI of the file system to mount.</summary>
        string NfMountConfigurationSource { get; set; }
        /// <summary>
        /// The NFS file system to mount on each node. This property is mutually exclusive with all other properties.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INfsMountConfiguration NfsMountConfiguration { get; set; }

    }
}