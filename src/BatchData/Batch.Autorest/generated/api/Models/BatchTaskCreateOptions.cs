// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Parameters for creating an Azure Batch Task.</summary>
    public partial class BatchTaskCreateOptions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptions,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal
    {

        /// <summary>Backing field for <see cref="AffinityInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo _affinityInfo;

        /// <summary>
        /// A locality hint that can be used by the Batch service to select a Compute Node on which to start the new Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo AffinityInfo { get => (this._affinityInfo = this._affinityInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAffinityInfo()); set => this._affinityInfo = value; }

        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AffinityInfoAffinityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfoInternal)AffinityInfo).AffinityId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfoInternal)AffinityInfo).AffinityId = value ?? null; }

        /// <summary>Backing field for <see cref="ApplicationPackageReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> _applicationPackageReference;

        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get => this._applicationPackageReference; set => this._applicationPackageReference = value; }

        /// <summary>Backing field for <see cref="AuthenticationTokenSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings _authenticationTokenSetting;

        /// <summary>
        /// The settings for an authentication token that the Task can use to perform Batch service operations. If this property is
        /// set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service
        /// operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
        /// variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request
        /// Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings AuthenticationTokenSetting { get => (this._authenticationTokenSetting = this._authenticationTokenSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettings()); set => this._authenticationTokenSetting = value; }

        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AuthenticationTokenSettingAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettingsInternal)AuthenticationTokenSetting).Access; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettingsInternal)AuthenticationTokenSetting).Access = value ?? null /* arrayOf */; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel = value ?? null; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope = value ?? null; }

        /// <summary>Backing field for <see cref="CommandLine" /> property.</summary>
        private string _commandLine;

        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CommandLine { get => this._commandLine; set => this._commandLine = value; }

        /// <summary>Backing field for <see cref="Constraint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints _constraint;

        /// <summary>
        /// The execution constraints that apply to this Task. If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount
        /// specified for the Job, the maxWallClockTime is infinite, and the retentionTime is 7 days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraints()); set => this._constraint = value; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ConstraintMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintRetentionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).RetentionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).RetentionTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Backing field for <see cref="ContainerSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings _containerSetting;

        /// <summary>
        /// The settings for the container under which the Task runs. If the Pool that will run this Task has containerConfiguration
        /// set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must
        /// not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
        /// directories on the node) are mapped into the container, all Task environment variables are mapped into the container,
        /// and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR
        /// might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettings()); set => this._containerSetting = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption = value ?? null; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName = value ?? null; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory = value ?? null; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DefaultDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultDependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultDependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DefaultJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultJobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultJobAction = value ?? null; }

        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> DependOnTaskId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskId = value ?? null /* arrayOf */; }

        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> DependOnTaskIdRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskIdRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskIdRange = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="DependsOn" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies _dependsOn;

        /// <summary>
        /// The Tasks that this Task depends on. This Task will not be scheduled until all Tasks that it depends on have completed
        /// successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled. If the Job
        /// does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies DependsOn { get => (this._dependsOn = this._dependsOn ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskDependencies()); set => this._dependsOn = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="EnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _environmentSetting;

        /// <summary>A list of environment variable settings for the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get => this._environmentSetting; set => this._environmentSetting = value; }

        /// <summary>Backing field for <see cref="ExitCondition" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions _exitCondition;

        /// <summary>How the Batch service should respond when the Task completes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions ExitCondition { get => (this._exitCondition = this._exitCondition ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitConditions()); set => this._exitCondition = value; }

        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitConditionExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCode = value ?? null /* arrayOf */; }

        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitConditionExitCodeRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCodeRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCodeRange = value ?? null /* arrayOf */; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FileUploadErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorDependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorDependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FileUploadErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorJobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorJobAction = value ?? null; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within a Job that differ only by case).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for AffinityInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.AffinityInfo { get => (this._affinityInfo = this._affinityInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAffinityInfo()); set { {_affinityInfo = value;} } }

        /// <summary>Internal Acessors for AuthenticationTokenSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.AuthenticationTokenSetting { get => (this._authenticationTokenSetting = this._authenticationTokenSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettings()); set { {_authenticationTokenSetting = value;} } }

        /// <summary>Internal Acessors for Constraint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraints()); set { {_constraint = value;} } }

        /// <summary>Internal Acessors for ContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettings()); set { {_containerSetting = value;} } }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).Registry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).Registry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for DependsOn</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.DependsOn { get => (this._dependsOn = this._dependsOn ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskDependencies()); set { {_dependsOn = value;} } }

        /// <summary>Internal Acessors for ExitCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.ExitCondition { get => (this._exitCondition = this._exitCondition ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitConditions()); set { {_exitCondition = value;} } }

        /// <summary>Internal Acessors for ExitConditionDefault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.ExitConditionDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).Default; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).Default = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExitConditionFileUploadError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.ExitConditionFileUploadError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadError = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExitConditionPreProcessingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.ExitConditionPreProcessingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingError = value ?? null /* model class */; }

        /// <summary>Internal Acessors for MultiInstanceSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.MultiInstanceSetting { get => (this._multiInstanceSetting = this._multiInstanceSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MultiInstanceSettings()); set { {_multiInstanceSetting = value;} } }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set { {_userIdentity = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptionsInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="MultiInstanceSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings _multiInstanceSetting;

        /// <summary>
        /// An object that indicates that the Task is a multi-instance Task, and contains information about how to run the multi-instance
        /// Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings MultiInstanceSetting { get => (this._multiInstanceSetting = this._multiInstanceSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MultiInstanceSettings()); set => this._multiInstanceSetting = value; }

        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> MultiInstanceSettingCommonResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CommonResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CommonResourceFile = value ?? null /* arrayOf */; }

        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string MultiInstanceSettingCoordinationCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CoordinationCommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CoordinationCommandLine = value ?? null; }

        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? MultiInstanceSettingNumberOfInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).NumberOfInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).NumberOfInstance = value ?? default(int); }

        /// <summary>Backing field for <see cref="OutputFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> _outputFile;

        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> OutputFile { get => this._outputFile; set => this._outputFile = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PreProcessingErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorDependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorDependencyAction = value ?? null; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PreProcessingErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorJobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorJobAction = value ?? null; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword = value ?? null; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer = value ?? null; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername = value ?? null; }

        /// <summary>Backing field for <see cref="RequiredSlot" /> property.</summary>
        private int? _requiredSlot;

        /// <summary>
        /// The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? RequiredSlot { get => this._requiredSlot; set => this._requiredSlot = value; }

        /// <summary>Backing field for <see cref="ResourceFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> _resourceFile;

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get => this._resourceFile; set => this._resourceFile = value; }

        /// <summary>Backing field for <see cref="UserIdentity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity _userIdentity;

        /// <summary>
        /// The user identity under which the Task runs. If omitted, the Task runs as a non-administrative user unique to the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set => this._userIdentity = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username = value ?? null; }

        /// <summary>Creates an new <see cref="BatchTaskCreateOptions" /> instance.</summary>
        public BatchTaskCreateOptions()
        {

        }
    }
    /// Parameters for creating an Azure Batch Task.
    public partial interface IBatchTaskCreateOptions :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.",
        SerializedName = @"affinityId",
        PossibleTypes = new [] { typeof(string) })]
        string AffinityInfoAffinityId { get; set; }
        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.",
        SerializedName = @"applicationPackageReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get; set; }
        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.",
        SerializedName = @"access",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("job")]
        System.Collections.Generic.List<string> AuthenticationTokenSettingAccess { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string CommandLine { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintRetentionTime { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string DefaultDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string DefaultJobAction { get; set; }
        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.",
        SerializedName = @"taskIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DependOnTaskId { get; set; }
        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent Task can be scheduled.",
        SerializedName = @"taskIdRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> DependOnTaskIdRange { get; set; }
        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>A list of environment variable settings for the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of environment variable settings for the Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of individual Task exit codes and how the Batch service should respond to them.",
        SerializedName = @"exitCodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitConditionExitCode { get; set; }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of Task exit code ranges and how the Batch service should respond to them.",
        SerializedName = @"exitCodeRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitConditionExitCodeRange { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string FileUploadErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string FileUploadErrorJobAction { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within a Job that differ only by case).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a Job that differ only by case).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory).  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"commonResourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> MultiInstanceSettingCommonResourceFile { get; set; }
        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command. A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.",
        SerializedName = @"coordinationCommandLine",
        PossibleTypes = new [] { typeof(string) })]
        string MultiInstanceSettingCoordinationCommandLine { get; set; }
        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of Compute Nodes required by the Task. If omitted, the default is 1.",
        SerializedName = @"numberOfInstances",
        PossibleTypes = new [] { typeof(int) })]
        int? MultiInstanceSettingNumberOfInstance { get; set; }
        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.",
        SerializedName = @"outputFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> OutputFile { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string PreProcessingErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string PreProcessingErrorJobAction { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get; set; }
        /// <summary>
        /// The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.",
        SerializedName = @"requiredSlots",
        PossibleTypes = new [] { typeof(int) })]
        int? RequiredSlot { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get; set; }

    }
    /// Parameters for creating an Azure Batch Task.
    internal partial interface IBatchTaskCreateOptionsInternal

    {
        /// <summary>
        /// A locality hint that can be used by the Batch service to select a Compute Node on which to start the new Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo AffinityInfo { get; set; }
        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        string AffinityInfoAffinityId { get; set; }
        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get; set; }
        /// <summary>
        /// The settings for an authentication token that the Task can use to perform Batch service operations. If this property is
        /// set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service
        /// operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
        /// variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request
        /// Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings AuthenticationTokenSetting { get; set; }
        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("job")]
        System.Collections.Generic.List<string> AuthenticationTokenSettingAccess { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }
        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string CommandLine { get; set; }
        /// <summary>
        /// The execution constraints that apply to this Task. If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount
        /// specified for the Job, the maxWallClockTime is infinite, and the retentionTime is 7 days.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Constraint { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? ConstraintRetentionTime { get; set; }
        /// <summary>
        /// The settings for the container under which the Task runs. If the Pool that will run this Task has containerConfiguration
        /// set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must
        /// not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
        /// directories on the node) are mapped into the container, all Task environment variables are mapped into the container,
        /// and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR
        /// might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings ContainerSetting { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string DefaultDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string DefaultJobAction { get; set; }
        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        System.Collections.Generic.List<string> DependOnTaskId { get; set; }
        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> DependOnTaskIdRange { get; set; }
        /// <summary>
        /// The Tasks that this Task depends on. This Task will not be scheduled until all Tasks that it depends on have completed
        /// successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled. If the Job
        /// does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies DependsOn { get; set; }
        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        string DisplayName { get; set; }
        /// <summary>A list of environment variable settings for the Task.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>How the Batch service should respond when the Task completes.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions ExitCondition { get; set; }
        /// <summary>
        /// How the Batch service should respond if the Task fails with an exit condition not covered by any of the other properties.
        /// This value is used if the Task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection,
        /// with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError
        /// property is not present. If you want non-default behavior on exit code 0, you must list it explicitly using the exitCodes
        /// or exitCodeRanges collection.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitConditionDefault { get; set; }
        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitConditionExitCode { get; set; }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitConditionExitCodeRange { get; set; }
        /// <summary>
        /// How the Batch service should respond if a file upload error occurs. If the Task exited with an exit code that was specified
        /// via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code
        /// takes precedence.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitConditionFileUploadError { get; set; }
        /// <summary>
        /// How the Batch service should respond if the Task fails to start due to an error.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitConditionPreProcessingError { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string FileUploadErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string FileUploadErrorJobAction { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within a Job that differ only by case).
        /// </summary>
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>
        /// An object that indicates that the Task is a multi-instance Task, and contains information about how to run the multi-instance
        /// Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings MultiInstanceSetting { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> MultiInstanceSettingCommonResourceFile { get; set; }
        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        string MultiInstanceSettingCoordinationCommandLine { get; set; }
        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        int? MultiInstanceSettingNumberOfInstance { get; set; }
        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> OutputFile { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string PreProcessingErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string PreProcessingErrorJobAction { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }
        /// <summary>
        /// The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        int? RequiredSlot { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>
        /// The user identity under which the Task runs. If omitted, the Task runs as a non-administrative user unique to the Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }

    }
}