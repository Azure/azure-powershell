// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing.
    /// </summary>
    public partial class BatchTask :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTask,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable
    {

        /// <summary>Backing field for <see cref="AffinityInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo _affinityInfo;

        /// <summary>
        /// A locality hint that can be used by the Batch service to select a Compute Node on which to start the new Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo AffinityInfo { get => (this._affinityInfo = this._affinityInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAffinityInfo()); }

        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AffinityInfoAffinityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfoInternal)AffinityInfo).AffinityId; }

        /// <summary>Backing field for <see cref="ApplicationPackageReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> _applicationPackageReference;

        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get => this._applicationPackageReference; }

        /// <summary>Backing field for <see cref="AuthenticationTokenSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings _authenticationTokenSetting;

        /// <summary>
        /// The settings for an authentication token that the Task can use to perform Batch service operations. If this property is
        /// set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service
        /// operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
        /// variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request
        /// Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings AuthenticationTokenSetting { get => (this._authenticationTokenSetting = this._authenticationTokenSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettings()); }

        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AuthenticationTokenSettingAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettingsInternal)AuthenticationTokenSetting).Access; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope; }

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>Backing field for <see cref="CommandLine" /> property.</summary>
        private string _commandLine;

        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string CommandLine { get => this._commandLine; }

        /// <summary>Backing field for <see cref="Constraint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints _constraint;

        /// <summary>The execution constraints that apply to this Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraints()); set => this._constraint = value; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ConstraintMaxTaskRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxTaskRetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxTaskRetryCount = value ?? default(int); }

        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintMaxWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxWallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).MaxWallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? ConstraintRetentionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).RetentionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraintsInternal)Constraint).RetentionTime = value ?? default(global::System.TimeSpan); }

        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoContainerId; }

        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoError; }

        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoState; }

        /// <summary>Backing field for <see cref="ContainerSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings _containerSetting;

        /// <summary>
        /// The settings for the container under which the Task runs. If the Pool that will run this Task has containerConfiguration
        /// set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must
        /// not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
        /// directories on the node) are mapped into the container, all Task environment variables are mapped into the container,
        /// and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR
        /// might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettings()); }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount; }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory; }

        /// <summary>Backing field for <see cref="CreationTime" /> property.</summary>
        private global::System.DateTime? _creationTime;

        /// <summary>The creation time of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? CreationTime { get => this._creationTime; }

        /// <summary>Backing field for <see cref="DataServiceId" /> property.</summary>
        private string _dataServiceId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DataServiceId { get => this._dataServiceId; set => this._dataServiceId = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DefaultDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultDependencyAction; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string DefaultJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultJobAction; }

        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> DependOnTaskId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskId; }

        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> DependOnTaskIdRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskIdRange; }

        /// <summary>Backing field for <see cref="DependsOn" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies _dependsOn;

        /// <summary>
        /// The Tasks that this Task depends on. This Task will not be scheduled until all Tasks that it depends on have completed
        /// successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies DependsOn { get => (this._dependsOn = this._dependsOn ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskDependencies()); }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; }

        /// <summary>Backing field for <see cref="ETag" /> property.</summary>
        private string _eTag;

        /// <summary>
        /// The ETag of the Task. This is an opaque string. You can use it to detect whether the Task has changed between requests.
        /// In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody
        /// else has modified the Task in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag { get => this._eTag; }

        /// <summary>Backing field for <see cref="ETag1" /> property.</summary>
        private string _eTag1;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ETag1 { get => this._eTag1; set => this._eTag1 = value; }

        /// <summary>Backing field for <see cref="EnvironmentSetting" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> _environmentSetting;

        /// <summary>A list of environment variable settings for the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get => this._environmentSetting; }

        /// <summary>Backing field for <see cref="ExecutionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo _executionInfo;

        /// <summary>Information about the execution of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo ExecutionInfo { get => (this._executionInfo = this._executionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfo()); }

        /// <summary>
        /// The time at which the Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).EndTime; }

        /// <summary>
        /// The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed
        /// state. In general, the exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination
        /// via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ExecutionInfoExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ExitCode; }

        /// <summary>
        /// The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property
        /// is set only if the requeueCount is nonzero.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoLastRequeueTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRequeueTime; }

        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoLastRetryTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRetryTime; }

        /// <summary>
        /// The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes
        /// Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that
        /// running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued
        /// for these reasons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ExecutionInfoRequeueCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RequeueCount; }

        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string ExecutionInfoResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).Result; }

        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ExecutionInfoRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RetryCount; }

        /// <summary>
        /// The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource
        /// files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
        /// the Task has been restarted or retried, this is the most recent time at which the Task started running. This property
        /// is present only for Tasks that are in the running or completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).StartTime; }

        /// <summary>Backing field for <see cref="ExitCondition" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions _exitCondition;

        /// <summary>How the Batch service should respond when the Task completes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions ExitCondition { get => (this._exitCondition = this._exitCondition ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitConditions()); }

        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitConditionExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCode; }

        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitConditionExitCodeRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCodeRange; }

        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCategory; }

        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCode; }

        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoDetail; }

        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoMessage; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FileUploadErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorDependencyAction; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string FileUploadErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorJobAction; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId; }

        /// <summary>Backing field for <see cref="LastModified" /> property.</summary>
        private global::System.DateTime? _lastModified;

        /// <summary>The last modified time of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? LastModified { get => this._lastModified; }

        /// <summary>Backing field for <see cref="LastModified1" /> property.</summary>
        private string _lastModified1;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string LastModified1 { get => this._lastModified1; set => this._lastModified1 = value; }

        /// <summary>Internal Acessors for AffinityInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.AffinityInfo { get => (this._affinityInfo = this._affinityInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchAffinityInfo()); set { {_affinityInfo = value;} } }

        /// <summary>Internal Acessors for AffinityInfoAffinityId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.AffinityInfoAffinityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfoInternal)AffinityInfo).AffinityId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfoInternal)AffinityInfo).AffinityId = value ?? null; }

        /// <summary>Internal Acessors for ApplicationPackageReference</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ApplicationPackageReference { get => this._applicationPackageReference; set { {_applicationPackageReference = value;} } }

        /// <summary>Internal Acessors for AuthenticationTokenSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.AuthenticationTokenSetting { get => (this._authenticationTokenSetting = this._authenticationTokenSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettings()); set { {_authenticationTokenSetting = value;} } }

        /// <summary>Internal Acessors for AuthenticationTokenSettingAccess</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.AuthenticationTokenSettingAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettingsInternal)AuthenticationTokenSetting).Access; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettingsInternal)AuthenticationTokenSetting).Access = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for AutoUserElevationLevel</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.AutoUserElevationLevel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserElevationLevel = value ?? null; }

        /// <summary>Internal Acessors for AutoUserScope</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.AutoUserScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUserScope = value ?? null; }

        /// <summary>Internal Acessors for CommandLine</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.CommandLine { get => this._commandLine; set { {_commandLine = value;} } }

        /// <summary>Internal Acessors for Constraint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.Constraint { get => (this._constraint = this._constraint ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraints()); set { {_constraint = value;} } }

        /// <summary>Internal Acessors for ContainerInfoContainerId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerInfoContainerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoContainerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoContainerId = value ?? null; }

        /// <summary>Internal Acessors for ContainerInfoError</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerInfoError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoError = value ?? null; }

        /// <summary>Internal Acessors for ContainerInfoState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerInfoState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfoState = value ?? null; }

        /// <summary>Internal Acessors for ContainerSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerSetting { get => (this._containerSetting = this._containerSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettings()); set { {_containerSetting = value;} } }

        /// <summary>Internal Acessors for ContainerSettingContainerHostBatchBindMount</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerSettingContainerHostBatchBindMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerHostBatchBindMount = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for ContainerSettingContainerRunOption</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerSettingContainerRunOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ContainerRunOption = value ?? null; }

        /// <summary>Internal Acessors for ContainerSettingImageName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerSettingImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).ImageName = value ?? null; }

        /// <summary>Internal Acessors for ContainerSettingRegistry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerSettingRegistry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).Registry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).Registry = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ContainerSettingWorkingDirectory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ContainerSettingWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).WorkingDirectory = value ?? null; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.CreationTime { get => this._creationTime; set { {_creationTime = value;} } }

        /// <summary>Internal Acessors for DefaultDependencyAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.DefaultDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultDependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultDependencyAction = value ?? null; }

        /// <summary>Internal Acessors for DefaultJobAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.DefaultJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultJobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).DefaultJobAction = value ?? null; }

        /// <summary>Internal Acessors for DependOnTaskId</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.DependOnTaskId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskId = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for DependOnTaskIdRange</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.DependOnTaskIdRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskIdRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependenciesInternal)DependsOn).TaskIdRange = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for DependsOn</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.DependsOn { get => (this._dependsOn = this._dependsOn ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskDependencies()); set { {_dependsOn = value;} } }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.DisplayName { get => this._displayName; set { {_displayName = value;} } }

        /// <summary>Internal Acessors for ETag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ETag { get => this._eTag; set { {_eTag = value;} } }

        /// <summary>Internal Acessors for EnvironmentSetting</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.EnvironmentSetting { get => this._environmentSetting; set { {_environmentSetting = value;} } }

        /// <summary>Internal Acessors for ExecutionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfo { get => (this._executionInfo = this._executionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskExecutionInfo()); set { {_executionInfo = value;} } }

        /// <summary>Internal Acessors for ExecutionInfoContainerInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoContainerInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ContainerInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExecutionInfoEndTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).EndTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ExecutionInfoExitCode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).ExitCode = value ?? default(int); }

        /// <summary>Internal Acessors for ExecutionInfoFailureInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoFailureInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfo = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExecutionInfoLastRequeueTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoLastRequeueTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRequeueTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRequeueTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ExecutionInfoLastRetryTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoLastRetryTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRetryTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).LastRetryTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ExecutionInfoRequeueCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoRequeueCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RequeueCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RequeueCount = value ?? default(int); }

        /// <summary>Internal Acessors for ExecutionInfoResult</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).Result = value ?? null; }

        /// <summary>Internal Acessors for ExecutionInfoRetryCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoRetryCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RetryCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).RetryCount = value ?? default(int); }

        /// <summary>Internal Acessors for ExecutionInfoStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExecutionInfoStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for ExitCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExitCondition { get => (this._exitCondition = this._exitCondition ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ExitConditions()); set { {_exitCondition = value;} } }

        /// <summary>Internal Acessors for ExitConditionDefault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExitConditionDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).Default; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).Default = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExitConditionExitCode</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExitConditionExitCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCode = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for ExitConditionExitCodeRange</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExitConditionExitCodeRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCodeRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).ExitCodeRange = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for ExitConditionFileUploadError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExitConditionFileUploadError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadError = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ExitConditionPreProcessingError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ExitConditionPreProcessingError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingError = value ?? null /* model class */; }

        /// <summary>Internal Acessors for FailureInfoCategory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.FailureInfoCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCategory = value ?? null; }

        /// <summary>Internal Acessors for FailureInfoCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.FailureInfoCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoCode = value ?? null; }

        /// <summary>Internal Acessors for FailureInfoDetail</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.FailureInfoDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoDetail = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for FailureInfoMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.FailureInfoMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfoInternal)ExecutionInfo).FailureInfoMessage = value ?? null; }

        /// <summary>Internal Acessors for FileUploadErrorDependencyAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.FileUploadErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorDependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorDependencyAction = value ?? null; }

        /// <summary>Internal Acessors for FileUploadErrorJobAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.FileUploadErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorJobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).FileUploadErrorJobAction = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for IdentityReferenceResourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.IdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).IdentityReferenceResourceId = value ?? null; }

        /// <summary>Internal Acessors for LastModified</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.LastModified { get => this._lastModified; set { {_lastModified = value;} } }

        /// <summary>Internal Acessors for MultiInstanceSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.MultiInstanceSetting { get => (this._multiInstanceSetting = this._multiInstanceSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MultiInstanceSettings()); set { {_multiInstanceSetting = value;} } }

        /// <summary>Internal Acessors for MultiInstanceSettingCommonResourceFile</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.MultiInstanceSettingCommonResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CommonResourceFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CommonResourceFile = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for MultiInstanceSettingCoordinationCommandLine</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.MultiInstanceSettingCoordinationCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CoordinationCommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CoordinationCommandLine = value ?? null; }

        /// <summary>Internal Acessors for MultiInstanceSettingNumberOfInstance</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.MultiInstanceSettingNumberOfInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).NumberOfInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).NumberOfInstance = value ?? default(int); }

        /// <summary>Internal Acessors for NodeInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfo { get => (this._nodeInfo = this._nodeInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeInfo()); set { {_nodeInfo = value;} } }

        /// <summary>Internal Acessors for NodeInfoAffinityId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfoAffinityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).AffinityId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).AffinityId = value ?? null; }

        /// <summary>Internal Acessors for NodeInfoNodeId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfoNodeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeId = value ?? null; }

        /// <summary>Internal Acessors for NodeInfoNodeUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfoNodeUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeUrl = value ?? null; }

        /// <summary>Internal Acessors for NodeInfoPoolId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).PoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).PoolId = value ?? null; }

        /// <summary>Internal Acessors for NodeInfoTaskRootDirectory</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfoTaskRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectory = value ?? null; }

        /// <summary>Internal Acessors for NodeInfoTaskRootDirectoryUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.NodeInfoTaskRootDirectoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectoryUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectoryUrl = value ?? null; }

        /// <summary>Internal Acessors for OutputFile</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.OutputFile { get => this._outputFile; set { {_outputFile = value;} } }

        /// <summary>Internal Acessors for PreProcessingErrorDependencyAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.PreProcessingErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorDependencyAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorDependencyAction = value ?? null; }

        /// <summary>Internal Acessors for PreProcessingErrorJobAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.PreProcessingErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorJobAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorJobAction = value ?? null; }

        /// <summary>Internal Acessors for PreviousState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.PreviousState { get => this._previousState; set { {_previousState = value;} } }

        /// <summary>Internal Acessors for PreviousStateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.PreviousStateTransitionTime { get => this._previousStateTransitionTime; set { {_previousStateTransitionTime = value;} } }

        /// <summary>Internal Acessors for RegistryIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.RegistryIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryIdentityReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RegistryPassword</summary>
        System.Security.SecureString Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword = value ?? null; }

        /// <summary>Internal Acessors for RegistryServer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer = value ?? null; }

        /// <summary>Internal Acessors for RegistryUsername</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername = value ?? null; }

        /// <summary>Internal Acessors for RequiredSlot</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.RequiredSlot { get => this._requiredSlot; set { {_requiredSlot = value;} } }

        /// <summary>Internal Acessors for ResourceFile</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.ResourceFile { get => this._resourceFile; set { {_resourceFile = value;} } }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for StateTransitionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.StateTransitionTime { get => this._stateTransitionTime; set { {_stateTransitionTime = value;} } }

        /// <summary>Internal Acessors for TaskStatistics</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatistics Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatistics { get => (this._taskStatistics = this._taskStatistics ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskStatistics()); set { {_taskStatistics = value;} } }

        /// <summary>Internal Acessors for TaskStatisticsKernelCpuTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsKernelCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).KernelCpuTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).KernelCpuTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for TaskStatisticsLastUpdateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).LastUpdateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).LastUpdateTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for TaskStatisticsReadIoGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsReadIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).ReadIoGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).ReadIoGiB = value ?? default(float); }

        /// <summary>Internal Acessors for TaskStatisticsReadIop</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsReadIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).ReadIop; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).ReadIop = value ?? null; }

        /// <summary>Internal Acessors for TaskStatisticsStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for TaskStatisticsUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).Url = value ?? null; }

        /// <summary>Internal Acessors for TaskStatisticsUserCpuTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsUserCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).UserCpuTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).UserCpuTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for TaskStatisticsWaitTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsWaitTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WaitTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WaitTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for TaskStatisticsWallClockTime</summary>
        global::System.TimeSpan? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WallClockTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WallClockTime = value ?? default(global::System.TimeSpan); }

        /// <summary>Internal Acessors for TaskStatisticsWriteIoGiB</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsWriteIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WriteIoGiB; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WriteIoGiB = value ?? default(float); }

        /// <summary>Internal Acessors for TaskStatisticsWriteIop</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.TaskStatisticsWriteIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WriteIop; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WriteIop = value ?? null; }

        /// <summary>Internal Acessors for Url</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.Url { get => this._url; set { {_url = value;} } }

        /// <summary>Internal Acessors for UserIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); set { {_userIdentity = value;} } }

        /// <summary>Internal Acessors for UserIdentityAutoUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.UserIdentityAutoUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).AutoUser = value ?? null /* model class */; }

        /// <summary>Internal Acessors for UserIdentityUsername</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal.UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username = value ?? null; }

        /// <summary>Backing field for <see cref="MultiInstanceSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings _multiInstanceSetting;

        /// <summary>
        /// An object that indicates that the Task is a multi-instance Task, and contains information about how to run the multi-instance
        /// Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings MultiInstanceSetting { get => (this._multiInstanceSetting = this._multiInstanceSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.MultiInstanceSettings()); }

        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> MultiInstanceSettingCommonResourceFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CommonResourceFile; }

        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string MultiInstanceSettingCoordinationCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).CoordinationCommandLine; }

        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? MultiInstanceSettingNumberOfInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettingsInternal)MultiInstanceSetting).NumberOfInstance; }

        /// <summary>Backing field for <see cref="NodeInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo _nodeInfo;

        /// <summary>Information about the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo NodeInfo { get => (this._nodeInfo = this._nodeInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeInfo()); }

        /// <summary>
        /// An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled
        /// on this Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoAffinityId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).AffinityId; }

        /// <summary>The ID of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoNodeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeId; }

        /// <summary>The URL of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoNodeUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).NodeUrl; }

        /// <summary>The ID of the Pool on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).PoolId; }

        /// <summary>The root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoTaskRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectory; }

        /// <summary>The URL to the root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeInfoTaskRootDirectoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfoInternal)NodeInfo).TaskRootDirectoryUrl; }

        /// <summary>Backing field for <see cref="OutputFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> _outputFile;

        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> OutputFile { get => this._outputFile; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PreProcessingErrorDependencyAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorDependencyAction; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string PreProcessingErrorJobAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditionsInternal)ExitCondition).PreProcessingErrorJobAction; }

        /// <summary>Backing field for <see cref="PreviousState" /> property.</summary>
        private string _previousState;

        /// <summary>
        /// The previous state of the Task. This property is not set if the Task is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string PreviousState { get => this._previousState; }

        /// <summary>Backing field for <see cref="PreviousStateTransitionTime" /> property.</summary>
        private global::System.DateTime? _previousStateTransitionTime;

        /// <summary>
        /// The time at which the Task entered its previous state. This property is not set if the Task is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? PreviousStateTransitionTime { get => this._previousStateTransitionTime; }

        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public System.Security.SecureString RegistryPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryPassword; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryServer; }

        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RegistryUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsInternal)ContainerSetting).RegistryUsername; }

        /// <summary>Backing field for <see cref="RequestId" /> property.</summary>
        private string _requestId;

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string RequestId { get => this._requestId; set => this._requestId = value; }

        /// <summary>Backing field for <see cref="RequiredSlot" /> property.</summary>
        private int? _requiredSlot;

        /// <summary>
        /// The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? RequiredSlot { get => this._requiredSlot; }

        /// <summary>Backing field for <see cref="ResourceFile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> _resourceFile;

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get => this._resourceFile; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The current state of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Backing field for <see cref="StateTransitionTime" /> property.</summary>
        private global::System.DateTime? _stateTransitionTime;

        /// <summary>The time at which the Task entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public global::System.DateTime? StateTransitionTime { get => this._stateTransitionTime; }

        /// <summary>Backing field for <see cref="TaskStatistics" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatistics _taskStatistics;

        /// <summary>Resource usage statistics for the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatistics TaskStatistics { get => (this._taskStatistics = this._taskStatistics ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskStatistics()); }

        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? TaskStatisticsKernelCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).KernelCpuTime; }

        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? TaskStatisticsLastUpdateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).LastUpdateTime; }

        /// <summary>The total gibibytes read from disk by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? TaskStatisticsReadIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).ReadIoGiB; }

        /// <summary>The total number of disk read operations made by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string TaskStatisticsReadIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).ReadIop; }

        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? TaskStatisticsStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).StartTime; }

        /// <summary>The URL of the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string TaskStatisticsUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).Url; }

        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? TaskStatisticsUserCpuTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).UserCpuTime; }

        /// <summary>
        /// The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task
        /// and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent
        /// Task execution.).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? TaskStatisticsWaitTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WaitTime; }

        /// <summary>
        /// The total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a
        /// Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then).
        /// If the Task was retried, this includes the wall clock time of all the Task retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? TaskStatisticsWallClockTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WallClockTime; }

        /// <summary>The total gibibytes written to disk by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public float? TaskStatisticsWriteIoGiB { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WriteIoGiB; }

        /// <summary>The total number of disk write operations made by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string TaskStatisticsWriteIop { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatisticsInternal)TaskStatistics).WriteIop; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>The URL of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string Url { get => this._url; }

        /// <summary>Backing field for <see cref="UserIdentity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity _userIdentity;

        /// <summary>
        /// The user identity under which the Task runs. If omitted, the Task runs as a non-administrative user unique to the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get => (this._userIdentity = this._userIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentity()); }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string UserIdentityUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentityInternal)UserIdentity).Username; }

        /// <summary>Creates an new <see cref="BatchTask" /> instance.</summary>
        public BatchTask()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("DataServiceId", out var __dataServiceIdHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).DataServiceId = System.Linq.Enumerable.FirstOrDefault(__dataServiceIdHeader0) is string __headerDataServiceIdHeader0 ? __headerDataServiceIdHeader0 : (string)null;
            }
            if (headers.TryGetValues("ETag", out var __eTagHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ETag1 = System.Linq.Enumerable.FirstOrDefault(__eTagHeader1) is string __headerETagHeader1 ? __headerETagHeader1 : (string)null;
            }
            if (headers.TryGetValues("Last-Modified", out var __lastModifiedHeader2))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).LastModified1 = System.Linq.Enumerable.FirstOrDefault(__lastModifiedHeader2) is string __headerLastModifiedHeader2 ? __headerLastModifiedHeader2 : (string)null;
            }
            if (headers.TryGetValues("client-request-id", out var __clientRequestIdHeader3))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).ClientRequestId = System.Linq.Enumerable.FirstOrDefault(__clientRequestIdHeader3) is string __headerClientRequestIdHeader3 ? __headerClientRequestIdHeader3 : (string)null;
            }
            if (headers.TryGetValues("request-id", out var __requestIdHeader4))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInternal)this).RequestId = System.Linq.Enumerable.FirstOrDefault(__requestIdHeader4) is string __headerRequestIdHeader4 ? __headerRequestIdHeader4 : (string)null;
            }
        }
    }
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing.
    public partial interface IBatchTask :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.",
        SerializedName = @"affinityId",
        PossibleTypes = new [] { typeof(string) })]
        string AffinityInfoAffinityId { get;  }
        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.",
        SerializedName = @"applicationPackageReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get;  }
        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.",
        SerializedName = @"access",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("job")]
        System.Collections.Generic.List<string> AuthenticationTokenSettingAccess { get;  }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get;  }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientRequestId { get; set; }
        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string CommandLine { get;  }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? ConstraintRetentionTime { get; set; }
        /// <summary>The ID of the container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of the container.",
        SerializedName = @"containerId",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoContainerId { get;  }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by ""docker inspect"".",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoError { get;  }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by ""docker inspect"".",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerInfoState { get;  }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get;  }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingContainerRunOption { get;  }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerSettingImageName { get;  }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get;  }
        /// <summary>The creation time of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The creation time of the Task.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTime { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"DataServiceId",
        PossibleTypes = new [] { typeof(string) })]
        string DataServiceId { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string DefaultDependencyAction { get;  }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string DefaultJobAction { get;  }
        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.",
        SerializedName = @"taskIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DependOnTaskId { get;  }
        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent Task can be scheduled.",
        SerializedName = @"taskIdRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> DependOnTaskIdRange { get;  }
        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>
        /// The ETag of the Task. This is an opaque string. You can use it to detect whether the Task has changed between requests.
        /// In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody
        /// else has modified the Task in the meantime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ETag of the Task. This is an opaque string. You can use it to detect whether the Task has changed between requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody else has modified the Task in the meantime.",
        SerializedName = @"eTag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"ETag",
        PossibleTypes = new [] { typeof(string) })]
        string ETag1 { get; set; }
        /// <summary>A list of environment variable settings for the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of environment variable settings for the Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get;  }
        /// <summary>
        /// The time at which the Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Task completed. This property is set only if the Task is in the Completed state.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoEndTime { get;  }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed
        /// state. In general, the exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination
        /// via the API) you may see an operating system-defined exit code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.",
        SerializedName = @"exitCode",
        PossibleTypes = new [] { typeof(int) })]
        int? ExecutionInfoExitCode { get;  }
        /// <summary>
        /// The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property
        /// is set only if the requeueCount is nonzero.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property is set only if the requeueCount is nonzero.",
        SerializedName = @"lastRequeueTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoLastRequeueTime { get;  }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The most recent time at which a retry of the Task started running. This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.",
        SerializedName = @"lastRetryTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoLastRetryTime { get;  }
        /// <summary>
        /// The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes
        /// Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that
        /// running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued
        /// for these reasons.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued for these reasons.",
        SerializedName = @"requeueCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExecutionInfoRequeueCount { get;  }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property.",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string ExecutionInfoResult { get;  }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.",
        SerializedName = @"retryCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExecutionInfoRetryCount { get;  }
        /// <summary>
        /// The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource
        /// files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
        /// the Task has been restarted or retried, this is the most recent time at which the Task started running. This property
        /// is present only for Tasks that are in the running or completed state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If the Task has been restarted or retried, this is the most recent time at which the Task started running. This property is present only for Tasks that are in the running or completed state.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExecutionInfoStartTime { get;  }
        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of individual Task exit codes and how the Batch service should respond to them.",
        SerializedName = @"exitCodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitConditionExitCode { get;  }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of Task exit code ranges and how the Batch service should respond to them.",
        SerializedName = @"exitCodeRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitConditionExitCodeRange { get;  }
        /// <summary>The category of the Task error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The category of the Task error.",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get;  }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoCode { get;  }
        /// <summary>A list of additional details related to the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of additional details related to the error.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get;  }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A message describing the Task error, intended to be suitable for display in a user interface.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string FailureInfoMessage { get;  }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string FileUploadErrorDependencyAction { get;  }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string FileUploadErrorJobAction { get;  }
        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityReferenceResourceId { get;  }
        /// <summary>The last modified time of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The last modified time of the Task.",
        SerializedName = @"lastModified",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModified { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Last-Modified",
        PossibleTypes = new [] { typeof(string) })]
        string LastModified1 { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory).  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"commonResourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> MultiInstanceSettingCommonResourceFile { get;  }
        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command. A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.",
        SerializedName = @"coordinationCommandLine",
        PossibleTypes = new [] { typeof(string) })]
        string MultiInstanceSettingCoordinationCommandLine { get;  }
        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of Compute Nodes required by the Task. If omitted, the default is 1.",
        SerializedName = @"numberOfInstances",
        PossibleTypes = new [] { typeof(int) })]
        int? MultiInstanceSettingNumberOfInstance { get;  }
        /// <summary>
        /// An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled
        /// on this Compute Node.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled on this Compute Node.",
        SerializedName = @"affinityId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoAffinityId { get;  }
        /// <summary>The ID of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of the Compute Node on which the Task ran.",
        SerializedName = @"nodeId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoNodeId { get;  }
        /// <summary>The URL of the Compute Node on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the Compute Node on which the Task ran.",
        SerializedName = @"nodeUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoNodeUrl { get;  }
        /// <summary>The ID of the Pool on which the Task ran.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of the Pool on which the Task ran.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoPoolId { get;  }
        /// <summary>The root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The root directory of the Task on the Compute Node.",
        SerializedName = @"taskRootDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoTaskRootDirectory { get;  }
        /// <summary>The URL to the root directory of the Task on the Compute Node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL to the root directory of the Task on the Compute Node.",
        SerializedName = @"taskRootDirectoryUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NodeInfoTaskRootDirectoryUrl { get;  }
        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.",
        SerializedName = @"outputFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> OutputFile { get;  }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string PreProcessingErrorDependencyAction { get;  }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string PreProcessingErrorJobAction { get;  }
        /// <summary>
        /// The previous state of the Task. This property is not set if the Task is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The previous state of the Task. This property is not set if the Task is in its initial Active state.",
        SerializedName = @"previousState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "preparing", "running", "completed")]
        string PreviousState { get;  }
        /// <summary>
        /// The time at which the Task entered its previous state. This property is not set if the Task is in its initial Active state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Task entered its previous state. This property is not set if the Task is in its initial Active state.",
        SerializedName = @"previousStateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PreviousStateTransitionTime { get;  }
        /// <summary>The password to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString RegistryPassword { get;  }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryServer { get;  }
        /// <summary>The user name to log into the registry server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryUsername { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"request-id",
        PossibleTypes = new [] { typeof(string) })]
        string RequestId { get; set; }
        /// <summary>
        /// The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.",
        SerializedName = @"requiredSlots",
        PossibleTypes = new [] { typeof(int) })]
        int? RequiredSlot { get;  }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get;  }
        /// <summary>The current state of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The current state of the Task.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "preparing", "running", "completed")]
        string State { get;  }
        /// <summary>The time at which the Task entered its current state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the Task entered its current state.",
        SerializedName = @"stateTransitionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StateTransitionTime { get;  }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.",
        SerializedName = @"kernelCPUTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? TaskStatisticsKernelCpuTime { get;  }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
        SerializedName = @"lastUpdateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TaskStatisticsLastUpdateTime { get;  }
        /// <summary>The total gibibytes read from disk by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total gibibytes read from disk by the Task.",
        SerializedName = @"readIOGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? TaskStatisticsReadIoGiB { get;  }
        /// <summary>The total number of disk read operations made by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of disk read operations made by the Task.",
        SerializedName = @"readIOps",
        PossibleTypes = new [] { typeof(string) })]
        string TaskStatisticsReadIop { get;  }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The start time of the time range covered by the statistics.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TaskStatisticsStartTime { get;  }
        /// <summary>The URL of the statistics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the statistics.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string TaskStatisticsUrl { get;  }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.",
        SerializedName = @"userCPUTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? TaskStatisticsUserCpuTime { get;  }
        /// <summary>
        /// The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task
        /// and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent
        /// Task execution.).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.).",
        SerializedName = @"waitTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? TaskStatisticsWaitTime { get;  }
        /// <summary>
        /// The total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a
        /// Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then).
        /// If the Task was retried, this includes the wall clock time of all the Task retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.",
        SerializedName = @"wallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? TaskStatisticsWallClockTime { get;  }
        /// <summary>The total gibibytes written to disk by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total gibibytes written to disk by the Task.",
        SerializedName = @"writeIOGiB",
        PossibleTypes = new [] { typeof(float) })]
        float? TaskStatisticsWriteIoGiB { get;  }
        /// <summary>The total number of disk write operations made by the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total number of disk write operations made by the Task.",
        SerializedName = @"writeIOps",
        PossibleTypes = new [] { typeof(string) })]
        string TaskStatisticsWriteIop { get;  }
        /// <summary>The URL of the Task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The URL of the Task.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get;  }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string UserIdentityUsername { get;  }

    }
    /// Batch will retry Tasks when a recovery operation is triggered on a Node.
    /// Examples of recovery operations include (but are not limited to) when an
    /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
    /// Retries due to recovery operations are independent of and are not counted
    /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
    /// retry due to a recovery operation may occur. Because of this, all Tasks should
    /// be idempotent. This means Tasks need to tolerate being interrupted and
    /// restarted without causing any corruption or duplicate data. The best practice
    /// for long running Tasks is to use some form of checkpointing.
    internal partial interface IBatchTaskInternal

    {
        /// <summary>
        /// A locality hint that can be used by the Batch service to select a Compute Node on which to start the new Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchAffinityInfo AffinityInfo { get; set; }
        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        string AffinityInfoAffinityId { get; set; }
        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference> ApplicationPackageReference { get; set; }
        /// <summary>
        /// The settings for an authentication token that the Task can use to perform Batch service operations. If this property is
        /// set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service
        /// operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
        /// variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request
        /// Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings AuthenticationTokenSetting { get; set; }
        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("job")]
        System.Collections.Generic.List<string> AuthenticationTokenSettingAccess { get; set; }
        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        string AutoUserElevationLevel { get; set; }
        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        string AutoUserScope { get; set; }

        string ClientRequestId { get; set; }
        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        string CommandLine { get; set; }
        /// <summary>The execution constraints that apply to this Task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints Constraint { get; set; }
        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        int? ConstraintMaxTaskRetryCount { get; set; }
        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        global::System.TimeSpan? ConstraintMaxWallClockTime { get; set; }
        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        global::System.TimeSpan? ConstraintRetentionTime { get; set; }
        /// <summary>The ID of the container.</summary>
        string ContainerInfoContainerId { get; set; }
        /// <summary>
        /// Detailed error information about the container. This is the detailed error string from the Docker service, if available.
        /// It is equivalent to the error field returned by "docker inspect".
        /// </summary>
        string ContainerInfoError { get; set; }
        /// <summary>
        /// The state of the container. This is the state of the container according to the Docker service. It is equivalent to the
        /// status field returned by "docker inspect".
        /// </summary>
        string ContainerInfoState { get; set; }
        /// <summary>
        /// The settings for the container under which the Task runs. If the Pool that will run this Task has containerConfiguration
        /// set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must
        /// not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
        /// directories on the node) are mapped into the container, all Task environment variables are mapped into the container,
        /// and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR
        /// might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings ContainerSetting { get; set; }
        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry> ContainerSettingContainerHostBatchBindMount { get; set; }
        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        string ContainerSettingContainerRunOption { get; set; }
        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        string ContainerSettingImageName { get; set; }
        /// <summary>
        /// The private registry which contains the container Image. This setting can be omitted if was already provided at Pool creation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference ContainerSettingRegistry { get; set; }
        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        string ContainerSettingWorkingDirectory { get; set; }
        /// <summary>The creation time of the Task.</summary>
        global::System.DateTime? CreationTime { get; set; }

        string DataServiceId { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string DefaultDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string DefaultJobAction { get; set; }
        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        System.Collections.Generic.List<string> DependOnTaskId { get; set; }
        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange> DependOnTaskIdRange { get; set; }
        /// <summary>
        /// The Tasks that this Task depends on. This Task will not be scheduled until all Tasks that it depends on have completed
        /// successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskDependencies DependsOn { get; set; }
        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The ETag of the Task. This is an opaque string. You can use it to detect whether the Task has changed between requests.
        /// In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody
        /// else has modified the Task in the meantime.
        /// </summary>
        string ETag { get; set; }

        string ETag1 { get; set; }
        /// <summary>A list of environment variable settings for the Task.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting> EnvironmentSetting { get; set; }
        /// <summary>Information about the execution of the Task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskExecutionInfo ExecutionInfo { get; set; }
        /// <summary>
        /// Information about the container under which the Task is executing. This property is set only if the Task runs in a container
        /// context.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo ExecutionInfoContainerInfo { get; set; }
        /// <summary>
        /// The time at which the Task completed. This property is set only if the Task is in the Completed state.
        /// </summary>
        global::System.DateTime? ExecutionInfoEndTime { get; set; }
        /// <summary>
        /// The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed
        /// state. In general, the exit code for a process reflects the specific convention implemented by the application developer
        /// for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention
        /// used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination
        /// via the API) you may see an operating system-defined exit code.
        /// </summary>
        int? ExecutionInfoExitCode { get; set; }
        /// <summary>
        /// Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo ExecutionInfoFailureInfo { get; set; }
        /// <summary>
        /// The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property
        /// is set only if the requeueCount is nonzero.
        /// </summary>
        global::System.DateTime? ExecutionInfoLastRequeueTime { get; set; }
        /// <summary>
        /// The most recent time at which a retry of the Task started running. This element is present only if the Task was retried
        /// (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has
        /// been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime
        /// is updated but the lastRetryTime is not.
        /// </summary>
        global::System.DateTime? ExecutionInfoLastRetryTime { get; set; }
        /// <summary>
        /// The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes
        /// Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that
        /// running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued
        /// for these reasons.
        /// </summary>
        int? ExecutionInfoRequeueCount { get; set; }
        /// <summary>
        /// The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo
        /// property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("success", "failure")]
        string ExecutionInfoResult { get; set; }
        /// <summary>
        /// The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are
        /// retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will
        /// retry the Task up to the limit specified by the constraints.
        /// </summary>
        int? ExecutionInfoRetryCount { get; set; }
        /// <summary>
        /// The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource
        /// files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
        /// the Task has been restarted or retried, this is the most recent time at which the Task started running. This property
        /// is present only for Tasks that are in the running or completed state.
        /// </summary>
        global::System.DateTime? ExecutionInfoStartTime { get; set; }
        /// <summary>How the Batch service should respond when the Task completes.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitConditions ExitCondition { get; set; }
        /// <summary>
        /// How the Batch service should respond if the Task fails with an exit condition not covered by any of the other properties.
        /// This value is used if the Task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection,
        /// with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError
        /// property is not present. If you want non-default behavior on exit code 0, you must list it explicitly using the exitCodes
        /// or exitCodeRanges collection.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitConditionDefault { get; set; }
        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping> ExitConditionExitCode { get; set; }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping> ExitConditionExitCodeRange { get; set; }
        /// <summary>
        /// How the Batch service should respond if a file upload error occurs. If the Task exited with an exit code that was specified
        /// via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code
        /// takes precedence.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitConditionFileUploadError { get; set; }
        /// <summary>
        /// How the Batch service should respond if the Task fails to start due to an error.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitOptions ExitConditionPreProcessingError { get; set; }
        /// <summary>The category of the Task error.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("usererror", "servererror")]
        string FailureInfoCategory { get; set; }
        /// <summary>
        /// An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        string FailureInfoCode { get; set; }
        /// <summary>A list of additional details related to the error.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair> FailureInfoDetail { get; set; }
        /// <summary>
        /// A message describing the Task error, intended to be suitable for display in a user interface.
        /// </summary>
        string FailureInfoMessage { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string FileUploadErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string FileUploadErrorJobAction { get; set; }
        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters.
        /// </summary>
        string Id { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string IdentityReferenceResourceId { get; set; }
        /// <summary>The last modified time of the Task.</summary>
        global::System.DateTime? LastModified { get; set; }

        string LastModified1 { get; set; }
        /// <summary>
        /// An object that indicates that the Task is a multi-instance Task, and contains information about how to run the multi-instance
        /// Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMultiInstanceSettings MultiInstanceSetting { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> MultiInstanceSettingCommonResourceFile { get; set; }
        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        string MultiInstanceSettingCoordinationCommandLine { get; set; }
        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        int? MultiInstanceSettingNumberOfInstance { get; set; }
        /// <summary>Information about the Compute Node on which the Task ran.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInfo NodeInfo { get; set; }
        /// <summary>
        /// An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled
        /// on this Compute Node.
        /// </summary>
        string NodeInfoAffinityId { get; set; }
        /// <summary>The ID of the Compute Node on which the Task ran.</summary>
        string NodeInfoNodeId { get; set; }
        /// <summary>The URL of the Compute Node on which the Task ran.</summary>
        string NodeInfoNodeUrl { get; set; }
        /// <summary>The ID of the Pool on which the Task ran.</summary>
        string NodeInfoPoolId { get; set; }
        /// <summary>The root directory of the Task on the Compute Node.</summary>
        string NodeInfoTaskRootDirectory { get; set; }
        /// <summary>The URL to the root directory of the Task on the Compute Node.</summary>
        string NodeInfoTaskRootDirectoryUrl { get; set; }
        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile> OutputFile { get; set; }
        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        string PreProcessingErrorDependencyAction { get; set; }
        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        string PreProcessingErrorJobAction { get; set; }
        /// <summary>
        /// The previous state of the Task. This property is not set if the Task is in its initial Active state.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "preparing", "running", "completed")]
        string PreviousState { get; set; }
        /// <summary>
        /// The time at which the Task entered its previous state. This property is not set if the Task is in its initial Active state.
        /// </summary>
        global::System.DateTime? PreviousStateTransitionTime { get; set; }
        /// <summary>
        /// The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference RegistryIdentityReference { get; set; }
        /// <summary>The password to log into the registry server.</summary>
        System.Security.SecureString RegistryPassword { get; set; }
        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        string RegistryServer { get; set; }
        /// <summary>The user name to log into the registry server.</summary>
        string RegistryUsername { get; set; }

        string RequestId { get; set; }
        /// <summary>
        /// The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        int? RequiredSlot { get; set; }
        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile> ResourceFile { get; set; }
        /// <summary>The current state of the Task.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("active", "preparing", "running", "completed")]
        string State { get; set; }
        /// <summary>The time at which the Task entered its current state.</summary>
        global::System.DateTime? StateTransitionTime { get; set; }
        /// <summary>Resource usage statistics for the Task.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskStatistics TaskStatistics { get; set; }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
        /// </summary>
        global::System.TimeSpan? TaskStatisticsKernelCpuTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        /// </summary>
        global::System.DateTime? TaskStatisticsLastUpdateTime { get; set; }
        /// <summary>The total gibibytes read from disk by the Task.</summary>
        float? TaskStatisticsReadIoGiB { get; set; }
        /// <summary>The total number of disk read operations made by the Task.</summary>
        string TaskStatisticsReadIop { get; set; }
        /// <summary>The start time of the time range covered by the statistics.</summary>
        global::System.DateTime? TaskStatisticsStartTime { get; set; }
        /// <summary>The URL of the statistics.</summary>
        string TaskStatisticsUrl { get; set; }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
        /// </summary>
        global::System.TimeSpan? TaskStatisticsUserCpuTime { get; set; }
        /// <summary>
        /// The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task
        /// and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent
        /// Task execution.).
        /// </summary>
        global::System.TimeSpan? TaskStatisticsWaitTime { get; set; }
        /// <summary>
        /// The total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a
        /// Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then).
        /// If the Task was retried, this includes the wall clock time of all the Task retries.
        /// </summary>
        global::System.TimeSpan? TaskStatisticsWallClockTime { get; set; }
        /// <summary>The total gibibytes written to disk by the Task.</summary>
        float? TaskStatisticsWriteIoGiB { get; set; }
        /// <summary>The total number of disk write operations made by the Task.</summary>
        string TaskStatisticsWriteIop { get; set; }
        /// <summary>The URL of the Task.</summary>
        string Url { get; set; }
        /// <summary>
        /// The user identity under which the Task runs. If omitted, the Task runs as a non-administrative user unique to the Task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity UserIdentity { get; set; }
        /// <summary>
        /// The auto user under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify
        /// one but not both.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification UserIdentityAutoUser { get; set; }
        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        string UserIdentityUsername { get; set; }

    }
}