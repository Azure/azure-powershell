// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>
    /// Specifies details of a Job Manager Task.
    /// The Job Manager Task is automatically started when the Job is created. The
    /// Batch service tries to schedule the Job Manager Task before any other Tasks in
    /// the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where
    /// Job Manager Tasks are running for as long as possible (that is, Compute Nodes
    /// running 'normal' Tasks are removed before Compute Nodes running Job Manager
    /// Tasks). When a Job Manager Task fails and needs to be restarted, the system
    /// tries to schedule it at the highest priority. If there are no idle Compute
    /// Nodes available, the system may terminate one of the running Tasks in the Pool
    /// and return it to the queue in order to make room for the Job Manager Task to
    /// restart. Note that a Job Manager Task in one Job does not have priority over
    /// Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For
    /// example, if a Job Manager in a priority 0 Job needs to be restarted, it will
    /// not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery
    /// operation is triggered on a Node. Examples of recovery operations include (but
    /// are not limited to) when an unhealthy Node is rebooted or a Compute Node
    /// disappeared due to host failure. Retries due to recovery operations are
    /// independent of and are not counted against the maxTaskRetryCount. Even if the
    /// maxTaskRetryCount is 0, an internal retry due to a recovery operation may
    /// occur. Because of this, all Tasks should be idempotent. This means Tasks need
    /// to tolerate being interrupted and restarted without causing any corruption or
    /// duplicate data. The best practice for long running Tasks is to use some form of
    /// checkpointing.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(BatchJobManagerTaskUpdateTypeConverter))]
    public partial class BatchJobManagerTaskUpdate
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTaskUpdate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchJobManagerTaskUpdate(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("Constraint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Constraint = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints) content.GetValueForProperty("Constraint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Constraint, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraintsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("AuthenticationTokenSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings) content.GetValueForProperty("AuthenticationTokenSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("OutputFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).OutputFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>) content.GetValueForProperty("OutputFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).OutputFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).EnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("RequiredSlot"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RequiredSlot = (int?) content.GetValueForProperty("RequiredSlot",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RequiredSlot, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("KillJobOnCompletion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).KillJobOnCompletion = (bool?) content.GetValueForProperty("KillJobOnCompletion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).KillJobOnCompletion, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RunExclusive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RunExclusive = (bool?) content.GetValueForProperty("RunExclusive",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RunExclusive, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("AllowLowPriorityNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AllowLowPriorityNode = (bool?) content.GetValueForProperty("AllowLowPriorityNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AllowLowPriorityNode, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("AuthenticationTokenSettingAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSettingAccess = (System.Collections.Generic.List<string>) content.GetValueForProperty("AuthenticationTokenSettingAccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSettingAccess, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("ConstraintMaxWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintMaxWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintRetentionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintRetentionTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintRetentionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintRetentionTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxTaskRetryCount = (int?) content.GetValueForProperty("ConstraintMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTaskUpdate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchJobManagerTaskUpdate(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettingsUpdate) content.GetValueForProperty("ContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("Constraint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Constraint = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskConstraints) content.GetValueForProperty("Constraint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Constraint, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskConstraintsTypeConverter.ConvertFrom);
            }
            if (content.Contains("UserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("UserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("AuthenticationTokenSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAuthenticationTokenSettings) content.GetValueForProperty("AuthenticationTokenSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AuthenticationTokenSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("DisplayName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).DisplayName = (string) content.GetValueForProperty("DisplayName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).DisplayName, global::System.Convert.ToString);
            }
            if (content.Contains("CommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).CommandLine = (string) content.GetValueForProperty("CommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).CommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("ResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("OutputFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).OutputFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>) content.GetValueForProperty("OutputFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).OutputFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.OutputFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("EnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).EnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("EnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).EnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("RequiredSlot"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RequiredSlot = (int?) content.GetValueForProperty("RequiredSlot",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RequiredSlot, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("KillJobOnCompletion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).KillJobOnCompletion = (bool?) content.GetValueForProperty("KillJobOnCompletion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).KillJobOnCompletion, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("RunExclusive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RunExclusive = (bool?) content.GetValueForProperty("RunExclusive",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RunExclusive, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ApplicationPackageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ApplicationPackageReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>) content.GetValueForProperty("ApplicationPackageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ApplicationPackageReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchApplicationPackageReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("AllowLowPriorityNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AllowLowPriorityNode = (bool?) content.GetValueForProperty("AllowLowPriorityNode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AllowLowPriorityNode, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("AuthenticationTokenSettingAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSettingAccess = (System.Collections.Generic.List<string>) content.GetValueForProperty("AuthenticationTokenSettingAccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AuthenticationTokenSettingAccess, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("ConstraintMaxWallClockTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxWallClockTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintMaxWallClockTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxWallClockTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintRetentionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintRetentionTime = (global::System.TimeSpan?) content.GetValueForProperty("ConstraintRetentionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintRetentionTime, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("ConstraintMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxTaskRetryCount = (int?) content.GetValueForProperty("ConstraintMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).ConstraintMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdateInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTaskUpdate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdate" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdate DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchJobManagerTaskUpdate(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobManagerTaskUpdate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdate" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdate DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchJobManagerTaskUpdate(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchJobManagerTaskUpdate" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchJobManagerTaskUpdate" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTaskUpdate FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Specifies details of a Job Manager Task.
    /// The Job Manager Task is automatically started when the Job is created. The
    /// Batch service tries to schedule the Job Manager Task before any other Tasks in
    /// the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where
    /// Job Manager Tasks are running for as long as possible (that is, Compute Nodes
    /// running 'normal' Tasks are removed before Compute Nodes running Job Manager
    /// Tasks). When a Job Manager Task fails and needs to be restarted, the system
    /// tries to schedule it at the highest priority. If there are no idle Compute
    /// Nodes available, the system may terminate one of the running Tasks in the Pool
    /// and return it to the queue in order to make room for the Job Manager Task to
    /// restart. Note that a Job Manager Task in one Job does not have priority over
    /// Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For
    /// example, if a Job Manager in a priority 0 Job needs to be restarted, it will
    /// not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery
    /// operation is triggered on a Node. Examples of recovery operations include (but
    /// are not limited to) when an unhealthy Node is rebooted or a Compute Node
    /// disappeared due to host failure. Retries due to recovery operations are
    /// independent of and are not counted against the maxTaskRetryCount. Even if the
    /// maxTaskRetryCount is 0, an internal retry due to a recovery operation may
    /// occur. Because of this, all Tasks should be idempotent. This means Tasks need
    /// to tolerate being interrupted and restarted without causing any corruption or
    /// duplicate data. The best practice for long running Tasks is to use some form of
    /// checkpointing.
    [System.ComponentModel.TypeConverter(typeof(BatchJobManagerTaskUpdateTypeConverter))]
    public partial interface IBatchJobManagerTaskUpdate

    {

    }
}