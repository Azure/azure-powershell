// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;

    /// <summary>A Compute Node in the Batch service.</summary>
    [System.ComponentModel.TypeConverter(typeof(BatchNodeTypeConverter))]
    public partial class BatchNode
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNode"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal BatchNode(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo) content.GetValueForProperty("StartTaskInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("EndpointConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfiguration) content.GetValueForProperty("EndpointConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeEndpointConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NodeAgentInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfo) content.GetValueForProperty("NodeAgentInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeAgentInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("VirtualMachineInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfo) content.GetValueForProperty("VirtualMachineInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Url"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Url = (string) content.GetValueForProperty("Url",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Url, global::System.Convert.ToString);
            }
            if (content.Contains("State"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).State = (string) content.GetValueForProperty("State",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).State, global::System.Convert.ToString);
            }
            if (content.Contains("SchedulingState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).SchedulingState = (string) content.GetValueForProperty("SchedulingState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).SchedulingState, global::System.Convert.ToString);
            }
            if (content.Contains("StateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("StateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("LastBootTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastBootTime = (global::System.DateTime?) content.GetValueForProperty("LastBootTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastBootTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("AllocationTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AllocationTime = (global::System.DateTime?) content.GetValueForProperty("AllocationTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AllocationTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("IPAddress"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IPAddress = (string) content.GetValueForProperty("IPAddress",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IPAddress, global::System.Convert.ToString);
            }
            if (content.Contains("AffinityId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AffinityId = (string) content.GetValueForProperty("AffinityId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AffinityId, global::System.Convert.ToString);
            }
            if (content.Contains("VMSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VMSize = (string) content.GetValueForProperty("VMSize",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VMSize, global::System.Convert.ToString);
            }
            if (content.Contains("TotalTasksRun"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksRun = (int?) content.GetValueForProperty("TotalTasksRun",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksRun, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RunningTasksCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTasksCount = (int?) content.GetValueForProperty("RunningTasksCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTasksCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RunningTaskSlotsCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTaskSlotsCount = (int?) content.GetValueForProperty("RunningTaskSlotsCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTaskSlotsCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TotalTasksSucceeded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksSucceeded = (int?) content.GetValueForProperty("TotalTasksSucceeded",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksSucceeded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RecentTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RecentTask = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo>) content.GetValueForProperty("RecentTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RecentTask, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskInfoTypeConverter.ConvertFrom));
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("Error"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Error = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError>) content.GetValueForProperty("Error",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Error, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeErrorTypeConverter.ConvertFrom));
            }
            if (content.Contains("IsDedicated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IsDedicated = (bool?) content.GetValueForProperty("IsDedicated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IsDedicated, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastModified = (string) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastModified, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskInfoContainerInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoContainerInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo) content.GetValueForProperty("StartTaskInfoContainerInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoContainerInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskInfoFailureInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoFailureInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo) content.GetValueForProperty("StartTaskInfoFailureInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoFailureInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoState = (string) content.GetValueForProperty("StartTaskInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskInfoStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoStartTime = (global::System.DateTime?) content.GetValueForProperty("StartTaskInfoStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartTaskInfoEndTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoEndTime = (global::System.DateTime?) content.GetValueForProperty("StartTaskInfoEndTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoEndTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartTaskInfoExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoExitCode = (int?) content.GetValueForProperty("StartTaskInfoExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoExitCode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskInfoRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoRetryCount = (int?) content.GetValueForProperty("StartTaskInfoRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskInfoLastRetryTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoLastRetryTime = (global::System.DateTime?) content.GetValueForProperty("StartTaskInfoLastRetryTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoLastRetryTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartTaskInfoResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoResult = (string) content.GetValueForProperty("StartTaskInfoResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoResult, global::System.Convert.ToString);
            }
            if (content.Contains("EndpointConfigurationInboundEndpoint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfigurationInboundEndpoint = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint>) content.GetValueForProperty("EndpointConfigurationInboundEndpoint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfigurationInboundEndpoint, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.InboundEndpointTypeConverter.ConvertFrom));
            }
            if (content.Contains("NodeAgentInfoVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoVersion = (string) content.GetValueForProperty("NodeAgentInfoVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoVersion, global::System.Convert.ToString);
            }
            if (content.Contains("NodeAgentInfoLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("NodeAgentInfoLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("VirtualMachineInfoImageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoImageReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchVMImageReference) content.GetValueForProperty("VirtualMachineInfoImageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoImageReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchVMImageReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("VirtualMachineInfoScaleSetVMResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoScaleSetVMResourceId = (string) content.GetValueForProperty("VirtualMachineInfoScaleSetVMResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoScaleSetVMResourceId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoContainerId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoContainerId = (string) content.GetValueForProperty("ContainerInfoContainerId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoContainerId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoState = (string) content.GetValueForProperty("ContainerInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoError = (string) content.GetValueForProperty("ContainerInfoError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoError, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCategory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCategory = (string) content.GetValueForProperty("FailureInfoCategory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCategory, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCode = (string) content.GetValueForProperty("FailureInfoCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCode, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoMessage = (string) content.GetValueForProperty("FailureInfoMessage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoDetail"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoDetail = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("FailureInfoDetail",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoDetail, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            if (content.Contains("ImageReferencePublisher"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferencePublisher = (string) content.GetValueForProperty("ImageReferencePublisher",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferencePublisher, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceOffer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceOffer = (string) content.GetValueForProperty("ImageReferenceOffer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceOffer, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceSku"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSku = (string) content.GetValueForProperty("ImageReferenceSku",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSku, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVersion = (string) content.GetValueForProperty("ImageReferenceVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVersion, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceVirtualMachineImageId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVirtualMachineImageId = (string) content.GetValueForProperty("ImageReferenceVirtualMachineImageId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVirtualMachineImageId, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceExactVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceExactVersion = (string) content.GetValueForProperty("ImageReferenceExactVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceExactVersion, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceSharedGalleryImageId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSharedGalleryImageId = (string) content.GetValueForProperty("ImageReferenceSharedGalleryImageId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSharedGalleryImageId, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceCommunityGalleryImageId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceCommunityGalleryImageId = (string) content.GetValueForProperty("ImageReferenceCommunityGalleryImageId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceCommunityGalleryImageId, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNode"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal BatchNode(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("StartTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTask = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTask) content.GetValueForProperty("StartTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTask, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchStartTaskInfo) content.GetValueForProperty("StartTaskInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchStartTaskInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("EndpointConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeEndpointConfiguration) content.GetValueForProperty("EndpointConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfiguration, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeEndpointConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("NodeAgentInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeAgentInfo) content.GetValueForProperty("NodeAgentInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeAgentInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("VirtualMachineInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineInfo) content.GetValueForProperty("VirtualMachineInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.VirtualMachineInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Url"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Url = (string) content.GetValueForProperty("Url",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Url, global::System.Convert.ToString);
            }
            if (content.Contains("State"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).State = (string) content.GetValueForProperty("State",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).State, global::System.Convert.ToString);
            }
            if (content.Contains("SchedulingState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).SchedulingState = (string) content.GetValueForProperty("SchedulingState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).SchedulingState, global::System.Convert.ToString);
            }
            if (content.Contains("StateTransitionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StateTransitionTime = (global::System.DateTime?) content.GetValueForProperty("StateTransitionTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StateTransitionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("LastBootTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastBootTime = (global::System.DateTime?) content.GetValueForProperty("LastBootTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastBootTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("AllocationTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AllocationTime = (global::System.DateTime?) content.GetValueForProperty("AllocationTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AllocationTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("IPAddress"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IPAddress = (string) content.GetValueForProperty("IPAddress",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IPAddress, global::System.Convert.ToString);
            }
            if (content.Contains("AffinityId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AffinityId = (string) content.GetValueForProperty("AffinityId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AffinityId, global::System.Convert.ToString);
            }
            if (content.Contains("VMSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VMSize = (string) content.GetValueForProperty("VMSize",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VMSize, global::System.Convert.ToString);
            }
            if (content.Contains("TotalTasksRun"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksRun = (int?) content.GetValueForProperty("TotalTasksRun",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksRun, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RunningTasksCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTasksCount = (int?) content.GetValueForProperty("RunningTasksCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTasksCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RunningTaskSlotsCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTaskSlotsCount = (int?) content.GetValueForProperty("RunningTaskSlotsCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RunningTaskSlotsCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TotalTasksSucceeded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksSucceeded = (int?) content.GetValueForProperty("TotalTasksSucceeded",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).TotalTasksSucceeded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RecentTask"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RecentTask = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo>) content.GetValueForProperty("RecentTask",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RecentTask, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskInfo>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskInfoTypeConverter.ConvertFrom));
            }
            if (content.Contains("CertificateReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).CertificateReference = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>) content.GetValueForProperty("CertificateReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).CertificateReference, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchCertificateReferenceTypeConverter.ConvertFrom));
            }
            if (content.Contains("Error"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Error = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError>) content.GetValueForProperty("Error",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).Error, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeError>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeErrorTypeConverter.ConvertFrom));
            }
            if (content.Contains("IsDedicated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IsDedicated = (bool?) content.GetValueForProperty("IsDedicated",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IsDedicated, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ETag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ETag = (string) content.GetValueForProperty("ETag",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ETag, global::System.Convert.ToString);
            }
            if (content.Contains("LastModified"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastModified = (string) content.GetValueForProperty("LastModified",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).LastModified, global::System.Convert.ToString);
            }
            if (content.Contains("ClientRequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ClientRequestId = (string) content.GetValueForProperty("ClientRequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ClientRequestId, global::System.Convert.ToString);
            }
            if (content.Contains("RequestId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RequestId = (string) content.GetValueForProperty("RequestId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RequestId, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskUserIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskUserIdentity = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserIdentity) content.GetValueForProperty("StartTaskUserIdentity",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskUserIdentity, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.UserIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskContainerSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskContainerSetting = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerSettings) content.GetValueForProperty("StartTaskContainerSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskContainerSetting, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskCommandLine"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskCommandLine = (string) content.GetValueForProperty("StartTaskCommandLine",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskCommandLine, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskResourceFile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskResourceFile = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>) content.GetValueForProperty("StartTaskResourceFile",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskResourceFile, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ResourceFileTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskEnvironmentSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskEnvironmentSetting = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>) content.GetValueForProperty("StartTaskEnvironmentSetting",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskEnvironmentSetting, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.EnvironmentSettingTypeConverter.ConvertFrom));
            }
            if (content.Contains("StartTaskMaxTaskRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskMaxTaskRetryCount = (int?) content.GetValueForProperty("StartTaskMaxTaskRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskMaxTaskRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskWaitForSuccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskWaitForSuccess = (bool?) content.GetValueForProperty("StartTaskWaitForSuccess",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskWaitForSuccess, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("UserIdentityUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityUsername = (string) content.GetValueForProperty("UserIdentityUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityUsername, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskInfoContainerInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoContainerInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskContainerExecutionInfo) content.GetValueForProperty("StartTaskInfoContainerInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoContainerInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskContainerExecutionInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskInfoFailureInfo"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoFailureInfo = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskFailureInfo) content.GetValueForProperty("StartTaskInfoFailureInfo",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoFailureInfo, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskFailureInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("StartTaskInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoState = (string) content.GetValueForProperty("StartTaskInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("StartTaskInfoStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoStartTime = (global::System.DateTime?) content.GetValueForProperty("StartTaskInfoStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoStartTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartTaskInfoEndTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoEndTime = (global::System.DateTime?) content.GetValueForProperty("StartTaskInfoEndTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoEndTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartTaskInfoExitCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoExitCode = (int?) content.GetValueForProperty("StartTaskInfoExitCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoExitCode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskInfoRetryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoRetryCount = (int?) content.GetValueForProperty("StartTaskInfoRetryCount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoRetryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("StartTaskInfoLastRetryTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoLastRetryTime = (global::System.DateTime?) content.GetValueForProperty("StartTaskInfoLastRetryTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoLastRetryTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartTaskInfoResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoResult = (string) content.GetValueForProperty("StartTaskInfoResult",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).StartTaskInfoResult, global::System.Convert.ToString);
            }
            if (content.Contains("EndpointConfigurationInboundEndpoint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfigurationInboundEndpoint = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint>) content.GetValueForProperty("EndpointConfigurationInboundEndpoint",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).EndpointConfigurationInboundEndpoint, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IInboundEndpoint>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.InboundEndpointTypeConverter.ConvertFrom));
            }
            if (content.Contains("NodeAgentInfoVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoVersion = (string) content.GetValueForProperty("NodeAgentInfoVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoVersion, global::System.Convert.ToString);
            }
            if (content.Contains("NodeAgentInfoLastUpdateTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoLastUpdateTime = (global::System.DateTime?) content.GetValueForProperty("NodeAgentInfoLastUpdateTime",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).NodeAgentInfoLastUpdateTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("VirtualMachineInfoImageReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoImageReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchVMImageReference) content.GetValueForProperty("VirtualMachineInfoImageReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoImageReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchVMImageReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("VirtualMachineInfoScaleSetVMResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoScaleSetVMResourceId = (string) content.GetValueForProperty("VirtualMachineInfoScaleSetVMResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).VirtualMachineInfoScaleSetVMResourceId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingRegistry"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingRegistry = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerRegistryReference) content.GetValueForProperty("ContainerSettingRegistry",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingRegistry, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerRegistryReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("ContainerSettingContainerRunOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerRunOption = (string) content.GetValueForProperty("ContainerSettingContainerRunOption",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerRunOption, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingImageName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingImageName = (string) content.GetValueForProperty("ContainerSettingImageName",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingImageName, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingWorkingDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingWorkingDirectory = (string) content.GetValueForProperty("ContainerSettingWorkingDirectory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingWorkingDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerSettingContainerHostBatchBindMount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerHostBatchBindMount = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>) content.GetValueForProperty("ContainerSettingContainerHostBatchBindMount",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerSettingContainerHostBatchBindMount, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ContainerHostBatchBindMountEntryTypeConverter.ConvertFrom));
            }
            if (content.Contains("UserIdentityAutoUser"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityAutoUser = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IAutoUserSpecification) content.GetValueForProperty("UserIdentityAutoUser",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).UserIdentityAutoUser, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.AutoUserSpecificationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AutoUserScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserScope = (string) content.GetValueForProperty("AutoUserScope",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserScope, global::System.Convert.ToString);
            }
            if (content.Contains("AutoUserElevationLevel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserElevationLevel = (string) content.GetValueForProperty("AutoUserElevationLevel",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).AutoUserElevationLevel, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoContainerId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoContainerId = (string) content.GetValueForProperty("ContainerInfoContainerId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoContainerId, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoState = (string) content.GetValueForProperty("ContainerInfoState",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoState, global::System.Convert.ToString);
            }
            if (content.Contains("ContainerInfoError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoError = (string) content.GetValueForProperty("ContainerInfoError",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ContainerInfoError, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCategory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCategory = (string) content.GetValueForProperty("FailureInfoCategory",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCategory, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoCode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCode = (string) content.GetValueForProperty("FailureInfoCode",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoCode, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoMessage = (string) content.GetValueForProperty("FailureInfoMessage",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoMessage, global::System.Convert.ToString);
            }
            if (content.Contains("FailureInfoDetail"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoDetail = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>) content.GetValueForProperty("FailureInfoDetail",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).FailureInfoDetail, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.INameValuePair>(__y, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.NameValuePairTypeConverter.ConvertFrom));
            }
            if (content.Contains("ImageReferencePublisher"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferencePublisher = (string) content.GetValueForProperty("ImageReferencePublisher",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferencePublisher, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceOffer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceOffer = (string) content.GetValueForProperty("ImageReferenceOffer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceOffer, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceSku"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSku = (string) content.GetValueForProperty("ImageReferenceSku",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSku, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVersion = (string) content.GetValueForProperty("ImageReferenceVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVersion, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceVirtualMachineImageId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVirtualMachineImageId = (string) content.GetValueForProperty("ImageReferenceVirtualMachineImageId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceVirtualMachineImageId, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceExactVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceExactVersion = (string) content.GetValueForProperty("ImageReferenceExactVersion",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceExactVersion, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceSharedGalleryImageId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSharedGalleryImageId = (string) content.GetValueForProperty("ImageReferenceSharedGalleryImageId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceSharedGalleryImageId, global::System.Convert.ToString);
            }
            if (content.Contains("ImageReferenceCommunityGalleryImageId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceCommunityGalleryImageId = (string) content.GetValueForProperty("ImageReferenceCommunityGalleryImageId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).ImageReferenceCommunityGalleryImageId, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryIdentityReference"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryIdentityReference = (Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeIdentityReference) content.GetValueForProperty("RegistryIdentityReference",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryIdentityReference, Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNodeIdentityReferenceTypeConverter.ConvertFrom);
            }
            if (content.Contains("RegistryUsername"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryUsername = (string) content.GetValueForProperty("RegistryUsername",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryUsername, global::System.Convert.ToString);
            }
            if (content.Contains("RegistryPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryPassword = (System.Security.SecureString) content.GetValueForProperty("RegistryPassword",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryPassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("RegistryServer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryServer = (string) content.GetValueForProperty("RegistryServer",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).RegistryServer, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityReferenceResourceId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IdentityReferenceResourceId = (string) content.GetValueForProperty("IdentityReferenceResourceId",((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNodeInternal)this).IdentityReferenceResourceId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNode"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNode" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNode DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new BatchNode(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchNode"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNode" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNode DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new BatchNode(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="BatchNode" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="BatchNode" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchNode FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// A Compute Node in the Batch service.
    [System.ComponentModel.TypeConverter(typeof(BatchNodeTypeConverter))]
    public partial interface IBatchNode

    {

    }
}