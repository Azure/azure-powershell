// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Cmdlets;
    using System;

    /// <summary>
    /// When naming Pools, avoid including sensitive information such as user names or\nsecret project names. This information
    /// may appear in telemetry logs accessible\nto Microsoft Support engineers.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreatePool=>POST:"/pools"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzPool_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(bool))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Description(@"When naming Pools, avoid including sensitive information such as user names or\nsecret project names. This information may appear in telemetry logs accessible\nto Microsoft Support engineers.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.HttpPath(Path = "/pools", ApiVersion = "2024-07-01.20.0")]
    public partial class NewAzPool_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>Parameters for creating an Azure Batch Pool.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolCreateOptions _poolBody = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchPoolCreateOptions();

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>
        /// The list of Packages to be installed on each Compute Node in the Pool. When creating a pool, the package's application
        /// ID must be fully qualified (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
        /// Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already
        /// in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of Packages to be installed on each Compute Node in the Pool. When creating a pool, the package's application ID must be fully qualified (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}). Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Packages to be installed on each Compute Node in the Pool. When creating a pool, the package's application ID must be fully qualified (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}). Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.",
        SerializedName = @"applicationPackageReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference[] ApplicationPackageReference { get => _poolBody.ApplicationPackageReference?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.ApplicationPackageReference = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(value) : null); }

        /// <summary>
        /// The time interval at which to automatically adjust the Pool size according to the autoscale formula. The default value
        /// is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than
        /// 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the
        /// HTTP status code is 400 (Bad Request).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time interval at which to automatically adjust the Pool size according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time interval at which to automatically adjust the Pool size according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"autoScaleEvaluationInterval",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan AutoScaleEvaluationInterval { get => _poolBody.AutoScaleEvaluationInterval ?? default(global::System.TimeSpan); set => _poolBody.AutoScaleEvaluationInterval = value; }

        /// <summary>
        /// A formula for the desired number of Compute Nodes in the Pool. This property must not be specified if enableAutoScale
        /// is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool
        /// is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more
        /// information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://learn.microsoft.com/azure/batch/batch-automatic-scaling).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A formula for the desired number of Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://learn.microsoft.com/azure/batch/batch-automatic-scaling).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A formula for the desired number of Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://learn.microsoft.com/azure/batch/batch-automatic-scaling).",
        SerializedName = @"autoScaleFormula",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScaleFormula { get => _poolBody.AutoScaleFormula ?? null; set => _poolBody.AutoScaleFormula = value; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The elevation level of the auto user. The default value is nonAdmin.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        public string AutoUserElevationLevel { get => _poolBody.AutoUserElevationLevel ?? null; set => _poolBody.AutoUserElevationLevel = value; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        public string AutoUserScope { get => _poolBody.AutoUserScope ?? null; set => _poolBody.AutoUserScope = value; }

        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether OS image rollback feature should be disabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether OS image rollback feature should be disabled.",
        SerializedName = @"disableAutomaticRollback",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutomaticOSUpgradePolicyDisableAutomaticRollback { get => _poolBody.AutomaticOSUpgradePolicyDisableAutomaticRollback ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.AutomaticOSUpgradePolicyDisableAutomaticRollback = value; }

        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration) cannot be set to true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration) cannot be set to true.",
        SerializedName = @"enableAutomaticOSUpgrade",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get => _poolBody.AutomaticOSUpgradePolicyEnableAutomaticOsupgrade ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.AutomaticOSUpgradePolicyEnableAutomaticOsupgrade = value; }

        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Defer OS upgrades on the TVMs if they are running tasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Defer OS upgrades on the TVMs if they are running tasks.",
        SerializedName = @"osRollingUpgradeDeferral",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get => _poolBody.AutomaticOSUpgradePolicyOsrollingUpgradeDeferral ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.AutomaticOSUpgradePolicyOsrollingUpgradeDeferral = value; }

        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.",
        SerializedName = @"useRollingUpgradePolicy",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get => _poolBody.AutomaticOSUpgradePolicyUseRollingUpgradePolicy ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.AutomaticOSUpgradePolicyUseRollingUpgradePolicy = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.For Linux
        /// Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable
        /// AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.For Certificates with visibility of 'remoteUser',
        /// a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed
        /// in that directory.Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure
        /// KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.",
        SerializedName = @"certificateReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference[] CertificateReference { get => _poolBody.CertificateReference?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.CertificateReference = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchCertificateReference>(value) : null); }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Batch Client => Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.ClientAPI;

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        /// <summary>
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The caller-generated request identity, in the form of a GUID with no decoration\nsuch as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The caller-generated request identity, in the form of a GUID with no decoration
        such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry[] ContainerSettingContainerHostBatchBindMount { get => _poolBody.ContainerSettingContainerHostBatchBindMount?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.ContainerSettingContainerHostBatchBindMount = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(value) : null); }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional options to the container create command. These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        public string ContainerSettingContainerRunOption { get => _poolBody.ContainerSettingContainerRunOption ?? null; set => _poolBody.ContainerSettingContainerRunOption = value; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to \"docker pull\". If no tag is provided as part of the Image name, the tag \":latest\" is used as a default.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        public string ContainerSettingImageName { get => _poolBody.ContainerSettingImageName ?? null; set => _poolBody.ContainerSettingImageName = value; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the container Task working directory. The default is 'taskWorkingDirectory'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        public string ContainerSettingWorkingDirectory { get => _poolBody.ContainerSettingWorkingDirectory ?? null; set => _poolBody.ContainerSettingWorkingDirectory = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => _poolBody.DisplayName ?? null; set => _poolBody.DisplayName = value; }

        /// <summary>
        /// Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes
        /// must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to
        /// the formula. The default value is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.",
        SerializedName = @"enableAutoScale",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnableAutoScale { get => _poolBody.EnableAutoScale ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.EnableAutoScale = value; }

        /// <summary>
        /// Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum
        /// size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching
        /// its desired size. The default value is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.",
        SerializedName = @"enableInterNodeCommunication",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnableInterNodeCommunication { get => _poolBody.EnableInterNodeCommunication ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.EnableInterNodeCommunication = value; }

        /// <summary>Backing field for <see cref="Endpoint" /> property.</summary>
        private string _endpoint;

        /// <summary>
        /// Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Uri)]
        public string Endpoint { get => this._endpoint; set => this._endpoint = value; }

        /// <summary>
        /// A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum
        /// number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails
        /// with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.",
        SerializedName = @"inboundNATPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool[] EndpointConfigurationInboundNatPool { get => _poolBody.EndpointConfigurationInboundNatPool?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.EndpointConfigurationInboundNatPool = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchInboundNatPool>(value) : null); }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two Pool IDs within an Account that differ only by case).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only by case).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only by case).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string Id { get => _poolBody.Id ?? null; set => _poolBody.Id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ARM resource id of the user assigned identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string IdentityReferenceResourceId { get => _poolBody.IdentityReferenceResourceId ?? null; set => _poolBody.IdentityReferenceResourceId = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// A list of name-value pairs associated with the Pool as metadata. The Batch service does not assign any meaning to metadata;
        /// it is solely for the use of user code.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of name-value pairs associated with the Pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of name-value pairs associated with the Pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem[] Metadata { get => _poolBody.Metadata?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.Metadata = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(value) : null); }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare,
        /// NFS, CIFS or Blobfuse based file system.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.",
        SerializedName = @"mountConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration[] MountConfiguration { get => _poolBody.MountConfiguration?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.MountConfiguration = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IMountConfiguration>(value) : null); }

        /// <summary>The scope of dynamic vnet assignment.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The scope of dynamic vnet assignment.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope of dynamic vnet assignment.",
        SerializedName = @"dynamicVNetAssignmentScope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "job")]
        public string NetworkConfigurationDynamicVnetAssignmentScope { get => _poolBody.NetworkConfigurationDynamicVnetAssignmentScope ?? null; set => _poolBody.NetworkConfigurationDynamicVnetAssignmentScope = value; }

        /// <summary>
        /// Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization
        /// (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.",
        SerializedName = @"enableAcceleratedNetworking",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NetworkConfigurationEnableAcceleratedNetworking { get => _poolBody.NetworkConfigurationEnableAcceleratedNetworking ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.NetworkConfigurationEnableAcceleratedNetworking = value; }

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the
        /// form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should
        /// have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough
        /// free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service
        /// principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified
        /// VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes.
        /// This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication
        /// to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes
        /// to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has
        /// any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication,
        /// including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see:
        /// https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication, including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see: https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. Only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication, including ports 29876 and 29877. Also enable outbound connections to Azure Storage on port 443. For more details see: https://learn.microsoft.com/azure/batch/nodes-and-pools#virtual-network-vnet-and-firewall-configuration",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkConfigurationSubnetId { get => _poolBody.NetworkConfigurationSubnetId ?? null; set => _poolBody.NetworkConfigurationSubnetId = value; }

        /// <summary>Backing field for <see cref="Ocpdate" /> property.</summary>
        private string _ocpdate;

        /// <summary>
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time the request was issued. Client libraries typically set this to the\ncurrent system clock time; set it explicitly if you are calling the REST API\ndirectly.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time the request was issued. Client libraries typically set this to the
        current system clock time; set it explicitly if you are calling the REST API
        directly.",
        SerializedName = @"ocp-date",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public string Ocpdate { get => this._ocpdate; set => this._ocpdate = value; }

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here
        /// limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public
        /// IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection
        /// is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of public IPs which the Batch service will use when provisioning Compute Nodes. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.",
        SerializedName = @"ipAddressIds",
        PossibleTypes = new [] { typeof(string) })]
        public string[] PublicIPAddressConfigurationIpaddressId { get => _poolBody.PublicIPAddressConfigurationIpaddressId?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.PublicIPAddressConfigurationIpaddressId = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>
        /// The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The provisioning type for Public IP Addresses for the Pool. The default value is BatchManaged.",
        SerializedName = @"provision",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("batchmanaged", "usermanaged", "nopublicipaddresses")]
        public string PublicIPAddressConfigurationIpaddressProvisioningType { get => _poolBody.PublicIPAddressConfigurationIpaddressProvisioningType ?? null; set => _poolBody.PublicIPAddressConfigurationIpaddressProvisioningType = value; }

        /// <summary>The password to log into the registry server.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The password to log into the registry server.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        public System.Security.SecureString RegistryPassword { get => _poolBody.RegistryPassword ?? null; set => _poolBody.RegistryPassword = value; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The registry URL. If omitted, the default is \"docker.io\".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistryServer { get => _poolBody.RegistryServer ?? null; set => _poolBody.RegistryServer = value; }

        /// <summary>The user name to log into the registry server.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user name to log into the registry server.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistryUsername { get => _poolBody.RegistryUsername ?? null; set => _poolBody.RegistryUsername = value; }

        /// <summary>
        /// The timeout for allocation of Compute Nodes to the Pool. This timeout applies only to manual scaling; it has no effect
        /// when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a
        /// value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status
        /// code is 400 (Bad Request).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The timeout for allocation of Compute Nodes to the Pool. This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timeout for allocation of Compute Nodes to the Pool. This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"resizeTimeout",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan ResizeTimeout { get => _poolBody.ResizeTimeout ?? default(global::System.TimeSpan); set => _poolBody.ResizeTimeout = value; }

        /// <summary>
        /// The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When
        /// specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be
        /// specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'.",
        SerializedName = @"resourceTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolCreateOptionsResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolCreateOptionsResourceTags ResourceTag { get => _poolBody.ResourceTag ?? null /* object */; set => _poolBody.ResourceTag = value; }

        /// <summary>Backing field for <see cref="ReturnClientRequestId" /> property.</summary>
        private global::System.Management.Automation.SwitchParameter _returnClientRequestId;

        /// <summary>Whether the server should return the client-request-id in the response.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the server should return the client-request-id in the response.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the server should return the client-request-id in the response.",
        SerializedName = @"return-client-request-id",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public global::System.Management.Automation.SwitchParameter ReturnClientRequestId { get => this._returnClientRequestId; set => this._returnClientRequestId = value; }

        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration
        /// as Zonal.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.",
        SerializedName = @"enableCrossZoneUpgrade",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter RollingUpgradePolicyEnableCrossZoneUpgrade { get => _poolBody.RollingUpgradePolicyEnableCrossZoneUpgrade ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.RollingUpgradePolicyEnableCrossZoneUpgrade = value; }

        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxBatchInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        public int RollingUpgradePolicyMaxBatchInstancePercent { get => _poolBody.RollingUpgradePolicyMaxBatchInstancePercent ?? default(int); set => _poolBody.RollingUpgradePolicyMaxBatchInstancePercent = value; }

        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxUnhealthyInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        public int RollingUpgradePolicyMaxUnhealthyInstancePercent { get => _poolBody.RollingUpgradePolicyMaxUnhealthyInstancePercent ?? default(int); set => _poolBody.RollingUpgradePolicyMaxUnhealthyInstancePercent = value; }

        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive.",
        SerializedName = @"maxUnhealthyUpgradedInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        public int RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get => _poolBody.RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent ?? default(int); set => _poolBody.RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent = value; }

        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format..
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format..")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format..",
        SerializedName = @"pauseTimeBetweenBatches",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan RollingUpgradePolicyPauseTimeBetweenBatch { get => _poolBody.RollingUpgradePolicyPauseTimeBetweenBatch ?? default(global::System.TimeSpan); set => _poolBody.RollingUpgradePolicyPauseTimeBetweenBatch = value; }

        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Upgrade all unhealthy instances in a scale set before any healthy instances.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Upgrade all unhealthy instances in a scale set before any healthy instances.",
        SerializedName = @"prioritizeUnhealthyInstances",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter RollingUpgradePolicyPrioritizeUnhealthyInstance { get => _poolBody.RollingUpgradePolicyPrioritizeUnhealthyInstance ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.RollingUpgradePolicyPrioritizeUnhealthyInstance = value; }

        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Rollback failed instances to previous model if the Rolling Upgrade policy is violated.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Rollback failed instances to previous model if the Rolling Upgrade policy is violated.",
        SerializedName = @"rollbackFailedInstancesOnPolicyBreach",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get => _poolBody.RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach = value; }

        /// <summary>
        /// The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of
        /// shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        public string StartTaskCommandLine { get => _poolBody.StartTaskCommandLine ?? null; set => _poolBody.StartTaskCommandLine = value; }

        /// <summary>A list of environment variable settings for the StartTask.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of environment variable settings for the StartTask.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of environment variable settings for the StartTask.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting[] StartTaskEnvironmentSetting { get => _poolBody.StartTaskEnvironmentSetting?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.StartTaskEnvironmentSetting = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(value) : null); }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is
        /// -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The
        /// default value is 0 (no retries).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        public int StartTaskMaxTaskRetryCount { get => _poolBody.StartTaskMaxTaskRetryCount ?? default(int); set => _poolBody.StartTaskMaxTaskRetryCount = value; }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile[] StartTaskResourceFile { get => _poolBody.StartTaskResourceFile?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.StartTaskResourceFile = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(value) : null); }

        /// <summary>
        /// Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before
        /// scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask
        /// up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries,
        /// then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via
        /// the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete.
        /// In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the
        /// StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.",
        SerializedName = @"waitForSuccess",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter StartTaskWaitForSuccess { get => _poolBody.StartTaskWaitForSuccess ?? default(global::System.Management.Automation.SwitchParameter); set => _poolBody.StartTaskWaitForSuccess = value; }

        /// <summary>
        /// The desired number of dedicated Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set
        /// to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or
        /// both.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The desired number of dedicated Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired number of dedicated Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.",
        SerializedName = @"targetDedicatedNodes",
        PossibleTypes = new [] { typeof(int) })]
        public int TargetDedicatedNode { get => _poolBody.TargetDedicatedNode ?? default(int); set => _poolBody.TargetDedicatedNode = value; }

        /// <summary>
        /// The desired number of Spot/Low-priority Compute Nodes in the Pool. This property must not be specified if enableAutoScale
        /// is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes,
        /// or both.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The desired number of Spot/Low-priority Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired number of Spot/Low-priority Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.",
        SerializedName = @"targetLowPriorityNodes",
        PossibleTypes = new [] { typeof(int) })]
        public int TargetLowPriorityNode { get => _poolBody.TargetLowPriorityNode ?? default(int); set => _poolBody.TargetLowPriorityNode = value; }

        /// <summary>
        /// The desired node communication mode for the pool. If omitted, the default value is Default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The desired node communication mode for the pool. If omitted, the default value is Default.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired node communication mode for the pool. If omitted, the default value is Default.",
        SerializedName = @"targetNodeCommunicationMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("default", "classic", "simplified")]
        public string TargetNodeCommunicationMode { get => _poolBody.TargetNodeCommunicationMode ?? null; set => _poolBody.TargetNodeCommunicationMode = value; }

        /// <summary>
        /// How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.",
        SerializedName = @"nodeFillType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("spread", "pack")]
        public string TaskSchedulingPolicyNodeFillType { get => _poolBody.TaskSchedulingPolicyNodeFillType ?? null; set => _poolBody.TaskSchedulingPolicyNodeFillType = value; }

        /// <summary>
        /// The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value
        /// is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.",
        SerializedName = @"taskSlotsPerNode",
        PossibleTypes = new [] { typeof(int) })]
        public int TaskSlotsPerNode { get => _poolBody.TaskSlotsPerNode ?? default(int); set => _poolBody.TaskSlotsPerNode = value; }

        /// <summary>Backing field for <see cref="TimeOut" /> property.</summary>
        private int _timeOut;

        /// <summary>
        /// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
        /// is larger than 30, the default will be used instead.".
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead."".",
        SerializedName = @"timeOut",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Query)]
        public int TimeOut { get => this._timeOut; set => this._timeOut = value; }

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("automatic", "manual", "rolling")]
        public string UpgradePolicyMode { get => _poolBody.UpgradePolicyMode ?? null; set => _poolBody.UpgradePolicyMode = value; }

        /// <summary>The list of user Accounts to be created on each Compute Node in the Pool.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of user Accounts to be created on each Compute Node in the Pool.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of user Accounts to be created on each Compute Node in the Pool.",
        SerializedName = @"userAccounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount[] UserAccount { get => _poolBody.UserAccount?.ToArray() ?? null /* fixedArrayOf */; set => _poolBody.UserAccount = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IUserAccount>(value) : null); }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string UserIdentityUsername { get => _poolBody.UserIdentityUsername ?? null; set => _poolBody.UserIdentityUsername = value; }

        /// <summary>
        /// The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available
        /// VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration),
        /// see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview). Batch supports
        /// all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration), see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration), see Sizes for Virtual Machines in Azure (https://learn.microsoft.com/azure/virtual-machines/sizes/overview). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        public string VMSize { get => _poolBody.VMSize ?? null; set => _poolBody.VMSize = value; }

        /// <summary>
        /// The virtual machine configuration for the Pool. This property must be specified.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The virtual machine configuration for the Pool. This property must be specified.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The virtual machine configuration for the Pool. This property must be specified.",
        SerializedName = @"virtualMachineConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IVirtualMachineConfiguration VirtualMachineConfiguration { get => _poolBody.VirtualMachineConfiguration ?? null /* object */; set => _poolBody.VirtualMachineConfiguration = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="headers">the header result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IPoolsCreatePoolCreatedResponseHeaders"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IPoolsCreatePoolCreatedResponseHeaders> headers, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError">Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewAzPool_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzPool_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'PoolsCreatePool' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.PoolsCreatePool(this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null, this.InvocationInformation.BoundParameters.ContainsKey("ReturnClientRequestId") ? ReturnClientRequestId : default(global::System.Management.Automation.SwitchParameter?), this.InvocationInformation.BoundParameters.ContainsKey("Ocpdate") ? Ocpdate : null, this.InvocationInformation.BoundParameters.ContainsKey("TimeOut") ? TimeOut : default(int?), Endpoint, _poolBody, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Endpoint=Endpoint,TimeOut=this.InvocationInformation.BoundParameters.ContainsKey("TimeOut") ? TimeOut : default(int?),ClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null,ReturnClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ReturnClientRequestId") ? ReturnClientRequestId : default(global::System.Management.Automation.SwitchParameter?),Ocpdate=this.InvocationInformation.BoundParameters.ContainsKey("Ocpdate") ? Ocpdate : null})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="headers">the header result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IPoolsCreatePoolCreatedResponseHeaders"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IPoolsCreatePoolCreatedResponseHeaders> headers)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, headers, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 /
                if (true == MyInvocation?.BoundParameters?.ContainsKey("PassThru"))
                {
                    WriteObject(true);
                }
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError">Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.MessageLang;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }
    }
}